[
  {
    "kind": "PACKAGE",
    "name": "com.destroystokyo.paper",
    "children": [
      {
        "kind": "CLASS",
        "name": "com.destroystokyo.paper.ParticleBuilder",
        "children": [
          {
            "kind": "METHOD",
            "name": "\u003cT\u003edata()",
            "children": [
              {
                "kind": "TYPE_PARAMETER",
                "name": "T"
              }
            ],
            "comment": {
              "body": "Gets the particle custom data. Varies by particle on how this is used",
              "tags": "Returns the ParticleData for this particle.",
              "plain": "Gets the particle custom data. Varies by particle on how this is used\n@param \u003cT\u003e The Particle data type\n@return the ParticleData for this particle"
            }
          },
          {
            "kind": "METHOD",
            "name": "\u003cT\u003edata(T)",
            "children": [
              {
                "kind": "TYPE_PARAMETER",
                "name": "T"
              },
              {
                "kind": "PARAMETER",
                "name": "data"
              }
            ],
            "comment": {
              "body": "Sets the particle custom data. Varies by particle on how this is used",
              "tags": "Returns a reference to this object..",
              "plain": "Sets the particle custom data. Varies by particle on how this is used\n@param data The new particle data\n@param \u003cT\u003e The Particle data type\n@return a reference to this object."
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "ParticleBuilder(org.bukkit.Particle)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "particle"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "allPlayers()",
            "comment": {
              "body": "Sends this particle to all players in the world. This is rather silly and you should likely not be doing this.\n\n Just be a logical person and use receivers by radius or collection.",
              "tags": "Returns a reference to this object..",
              "plain": "Sends this particle to all players in the world. This is rather silly and you should likely not be doing this.\n\n Just be a logical person and use receivers by radius or collection.\n@return a reference to this object."
            }
          },
          {
            "kind": "METHOD",
            "name": "color(int,int,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "b"
              },
              {
                "kind": "PARAMETER",
                "name": "g"
              },
              {
                "kind": "PARAMETER",
                "name": "r"
              }
            ],
            "comment": {
              "body": "Sets the particle Color.\n Only valid for REDSTONE, SPELL_MOB and SPELL_MOB_AMBIENT.",
              "tags": "Returns a reference to this object..",
              "plain": "Sets the particle Color.\n Only valid for REDSTONE, SPELL_MOB and SPELL_MOB_AMBIENT.\n@param r red color component\n@param g green color component\n@param b blue color component\n@return a reference to this object."
            }
          },
          {
            "kind": "METHOD",
            "name": "color(org.bukkit.Color)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "color"
              }
            ],
            "comment": {
              "body": "Sets the particle Color.\n Only valid for REDSTONE, SPELL_MOB and SPELL_MOB_AMBIENT.",
              "tags": "Returns a reference to this object..",
              "plain": "Sets the particle Color.\n Only valid for REDSTONE, SPELL_MOB and SPELL_MOB_AMBIENT.\n@param color the new particle color\n@return a reference to this object."
            }
          },
          {
            "kind": "METHOD",
            "name": "convertColorValue(double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "value"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "count"
          },
          {
            "kind": "METHOD",
            "name": "count()",
            "comment": {
              "tags": "Returns Number of particles to spawn.",
              "plain": "@return Number of particles to spawn"
            }
          },
          {
            "kind": "METHOD",
            "name": "count(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "count"
              }
            ],
            "comment": {
              "body": "Sets the number of particles to spawn",
              "tags": "Returns a reference to this object..",
              "plain": "Sets the number of particles to spawn\n@param count Number of particles\n@return a reference to this object."
            }
          },
          {
            "kind": "FIELD",
            "name": "data"
          },
          {
            "kind": "FIELD",
            "name": "extra"
          },
          {
            "kind": "METHOD",
            "name": "extra()",
            "comment": {
              "body": "Gets the Particle extra data. Varies by particle on how this is used",
              "tags": "Returns the extra particle data.",
              "plain": "Gets the Particle extra data. Varies by particle on how this is used\n@return the extra particle data"
            }
          },
          {
            "kind": "METHOD",
            "name": "extra(double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "extra"
              }
            ],
            "comment": {
              "body": "Sets the particle extra data. Varies by particle on how this is used",
              "tags": "Returns a reference to this object..",
              "plain": "Sets the particle extra data. Varies by particle on how this is used\n@param extra the extra particle data\n@return a reference to this object."
            }
          },
          {
            "kind": "FIELD",
            "name": "force"
          },
          {
            "kind": "METHOD",
            "name": "force(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "force"
              }
            ],
            "comment": {
              "body": "Sets whether the particle is forcefully shown to the player.\n If forced, the particle will show faraway, as far as the player\u0027s view distance allows.\n If false, the particle will show according to the client\u0027s particle settings.",
              "tags": "Returns a reference to this object..",
              "plain": "Sets whether the particle is forcefully shown to the player.\n If forced, the particle will show faraway, as far as the player\u0027s view distance allows.\n If false, the particle will show according to the client\u0027s particle settings.\n@param force true to force, false for normal\n@return a reference to this object."
            }
          },
          {
            "kind": "METHOD",
            "name": "hasReceivers()",
            "comment": {
              "body": "Example use:\n\n builder.receivers(16);\n if (builder.hasReceivers()) {\n     sendParticleAsync(builder);\n }",
              "tags": "Returns If this particle is going to be sent to someone.",
              "plain": "Example use:\n\n builder.receivers(16);\n if (builder.hasReceivers()) {\n     sendParticleAsync(builder);\n }\n@return If this particle is going to be sent to someone"
            }
          },
          {
            "kind": "FIELD",
            "name": "location"
          },
          {
            "kind": "METHOD",
            "name": "location()",
            "comment": {
              "tags": "Returns Location of where the particle will spawn.",
              "plain": "@return Location of where the particle will spawn"
            }
          },
          {
            "kind": "METHOD",
            "name": "location(org.bukkit.Location)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "location"
              }
            ],
            "comment": {
              "body": "Sets the location of where to spawn the particle",
              "tags": "Returns a reference to this object..",
              "plain": "Sets the location of where to spawn the particle\n@param location The location of the particle\n@return a reference to this object."
            }
          },
          {
            "kind": "METHOD",
            "name": "location(org.bukkit.World,double,double,double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "world"
              },
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "y"
              },
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ],
            "comment": {
              "body": "Sets the location of where to spawn the particle",
              "tags": "Returns a reference to this object..",
              "plain": "Sets the location of where to spawn the particle\n@param world World to spawn particle in\n@param x X location\n@param y Y location\n@param z Z location\n@return a reference to this object."
            }
          },
          {
            "kind": "METHOD",
            "name": "offset(double,double,double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "offsetX"
              },
              {
                "kind": "PARAMETER",
                "name": "offsetY"
              },
              {
                "kind": "PARAMETER",
                "name": "offsetZ"
              }
            ],
            "comment": {
              "body": "Sets the particle offset. Varies by particle on how this is used",
              "tags": "Returns a reference to this object..",
              "plain": "Sets the particle offset. Varies by particle on how this is used\n@param offsetX Particle offset X\n@param offsetY Particle offset Y\n@param offsetZ Particle offset Z\n@return a reference to this object."
            }
          },
          {
            "kind": "FIELD",
            "name": "offsetX"
          },
          {
            "kind": "METHOD",
            "name": "offsetX()",
            "comment": {
              "body": "Particle offset X. Varies by particle on how this is used",
              "tags": "Returns Particle offset X..",
              "plain": "Particle offset X. Varies by particle on how this is used\n@return Particle offset X."
            }
          },
          {
            "kind": "FIELD",
            "name": "offsetY"
          },
          {
            "kind": "METHOD",
            "name": "offsetY()",
            "comment": {
              "body": "Particle offset Y. Varies by particle on how this is used",
              "tags": "Returns Particle offset Y..",
              "plain": "Particle offset Y. Varies by particle on how this is used\n@return Particle offset Y."
            }
          },
          {
            "kind": "FIELD",
            "name": "offsetZ"
          },
          {
            "kind": "METHOD",
            "name": "offsetZ()",
            "comment": {
              "body": "Particle offset Z. Varies by particle on how this is used",
              "tags": "Returns Particle offset Z..",
              "plain": "Particle offset Z. Varies by particle on how this is used\n@return Particle offset Z."
            }
          },
          {
            "kind": "FIELD",
            "name": "particle"
          },
          {
            "kind": "METHOD",
            "name": "particle()",
            "comment": {
              "tags": "Returns The particle going to be sent.",
              "plain": "@return The particle going to be sent"
            }
          },
          {
            "kind": "METHOD",
            "name": "particle(org.bukkit.Particle)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "particle"
              }
            ],
            "comment": {
              "body": "Changes what particle will be sent",
              "tags": "Returns a reference to this object..",
              "plain": "Changes what particle will be sent\n@param particle The particle\n@return a reference to this object."
            }
          },
          {
            "kind": "FIELD",
            "name": "receivers"
          },
          {
            "kind": "METHOD",
            "name": "receivers()",
            "comment": {
              "tags": "Returns List of players who will receive the particle, or null for all in world.",
              "plain": "@return List of players who will receive the particle, or null for all in world"
            }
          },
          {
            "kind": "METHOD",
            "name": "receivers(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "radius"
              }
            ],
            "comment": {
              "body": "Selects all players within a cuboid selection around the particle location, within the specified bounding box.\n If you want a more spherical check, see \u003ca href\u003d\"com/destroystokyo/paper/ParticleBuilder.html#receivers(int,boolean)\"\u003e\u003ccode\u003eParticleBuilder.receivers(int, boolean)\u003c/code\u003e\u003c/a\u003e",
              "tags": "Returns a reference to this object..",
              "plain": "Selects all players within a cuboid selection around the particle location, within the specified bounding box.\n If you want a more spherical check, see {@link #receivers(int, boolean)}\n@param radius amount to add on all axis\n@return a reference to this object."
            }
          },
          {
            "kind": "METHOD",
            "name": "receivers(int,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "byDistance"
              },
              {
                "kind": "PARAMETER",
                "name": "radius"
              }
            ],
            "comment": {
              "body": "Selects all players within the specified radius around the particle location.\n If byDistance is false, behavior uses cuboid selection the same as \u003ca href\u003d\"com/destroystokyo/paper/ParticleBuilder.html#receivers(int,int)\"\u003e\u003ccode\u003eParticleBuilder.receivers(int, int)\u003c/code\u003e\u003c/a\u003e\n If byDistance is true, radius is tested by distance in a spherical shape",
              "tags": "Returns a reference to this object..",
              "plain": "Selects all players within the specified radius around the particle location.\n If byDistance is false, behavior uses cuboid selection the same as {@link #receivers(int, int)}\n If byDistance is true, radius is tested by distance in a spherical shape\n@param radius amount to add on each axis\n@param byDistance true to use a spherical radius, false to use a cuboid\n@return a reference to this object."
            }
          },
          {
            "kind": "METHOD",
            "name": "receivers(int,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "xzRadius"
              },
              {
                "kind": "PARAMETER",
                "name": "yRadius"
              }
            ],
            "comment": {
              "body": "Selects all players within a cuboid selection around the particle location, within the specified bounding box.\n Allows specifying a different Y size than X and Z\n If you want a more cylinder check, see \u003ca href\u003d\"com/destroystokyo/paper/ParticleBuilder.html#receivers(int,int,boolean)\"\u003e\u003ccode\u003eParticleBuilder.receivers(int, int, boolean)\u003c/code\u003e\u003c/a\u003e\n If you want a more spherical check, see \u003ca href\u003d\"com/destroystokyo/paper/ParticleBuilder.html#receivers(int,boolean)\"\u003e\u003ccode\u003eParticleBuilder.receivers(int, boolean)\u003c/code\u003e\u003c/a\u003e",
              "tags": "Returns a reference to this object..",
              "plain": "Selects all players within a cuboid selection around the particle location, within the specified bounding box.\n Allows specifying a different Y size than X and Z\n If you want a more cylinder check, see {@link #receivers(int, int, boolean)}\n If you want a more spherical check, see {@link #receivers(int, boolean)}\n@param xzRadius amount to add on the x/z axis\n@param yRadius amount to add on the y axis\n@return a reference to this object."
            }
          },
          {
            "kind": "METHOD",
            "name": "receivers(int,int,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "byDistance"
              },
              {
                "kind": "PARAMETER",
                "name": "xzRadius"
              },
              {
                "kind": "PARAMETER",
                "name": "yRadius"
              }
            ],
            "comment": {
              "body": "Selects all players within the specified radius around the particle location.\n If byDistance is false, behavior uses cuboid selection the same as \u003ca href\u003d\"com/destroystokyo/paper/ParticleBuilder.html#receivers(int,int)\"\u003e\u003ccode\u003eParticleBuilder.receivers(int, int)\u003c/code\u003e\u003c/a\u003e\n If byDistance is true, radius is tested by distance on the y plane and on the x/z plane, in a cylinder shape.",
              "tags": "Returns a reference to this object..",
              "plain": "Selects all players within the specified radius around the particle location.\n If byDistance is false, behavior uses cuboid selection the same as {@link #receivers(int, int)}\n If byDistance is true, radius is tested by distance on the y plane and on the x/z plane, in a cylinder shape.\n@param xzRadius amount to add on the x/z axis\n@param yRadius amount to add on the y axis\n@param byDistance true to use a cylinder shape, false to use cuboid\n@return a reference to this object."
            }
          },
          {
            "kind": "METHOD",
            "name": "receivers(int,int,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "xRadius"
              },
              {
                "kind": "PARAMETER",
                "name": "yRadius"
              },
              {
                "kind": "PARAMETER",
                "name": "zRadius"
              }
            ],
            "comment": {
              "body": "Selects all players within a cuboid selection around the particle location, within the specified bounding box.\n If you want a more cylinder check, see \u003ca href\u003d\"com/destroystokyo/paper/ParticleBuilder.html#receivers(int,int,boolean)\"\u003e\u003ccode\u003eParticleBuilder.receivers(int, int, boolean)\u003c/code\u003e\u003c/a\u003e\n If you want a more spherical check, see \u003ca href\u003d\"com/destroystokyo/paper/ParticleBuilder.html#receivers(int,boolean)\"\u003e\u003ccode\u003eParticleBuilder.receivers(int, boolean)\u003c/code\u003e\u003c/a\u003e",
              "tags": "Returns a reference to this object..",
              "plain": "Selects all players within a cuboid selection around the particle location, within the specified bounding box.\n If you want a more cylinder check, see {@link #receivers(int, int, boolean)}\n If you want a more spherical check, see {@link #receivers(int, boolean)}\n@param xRadius amount to add on the x axis\n@param yRadius amount to add on the y axis\n@param zRadius amount to add on the z axis\n@return a reference to this object."
            }
          },
          {
            "kind": "METHOD",
            "name": "receivers(java.util.Collection\u003corg.bukkit.entity.Player\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "receivers"
              }
            ],
            "comment": {
              "tags": "Returns a reference to this object..",
              "plain": "@param receivers List of players to receive this particle, or null for all players in the world\n@return a reference to this object."
            }
          },
          {
            "kind": "METHOD",
            "name": "receivers(java.util.List\u003corg.bukkit.entity.Player\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "receivers"
              }
            ],
            "comment": {
              "tags": "Returns a reference to this object..",
              "plain": "@param receivers List of players to receive this particle, or null for all players in the world\n@return a reference to this object."
            }
          },
          {
            "kind": "METHOD",
            "name": "receivers(org.bukkit.entity.Player...)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "receivers"
              }
            ],
            "comment": {
              "tags": "Returns a reference to this object..",
              "plain": "@param receivers List of players to be receive this particle, or null for all players in the world\n@return a reference to this object."
            }
          },
          {
            "kind": "FIELD",
            "name": "source"
          },
          {
            "kind": "METHOD",
            "name": "source()",
            "comment": {
              "tags": "Returns The player considered the source of this particle (for Visibility concerns), or null.",
              "plain": "@return The player considered the source of this particle (for Visibility concerns), or null"
            }
          },
          {
            "kind": "METHOD",
            "name": "source(org.bukkit.entity.Player)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "source"
              }
            ],
            "comment": {
              "body": "Sets the source of this particle for visibility concerns (Vanish API)",
              "tags": "Returns a reference to this object..",
              "plain": "Sets the source of this particle for visibility concerns (Vanish API)\n@param source The player who is considered the source\n@return a reference to this object."
            }
          },
          {
            "kind": "METHOD",
            "name": "spawn()",
            "comment": {
              "body": "Sends the particle to all receiving players (or all).\n This method is safe to use Asynchronously",
              "tags": "Returns a reference to this object..",
              "plain": "Sends the particle to all receiving players (or all).\n This method is safe to use Asynchronously\n@return a reference to this object."
            }
          }
        ],
        "comment": {
          "body": "Helps prepare a particle to be sent to players.\n\n Usage of the builder is preferred over the super long \u003ca href\u003d\"org/bukkit/World.html#spawnParticle(org.bukkit.Particle,org.bukkit.Location,int,double,double,double,double,T)\"\u003e\u003ccode\u003eWorld.spawnParticle(Particle, Location, int, double, double, double, double, Object)\u003c/code\u003e\u003c/a\u003e API",
          "plain": "Helps prepare a particle to be sent to players.\n\n Usage of the builder is preferred over the super long {@link World#spawnParticle(Particle, Location, int, double, double, double, double, Object)} API"
        }
      },
      {
        "kind": "CLASS",
        "name": "com.destroystokyo.paper.Title",
        "children": [
          {
            "kind": "FIELD",
            "name": "DEFAULT_FADE_IN",
            "comment": {
              "body": "The default number of ticks for the title to fade in.",
              "plain": "The default number of ticks for the title to fade in."
            }
          },
          {
            "kind": "FIELD",
            "name": "DEFAULT_FADE_OUT",
            "comment": {
              "body": "The default number of ticks for the title to fade out.",
              "plain": "The default number of ticks for the title to fade out."
            }
          },
          {
            "kind": "FIELD",
            "name": "DEFAULT_STAY",
            "comment": {
              "body": "The default number of ticks for the title to stay.",
              "plain": "The default number of ticks for the title to stay."
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Title(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "title"
              }
            ],
            "comment": {
              "body": "Create a title with the default time values and no subtitle.\n\n \u003cp\u003eTimes use default values.\u003c/p\u003e",
              "plain": "Create a title with the default time values and no subtitle.\n\n \u003cp\u003eTimes use default values.\u003c/p\u003e\n@param title the main text of the title\n@throws NullPointerException if the title is null"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Title(java.lang.String,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "subtitle"
              },
              {
                "kind": "PARAMETER",
                "name": "title"
              }
            ],
            "comment": {
              "body": "Create a title with the default time values.\n\n \u003cp\u003eTimes use default values.\u003c/p\u003e",
              "plain": "Create a title with the default time values.\n\n \u003cp\u003eTimes use default values.\u003c/p\u003e\n@param title the main text of the title\n@param subtitle the secondary text of the title"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Title(java.lang.String,java.lang.String,int,int,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "fadeIn"
              },
              {
                "kind": "PARAMETER",
                "name": "fadeOut"
              },
              {
                "kind": "PARAMETER",
                "name": "stay"
              },
              {
                "kind": "PARAMETER",
                "name": "subtitle"
              },
              {
                "kind": "PARAMETER",
                "name": "title"
              }
            ],
            "comment": {
              "body": "Creates a new title.\n\n \u003cp\u003eIt is recommended to the \u003ccode\u003eBaseComponent\u003c/code\u003e constrctors.\u003c/p\u003e",
              "plain": "Creates a new title.\n\n \u003cp\u003eIt is recommended to the {@link BaseComponent} constrctors.\u003c/p\u003e\n@param title the main text of the title\n@param subtitle the secondary text of the title\n@param fadeIn the number of ticks for the title to fade in\n@param stay the number of ticks for the title to stay on screen\n@param fadeOut the number of ticks for the title to fade out"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Title(net.md_5.bungee.api.chat.BaseComponent)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "title"
              }
            ],
            "comment": {
              "body": "Create a title with the default time values and no subtitle.\n\n \u003cp\u003eTimes use default values.\u003c/p\u003e",
              "plain": "Create a title with the default time values and no subtitle.\n\n \u003cp\u003eTimes use default values.\u003c/p\u003e\n@param title the main text of the title\n@throws NullPointerException if the title is null"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Title(net.md_5.bungee.api.chat.BaseComponent,net.md_5.bungee.api.chat.BaseComponent)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "subtitle"
              },
              {
                "kind": "PARAMETER",
                "name": "title"
              }
            ],
            "comment": {
              "body": "Create a title with the default time values.\n\n \u003cp\u003eTimes use default values.\u003c/p\u003e",
              "plain": "Create a title with the default time values.\n\n \u003cp\u003eTimes use default values.\u003c/p\u003e\n@param title the main text of the title\n@param subtitle the secondary text of the title"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Title(net.md_5.bungee.api.chat.BaseComponent,net.md_5.bungee.api.chat.BaseComponent,int,int,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "fadeIn"
              },
              {
                "kind": "PARAMETER",
                "name": "fadeOut"
              },
              {
                "kind": "PARAMETER",
                "name": "stay"
              },
              {
                "kind": "PARAMETER",
                "name": "subtitle"
              },
              {
                "kind": "PARAMETER",
                "name": "title"
              }
            ],
            "comment": {
              "body": "Creates a new title.",
              "plain": "Creates a new title.\n@param title the main text of the title\n@param subtitle the secondary text of the title\n@param fadeIn the number of ticks for the title to fade in\n@param stay the number of ticks for the title to stay on screen\n@param fadeOut the number of ticks for the title to fade out\n@throws IllegalArgumentException if any of the times are negative"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Title(net.md_5.bungee.api.chat.BaseComponent[])",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "title"
              }
            ],
            "comment": {
              "body": "Create a title with the default time values and no subtitle.\n\n \u003cp\u003eTimes use default values.\u003c/p\u003e",
              "plain": "Create a title with the default time values and no subtitle.\n\n \u003cp\u003eTimes use default values.\u003c/p\u003e\n@param title the main text of the title\n@throws NullPointerException if the title is null"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Title(net.md_5.bungee.api.chat.BaseComponent[],net.md_5.bungee.api.chat.BaseComponent[])",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "subtitle"
              },
              {
                "kind": "PARAMETER",
                "name": "title"
              }
            ],
            "comment": {
              "body": "Create a title with the default time values.\n\n \u003cp\u003eTimes use default values.\u003c/p\u003e",
              "plain": "Create a title with the default time values.\n\n \u003cp\u003eTimes use default values.\u003c/p\u003e\n@param title the main text of the title\n@param subtitle the secondary text of the title"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Title(net.md_5.bungee.api.chat.BaseComponent[],net.md_5.bungee.api.chat.BaseComponent[],int,int,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "fadeIn"
              },
              {
                "kind": "PARAMETER",
                "name": "fadeOut"
              },
              {
                "kind": "PARAMETER",
                "name": "stay"
              },
              {
                "kind": "PARAMETER",
                "name": "subtitle"
              },
              {
                "kind": "PARAMETER",
                "name": "title"
              }
            ],
            "comment": {
              "body": "Creates a new title.",
              "plain": "Creates a new title.\n@param title the main text of the title\n@param subtitle the secondary text of the title\n@param fadeIn the number of ticks for the title to fade in\n@param stay the number of ticks for the title to stay on screen\n@param fadeOut the number of ticks for the title to fade out\n@throws IllegalArgumentException if any of the times are negative"
            }
          },
          {
            "kind": "METHOD",
            "name": "builder()"
          },
          {
            "kind": "CLASS",
            "name": "com.destroystokyo.paper.Title.Builder",
            "children": [
              {
                "kind": "CONSTRUCTOR",
                "name": "Builder()"
              },
              {
                "kind": "METHOD",
                "name": "build()",
                "comment": {
                  "body": "Create a title based on the values in the builder.",
                  "tags": "Returns a title from the values in this builder.",
                  "plain": "Create a title based on the values in the builder.\n@return a title from the values in this builder\n@throws IllegalStateException if title isn\u0027t specified"
                }
              },
              {
                "kind": "FIELD",
                "name": "fadeIn"
              },
              {
                "kind": "METHOD",
                "name": "fadeIn(int)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "fadeIn"
                  }
                ],
                "comment": {
                  "body": "Sets the number of ticks for the title to fade in",
                  "tags": "Returns this builder instance.",
                  "plain": "Sets the number of ticks for the title to fade in\n@param fadeIn the number of ticks to fade in\n@return this builder instance\n@throws IllegalArgumentException if it is negative"
                }
              },
              {
                "kind": "FIELD",
                "name": "fadeOut"
              },
              {
                "kind": "METHOD",
                "name": "fadeOut(int)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "fadeOut"
                  }
                ],
                "comment": {
                  "body": "Sets the number of ticks for the title to fade out.",
                  "tags": "Returns this builder instance.",
                  "plain": "Sets the number of ticks for the title to fade out.\n@param fadeOut the number of ticks to fade out\n@return this builder instance\n@throws IllegalArgumentException if it is negative"
                }
              },
              {
                "kind": "FIELD",
                "name": "stay"
              },
              {
                "kind": "METHOD",
                "name": "stay(int)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "stay"
                  }
                ],
                "comment": {
                  "body": "Sets the number of ticks for the title to stay.",
                  "tags": "Returns this builder instance.",
                  "plain": "Sets the number of ticks for the title to stay.\n@param stay the number of ticks to stay\n@return this builder instance\n@throws IllegalArgumentException if it is negative"
                }
              },
              {
                "kind": "FIELD",
                "name": "subtitle"
              },
              {
                "kind": "METHOD",
                "name": "subtitle(java.lang.String)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "subtitle"
                  }
                ],
                "comment": {
                  "body": "Sets the subtitle to the given text.\n\n \u003cp\u003eIt is recommended to the \u003ccode\u003eBaseComponent\u003c/code\u003e methods.\u003c/p\u003e",
                  "tags": "Returns this builder instance.",
                  "plain": "Sets the subtitle to the given text.\n\n \u003cp\u003eIt is recommended to the {@link BaseComponent} methods.\u003c/p\u003e\n@param subtitle the title text\n@return this builder instance"
                }
              },
              {
                "kind": "METHOD",
                "name": "subtitle(net.md_5.bungee.api.chat.BaseComponent)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "subtitle"
                  }
                ],
                "comment": {
                  "body": "Sets the subtitle to the given text.",
                  "tags": "Returns this builder instance.",
                  "plain": "Sets the subtitle to the given text.\n@param subtitle the title text\n@return this builder instance"
                }
              },
              {
                "kind": "METHOD",
                "name": "subtitle(net.md_5.bungee.api.chat.BaseComponent[])",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "subtitle"
                  }
                ],
                "comment": {
                  "body": "Sets the subtitle to the given text.",
                  "tags": "Returns this builder instance.",
                  "plain": "Sets the subtitle to the given text.\n@param subtitle the title text\n@return this builder instance"
                }
              },
              {
                "kind": "FIELD",
                "name": "title"
              },
              {
                "kind": "METHOD",
                "name": "title(java.lang.String)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "title"
                  }
                ],
                "comment": {
                  "body": "Sets the title to the given text.\n\n \u003cp\u003eIt is recommended to the \u003ccode\u003eBaseComponent\u003c/code\u003e methods.\u003c/p\u003e",
                  "tags": "Returns this builder instance.",
                  "plain": "Sets the title to the given text.\n\n \u003cp\u003eIt is recommended to the {@link BaseComponent} methods.\u003c/p\u003e\n@param title the title text\n@return this builder instance\n@throws NullPointerException if the title is null"
                }
              },
              {
                "kind": "METHOD",
                "name": "title(net.md_5.bungee.api.chat.BaseComponent)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "title"
                  }
                ],
                "comment": {
                  "body": "Sets the title to the given text.",
                  "tags": "Returns this builder instance.",
                  "plain": "Sets the title to the given text.\n@param title the title text\n@return this builder instance\n@throws NullPointerException if the title is null"
                }
              },
              {
                "kind": "METHOD",
                "name": "title(net.md_5.bungee.api.chat.BaseComponent[])",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "title"
                  }
                ],
                "comment": {
                  "body": "Sets the title to the given text.",
                  "tags": "Returns this builder instance.",
                  "plain": "Sets the title to the given text.\n@param title the title text\n@return this builder instance\n@throws NullPointerException if the title is null"
                }
              }
            ],
            "comment": {
              "body": "A builder for creating titles",
              "plain": "A builder for creating titles"
            }
          },
          {
            "kind": "FIELD",
            "name": "fadeIn"
          },
          {
            "kind": "FIELD",
            "name": "fadeOut"
          },
          {
            "kind": "METHOD",
            "name": "getFadeIn()",
            "comment": {
              "body": "Gets the number of ticks to fade in.\n\n \u003cp\u003eThe returned value is never negative.\u003c/p\u003e",
              "tags": "Returns the number of ticks to fade in.",
              "plain": "Gets the number of ticks to fade in.\n\n \u003cp\u003eThe returned value is never negative.\u003c/p\u003e\n@return the number of ticks to fade in"
            }
          },
          {
            "kind": "METHOD",
            "name": "getFadeOut()",
            "comment": {
              "body": "Gets the number of ticks to fade out.\n\n \u003cp\u003eThe returned value is never negative.\u003c/p\u003e",
              "tags": "Returns the number of ticks to fade out.",
              "plain": "Gets the number of ticks to fade out.\n\n \u003cp\u003eThe returned value is never negative.\u003c/p\u003e\n@return the number of ticks to fade out"
            }
          },
          {
            "kind": "METHOD",
            "name": "getStay()",
            "comment": {
              "body": "Gets the number of ticks to stay.\n\n \u003cp\u003eThe returned value is never negative.\u003c/p\u003e",
              "tags": "Returns the number of ticks to stay.",
              "plain": "Gets the number of ticks to stay.\n\n \u003cp\u003eThe returned value is never negative.\u003c/p\u003e\n@return the number of ticks to stay"
            }
          },
          {
            "kind": "METHOD",
            "name": "getSubtitle()",
            "comment": {
              "body": "Gets the text of this title\u0027s subtitle",
              "tags": "Returns the text.",
              "plain": "Gets the text of this title\u0027s subtitle\n@return the text"
            }
          },
          {
            "kind": "METHOD",
            "name": "getTitle()",
            "comment": {
              "body": "Gets the text of this title",
              "tags": "Returns the text.",
              "plain": "Gets the text of this title\n@return the text"
            }
          },
          {
            "kind": "FIELD",
            "name": "stay"
          },
          {
            "kind": "FIELD",
            "name": "subtitle"
          },
          {
            "kind": "FIELD",
            "name": "title"
          }
        ],
        "comment": {
          "body": "Represents a title to may be sent to a \u003ca href\u003d\"org/bukkit/entity/Player.html\" title\u003d\"interface in org.bukkit.entity\"\u003e\u003ccode\u003ePlayer\u003c/code\u003e\u003c/a\u003e.\n\n \u003cp\u003eA title can be sent without subtitle text.\u003c/p\u003e",
          "plain": "Represents a title to may be sent to a {@link Player}.\n\n \u003cp\u003eA title can be sent without subtitle text.\u003c/p\u003e"
        }
      },
      {
        "kind": "ENUM",
        "name": "com.destroystokyo.paper.VersionHistoryManager",
        "children": [
          {
            "kind": "ENUM_CONSTANT",
            "name": "INSTANCE"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "VersionHistoryManager()"
          },
          {
            "kind": "CLASS",
            "name": "com.destroystokyo.paper.VersionHistoryManager.VersionData",
            "children": [
              {
                "kind": "CONSTRUCTOR",
                "name": "VersionData()"
              },
              {
                "kind": "FIELD",
                "name": "currentVersion"
              },
              {
                "kind": "METHOD",
                "name": "equals(java.lang.Object)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "o"
                  }
                ]
              },
              {
                "kind": "METHOD",
                "name": "getCurrentVersion()"
              },
              {
                "kind": "METHOD",
                "name": "getOldVersion()"
              },
              {
                "kind": "METHOD",
                "name": "hashCode()"
              },
              {
                "kind": "FIELD",
                "name": "oldVersion"
              },
              {
                "kind": "METHOD",
                "name": "setCurrentVersion(java.lang.String)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "currentVersion"
                  }
                ]
              },
              {
                "kind": "METHOD",
                "name": "setOldVersion(java.lang.String)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "oldVersion"
                  }
                ]
              },
              {
                "kind": "METHOD",
                "name": "toString()"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "currentData"
          },
          {
            "kind": "METHOD",
            "name": "getVersionData()"
          },
          {
            "kind": "FIELD",
            "name": "gson"
          },
          {
            "kind": "FIELD",
            "name": "logger"
          },
          {
            "kind": "METHOD",
            "name": "valueOf(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "values()"
          },
          {
            "kind": "METHOD",
            "name": "writeFile(java.nio.file.Path)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ]
          }
        ]
      }
    ]
  },
  {
    "kind": "PACKAGE",
    "name": "com.destroystokyo.paper.entity",
    "children": [
      {
        "kind": "INTERFACE",
        "name": "com.destroystokyo.paper.entity.RangedEntity",
        "children": [
          {
            "kind": "METHOD",
            "name": "isChargingAttack()",
            "comment": {
              "body": "Alias to \u003ca href\u003d\"org/bukkit/entity/LivingEntity.html#isHandRaised()\"\u003e\u003ccode\u003eLivingEntity.isHandRaised()\u003c/code\u003e\u003c/a\u003e, if the entity is charging an attack",
              "tags": "Returns If entities hands are raised.",
              "plain": "Alias to {@link LivingEntity#isHandRaised()}, if the entity is charging an attack\n@return If entities hands are raised"
            }
          },
          {
            "kind": "METHOD",
            "name": "rangedAttack(org.bukkit.entity.LivingEntity,float)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "charge"
              },
              {
                "kind": "PARAMETER",
                "name": "target"
              }
            ],
            "comment": {
              "body": "Attack the specified entity using a ranged attack.",
              "plain": "Attack the specified entity using a ranged attack.\n@param target the entity to target\n@param charge How \"charged\" the attack is (how far back the bow was pulled for Bow attacks).\n               This should be a value between 0 and 1, represented as targetDistance/maxDistance."
            }
          },
          {
            "kind": "METHOD",
            "name": "setChargingAttack(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "raiseHands"
              }
            ],
            "comment": {
              "body": "Sets that the Entity is \"charging\" up an attack, by raising its hands",
              "plain": "Sets that the Entity is \"charging\" up an attack, by raising its hands\n@param raiseHands Whether the entities hands are raised to charge attack"
            }
          }
        ]
      },
      {
        "kind": "INTERFACE",
        "name": "com.destroystokyo.paper.entity.SentientNPC",
        "children": [
          {
            "kind": "METHOD",
            "name": "getTarget()",
            "comment": {
              "body": "Gets the current target of this Creature",
              "tags": "Returns Current target of this creature, or null if none exists.",
              "plain": "Gets the current target of this Creature\n@return Current target of this creature, or null if none exists"
            }
          },
          {
            "kind": "METHOD",
            "name": "setTarget(org.bukkit.entity.LivingEntity)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "target"
              }
            ],
            "comment": {
              "body": "Instructs this Creature to set the specified LivingEntity as its\n target.\n \u003cp\u003e\n Hostile creatures may attack their target, and friendly creatures may\n follow their target.",
              "plain": "Instructs this Creature to set the specified LivingEntity as its\n target.\n \u003cp\u003e\n Hostile creatures may attack their target, and friendly creatures may\n follow their target.\n@param target New LivingEntity to target, or null to clear the target"
            }
          }
        ],
        "comment": {
          "body": "Used to determine ACTUAL Living NPC\u0027s. Spigot mistakenly inversed the conditions for LivingEntity, and\n used LivingEntity for Insentient Entities, and named the actual EntityLiving class EntityInsentient.\n\n This should of all been inversed on the implementation side. To make matters worse, Spigot never\n exposed the differentiator that there are entities with AI that are not sentient/alive such as\n Armor stands and Players are the only things that do not implement the REAL EntityLiving class (named Insentient internally)\n\n This interface lets you identify NPC entities capable of sentience, and able to move about and react to the world.",
          "plain": "Used to determine ACTUAL Living NPC\u0027s. Spigot mistakenly inversed the conditions for LivingEntity, and\n used LivingEntity for Insentient Entities, and named the actual EntityLiving class EntityInsentient.\n\n This should of all been inversed on the implementation side. To make matters worse, Spigot never\n exposed the differentiator that there are entities with AI that are not sentient/alive such as\n Armor stands and Players are the only things that do not implement the REAL EntityLiving class (named Insentient internally)\n\n This interface lets you identify NPC entities capable of sentience, and able to move about and react to the world."
        }
      }
    ]
  },
  {
    "kind": "PACKAGE",
    "name": "com.destroystokyo.paper.event.block",
    "children": [
      {
        "kind": "CLASS",
        "name": "com.destroystokyo.paper.event.block.BeaconEffectEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "BeaconEffectEvent(org.bukkit.block.Block,org.bukkit.potion.PotionEffect,org.bukkit.entity.Player,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "block"
              },
              {
                "kind": "PARAMETER",
                "name": "effect"
              },
              {
                "kind": "PARAMETER",
                "name": "player"
              },
              {
                "kind": "PARAMETER",
                "name": "primary"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "cancelled"
          },
          {
            "kind": "FIELD",
            "name": "effect"
          },
          {
            "kind": "METHOD",
            "name": "getEffect()",
            "comment": {
              "body": "Gets the potion effect being applied.",
              "tags": "Returns Potion effect.",
              "plain": "Gets the potion effect being applied.\n@return Potion effect"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getPlayer()",
            "comment": {
              "body": "Gets the player who the potion effect is being applied to.",
              "tags": "Returns Affected player.",
              "plain": "Gets the player who the potion effect is being applied to.\n@return Affected player"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "METHOD",
            "name": "isPrimary()",
            "comment": {
              "body": "Gets whether the effect is a primary beacon effect.",
              "tags": "Returns true if this event represents a primary effect.",
              "plain": "Gets whether the effect is a primary beacon effect.\n@return true if this event represents a primary effect"
            }
          },
          {
            "kind": "FIELD",
            "name": "player"
          },
          {
            "kind": "FIELD",
            "name": "primary"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancelled"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "setEffect(org.bukkit.potion.PotionEffect)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "effect"
              }
            ],
            "comment": {
              "body": "Sets the potion effect that will be applied.",
              "plain": "Sets the potion effect that will be applied.\n@param effect Potion effect"
            }
          }
        ],
        "comment": {
          "body": "Called when a beacon effect is being applied to a player.",
          "plain": "Called when a beacon effect is being applied to a player."
        }
      }
    ]
  },
  {
    "kind": "PACKAGE",
    "name": "com.destroystokyo.paper.event.entity",
    "children": [
      {
        "kind": "CLASS",
        "name": "com.destroystokyo.paper.event.entity.EndermanAttackPlayerEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "EndermanAttackPlayerEvent(org.bukkit.entity.Enderman,org.bukkit.entity.Player)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "entity"
              },
              {
                "kind": "PARAMETER",
                "name": "player"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "cancelled"
          },
          {
            "kind": "METHOD",
            "name": "getEntity()",
            "comment": {
              "body": "The enderman considering attacking",
              "tags": "Returns The enderman considering attacking.",
              "plain": "The enderman considering attacking\n@return The enderman considering attacking"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getPlayer()",
            "comment": {
              "body": "The player the Enderman is considering attacking",
              "tags": "Returns The player the Enderman is considering attacking.",
              "plain": "The player the Enderman is considering attacking\n@return The player the Enderman is considering attacking"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()",
            "comment": {
              "tags": "Returns If cancelled, the enderman will not attack.",
              "plain": "@return If cancelled, the enderman will not attack"
            }
          },
          {
            "kind": "FIELD",
            "name": "player"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ],
            "comment": {
              "body": "Cancels if the Enderman will attack this player",
              "plain": "Cancels if the Enderman will attack this player\n@param cancel true if you wish to cancel this event"
            }
          }
        ],
        "comment": {
          "body": "Fired when an Enderman determines if it should attack a player or not.\n Starts off cancelled if the player is wearing a pumpkin head or is not looking\n at the Enderman, according to Vanilla rules.",
          "plain": "Fired when an Enderman determines if it should attack a player or not.\n Starts off cancelled if the player is wearing a pumpkin head or is not looking\n at the Enderman, according to Vanilla rules."
        }
      },
      {
        "kind": "CLASS",
        "name": "com.destroystokyo.paper.event.entity.EndermanEscapeEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "EndermanEscapeEvent(org.bukkit.entity.Enderman,com.destroystokyo.paper.event.entity.EndermanEscapeEvent.Reason)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "entity"
              },
              {
                "kind": "PARAMETER",
                "name": "reason"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "cancelled"
          },
          {
            "kind": "ENUM",
            "name": "com.destroystokyo.paper.event.entity.EndermanEscapeEvent.Reason",
            "children": [
              {
                "kind": "ENUM_CONSTANT",
                "name": "CRITICAL_HIT",
                "comment": {
                  "body": "The enderman has teleported away due to a critical hit",
                  "plain": "The enderman has teleported away due to a critical hit"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "DROWN",
                "comment": {
                  "body": "Specific case for CRITICAL_HIT where the enderman is taking rain damage",
                  "plain": "Specific case for CRITICAL_HIT where the enderman is taking rain damage"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "INDIRECT",
                "comment": {
                  "body": "The enderman has teleported away due to indirect damage (ranged)",
                  "plain": "The enderman has teleported away due to indirect damage (ranged)"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "RUNAWAY",
                "comment": {
                  "body": "The enderman has stopped attacking and ran away",
                  "plain": "The enderman has stopped attacking and ran away"
                }
              },
              {
                "kind": "CONSTRUCTOR",
                "name": "Reason()"
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "STARE",
                "comment": {
                  "body": "The enderman has teleported away due to the player staring at it during combat",
                  "plain": "The enderman has teleported away due to the player staring at it during combat"
                }
              },
              {
                "kind": "METHOD",
                "name": "valueOf(java.lang.String)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "name"
                  }
                ]
              },
              {
                "kind": "METHOD",
                "name": "values()"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getEntity()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getReason()",
            "comment": {
              "tags": "Returns The reason the enderman is trying to escape.",
              "plain": "@return The reason the enderman is trying to escape"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "FIELD",
            "name": "reason"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ],
            "comment": {
              "body": "Cancels the escape.\n\n If this escape normally would of resulted in damage avoidance such as indirect,\n the enderman will now take damage.",
              "plain": "Cancels the escape.\n\n If this escape normally would of resulted in damage avoidance such as indirect,\n the enderman will now take damage.\n@param cancel true if you wish to cancel this event"
            }
          }
        ]
      },
      {
        "kind": "CLASS",
        "name": "com.destroystokyo.paper.event.entity.EntityAddToWorldEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "EntityAddToWorldEvent(org.bukkit.entity.Entity)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "entity"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          }
        ],
        "comment": {
          "body": "Fired any time an entity is being added to the world for any reason.\n\n Not to be confused with \u003ca href\u003d\"org/bukkit/event/entity/CreatureSpawnEvent.html\" title\u003d\"class in org.bukkit.event.entity\"\u003e\u003ccode\u003eCreatureSpawnEvent\u003c/code\u003e\u003c/a\u003e\n This will fire anytime a chunk is reloaded too.",
          "plain": "Fired any time an entity is being added to the world for any reason.\n\n Not to be confused with {@link org.bukkit.event.entity.CreatureSpawnEvent}\n This will fire anytime a chunk is reloaded too."
        }
      },
      {
        "kind": "CLASS",
        "name": "com.destroystokyo.paper.event.entity.EntityKnockbackByEntityEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "EntityKnockbackByEntityEvent(org.bukkit.entity.LivingEntity,org.bukkit.entity.Entity,float,org.bukkit.util.Vector)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "acceleration"
              },
              {
                "kind": "PARAMETER",
                "name": "entity"
              },
              {
                "kind": "PARAMETER",
                "name": "hitBy"
              },
              {
                "kind": "PARAMETER",
                "name": "knockbackStrength"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "acceleration"
          },
          {
            "kind": "FIELD",
            "name": "cancelled"
          },
          {
            "kind": "METHOD",
            "name": "getAcceleration()",
            "comment": {
              "tags": "Returns the acceleration that will be applied.",
              "plain": "@return the acceleration that will be applied"
            }
          },
          {
            "kind": "METHOD",
            "name": "getEntity()",
            "comment": {
              "tags": "Returns the entity which was knocked back.",
              "plain": "@return the entity which was knocked back"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getHitBy()",
            "comment": {
              "tags": "Returns the Entity which hit.",
              "plain": "@return the Entity which hit"
            }
          },
          {
            "kind": "METHOD",
            "name": "getKnockbackStrength()",
            "comment": {
              "tags": "Returns the original knockback strength..",
              "plain": "@return the original knockback strength."
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "FIELD",
            "name": "hitBy"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "FIELD",
            "name": "knockbackStrength"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          }
        ],
        "comment": {
          "body": "Fired when an Entity is knocked back by the hit of another Entity. The acceleration\n vector can be modified. If this event is cancelled, the entity is not knocked back.",
          "plain": "Fired when an Entity is knocked back by the hit of another Entity. The acceleration\n vector can be modified. If this event is cancelled, the entity is not knocked back."
        }
      },
      {
        "kind": "CLASS",
        "name": "com.destroystokyo.paper.event.entity.EntityPathfindEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "EntityPathfindEvent(org.bukkit.entity.Entity,org.bukkit.Location,org.bukkit.entity.Entity)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "entity"
              },
              {
                "kind": "PARAMETER",
                "name": "loc"
              },
              {
                "kind": "PARAMETER",
                "name": "targetEntity"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "cancelled"
          },
          {
            "kind": "METHOD",
            "name": "getEntity()",
            "comment": {
              "body": "The Entity that is pathfinding.",
              "tags": "Returns The Entity that is pathfinding..",
              "plain": "The Entity that is pathfinding.\n@return The Entity that is pathfinding."
            }
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getLoc()",
            "comment": {
              "body": "The Location of where the entity is about to move to.\n\n Note that if the target happened to of been an entity",
              "tags": "Returns Location of where the entity is trying to pathfind to..",
              "plain": "The Location of where the entity is about to move to.\n\n Note that if the target happened to of been an entity\n@return Location of where the entity is trying to pathfind to."
            }
          },
          {
            "kind": "METHOD",
            "name": "getTargetEntity()",
            "comment": {
              "body": "If the Entity is trying to pathfind to an entity, this is the entity in relation.\n\n Otherwise this will return null.",
              "tags": "Returns The entity target or null.",
              "plain": "If the Entity is trying to pathfind to an entity, this is the entity in relation.\n\n Otherwise this will return null.\n@return The entity target or null"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "FIELD",
            "name": "loc"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "targetEntity"
          }
        ],
        "comment": {
          "body": "Fired when an Entity decides to start moving towards a location.\n\n This event does not fire for the entities actual movement. Only when it\n is choosing to start moving to a location.",
          "plain": "Fired when an Entity decides to start moving towards a location.\n\n This event does not fire for the entities actual movement. Only when it\n is choosing to start moving to a location."
        }
      },
      {
        "kind": "CLASS",
        "name": "com.destroystokyo.paper.event.entity.EntityRemoveFromWorldEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "EntityRemoveFromWorldEvent(org.bukkit.entity.Entity)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "entity"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          }
        ],
        "comment": {
          "body": "Fired any time an entity is being removed from a world for any reason",
          "plain": "Fired any time an entity is being removed from a world for any reason"
        }
      },
      {
        "kind": "CLASS",
        "name": "com.destroystokyo.paper.event.entity.EntityTeleportEndGatewayEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "EntityTeleportEndGatewayEvent(org.bukkit.entity.Entity,org.bukkit.Location,org.bukkit.Location,org.bukkit.block.EndGateway)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "from"
              },
              {
                "kind": "PARAMETER",
                "name": "gateway"
              },
              {
                "kind": "PARAMETER",
                "name": "to"
              },
              {
                "kind": "PARAMETER",
                "name": "what"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "gateway"
          },
          {
            "kind": "METHOD",
            "name": "getGateway()",
            "comment": {
              "body": "The gateway triggering the teleport",
              "tags": "Returns EndGateway used.",
              "plain": "The gateway triggering the teleport\n@return EndGateway used"
            }
          }
        ],
        "comment": {
          "body": "Fired any time an entity attempts to teleport in an end gateway",
          "plain": "Fired any time an entity attempts to teleport in an end gateway"
        }
      },
      {
        "kind": "CLASS",
        "name": "com.destroystokyo.paper.event.entity.EntityZapEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "EntityZapEvent(org.bukkit.entity.Entity,org.bukkit.entity.LightningStrike,org.bukkit.entity.Entity)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "bolt"
              },
              {
                "kind": "PARAMETER",
                "name": "entity"
              },
              {
                "kind": "PARAMETER",
                "name": "replacementEntity"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "bolt"
          },
          {
            "kind": "FIELD",
            "name": "cancelled"
          },
          {
            "kind": "METHOD",
            "name": "getBolt()",
            "comment": {
              "body": "Gets the lightning bolt that is striking the entity.",
              "tags": "Returns The lightning bolt responsible for this event.",
              "plain": "Gets the lightning bolt that is striking the entity.\n@return The lightning bolt responsible for this event"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getReplacementEntity()",
            "comment": {
              "body": "Gets the entity that will replace the struck entity.",
              "tags": "Returns The entity that will replace the struck entity.",
              "plain": "Gets the entity that will replace the struck entity.\n@return The entity that will replace the struck entity"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "FIELD",
            "name": "replacementEntity"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          }
        ],
        "comment": {
          "body": "Fired when lightning strikes an entity",
          "plain": "Fired when lightning strikes an entity"
        }
      },
      {
        "kind": "CLASS",
        "name": "com.destroystokyo.paper.event.entity.ExperienceOrbMergeEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "ExperienceOrbMergeEvent(org.bukkit.entity.ExperienceOrb,org.bukkit.entity.ExperienceOrb)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "mergeSource"
              },
              {
                "kind": "PARAMETER",
                "name": "mergeTarget"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "cancelled"
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getMergeSource()",
            "comment": {
              "tags": "Returns The orb that is subject to being removed and merged into the target orb.",
              "plain": "@return The orb that is subject to being removed and merged into the target orb"
            }
          },
          {
            "kind": "METHOD",
            "name": "getMergeTarget()",
            "comment": {
              "tags": "Returns The orb that will absorb the other experience orb.",
              "plain": "@return The orb that will absorb the other experience orb"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "FIELD",
            "name": "mergeSource"
          },
          {
            "kind": "FIELD",
            "name": "mergeTarget"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ],
            "comment": {
              "plain": "@param cancel true if you wish to cancel this event, and prevent the orbs from merging"
            }
          }
        ],
        "comment": {
          "body": "Fired anytime the server is about to merge 2 experience orbs into one",
          "plain": "Fired anytime the server is about to merge 2 experience orbs into one"
        }
      },
      {
        "kind": "CLASS",
        "name": "com.destroystokyo.paper.event.entity.PlayerNaturallySpawnCreaturesEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PlayerNaturallySpawnCreaturesEvent(org.bukkit.entity.Player,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "player"
              },
              {
                "kind": "PARAMETER",
                "name": "radius"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "cancelled"
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getSpawnRadius()",
            "comment": {
              "tags": "Returns The radius of chunks around this player to be included in natural spawn selection.",
              "plain": "@return The radius of chunks around this player to be included in natural spawn selection"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()",
            "comment": {
              "tags": "Returns If this players chunks will be excluded from natural spawns.",
              "plain": "@return If this players chunks will be excluded from natural spawns"
            }
          },
          {
            "kind": "FIELD",
            "name": "radius"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ],
            "comment": {
              "plain": "@param cancel true if you wish to cancel this event, and not include this players chunks for natural spawning"
            }
          },
          {
            "kind": "METHOD",
            "name": "setSpawnRadius(byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "radius"
              }
            ],
            "comment": {
              "plain": "@param radius The radius of chunks around this player to be included in natural spawn selection"
            }
          }
        ],
        "comment": {
          "body": "Fired when the server is calculating what chunks to try to spawn monsters in every Monster Spawn Tick event",
          "plain": "Fired when the server is calculating what chunks to try to spawn monsters in every Monster Spawn Tick event"
        }
      },
      {
        "kind": "CLASS",
        "name": "com.destroystokyo.paper.event.entity.PreCreatureSpawnEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PreCreatureSpawnEvent(org.bukkit.Location,org.bukkit.entity.EntityType,org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "location"
              },
              {
                "kind": "PARAMETER",
                "name": "reason"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "cancelled"
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getReason()",
            "comment": {
              "tags": "Returns Reason this creature is spawning (ie, NATURAL vs SPAWNER).",
              "plain": "@return Reason this creature is spawning (ie, NATURAL vs SPAWNER)"
            }
          },
          {
            "kind": "METHOD",
            "name": "getSpawnLocation()",
            "comment": {
              "tags": "Returns The location this creature is being spawned at.",
              "plain": "@return The location this creature is being spawned at"
            }
          },
          {
            "kind": "METHOD",
            "name": "getType()",
            "comment": {
              "tags": "Returns The type of creature being spawned.",
              "plain": "@return The type of creature being spawned"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()",
            "comment": {
              "tags": "Returns If the spawn of this creature is cancelled or not.",
              "plain": "@return If the spawn of this creature is cancelled or not"
            }
          },
          {
            "kind": "FIELD",
            "name": "location"
          },
          {
            "kind": "FIELD",
            "name": "reason"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ],
            "comment": {
              "body": "Cancelling this event is more effecient than cancelling CreatureSpawnEvent",
              "plain": "Cancelling this event is more effecient than cancelling CreatureSpawnEvent\n@param cancel true if you wish to cancel this event, and abort the spawn of this creature"
            }
          },
          {
            "kind": "METHOD",
            "name": "setShouldAbortSpawn(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "shouldAbortSpawn"
              }
            ],
            "comment": {
              "body": "Set this if you are more blanket blocking all types of these spawns, and wish to abort the spawn process from\n trying more attempts after this cancellation.",
              "plain": "Set this if you are more blanket blocking all types of these spawns, and wish to abort the spawn process from\n trying more attempts after this cancellation.\n@param shouldAbortSpawn Set if the spawn process should be aborted vs trying more attempts"
            }
          },
          {
            "kind": "FIELD",
            "name": "shouldAbortSpawn"
          },
          {
            "kind": "METHOD",
            "name": "shouldAbortSpawn()",
            "comment": {
              "tags": "Returns If the spawn process should be aborted vs trying more attempts.",
              "plain": "@return If the spawn process should be aborted vs trying more attempts"
            }
          },
          {
            "kind": "FIELD",
            "name": "type"
          }
        ],
        "comment": {
          "body": "WARNING: This event only fires for a limited number of cases, and not for every case that CreatureSpawnEvent does.\n\n You should still listen to CreatureSpawnEvent as a backup, and only use this event as an \"enhancement\".\n The intent of this event is to improve server performance, so limited use cases.\n \n Currently: NATURAL and SPAWNER based reasons. Please submit a Pull Request for future additions.\n Also, Plugins that replace Entity Registrations with their own custom entities might not fire this event.",
          "plain": "WARNING: This event only fires for a limited number of cases, and not for every case that CreatureSpawnEvent does.\n\n You should still listen to CreatureSpawnEvent as a backup, and only use this event as an \"enhancement\".\n The intent of this event is to improve server performance, so limited use cases.\n \n Currently: NATURAL and SPAWNER based reasons. Please submit a Pull Request for future additions.\n Also, Plugins that replace Entity Registrations with their own custom entities might not fire this event."
        }
      },
      {
        "kind": "CLASS",
        "name": "com.destroystokyo.paper.event.entity.ProjectileCollideEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "ProjectileCollideEvent(org.bukkit.entity.Projectile,org.bukkit.entity.Entity)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "collidedWith"
              },
              {
                "kind": "PARAMETER",
                "name": "what"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "cancelled"
          },
          {
            "kind": "FIELD",
            "name": "collidedWith"
          },
          {
            "kind": "METHOD",
            "name": "getCollidedWith()",
            "comment": {
              "body": "Get the entity the projectile collided with",
              "tags": "Returns the entity collided with.",
              "plain": "Get the entity the projectile collided with\n@return the entity collided with"
            }
          },
          {
            "kind": "METHOD",
            "name": "getEntity()",
            "comment": {
              "body": "Get the projectile that collided",
              "tags": "Returns the projectile that collided.",
              "plain": "Get the projectile that collided\n@return the projectile that collided"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "FIELD",
            "name": "handlerList"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          }
        ],
        "comment": {
          "body": "Called when an projectile collides with an entity\n \u003cp\u003e\n This event is called \u003cb\u003ebefore\u003c/b\u003e \u003ca href\u003d\"org/bukkit/event/entity/EntityDamageByEntityEvent.html\" title\u003d\"class in org.bukkit.event.entity\"\u003e\u003ccode\u003eEntityDamageByEntityEvent\u003c/code\u003e\u003c/a\u003e, and cancelling it will allow the projectile to continue flying",
          "plain": "Called when an projectile collides with an entity\n \u003cp\u003e\n This event is called \u003cb\u003ebefore\u003c/b\u003e {@link org.bukkit.event.entity.EntityDamageByEntityEvent}, and cancelling it will allow the projectile to continue flying"
        }
      },
      {
        "kind": "CLASS",
        "name": "com.destroystokyo.paper.event.entity.WitchConsumePotionEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "WitchConsumePotionEvent(org.bukkit.entity.Witch,org.bukkit.inventory.ItemStack)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "potion"
              },
              {
                "kind": "PARAMETER",
                "name": "witch"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "cancelled"
          },
          {
            "kind": "METHOD",
            "name": "getEntity()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getPotion()",
            "comment": {
              "tags": "Returns the potion the witch will consume and have the effects applied..",
              "plain": "@return the potion the witch will consume and have the effects applied."
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()",
            "comment": {
              "tags": "Returns Event was cancelled or potion was null.",
              "plain": "@return Event was cancelled or potion was null"
            }
          },
          {
            "kind": "FIELD",
            "name": "potion"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "setPotion(org.bukkit.inventory.ItemStack)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "potion"
              }
            ],
            "comment": {
              "body": "Sets the potion to be consumed and applied to the witch.",
              "plain": "Sets the potion to be consumed and applied to the witch.\n@param potion The potion"
            }
          }
        ],
        "comment": {
          "body": "Fired when a witch consumes the potion in their hand to buff themselves.",
          "plain": "Fired when a witch consumes the potion in their hand to buff themselves."
        }
      },
      {
        "kind": "CLASS",
        "name": "com.destroystokyo.paper.event.entity.WitchReadyPotionEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "WitchReadyPotionEvent(org.bukkit.entity.Witch,org.bukkit.inventory.ItemStack)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "potion"
              },
              {
                "kind": "PARAMETER",
                "name": "witch"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "cancelled"
          },
          {
            "kind": "METHOD",
            "name": "getEntity()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getPotion()",
            "comment": {
              "tags": "Returns the potion the witch is readying to use.",
              "plain": "@return the potion the witch is readying to use"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "FIELD",
            "name": "potion"
          },
          {
            "kind": "METHOD",
            "name": "process(org.bukkit.entity.Witch,org.bukkit.inventory.ItemStack)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "potion"
              },
              {
                "kind": "PARAMETER",
                "name": "witch"
              }
            ],
            "comment": {
              "body": "Fires thee event, returning the desired potion, or air of cancelled",
              "tags": "Returns The ItemStack to be used.",
              "plain": "Fires thee event, returning the desired potion, or air of cancelled\n@param witch the witch whom is readying to use a potion\n@param potion the potion to be used\n@return The ItemStack to be used"
            }
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "setPotion(org.bukkit.inventory.ItemStack)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "potion"
              }
            ],
            "comment": {
              "body": "Sets the potion the which is going to hold and use",
              "plain": "Sets the potion the which is going to hold and use\n@param potion The potion"
            }
          }
        ]
      },
      {
        "kind": "CLASS",
        "name": "com.destroystokyo.paper.event.entity.WitchThrowPotionEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "WitchThrowPotionEvent(org.bukkit.entity.Witch,org.bukkit.entity.LivingEntity,org.bukkit.inventory.ItemStack)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "potion"
              },
              {
                "kind": "PARAMETER",
                "name": "target"
              },
              {
                "kind": "PARAMETER",
                "name": "witch"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "cancelled"
          },
          {
            "kind": "METHOD",
            "name": "getEntity()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getPotion()",
            "comment": {
              "tags": "Returns The potion the witch will throw at a player.",
              "plain": "@return The potion the witch will throw at a player"
            }
          },
          {
            "kind": "METHOD",
            "name": "getTarget()",
            "comment": {
              "tags": "Returns The target of the potion.",
              "plain": "@return The target of the potion"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()",
            "comment": {
              "tags": "Returns Event was cancelled or potion was null.",
              "plain": "@return Event was cancelled or potion was null"
            }
          },
          {
            "kind": "FIELD",
            "name": "potion"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "setPotion(org.bukkit.inventory.ItemStack)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "potion"
              }
            ],
            "comment": {
              "body": "Sets the potion to be thrown at a player",
              "plain": "Sets the potion to be thrown at a player\n@param potion The potion"
            }
          },
          {
            "kind": "FIELD",
            "name": "target"
          }
        ],
        "comment": {
          "body": "Fired when a witch throws a potion at a player",
          "plain": "Fired when a witch throws a potion at a player"
        }
      }
    ]
  },
  {
    "kind": "PACKAGE",
    "name": "com.destroystokyo.paper.event.executor",
    "children": [
      {
        "kind": "CLASS",
        "name": "com.destroystokyo.paper.event.executor.MethodHandleEventExecutor",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "MethodHandleEventExecutor(java.lang.Class\u003c? extends org.bukkit.event.Event\u003e,java.lang.invoke.MethodHandle)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "eventClass"
              },
              {
                "kind": "PARAMETER",
                "name": "handle"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "MethodHandleEventExecutor(java.lang.Class\u003c? extends org.bukkit.event.Event\u003e,java.lang.reflect.Method)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "eventClass"
              },
              {
                "kind": "PARAMETER",
                "name": "m"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "eventClass"
          },
          {
            "kind": "METHOD",
            "name": "execute(org.bukkit.event.Listener,org.bukkit.event.Event)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "event"
              },
              {
                "kind": "PARAMETER",
                "name": "listener"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "handle"
          }
        ]
      },
      {
        "kind": "CLASS",
        "name": "com.destroystokyo.paper.event.executor.StaticMethodHandleEventExecutor",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "StaticMethodHandleEventExecutor(java.lang.Class\u003c? extends org.bukkit.event.Event\u003e,java.lang.reflect.Method)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "eventClass"
              },
              {
                "kind": "PARAMETER",
                "name": "m"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "eventClass"
          },
          {
            "kind": "METHOD",
            "name": "execute(org.bukkit.event.Listener,org.bukkit.event.Event)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "event"
              },
              {
                "kind": "PARAMETER",
                "name": "listener"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "handle"
          }
        ]
      }
    ]
  },
  {
    "kind": "PACKAGE",
    "name": "com.destroystokyo.paper.event.executor.asm",
    "children": [
      {
        "kind": "CLASS",
        "name": "com.destroystokyo.paper.event.executor.asm.ASMEventExecutorGenerator",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "ASMEventExecutorGenerator()"
          },
          {
            "kind": "FIELD",
            "name": "NEXT_ID"
          },
          {
            "kind": "METHOD",
            "name": "generateEventExecutor(java.lang.reflect.Method,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "m"
              },
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "generateName()"
          }
        ]
      },
      {
        "kind": "INTERFACE",
        "name": "com.destroystokyo.paper.event.executor.asm.ClassDefiner",
        "children": [
          {
            "kind": "METHOD",
            "name": "defineClass(java.lang.ClassLoader,java.lang.String,byte[])",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "name"
              },
              {
                "kind": "PARAMETER",
                "name": "parentLoader"
              }
            ],
            "comment": {
              "body": "Define a class",
              "tags": "Returns the defined class.",
              "plain": "Define a class\n@param parentLoader the parent classloader\n@param name the name of the class\n@param data the class data to load\n@return the defined class\n@throws ClassFormatError if the class data is invalid\n@throws NullPointerException if any of the arguments are null"
            }
          },
          {
            "kind": "METHOD",
            "name": "getInstance()"
          },
          {
            "kind": "METHOD",
            "name": "isBypassAccessChecks()",
            "comment": {
              "body": "Returns if the defined classes can bypass access checks",
              "tags": "Returns if classes bypass access checks.",
              "plain": "Returns if the defined classes can bypass access checks\n@return if classes bypass access checks"
            }
          }
        ]
      },
      {
        "kind": "CLASS",
        "name": "com.destroystokyo.paper.event.executor.asm.SafeClassDefiner",
        "children": [
          {
            "kind": "FIELD",
            "name": "INSTANCE"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "SafeClassDefiner()"
          },
          {
            "kind": "CLASS",
            "name": "com.destroystokyo.paper.event.executor.asm.SafeClassDefiner.GeneratedClassLoader",
            "children": [
              {
                "kind": "CONSTRUCTOR",
                "name": "GeneratedClassLoader(java.lang.ClassLoader)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "parent"
                  }
                ]
              },
              {
                "kind": "METHOD",
                "name": "define(java.lang.String,byte[])",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "data"
                  },
                  {
                    "kind": "PARAMETER",
                    "name": "name"
                  }
                ]
              },
              {
                "kind": "METHOD",
                "name": "getClassLoadingLock(java.lang.String)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "name"
                  }
                ]
              },
              {
                "kind": "METHOD",
                "name": "hasClass(java.lang.String)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "name"
                  }
                ]
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "defineClass(java.lang.ClassLoader,java.lang.String,byte[])",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "name"
              },
              {
                "kind": "PARAMETER",
                "name": "parentLoader"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "loaders"
          }
        ]
      }
    ]
  },
  {
    "kind": "PACKAGE",
    "name": "com.destroystokyo.paper.event.player",
    "children": [
      {
        "kind": "CLASS",
        "name": "com.destroystokyo.paper.event.player.IllegalPacketEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "IllegalPacketEvent(org.bukkit.entity.Player,java.lang.String,java.lang.String,java.lang.Exception)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "e"
              },
              {
                "kind": "PARAMETER",
                "name": "kickMessage"
              },
              {
                "kind": "PARAMETER",
                "name": "player"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "ex"
          },
          {
            "kind": "METHOD",
            "name": "getExceptionMessage()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getKickMessage()"
          },
          {
            "kind": "METHOD",
            "name": "getType()"
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isShouldKick()"
          },
          {
            "kind": "FIELD",
            "name": "kickMessage"
          },
          {
            "kind": "METHOD",
            "name": "process(org.bukkit.entity.Player,java.lang.String,java.lang.String,java.lang.Exception)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "exception"
              },
              {
                "kind": "PARAMETER",
                "name": "kickMessage"
              },
              {
                "kind": "PARAMETER",
                "name": "player"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "setKickMessage(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "kickMessage"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "setShouldKick(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "shouldKick"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "shouldKick"
          },
          {
            "kind": "FIELD",
            "name": "type"
          }
        ]
      },
      {
        "kind": "CLASS",
        "name": "com.destroystokyo.paper.event.player.PlayerAdvancementCriterionGrantEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PlayerAdvancementCriterionGrantEvent(org.bukkit.entity.Player,org.bukkit.advancement.Advancement,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "advancement"
              },
              {
                "kind": "PARAMETER",
                "name": "criterion"
              },
              {
                "kind": "PARAMETER",
                "name": "who"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "advancement"
          },
          {
            "kind": "FIELD",
            "name": "cancel"
          },
          {
            "kind": "FIELD",
            "name": "criterion"
          },
          {
            "kind": "METHOD",
            "name": "getAdvancement()",
            "comment": {
              "body": "Get the advancement which has been affected.",
              "tags": "Returns affected advancement.",
              "plain": "Get the advancement which has been affected.\n@return affected advancement"
            }
          },
          {
            "kind": "METHOD",
            "name": "getCriterion()",
            "comment": {
              "body": "Get the criterion which has been granted.",
              "tags": "Returns granted criterion.",
              "plain": "Get the criterion which has been granted.\n@return granted criterion"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          }
        ],
        "comment": {
          "body": "Called when a player is granted a criteria in an advancement.",
          "plain": "Called when a player is granted a criteria in an advancement."
        }
      },
      {
        "kind": "CLASS",
        "name": "com.destroystokyo.paper.event.player.PlayerArmorChangeEvent",
        "children": [
          {
            "kind": "FIELD",
            "name": "HANDLERS"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "PlayerArmorChangeEvent(org.bukkit.entity.Player,com.destroystokyo.paper.event.player.PlayerArmorChangeEvent.SlotType,org.bukkit.inventory.ItemStack,org.bukkit.inventory.ItemStack)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "newItem"
              },
              {
                "kind": "PARAMETER",
                "name": "oldItem"
              },
              {
                "kind": "PARAMETER",
                "name": "player"
              },
              {
                "kind": "PARAMETER",
                "name": "slotType"
              }
            ]
          },
          {
            "kind": "ENUM",
            "name": "com.destroystokyo.paper.event.player.PlayerArmorChangeEvent.SlotType",
            "children": [
              {
                "kind": "ENUM_CONSTANT",
                "name": "CHEST"
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "FEET"
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "HEAD"
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "LEGS"
              },
              {
                "kind": "CONSTRUCTOR",
                "name": "SlotType(org.bukkit.Material...)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "types"
                  }
                ]
              },
              {
                "kind": "METHOD",
                "name": "getByMaterial(org.bukkit.Material)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "material"
                  }
                ],
                "comment": {
                  "body": "Gets the type of slot via the specified material",
                  "tags": "Returns slot type the material will go in, or null if it won\u0027t.",
                  "plain": "Gets the type of slot via the specified material\n@param material material to get slot by\n@return slot type the material will go in, or null if it won\u0027t"
                }
              },
              {
                "kind": "METHOD",
                "name": "getTypes()",
                "comment": {
                  "body": "Gets an immutable set of all allowed material types that can be placed in an\n armor slot.",
                  "tags": "Returns immutable set of material types.",
                  "plain": "Gets an immutable set of all allowed material types that can be placed in an\n armor slot.\n@return immutable set of material types"
                }
              },
              {
                "kind": "FIELD",
                "name": "immutableTypes"
              },
              {
                "kind": "METHOD",
                "name": "isEquipable(org.bukkit.Material)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "material"
                  }
                ],
                "comment": {
                  "body": "Gets whether or not this material can be equipped to a slot",
                  "tags": "Returns whether or not this material can be equipped.",
                  "plain": "Gets whether or not this material can be equipped to a slot\n@param material material to check\n@return whether or not this material can be equipped"
                }
              },
              {
                "kind": "FIELD",
                "name": "mutableTypes"
              },
              {
                "kind": "METHOD",
                "name": "valueOf(java.lang.String)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "name"
                  }
                ]
              },
              {
                "kind": "METHOD",
                "name": "values()"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getNewItem()",
            "comment": {
              "body": "Gets the new item that\u0027s replacing the old",
              "tags": "Returns new item.",
              "plain": "Gets the new item that\u0027s replacing the old\n@return new item"
            }
          },
          {
            "kind": "METHOD",
            "name": "getOldItem()",
            "comment": {
              "body": "Gets the existing item that\u0027s being replaced",
              "tags": "Returns old item.",
              "plain": "Gets the existing item that\u0027s being replaced\n@return old item"
            }
          },
          {
            "kind": "METHOD",
            "name": "getSlotType()",
            "comment": {
              "body": "Gets the type of slot being altered.",
              "tags": "Returns type of slot being altered.",
              "plain": "Gets the type of slot being altered.\n@return type of slot being altered"
            }
          },
          {
            "kind": "FIELD",
            "name": "newItem"
          },
          {
            "kind": "FIELD",
            "name": "oldItem"
          },
          {
            "kind": "FIELD",
            "name": "slotType"
          },
          {
            "kind": "METHOD",
            "name": "toString()"
          }
        ],
        "comment": {
          "body": "Called when the player themselves change their armor items\n \u003cp\u003e\n Not currently called for environmental factors though it \u003cstrong\u003eMAY BE IN THE FUTURE\u003c/strong\u003e",
          "plain": "Called when the player themselves change their armor items\n \u003cp\u003e\n Not currently called for environmental factors though it \u003cstrong\u003eMAY BE IN THE FUTURE\u003c/strong\u003e"
        }
      },
      {
        "kind": "CLASS",
        "name": "com.destroystokyo.paper.event.player.PlayerHandshakeEvent",
        "children": [
          {
            "kind": "FIELD",
            "name": "HANDLERS"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "PlayerHandshakeEvent(java.lang.String,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancelled"
              },
              {
                "kind": "PARAMETER",
                "name": "originalHandshake"
              }
            ],
            "comment": {
              "body": "Creates a new \u003ca href\u003d\"com/destroystokyo/paper/event/player/PlayerHandshakeEvent.html\" title\u003d\"class in com.destroystokyo.paper.event.player\"\u003e\u003ccode\u003ePlayerHandshakeEvent\u003c/code\u003e\u003c/a\u003e.",
              "plain": "Creates a new {@link PlayerHandshakeEvent}.\n@param originalHandshake the original handshake string\n@param cancelled if this event is enabled"
            }
          },
          {
            "kind": "FIELD",
            "name": "cancelled"
          },
          {
            "kind": "FIELD",
            "name": "failMessage"
          },
          {
            "kind": "FIELD",
            "name": "failed"
          },
          {
            "kind": "METHOD",
            "name": "getFailMessage()",
            "comment": {
              "body": "Gets the message to display to the client when authentication fails.",
              "tags": "Returns the message to display to the client.",
              "plain": "Gets the message to display to the client when authentication fails.\n@return the message to display to the client"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getOriginalHandshake()",
            "comment": {
              "body": "Gets the original handshake string.",
              "tags": "Returns the original handshake string.",
              "plain": "Gets the original handshake string.\n@return the original handshake string"
            }
          },
          {
            "kind": "METHOD",
            "name": "getPropertiesJson()",
            "comment": {
              "body": "Gets the profile properties.\n\n \u003cp\u003eThis should be a valid JSON string.\u003c/p\u003e",
              "tags": "Returns the profile properties, as JSON.",
              "plain": "Gets the profile properties.\n\n \u003cp\u003eThis should be a valid JSON string.\u003c/p\u003e\n@return the profile properties, as JSON"
            }
          },
          {
            "kind": "METHOD",
            "name": "getServerHostname()",
            "comment": {
              "body": "Gets the server hostname string.\n\n \u003cp\u003eThis should not include the port.\u003c/p\u003e",
              "tags": "Returns the server hostname string.",
              "plain": "Gets the server hostname string.\n\n \u003cp\u003eThis should not include the port.\u003c/p\u003e\n@return the server hostname string"
            }
          },
          {
            "kind": "METHOD",
            "name": "getSocketAddressHostname()",
            "comment": {
              "body": "Gets the socket address hostname string.\n\n \u003cp\u003eThis should not include the port.\u003c/p\u003e",
              "tags": "Returns the socket address hostname string.",
              "plain": "Gets the socket address hostname string.\n\n \u003cp\u003eThis should not include the port.\u003c/p\u003e\n@return the socket address hostname string"
            }
          },
          {
            "kind": "METHOD",
            "name": "getUniqueId()",
            "comment": {
              "body": "Gets the unique id.",
              "tags": "Returns the unique id.",
              "plain": "Gets the unique id.\n@return the unique id"
            }
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()",
            "comment": {
              "body": "Determines if this event is cancelled.\n\n \u003cp\u003eWhen this event is cancelled, custom handshake logic will not\n be processed.\u003c/p\u003e",
              "tags": "Returns \u003ccode\u003etrue\u003c/code\u003e if this event is cancelled, \u003ccode\u003efalse\u003c/code\u003e otherwise.",
              "plain": "Determines if this event is cancelled.\n\n \u003cp\u003eWhen this event is cancelled, custom handshake logic will not\n be processed.\u003c/p\u003e\n@return {@code true} if this event is cancelled, {@code false} otherwise"
            }
          },
          {
            "kind": "METHOD",
            "name": "isFailed()",
            "comment": {
              "body": "Determines if authentication failed.\n\n \u003cp\u003eWhen \u003ccode\u003etrue\u003c/code\u003e, the client connecting will be disconnected\n with the \u003ca href\u003d\"com/destroystokyo/paper/event/player/PlayerHandshakeEvent.html#getFailMessage()\"\u003e\u003ccode\u003efail message\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e",
              "tags": "Returns \u003ccode\u003etrue\u003c/code\u003e if authentication failed, \u003ccode\u003efalse\u003c/code\u003e otherwise.",
              "plain": "Determines if authentication failed.\n\n \u003cp\u003eWhen {@code true}, the client connecting will be disconnected\n with the {@link #getFailMessage() fail message}.\u003c/p\u003e\n@return {@code true} if authentication failed, {@code false} otherwise"
            }
          },
          {
            "kind": "FIELD",
            "name": "originalHandshake"
          },
          {
            "kind": "FIELD",
            "name": "propertiesJson"
          },
          {
            "kind": "FIELD",
            "name": "serverHostname"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancelled"
              }
            ],
            "comment": {
              "body": "Sets if this event is cancelled.\n\n \u003cp\u003eWhen this event is cancelled, custom handshake logic will not\n be processed.\u003c/p\u003e",
              "plain": "Sets if this event is cancelled.\n\n \u003cp\u003eWhen this event is cancelled, custom handshake logic will not\n be processed.\u003c/p\u003e\n@param cancelled {@code true} if this event is cancelled, {@code false} otherwise"
            }
          },
          {
            "kind": "METHOD",
            "name": "setFailMessage(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "failMessage"
              }
            ],
            "comment": {
              "body": "Sets the message to display to the client when authentication fails.",
              "plain": "Sets the message to display to the client when authentication fails.\n@param failMessage the message to display to the client"
            }
          },
          {
            "kind": "METHOD",
            "name": "setFailed(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "failed"
              }
            ],
            "comment": {
              "body": "Sets if authentication failed and the client should be disconnected.\n\n \u003cp\u003eWhen \u003ccode\u003etrue\u003c/code\u003e, the client connecting will be disconnected\n with the \u003ca href\u003d\"com/destroystokyo/paper/event/player/PlayerHandshakeEvent.html#getFailMessage()\"\u003e\u003ccode\u003efail message\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e",
              "plain": "Sets if authentication failed and the client should be disconnected.\n\n \u003cp\u003eWhen {@code true}, the client connecting will be disconnected\n with the {@link #getFailMessage() fail message}.\u003c/p\u003e\n@param failed {@code true} if authentication failed, {@code false} otherwise"
            }
          },
          {
            "kind": "METHOD",
            "name": "setPropertiesJson(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "propertiesJson"
              }
            ],
            "comment": {
              "body": "Sets the profile properties.\n\n \u003cp\u003eThis should be a valid JSON string.\u003c/p\u003e",
              "plain": "Sets the profile properties.\n\n \u003cp\u003eThis should be a valid JSON string.\u003c/p\u003e\n@param propertiesJson the profile properties, as JSON"
            }
          },
          {
            "kind": "METHOD",
            "name": "setServerHostname(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "serverHostname"
              }
            ],
            "comment": {
              "body": "Sets the server hostname string.\n\n \u003cp\u003eThis should not include the port.\u003c/p\u003e",
              "plain": "Sets the server hostname string.\n\n \u003cp\u003eThis should not include the port.\u003c/p\u003e\n@param serverHostname the server hostname string"
            }
          },
          {
            "kind": "METHOD",
            "name": "setSocketAddressHostname(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "socketAddressHostname"
              }
            ],
            "comment": {
              "body": "Sets the socket address hostname string.\n\n \u003cp\u003eThis should not include the port.\u003c/p\u003e",
              "plain": "Sets the socket address hostname string.\n\n \u003cp\u003eThis should not include the port.\u003c/p\u003e\n@param socketAddressHostname the socket address hostname string"
            }
          },
          {
            "kind": "METHOD",
            "name": "setUniqueId(java.util.UUID)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "uniqueId"
              }
            ],
            "comment": {
              "body": "Sets the unique id.",
              "plain": "Sets the unique id.\n@param uniqueId the unique id"
            }
          },
          {
            "kind": "FIELD",
            "name": "socketAddressHostname"
          },
          {
            "kind": "FIELD",
            "name": "uniqueId"
          }
        ],
        "comment": {
          "body": "This event is fired during a player handshake.\n\n \u003cp\u003eIf there are no listeners listening to this event, the logic default\n to your server platform will be ran.\u003c/p\u003e\n\n \u003cp\u003eWARNING: TAMPERING WITH THIS EVENT CAN BE DANGEROUS\u003c/p\u003e",
          "plain": "This event is fired during a player handshake.\n\n \u003cp\u003eIf there are no listeners listening to this event, the logic default\n to your server platform will be ran.\u003c/p\u003e\n\n \u003cp\u003eWARNING: TAMPERING WITH THIS EVENT CAN BE DANGEROUS\u003c/p\u003e"
        }
      },
      {
        "kind": "CLASS",
        "name": "com.destroystokyo.paper.event.player.PlayerInitialSpawnEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PlayerInitialSpawnEvent(org.bukkit.entity.Player,org.bukkit.Location)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "player"
              },
              {
                "kind": "PARAMETER",
                "name": "spawnLocation"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getSpawnLocation()",
            "comment": {
              "body": "Gets the current spawn location",
              "tags": "Returns Location current spawn location.",
              "plain": "Gets the current spawn location\n@return Location current spawn location"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "setSpawnLocation(org.bukkit.Location)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "spawnLocation"
              }
            ],
            "comment": {
              "body": "Sets the new spawn location",
              "plain": "Sets the new spawn location\n@param spawnLocation new location for the spawn"
            }
          },
          {
            "kind": "FIELD",
            "name": "spawnLocation"
          }
        ]
      },
      {
        "kind": "CLASS",
        "name": "com.destroystokyo.paper.event.player.PlayerJumpEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PlayerJumpEvent(org.bukkit.entity.Player,org.bukkit.Location,org.bukkit.Location)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "from"
              },
              {
                "kind": "PARAMETER",
                "name": "player"
              },
              {
                "kind": "PARAMETER",
                "name": "to"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "cancel"
          },
          {
            "kind": "FIELD",
            "name": "from"
          },
          {
            "kind": "METHOD",
            "name": "getFrom()",
            "comment": {
              "body": "Gets the location this player jumped from",
              "tags": "Returns Location the player jumped from.",
              "plain": "Gets the location this player jumped from\n@return Location the player jumped from"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getTo()",
            "comment": {
              "body": "Gets the location this player jumped to\n\n This information is based on what the client sends, it typically\n has little relation to the arc of the jump at any given point.",
              "tags": "Returns Location the player jumped to.",
              "plain": "Gets the location this player jumped to\n\n This information is based on what the client sends, it typically\n has little relation to the arc of the jump at any given point.\n@return Location the player jumped to"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()",
            "comment": {
              "body": "Gets the cancellation state of this event. A cancelled event will not\n be executed in the server, but will still pass to other plugins\n \u003cp\u003e\n If a jump event is cancelled, the player will be moved or\n teleported back to the Location as defined by getFrom(). This will not\n fire an event",
              "tags": "Returns true if this event is cancelled.",
              "plain": "Gets the cancellation state of this event. A cancelled event will not\n be executed in the server, but will still pass to other plugins\n \u003cp\u003e\n If a jump event is cancelled, the player will be moved or\n teleported back to the Location as defined by getFrom(). This will not\n fire an event\n@return true if this event is cancelled"
            }
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ],
            "comment": {
              "body": "Sets the cancellation state of this event. A cancelled event will not\n be executed in the server, but will still pass to other plugins\n \u003cp\u003e\n If a jump event is cancelled, the player will be moved or\n teleported back to the Location as defined by getFrom(). This will not\n fire an event",
              "plain": "Sets the cancellation state of this event. A cancelled event will not\n be executed in the server, but will still pass to other plugins\n \u003cp\u003e\n If a jump event is cancelled, the player will be moved or\n teleported back to the Location as defined by getFrom(). This will not\n fire an event\n@param cancel true if you wish to cancel this event"
            }
          },
          {
            "kind": "METHOD",
            "name": "setFrom(org.bukkit.Location)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "from"
              }
            ],
            "comment": {
              "body": "Sets the location to mark as where the player jumped from",
              "plain": "Sets the location to mark as where the player jumped from\n@param from New location to mark as the players previous location"
            }
          },
          {
            "kind": "FIELD",
            "name": "to"
          },
          {
            "kind": "METHOD",
            "name": "validateLocation(org.bukkit.Location)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "loc"
              }
            ]
          }
        ],
        "comment": {
          "body": "Called when the server detects the player is jumping.\n \u003cp\u003e\n Added to avoid the overhead and special case logic that many plugins use\n when checking for jumps via PlayerMoveEvent, this event is fired whenever\n the server detects that the player is jumping.",
          "plain": "Called when the server detects the player is jumping.\n \u003cp\u003e\n Added to avoid the overhead and special case logic that many plugins use\n when checking for jumps via PlayerMoveEvent, this event is fired whenever\n the server detects that the player is jumping."
        }
      },
      {
        "kind": "CLASS",
        "name": "com.destroystokyo.paper.event.player.PlayerLocaleChangeEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PlayerLocaleChangeEvent(org.bukkit.entity.Player,java.lang.String,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "newLocale"
              },
              {
                "kind": "PARAMETER",
                "name": "oldLocale"
              },
              {
                "kind": "PARAMETER",
                "name": "player"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getNewLocale()",
            "comment": {
              "body": "Gets the locale the player is changed to.",
              "tags": "Returns player\u0027s new locale.",
              "plain": "Gets the locale the player is changed to.\n@return player\u0027s new locale"
            }
          },
          {
            "kind": "METHOD",
            "name": "getOldLocale()",
            "comment": {
              "body": "Gets the locale the player switched from.",
              "tags": "Returns player\u0027s old locale.",
              "plain": "Gets the locale the player switched from.\n@return player\u0027s old locale"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "FIELD",
            "name": "newLocale"
          },
          {
            "kind": "FIELD",
            "name": "oldLocale"
          }
        ],
        "deprecated": {
          "deprecated": "true"
        },
        "comment": {
          "body": "Called when the locale of the player is changed.",
          "plain": "Called when the locale of the player is changed.\n@deprecated Replaced by {@link org.bukkit.event.player.PlayerLocaleChangeEvent} upstream"
        }
      },
      {
        "kind": "CLASS",
        "name": "com.destroystokyo.paper.event.player.PlayerPickupExperienceEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PlayerPickupExperienceEvent(org.bukkit.entity.Player,org.bukkit.entity.ExperienceOrb)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "experienceOrb"
              },
              {
                "kind": "PARAMETER",
                "name": "player"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "cancelled"
          },
          {
            "kind": "FIELD",
            "name": "experienceOrb"
          },
          {
            "kind": "METHOD",
            "name": "getExperienceOrb()",
            "comment": {
              "tags": "Returns Returns the Orb that the player is picking up.",
              "plain": "@return Returns the Orb that the player is picking up"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ],
            "comment": {
              "body": "If true, Cancels picking up the experience orb, leaving it in the world",
              "plain": "If true, Cancels picking up the experience orb, leaving it in the world\n@param cancel true if you wish to cancel this event"
            }
          }
        ],
        "comment": {
          "body": "Fired when a player is attempting to pick up an experience orb",
          "plain": "Fired when a player is attempting to pick up an experience orb"
        }
      },
      {
        "kind": "CLASS",
        "name": "com.destroystokyo.paper.event.player.PlayerReadyArrowEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PlayerReadyArrowEvent(org.bukkit.entity.Player,org.bukkit.inventory.ItemStack,org.bukkit.inventory.ItemStack)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "arrow"
              },
              {
                "kind": "PARAMETER",
                "name": "bow"
              },
              {
                "kind": "PARAMETER",
                "name": "player"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "arrow"
          },
          {
            "kind": "FIELD",
            "name": "bow"
          },
          {
            "kind": "FIELD",
            "name": "cancelled"
          },
          {
            "kind": "METHOD",
            "name": "getArrow()",
            "comment": {
              "tags": "Returns the arrow that is attempting to be used.",
              "plain": "@return the arrow that is attempting to be used"
            }
          },
          {
            "kind": "METHOD",
            "name": "getBow()",
            "comment": {
              "tags": "Returns the player is using to fire the arrow.",
              "plain": "@return the player is using to fire the arrow"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()",
            "comment": {
              "body": "Whether or not use of this arrow is cancelled. On cancel, the server will try the next arrow available and fire another event.",
              "plain": "Whether or not use of this arrow is cancelled. On cancel, the server will try the next arrow available and fire another event."
            }
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ],
            "comment": {
              "body": "Cancel use of this arrow. On cancel, the server will try the next arrow available and fire another event.",
              "plain": "Cancel use of this arrow. On cancel, the server will try the next arrow available and fire another event.\n@param cancel true if you wish to cancel this event"
            }
          }
        ],
        "comment": {
          "body": "Called when a player is firing a bow and the server is choosing an arrow to use.",
          "plain": "Called when a player is firing a bow and the server is choosing an arrow to use."
        }
      },
      {
        "kind": "CLASS",
        "name": "com.destroystokyo.paper.event.player.PlayerTeleportEndGatewayEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PlayerTeleportEndGatewayEvent(org.bukkit.entity.Player,org.bukkit.Location,org.bukkit.Location,org.bukkit.block.EndGateway)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "from"
              },
              {
                "kind": "PARAMETER",
                "name": "gateway"
              },
              {
                "kind": "PARAMETER",
                "name": "player"
              },
              {
                "kind": "PARAMETER",
                "name": "to"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "gateway"
          },
          {
            "kind": "METHOD",
            "name": "getGateway()",
            "comment": {
              "body": "The gateway triggering the teleport",
              "tags": "Returns EndGateway used.",
              "plain": "The gateway triggering the teleport\n@return EndGateway used"
            }
          }
        ],
        "comment": {
          "body": "Fired when a teleport is triggered for an End Gateway",
          "plain": "Fired when a teleport is triggered for an End Gateway"
        }
      },
      {
        "kind": "CLASS",
        "name": "com.destroystokyo.paper.event.player.PlayerUseUnknownEntityEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PlayerUseUnknownEntityEvent(org.bukkit.entity.Player,int,boolean,org.bukkit.inventory.EquipmentSlot)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "attack"
              },
              {
                "kind": "PARAMETER",
                "name": "entityId"
              },
              {
                "kind": "PARAMETER",
                "name": "hand"
              },
              {
                "kind": "PARAMETER",
                "name": "who"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "attack"
          },
          {
            "kind": "FIELD",
            "name": "entityId"
          },
          {
            "kind": "METHOD",
            "name": "getEntityId()"
          },
          {
            "kind": "METHOD",
            "name": "getHand()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "FIELD",
            "name": "hand"
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isAttack()"
          }
        ]
      }
    ]
  },
  {
    "kind": "PACKAGE",
    "name": "com.destroystokyo.paper.event.profile",
    "children": [
      {
        "kind": "CLASS",
        "name": "com.destroystokyo.paper.event.profile.FillProfileEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "FillProfileEvent(com.destroystokyo.paper.profile.PlayerProfile)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "profile"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getPlayerProfile()",
            "comment": {
              "tags": "Returns The Profile that had properties filled.",
              "plain": "@return The Profile that had properties filled"
            }
          },
          {
            "kind": "METHOD",
            "name": "getProperties()",
            "comment": {
              "body": "Same as .getPlayerProfile().getProperties()",
              "tags": "Returns The new properties on the profile..",
              "plain": "Same as .getPlayerProfile().getProperties()\n@see PlayerProfile#getProperties()\n@return The new properties on the profile."
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "FIELD",
            "name": "profile"
          }
        ],
        "comment": {
          "body": "Fired once a profiles additional properties (such as textures) has been filled",
          "plain": "Fired once a profiles additional properties (such as textures) has been filled"
        }
      },
      {
        "kind": "CLASS",
        "name": "com.destroystokyo.paper.event.profile.LookupProfileEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "LookupProfileEvent(com.destroystokyo.paper.profile.PlayerProfile)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "profile"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getPlayerProfile()",
            "comment": {
              "tags": "Returns The profile that was recently looked up. This profile can be mutated.",
              "plain": "@return The profile that was recently looked up. This profile can be mutated"
            }
          },
          {
            "kind": "METHOD",
            "name": "getProfile()",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "tags": "Returns The profile that was recently looked up. This profile can be mutated.",
              "plain": "@return The profile that was recently looked up. This profile can be mutated\n@deprecated will be removed with 1.13, use {@link #getPlayerProfile()}"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "FIELD",
            "name": "profile"
          }
        ],
        "comment": {
          "body": "Allows a plugin to be notified anytime AFTER a Profile has been looked up from the Mojang API\n This is an opportunity to view the response and potentially cache things.\n\n No guarantees are made about thread execution context for this event. If you need to know, check\n event.isAsync()",
          "plain": "Allows a plugin to be notified anytime AFTER a Profile has been looked up from the Mojang API\n This is an opportunity to view the response and potentially cache things.\n\n No guarantees are made about thread execution context for this event. If you need to know, check\n event.isAsync()"
        }
      },
      {
        "kind": "CLASS",
        "name": "com.destroystokyo.paper.event.profile.PreFillProfileEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PreFillProfileEvent(com.destroystokyo.paper.profile.PlayerProfile)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "profile"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getPlayerProfile()",
            "comment": {
              "tags": "Returns The profile that needs its properties filled.",
              "plain": "@return The profile that needs its properties filled"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "FIELD",
            "name": "profile"
          },
          {
            "kind": "METHOD",
            "name": "setProperties(java.util.Collection\u003ccom.destroystokyo.paper.profile.ProfileProperty\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "properties"
              }
            ],
            "comment": {
              "body": "Sets the properties on the profile, avoiding the call to the Mojang API\n Same as .getPlayerProfile().setProperties(properties);",
              "plain": "Sets the properties on the profile, avoiding the call to the Mojang API\n Same as .getPlayerProfile().setProperties(properties);\n@see PlayerProfile#setProperties(Collection)\n@param properties The properties to set/append"
            }
          }
        ],
        "comment": {
          "body": "Fired when the server is requesting to fill in properties of an incomplete profile, such as textures.\n\n Allows plugins to pre populate cached properties and avoid a call to the Mojang API",
          "plain": "Fired when the server is requesting to fill in properties of an incomplete profile, such as textures.\n\n Allows plugins to pre populate cached properties and avoid a call to the Mojang API"
        }
      },
      {
        "kind": "CLASS",
        "name": "com.destroystokyo.paper.event.profile.PreLookupProfileEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PreLookupProfileEvent(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "addProfileProperties(java.util.Set\u003ccom.destroystokyo.paper.profile.ProfileProperty\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "properties"
              }
            ],
            "comment": {
              "body": "Adds any properties currently missing to the prepopulated properties set, replacing any that already were set.\n Any property in this Set will be automatically prefilled on this Profile",
              "plain": "Adds any properties currently missing to the prepopulated properties set, replacing any that already were set.\n Any property in this Set will be automatically prefilled on this Profile\n@param properties The properties to add"
            }
          },
          {
            "kind": "METHOD",
            "name": "addProperties(com.google.common.collect.Multimap\u003cjava.lang.String,Property\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "properties"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Adds additional properties, without removing the original properties",
              "plain": "Adds additional properties, without removing the original properties\n@param properties the properties to add to the existing properties\n@deprecated will be removed with 1.13 use {@link #addProfileProperties(Set)}"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getName()",
            "comment": {
              "tags": "Returns Name of the profile.",
              "plain": "@return Name of the profile"
            }
          },
          {
            "kind": "METHOD",
            "name": "getProfileProperties()",
            "comment": {
              "tags": "Returns The currently pending prepopulated properties.\n Any property in this Set will be automatically prefilled on this Profile.",
              "plain": "@return The currently pending prepopulated properties.\n Any property in this Set will be automatically prefilled on this Profile"
            }
          },
          {
            "kind": "METHOD",
            "name": "getProperties()",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Get the properties for this profile",
              "tags": "Returns the property map to attach to the new \u003ca href\u003d\"com/destroystokyo/paper/profile/PlayerProfile.html\" title\u003d\"interface in com.destroystokyo.paper.profile\"\u003e\u003ccode\u003ePlayerProfile\u003c/code\u003e\u003c/a\u003e.",
              "plain": "Get the properties for this profile\n@return the property map to attach to the new {@link PlayerProfile}\n@deprecated will be removed with 1.13  Use {@link #getProfileProperties()}"
            }
          },
          {
            "kind": "METHOD",
            "name": "getUUID()",
            "comment": {
              "body": "If this value is left null by the completion of the event call, then the server will\n trigger a call to the Mojang API to look up the UUID (Network Request), and subsequently, fire a\n \u003ca href\u003d\"com/destroystokyo/paper/event/profile/LookupProfileEvent.html\" title\u003d\"class in com.destroystokyo.paper.event.profile\"\u003e\u003ccode\u003eLookupProfileEvent\u003c/code\u003e\u003c/a\u003e",
              "tags": "Returns The UUID of the profile if it has already been provided by a plugin.",
              "plain": "If this value is left null by the completion of the event call, then the server will\n trigger a call to the Mojang API to look up the UUID (Network Request), and subsequently, fire a\n {@link LookupProfileEvent}\n@return The UUID of the profile if it has already been provided by a plugin"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "FIELD",
            "name": "name"
          },
          {
            "kind": "FIELD",
            "name": "properties"
          },
          {
            "kind": "METHOD",
            "name": "setProfileProperties(java.util.Set\u003ccom.destroystokyo.paper.profile.ProfileProperty\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "properties"
              }
            ],
            "comment": {
              "body": "Clears any existing prepopulated properties and uses the supplied properties\n Any property in this Set will be automatically prefilled on this Profile",
              "plain": "Clears any existing prepopulated properties and uses the supplied properties\n Any property in this Set will be automatically prefilled on this Profile\n@param properties The properties to add"
            }
          },
          {
            "kind": "METHOD",
            "name": "setProperties(com.google.common.collect.Multimap\u003cjava.lang.String,Property\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "properties"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Completely replaces all Properties with the new provided properties",
              "plain": "Completely replaces all Properties with the new provided properties\n@param properties the properties to set on the new profile\n@deprecated will be removed with 1.13 Use {@link #setProfileProperties(Set)}"
            }
          },
          {
            "kind": "METHOD",
            "name": "setUUID(java.util.UUID)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "uuid"
              }
            ],
            "comment": {
              "body": "Sets the UUID for this player name. This will skip the initial API call to find the players UUID.\n\n However, if Profile Properties are needed by the server, you must also set them or else an API call might still be made.",
              "plain": "Sets the UUID for this player name. This will skip the initial API call to find the players UUID.\n\n However, if Profile Properties are needed by the server, you must also set them or else an API call might still be made.\n@param uuid the UUID to set for the profile or null to reset"
            }
          },
          {
            "kind": "FIELD",
            "name": "uuid"
          }
        ],
        "comment": {
          "body": "Allows a plugin to intercept a Profile Lookup for a Profile by name\n\n At the point of event fire, the UUID and properties are unset.\n\n If a plugin sets the UUID, and optionally the properties, the API call to look up the profile may be skipped.\n\n No guarantees are made about thread execution context for this event. If you need to know, check\n event.isAsync()",
          "plain": "Allows a plugin to intercept a Profile Lookup for a Profile by name\n\n At the point of event fire, the UUID and properties are unset.\n\n If a plugin sets the UUID, and optionally the properties, the API call to look up the profile may be skipped.\n\n No guarantees are made about thread execution context for this event. If you need to know, check\n event.isAsync()"
        }
      },
      {
        "kind": "CLASS",
        "name": "com.destroystokyo.paper.event.profile.ProfileWhitelistVerifyEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "ProfileWhitelistVerifyEvent(com.destroystokyo.paper.profile.PlayerProfile,boolean,boolean,boolean,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "isOp"
              },
              {
                "kind": "PARAMETER",
                "name": "kickMessage"
              },
              {
                "kind": "PARAMETER",
                "name": "profile"
              },
              {
                "kind": "PARAMETER",
                "name": "whitelistEnabled"
              },
              {
                "kind": "PARAMETER",
                "name": "whitelisted"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getKickMessage()",
            "comment": {
              "tags": "Returns the currently planned message to send to the user if they are not whitelisted.",
              "plain": "@return the currently planned message to send to the user if they are not whitelisted"
            }
          },
          {
            "kind": "METHOD",
            "name": "getPlayerProfile()",
            "comment": {
              "tags": "Returns The profile of the player trying to connect.",
              "plain": "@return The profile of the player trying to connect"
            }
          },
          {
            "kind": "METHOD",
            "name": "getProfile()",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "tags": "Returns the gameprofile of the player trying to connect.",
              "plain": "@return the gameprofile of the player trying to connect\n@deprecated Will be removed in 1.13, use #{@link #getPlayerProfile()}"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "FIELD",
            "name": "isOp"
          },
          {
            "kind": "METHOD",
            "name": "isOp()",
            "comment": {
              "tags": "Returns if the player obtained whitelist status by having op.",
              "plain": "@return if the player obtained whitelist status by having op"
            }
          },
          {
            "kind": "METHOD",
            "name": "isWhitelistEnabled()",
            "comment": {
              "tags": "Returns if the server even has whitelist on.",
              "plain": "@return if the server even has whitelist on"
            }
          },
          {
            "kind": "METHOD",
            "name": "isWhitelisted()",
            "comment": {
              "tags": "Returns Whether the player is whitelisted to play on this server (whitelist may be off is why its true).",
              "plain": "@return Whether the player is whitelisted to play on this server (whitelist may be off is why its true)"
            }
          },
          {
            "kind": "FIELD",
            "name": "kickMessage"
          },
          {
            "kind": "FIELD",
            "name": "profile"
          },
          {
            "kind": "METHOD",
            "name": "setKickMessage(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "kickMessage"
              }
            ],
            "comment": {
              "plain": "@param kickMessage The message to send to the player on kick if not whitelisted. May set to null to use the server configured default"
            }
          },
          {
            "kind": "METHOD",
            "name": "setWhitelisted(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "whitelisted"
              }
            ],
            "comment": {
              "body": "Changes the players whitelisted state. false will deny the login",
              "plain": "Changes the players whitelisted state. false will deny the login\n@param whitelisted The new whitelisted state"
            }
          },
          {
            "kind": "FIELD",
            "name": "whitelistEnabled"
          },
          {
            "kind": "FIELD",
            "name": "whitelisted"
          }
        ],
        "comment": {
          "body": "Fires when the server needs to verify if a player is whitelisted.\n\n Plugins may override/control the servers whitelist with this event,\n and dynamically change the kick message.",
          "plain": "Fires when the server needs to verify if a player is whitelisted.\n\n Plugins may override/control the servers whitelist with this event,\n and dynamically change the kick message."
        }
      }
    ]
  },
  {
    "kind": "PACKAGE",
    "name": "com.destroystokyo.paper.event.server",
    "children": [
      {
        "kind": "CLASS",
        "name": "com.destroystokyo.paper.event.server.AsyncTabCompleteEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "AsyncTabCompleteEvent(org.bukkit.command.CommandSender,java.util.List\u003cjava.lang.String\u003e,java.lang.String,boolean,org.bukkit.Location)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "buffer"
              },
              {
                "kind": "PARAMETER",
                "name": "completions"
              },
              {
                "kind": "PARAMETER",
                "name": "isCommand"
              },
              {
                "kind": "PARAMETER",
                "name": "loc"
              },
              {
                "kind": "PARAMETER",
                "name": "sender"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "buffer"
          },
          {
            "kind": "FIELD",
            "name": "cancelled"
          },
          {
            "kind": "FIELD",
            "name": "completions"
          },
          {
            "kind": "FIELD",
            "name": "fireSyncHandler"
          },
          {
            "kind": "METHOD",
            "name": "getBuffer()",
            "comment": {
              "body": "Return the entire buffer which formed the basis of this completion.",
              "tags": "Returns command buffer, as entered.",
              "plain": "Return the entire buffer which formed the basis of this completion.\n@return command buffer, as entered"
            }
          },
          {
            "kind": "METHOD",
            "name": "getCompletions()",
            "comment": {
              "body": "The list of completions which will be offered to the sender, in order.\n This list is mutable and reflects what will be offered.\n\n If this collection is not empty after the event is fired, then\n the standard process of calling \u003ca href\u003d\"org/bukkit/command/Command.html#tabComplete(org.bukkit.command.CommandSender,java.lang.String,java.lang.String%5B%5D)\"\u003e\u003ccode\u003eCommand.tabComplete(CommandSender, String, String[])\u003c/code\u003e\u003c/a\u003e\n or current player names will not be called.",
              "tags": "Returns a list of offered completions.",
              "plain": "The list of completions which will be offered to the sender, in order.\n This list is mutable and reflects what will be offered.\n\n If this collection is not empty after the event is fired, then\n the standard process of calling {@link Command#tabComplete(CommandSender, String, String[])}\n or current player names will not be called.\n@return a list of offered completions"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getLocation()",
            "comment": {
              "tags": "Returns The position looked at by the sender, or null if none.",
              "plain": "@return The position looked at by the sender, or null if none"
            }
          },
          {
            "kind": "METHOD",
            "name": "getSender()",
            "comment": {
              "body": "Get the sender completing this command.",
              "tags": "Returns the \u003ca href\u003d\"org/bukkit/command/CommandSender.html\" title\u003d\"interface in org.bukkit.command\"\u003e\u003ccode\u003eCommandSender\u003c/code\u003e\u003c/a\u003e instance.",
              "plain": "Get the sender completing this command.\n@return the {@link CommandSender} instance"
            }
          },
          {
            "kind": "FIELD",
            "name": "handled"
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "FIELD",
            "name": "isCommand"
          },
          {
            "kind": "METHOD",
            "name": "isCommand()",
            "comment": {
              "tags": "Returns True if it is a command being tab completed, false if it is a chat message..",
              "plain": "@return True if it is a command being tab completed, false if it is a chat message."
            }
          },
          {
            "kind": "METHOD",
            "name": "isHandled()",
            "comment": {
              "body": "If true, the standard process of calling \u003ca href\u003d\"org/bukkit/command/Command.html#tabComplete(org.bukkit.command.CommandSender,java.lang.String,java.lang.String%5B%5D)\"\u003e\u003ccode\u003eCommand.tabComplete(CommandSender, String, String[])\u003c/code\u003e\u003c/a\u003e\n or current player names will not be called.",
              "tags": "Returns Is completions considered handled. Always true if completions is not empty..",
              "plain": "If true, the standard process of calling {@link Command#tabComplete(CommandSender, String, String[])}\n or current player names will not be called.\n@return Is completions considered handled. Always true if completions is not empty."
            }
          },
          {
            "kind": "FIELD",
            "name": "loc"
          },
          {
            "kind": "FIELD",
            "name": "sender"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancelled"
              }
            ],
            "comment": {
              "body": "Will provide no completions, and will not fire the synchronous process",
              "plain": "Will provide no completions, and will not fire the synchronous process\n@param cancelled true if you wish to cancel this event"
            }
          },
          {
            "kind": "METHOD",
            "name": "setCompletions(java.util.List\u003cjava.lang.String\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "completions"
              }
            ],
            "comment": {
              "body": "Set the completions offered, overriding any already set.\n If this collection is not empty after the event is fired, then\n the standard process of calling \u003ca href\u003d\"org/bukkit/command/Command.html#tabComplete(org.bukkit.command.CommandSender,java.lang.String,java.lang.String%5B%5D)\"\u003e\u003ccode\u003eCommand.tabComplete(CommandSender, String, String[])\u003c/code\u003e\u003c/a\u003e\n or current player names will not be called.\n\n The passed collection will be cloned to a new List. You must call {\u003ca href\u003d\"com/destroystokyo/paper/event/server/AsyncTabCompleteEvent.html#getCompletions()\"\u003e\u003ccode\u003eAsyncTabCompleteEvent.getCompletions()\u003c/code\u003e\u003c/a\u003e} to mutate from here",
              "plain": "Set the completions offered, overriding any already set.\n If this collection is not empty after the event is fired, then\n the standard process of calling {@link Command#tabComplete(CommandSender, String, String[])}\n or current player names will not be called.\n\n The passed collection will be cloned to a new List. You must call {{@link #getCompletions()}} to mutate from here\n@param completions the new completions"
            }
          },
          {
            "kind": "METHOD",
            "name": "setHandled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "handled"
              }
            ],
            "comment": {
              "body": "Sets whether or not to consider the completion request handled.\n If true, the standard process of calling \u003ca href\u003d\"org/bukkit/command/Command.html#tabComplete(org.bukkit.command.CommandSender,java.lang.String,java.lang.String%5B%5D)\"\u003e\u003ccode\u003eCommand.tabComplete(CommandSender, String, String[])\u003c/code\u003e\u003c/a\u003e\n or current player names will not be called.",
              "plain": "Sets whether or not to consider the completion request handled.\n If true, the standard process of calling {@link Command#tabComplete(CommandSender, String, String[])}\n or current player names will not be called.\n@param handled if this completion should be marked as being handled"
            }
          }
        ],
        "comment": {
          "body": "Allows plugins to compute tab completion results asynchronously. If this event provides completions, then the standard synchronous process will not be fired to populate the results. However, the synchronous TabCompleteEvent will fire with the Async results.\n\n Only 1 process will be allowed to provide completions, the Async Event, or the standard process.",
          "plain": "Allows plugins to compute tab completion results asynchronously. If this event provides completions, then the standard synchronous process will not be fired to populate the results. However, the synchronous TabCompleteEvent will fire with the Async results.\n\n Only 1 process will be allowed to provide completions, the Async Event, or the standard process."
        }
      },
      {
        "kind": "CLASS",
        "name": "com.destroystokyo.paper.event.server.PaperServerListPingEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PaperServerListPingEvent(com.destroystokyo.paper.network.StatusClient,java.lang.String,int,int,java.lang.String,int,org.bukkit.util.CachedServerIcon)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "client"
              },
              {
                "kind": "PARAMETER",
                "name": "favicon"
              },
              {
                "kind": "PARAMETER",
                "name": "maxPlayers"
              },
              {
                "kind": "PARAMETER",
                "name": "motd"
              },
              {
                "kind": "PARAMETER",
                "name": "numPlayers"
              },
              {
                "kind": "PARAMETER",
                "name": "protocolVersion"
              },
              {
                "kind": "PARAMETER",
                "name": "version"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "cancelled"
          },
          {
            "kind": "FIELD",
            "name": "client"
          },
          {
            "kind": "CLASS",
            "name": "com.destroystokyo.paper.event.server.PaperServerListPingEvent.PlayerIterator",
            "children": [
              {
                "kind": "CONSTRUCTOR",
                "name": "PlayerIterator()"
              },
              {
                "kind": "FIELD",
                "name": "current"
              },
              {
                "kind": "METHOD",
                "name": "hasNext()"
              },
              {
                "kind": "FIELD",
                "name": "next"
              },
              {
                "kind": "METHOD",
                "name": "next()"
              },
              {
                "kind": "FIELD",
                "name": "player"
              },
              {
                "kind": "METHOD",
                "name": "remove()"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "favicon"
          },
          {
            "kind": "METHOD",
            "name": "getBukkitPlayer(java.lang.Object)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "player"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getClient()",
            "comment": {
              "body": "Returns the \u003ca href\u003d\"com/destroystokyo/paper/network/StatusClient.html\" title\u003d\"interface in com.destroystokyo.paper.network\"\u003e\u003ccode\u003eStatusClient\u003c/code\u003e\u003c/a\u003e pinging the server.",
              "tags": "Returns The client.",
              "plain": "Returns the {@link StatusClient} pinging the server.\n@return The client"
            }
          },
          {
            "kind": "METHOD",
            "name": "getMaxPlayers()",
            "comment": {
              "body": "Get the maximum number of players sent.\n\n \u003cp\u003eReturns \u003ccode\u003e-1\u003c/code\u003e if players are hidden using\n \u003ca href\u003d\"com/destroystokyo/paper/event/server/PaperServerListPingEvent.html#shouldHidePlayers()\"\u003e\u003ccode\u003ePaperServerListPingEvent.shouldHidePlayers()\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e",
              "plain": "{@inheritDoc}\n\n \u003cp\u003eReturns {@code -1} if players are hidden using\n {@link #shouldHidePlayers()}.\u003c/p\u003e"
            }
          },
          {
            "kind": "METHOD",
            "name": "getNumPlayers()",
            "comment": {
              "body": "Get the number of players sent.\n\n \u003cp\u003eReturns \u003ccode\u003e-1\u003c/code\u003e if players are hidden using\n \u003ca href\u003d\"com/destroystokyo/paper/event/server/PaperServerListPingEvent.html#shouldHidePlayers()\"\u003e\u003ccode\u003ePaperServerListPingEvent.shouldHidePlayers()\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e",
              "plain": "{@inheritDoc}\n\n \u003cp\u003eReturns {@code -1} if players are hidden using\n {@link #shouldHidePlayers()}.\u003c/p\u003e"
            }
          },
          {
            "kind": "METHOD",
            "name": "getOnlinePlayers()"
          },
          {
            "kind": "METHOD",
            "name": "getPlayerSample()",
            "comment": {
              "body": "Returns a mutable list of \u003ca href\u003d\"com/destroystokyo/paper/profile/PlayerProfile.html\" title\u003d\"interface in com.destroystokyo.paper.profile\"\u003e\u003ccode\u003ePlayerProfile\u003c/code\u003e\u003c/a\u003e that will be displayed\n as online players on the client.\n\n \u003cp\u003eThe Vanilla Minecraft client will display them when hovering the\n player count with the mouse.\u003c/p\u003e",
              "tags": "Returns The mutable player sample list.",
              "plain": "Returns a mutable list of {@link PlayerProfile} that will be displayed\n as online players on the client.\n\n \u003cp\u003eThe Vanilla Minecraft client will display them when hovering the\n player count with the mouse.\u003c/p\u003e\n@return The mutable player sample list"
            }
          },
          {
            "kind": "METHOD",
            "name": "getProtocolVersion()",
            "comment": {
              "body": "Returns the protocol version that will be sent as the protocol version\n of the server to the client.",
              "tags": "Returns The protocol version of the server.",
              "plain": "Returns the protocol version that will be sent as the protocol version\n of the server to the client.\n@return The protocol version of the server"
            }
          },
          {
            "kind": "METHOD",
            "name": "getSampleText()",
            "deprecated": {
              "deprecated": "true"
            }
          },
          {
            "kind": "METHOD",
            "name": "getServerIcon()",
            "comment": {
              "body": "Gets the server icon sent to the client.",
              "tags": "Returns The icon to send to the client, or \u003ccode\u003enull\u003c/code\u003e for none.",
              "plain": "Gets the server icon sent to the client.\n@return The icon to send to the client, or {@code null} for none"
            }
          },
          {
            "kind": "METHOD",
            "name": "getVersion()",
            "comment": {
              "body": "Returns the version that will be sent as server version on the client.",
              "tags": "Returns The server version.",
              "plain": "Returns the version that will be sent as server version on the client.\n@return The server version"
            }
          },
          {
            "kind": "FIELD",
            "name": "hidePlayers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()",
            "comment": {
              "body": "Gets the cancellation state of this event. A cancelled event will not\n be executed in the server, but will still pass to other plugins\n\n \u003cp\u003eCancelling this event will cause the connection to be closed immediately,\n without sending a response to the client.\u003c/p\u003e",
              "plain": "{@inheritDoc}\n\n \u003cp\u003eCancelling this event will cause the connection to be closed immediately,\n without sending a response to the client.\u003c/p\u003e"
            }
          },
          {
            "kind": "METHOD",
            "name": "iterator()",
            "comment": {
              "body": "\n \u003cp\u003e\n Calling the \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/util/Iterator.html#remove()\" title\u003d\"class or interface in java.util\" class\u003d\"external-link\"\u003e\u003ccode\u003eIterator.remove()\u003c/code\u003e\u003c/a\u003e method will force that particular\n player to not be displayed on the player list, decrease the size\n returned by \u003ca href\u003d\"org/bukkit/event/server/ServerListPingEvent.html#getNumPlayers()\"\u003e\u003ccode\u003eServerListPingEvent.getNumPlayers()\u003c/code\u003e\u003c/a\u003e, and will not be returned again by\n any new iterator.\n\n \u003cp\u003e\u003cb\u003eNote:\u003c/b\u003e For compatibility reasons, this method will return all\n online players, not just the ones referenced in \u003ca href\u003d\"com/destroystokyo/paper/event/server/PaperServerListPingEvent.html#getPlayerSample()\"\u003e\u003ccode\u003ePaperServerListPingEvent.getPlayerSample()\u003c/code\u003e\u003c/a\u003e.\n Removing a player will:\u003c/p\u003e\n\n \u003cul\u003e\n     \u003cli\u003eDecrement the online player count (if and only if) the player\n     count wasn\u0027t changed by another plugin before.\u003c/li\u003e\n     \u003cli\u003eRemove all entries from \u003ca href\u003d\"com/destroystokyo/paper/event/server/PaperServerListPingEvent.html#getPlayerSample()\"\u003e\u003ccode\u003ePaperServerListPingEvent.getPlayerSample()\u003c/code\u003e\u003c/a\u003e that refer to\n     the removed player (based on their \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/util/UUID.html\" title\u003d\"class or interface in java.util\" class\u003d\"external-link\"\u003e\u003ccode\u003eUUID\u003c/code\u003e\u003c/a\u003e).\u003c/li\u003e\n \u003c/ul\u003e",
              "plain": "{@inheritDoc}\n\n \u003cp\u003e\u003cb\u003eNote:\u003c/b\u003e For compatibility reasons, this method will return all\n online players, not just the ones referenced in {@link #getPlayerSample()}.\n Removing a player will:\u003c/p\u003e\n\n \u003cul\u003e\n     \u003cli\u003eDecrement the online player count (if and only if) the player\n     count wasn\u0027t changed by another plugin before.\u003c/li\u003e\n     \u003cli\u003eRemove all entries from {@link #getPlayerSample()} that refer to\n     the removed player (based on their {@link UUID}).\u003c/li\u003e\n \u003c/ul\u003e"
            }
          },
          {
            "kind": "FIELD",
            "name": "numPlayers"
          },
          {
            "kind": "FIELD",
            "name": "originalPlayerCount"
          },
          {
            "kind": "FIELD",
            "name": "playerSample"
          },
          {
            "kind": "FIELD",
            "name": "players"
          },
          {
            "kind": "FIELD",
            "name": "protocolVersion"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ],
            "comment": {
              "body": "Sets the cancellation state of this event. A cancelled event will not\n be executed in the server, but will still pass to other plugins.\n\n \u003cp\u003eCancelling this event will cause the connection to be closed immediately,\n without sending a response to the client.\u003c/p\u003e",
              "plain": "{@inheritDoc}\n\n \u003cp\u003eCancelling this event will cause the connection to be closed immediately,\n without sending a response to the client.\u003c/p\u003e"
            }
          },
          {
            "kind": "METHOD",
            "name": "setHidePlayers(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "hidePlayers"
              }
            ],
            "comment": {
              "body": "Sets whether all player related information is hidden in the server\n list. This will cause \u003ca href\u003d\"com/destroystokyo/paper/event/server/PaperServerListPingEvent.html#getNumPlayers()\"\u003e\u003ccode\u003ePaperServerListPingEvent.getNumPlayers()\u003c/code\u003e\u003c/a\u003e, \u003ca href\u003d\"com/destroystokyo/paper/event/server/PaperServerListPingEvent.html#getMaxPlayers()\"\u003e\u003ccode\u003ePaperServerListPingEvent.getMaxPlayers()\u003c/code\u003e\u003c/a\u003e\n and \u003ca href\u003d\"com/destroystokyo/paper/event/server/PaperServerListPingEvent.html#getPlayerSample()\"\u003e\u003ccode\u003ePaperServerListPingEvent.getPlayerSample()\u003c/code\u003e\u003c/a\u003e to be skipped in the response.\n\n \u003cp\u003eThe Vanilla Minecraft client will display the player count as \u003ccode\u003e???\u003c/code\u003e\n when this option is enabled.\u003c/p\u003e",
              "plain": "Sets whether all player related information is hidden in the server\n list. This will cause {@link #getNumPlayers()}, {@link #getMaxPlayers()}\n and {@link #getPlayerSample()} to be skipped in the response.\n\n \u003cp\u003eThe Vanilla Minecraft client will display the player count as {@code ???}\n when this option is enabled.\u003c/p\u003e\n@param hidePlayers {@code true} if the player count should be hidden"
            }
          },
          {
            "kind": "METHOD",
            "name": "setNumPlayers(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "numPlayers"
              }
            ],
            "comment": {
              "body": "Sets the number of players displayed in the server list.\n\n \u003cp\u003eNote that this won\u0027t have any effect if \u003ca href\u003d\"com/destroystokyo/paper/event/server/PaperServerListPingEvent.html#shouldHidePlayers()\"\u003e\u003ccode\u003ePaperServerListPingEvent.shouldHidePlayers()\u003c/code\u003e\u003c/a\u003e\n is enabled.\u003c/p\u003e",
              "plain": "Sets the number of players displayed in the server list.\n\n \u003cp\u003eNote that this won\u0027t have any effect if {@link #shouldHidePlayers()}\n is enabled.\u003c/p\u003e\n@param numPlayers The number of online players"
            }
          },
          {
            "kind": "METHOD",
            "name": "setProtocolVersion(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "protocolVersion"
              }
            ],
            "comment": {
              "body": "Sets the protocol version that will be sent as the protocol version\n of the server to the client.",
              "plain": "Sets the protocol version that will be sent as the protocol version\n of the server to the client.\n@param protocolVersion The protocol version of the server"
            }
          },
          {
            "kind": "METHOD",
            "name": "setSampleText(java.util.List\u003cjava.lang.String\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "sample"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            }
          },
          {
            "kind": "METHOD",
            "name": "setServerIcon(org.bukkit.util.CachedServerIcon)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "icon"
              }
            ],
            "comment": {
              "body": "Sets the server icon sent to the client.",
              "plain": "Sets the server icon sent to the client.\n@param icon The icon to send to the client, or {@code null} for none"
            }
          },
          {
            "kind": "METHOD",
            "name": "setVersion(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "version"
              }
            ],
            "comment": {
              "body": "Sets the version that will be sent as server version to the client.",
              "plain": "Sets the version that will be sent as server version to the client.\n@param version The server version"
            }
          },
          {
            "kind": "METHOD",
            "name": "shouldHidePlayers()",
            "comment": {
              "body": "Returns whether all player related information is hidden in the server\n list. This will cause \u003ca href\u003d\"com/destroystokyo/paper/event/server/PaperServerListPingEvent.html#getNumPlayers()\"\u003e\u003ccode\u003ePaperServerListPingEvent.getNumPlayers()\u003c/code\u003e\u003c/a\u003e, \u003ca href\u003d\"com/destroystokyo/paper/event/server/PaperServerListPingEvent.html#getMaxPlayers()\"\u003e\u003ccode\u003ePaperServerListPingEvent.getMaxPlayers()\u003c/code\u003e\u003c/a\u003e\n and \u003ca href\u003d\"com/destroystokyo/paper/event/server/PaperServerListPingEvent.html#getPlayerSample()\"\u003e\u003ccode\u003ePaperServerListPingEvent.getPlayerSample()\u003c/code\u003e\u003c/a\u003e to be skipped in the response.\n\n \u003cp\u003eThe Vanilla Minecraft client will display the player count as \u003ccode\u003e???\u003c/code\u003e\n when this option is enabled.\u003c/p\u003e",
              "tags": "Returns \u003ccode\u003etrue\u003c/code\u003e if the player count is hidden.",
              "plain": "Returns whether all player related information is hidden in the server\n list. This will cause {@link #getNumPlayers()}, {@link #getMaxPlayers()}\n and {@link #getPlayerSample()} to be skipped in the response.\n\n \u003cp\u003eThe Vanilla Minecraft client will display the player count as {@code ???}\n when this option is enabled.\u003c/p\u003e\n@return {@code true} if the player count is hidden"
            }
          },
          {
            "kind": "FIELD",
            "name": "version"
          }
        ],
        "comment": {
          "body": "Extended version of \u003ca href\u003d\"org/bukkit/event/server/ServerListPingEvent.html\" title\u003d\"class in org.bukkit.event.server\"\u003e\u003ccode\u003eServerListPingEvent\u003c/code\u003e\u003c/a\u003e that allows full control\n of the response sent to the client.",
          "plain": "Extended version of {@link ServerListPingEvent} that allows full control\n of the response sent to the client."
        }
      },
      {
        "kind": "CLASS",
        "name": "com.destroystokyo.paper.event.server.ServerExceptionEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "ServerExceptionEvent(com.destroystokyo.paper.exception.ServerException)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "exception"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "exception"
          },
          {
            "kind": "METHOD",
            "name": "getException()",
            "comment": {
              "body": "Gets the wrapped exception that was thrown.",
              "tags": "Returns Exception thrown.",
              "plain": "Gets the wrapped exception that was thrown.\n@return Exception thrown"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          }
        ],
        "comment": {
          "body": "Called whenever an exception is thrown in a recoverable section of the server.",
          "plain": "Called whenever an exception is thrown in a recoverable section of the server."
        }
      }
    ]
  },
  {
    "kind": "PACKAGE",
    "name": "com.destroystokyo.paper.exception",
    "children": [
      {
        "kind": "CLASS",
        "name": "com.destroystokyo.paper.exception.ServerCommandException",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "ServerCommandException(java.lang.String,java.lang.Throwable,boolean,boolean,org.bukkit.command.Command,org.bukkit.command.CommandSender,java.lang.String[])",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "arguments"
              },
              {
                "kind": "PARAMETER",
                "name": "cause"
              },
              {
                "kind": "PARAMETER",
                "name": "command"
              },
              {
                "kind": "PARAMETER",
                "name": "commandSender"
              },
              {
                "kind": "PARAMETER",
                "name": "enableSuppression"
              },
              {
                "kind": "PARAMETER",
                "name": "message"
              },
              {
                "kind": "PARAMETER",
                "name": "writableStackTrace"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "ServerCommandException(java.lang.String,java.lang.Throwable,org.bukkit.command.Command,org.bukkit.command.CommandSender,java.lang.String[])",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "arguments"
              },
              {
                "kind": "PARAMETER",
                "name": "cause"
              },
              {
                "kind": "PARAMETER",
                "name": "command"
              },
              {
                "kind": "PARAMETER",
                "name": "commandSender"
              },
              {
                "kind": "PARAMETER",
                "name": "message"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "ServerCommandException(java.lang.Throwable,org.bukkit.command.Command,org.bukkit.command.CommandSender,java.lang.String[])",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "arguments"
              },
              {
                "kind": "PARAMETER",
                "name": "cause"
              },
              {
                "kind": "PARAMETER",
                "name": "command"
              },
              {
                "kind": "PARAMETER",
                "name": "commandSender"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "arguments"
          },
          {
            "kind": "FIELD",
            "name": "command"
          },
          {
            "kind": "FIELD",
            "name": "commandSender"
          },
          {
            "kind": "METHOD",
            "name": "getArguments()",
            "comment": {
              "body": "Gets the arguments which threw the exception for the command",
              "tags": "Returns arguments of exception thrown command request.",
              "plain": "Gets the arguments which threw the exception for the command\n@return arguments of exception thrown command request"
            }
          },
          {
            "kind": "METHOD",
            "name": "getCommand()",
            "comment": {
              "body": "Gets the command which threw the exception",
              "tags": "Returns exception throwing command.",
              "plain": "Gets the command which threw the exception\n@return exception throwing command"
            }
          },
          {
            "kind": "METHOD",
            "name": "getCommandSender()",
            "comment": {
              "body": "Gets the command sender which executed the command request",
              "tags": "Returns command sender of exception thrown command request.",
              "plain": "Gets the command sender which executed the command request\n@return command sender of exception thrown command request"
            }
          }
        ],
        "comment": {
          "body": "Thrown when a command throws an exception",
          "plain": "Thrown when a command throws an exception"
        }
      },
      {
        "kind": "CLASS",
        "name": "com.destroystokyo.paper.exception.ServerEventException",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "ServerEventException(java.lang.String,java.lang.Throwable,boolean,boolean,org.bukkit.plugin.Plugin,org.bukkit.event.Listener,org.bukkit.event.Event)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cause"
              },
              {
                "kind": "PARAMETER",
                "name": "enableSuppression"
              },
              {
                "kind": "PARAMETER",
                "name": "event"
              },
              {
                "kind": "PARAMETER",
                "name": "listener"
              },
              {
                "kind": "PARAMETER",
                "name": "message"
              },
              {
                "kind": "PARAMETER",
                "name": "responsiblePlugin"
              },
              {
                "kind": "PARAMETER",
                "name": "writableStackTrace"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "ServerEventException(java.lang.String,java.lang.Throwable,org.bukkit.plugin.Plugin,org.bukkit.event.Listener,org.bukkit.event.Event)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cause"
              },
              {
                "kind": "PARAMETER",
                "name": "event"
              },
              {
                "kind": "PARAMETER",
                "name": "listener"
              },
              {
                "kind": "PARAMETER",
                "name": "message"
              },
              {
                "kind": "PARAMETER",
                "name": "responsiblePlugin"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "ServerEventException(java.lang.Throwable,org.bukkit.plugin.Plugin,org.bukkit.event.Listener,org.bukkit.event.Event)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cause"
              },
              {
                "kind": "PARAMETER",
                "name": "event"
              },
              {
                "kind": "PARAMETER",
                "name": "listener"
              },
              {
                "kind": "PARAMETER",
                "name": "responsiblePlugin"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "event"
          },
          {
            "kind": "METHOD",
            "name": "getEvent()",
            "comment": {
              "body": "Gets the event which caused the exception",
              "tags": "Returns event.",
              "plain": "Gets the event which caused the exception\n@return event"
            }
          },
          {
            "kind": "METHOD",
            "name": "getListener()",
            "comment": {
              "body": "Gets the listener which threw the exception",
              "tags": "Returns event listener.",
              "plain": "Gets the listener which threw the exception\n@return event listener"
            }
          },
          {
            "kind": "FIELD",
            "name": "listener"
          }
        ],
        "comment": {
          "body": "Exception thrown when a server event listener throws an exception",
          "plain": "Exception thrown when a server event listener throws an exception"
        }
      },
      {
        "kind": "CLASS",
        "name": "com.destroystokyo.paper.exception.ServerException",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "ServerException(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "message"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "ServerException(java.lang.String,java.lang.Throwable)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cause"
              },
              {
                "kind": "PARAMETER",
                "name": "message"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "ServerException(java.lang.String,java.lang.Throwable,boolean,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cause"
              },
              {
                "kind": "PARAMETER",
                "name": "enableSuppression"
              },
              {
                "kind": "PARAMETER",
                "name": "message"
              },
              {
                "kind": "PARAMETER",
                "name": "writableStackTrace"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "ServerException(java.lang.Throwable)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cause"
              }
            ]
          }
        ],
        "comment": {
          "body": "Wrapper exception for all exceptions that are thrown by the server.",
          "plain": "Wrapper exception for all exceptions that are thrown by the server."
        }
      },
      {
        "kind": "CLASS",
        "name": "com.destroystokyo.paper.exception.ServerInternalException",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "ServerInternalException(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "message"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "ServerInternalException(java.lang.String,java.lang.Throwable)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cause"
              },
              {
                "kind": "PARAMETER",
                "name": "message"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "ServerInternalException(java.lang.String,java.lang.Throwable,boolean,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cause"
              },
              {
                "kind": "PARAMETER",
                "name": "enableSuppression"
              },
              {
                "kind": "PARAMETER",
                "name": "message"
              },
              {
                "kind": "PARAMETER",
                "name": "writableStackTrace"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "ServerInternalException(java.lang.Throwable)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cause"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "reportInternalException(java.lang.Throwable)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cause"
              }
            ]
          }
        ],
        "comment": {
          "body": "Thrown when the internal server throws a recoverable exception.",
          "plain": "Thrown when the internal server throws a recoverable exception."
        }
      },
      {
        "kind": "CLASS",
        "name": "com.destroystokyo.paper.exception.ServerPluginEnableDisableException",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "ServerPluginEnableDisableException(java.lang.String,java.lang.Throwable,boolean,boolean,org.bukkit.plugin.Plugin)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cause"
              },
              {
                "kind": "PARAMETER",
                "name": "enableSuppression"
              },
              {
                "kind": "PARAMETER",
                "name": "message"
              },
              {
                "kind": "PARAMETER",
                "name": "responsiblePlugin"
              },
              {
                "kind": "PARAMETER",
                "name": "writableStackTrace"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "ServerPluginEnableDisableException(java.lang.String,java.lang.Throwable,org.bukkit.plugin.Plugin)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cause"
              },
              {
                "kind": "PARAMETER",
                "name": "message"
              },
              {
                "kind": "PARAMETER",
                "name": "responsiblePlugin"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "ServerPluginEnableDisableException(java.lang.Throwable,org.bukkit.plugin.Plugin)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cause"
              },
              {
                "kind": "PARAMETER",
                "name": "responsiblePlugin"
              }
            ]
          }
        ],
        "comment": {
          "body": "Thrown whenever there is an exception with any enabling or disabling of plugins.",
          "plain": "Thrown whenever there is an exception with any enabling or disabling of plugins."
        }
      },
      {
        "kind": "CLASS",
        "name": "com.destroystokyo.paper.exception.ServerPluginException",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "ServerPluginException(java.lang.String,java.lang.Throwable,boolean,boolean,org.bukkit.plugin.Plugin)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cause"
              },
              {
                "kind": "PARAMETER",
                "name": "enableSuppression"
              },
              {
                "kind": "PARAMETER",
                "name": "message"
              },
              {
                "kind": "PARAMETER",
                "name": "responsiblePlugin"
              },
              {
                "kind": "PARAMETER",
                "name": "writableStackTrace"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "ServerPluginException(java.lang.String,java.lang.Throwable,org.bukkit.plugin.Plugin)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cause"
              },
              {
                "kind": "PARAMETER",
                "name": "message"
              },
              {
                "kind": "PARAMETER",
                "name": "responsiblePlugin"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "ServerPluginException(java.lang.Throwable,org.bukkit.plugin.Plugin)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cause"
              },
              {
                "kind": "PARAMETER",
                "name": "responsiblePlugin"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getResponsiblePlugin()",
            "comment": {
              "body": "Gets the plugin which is directly responsible for the exception being thrown",
              "tags": "Returns plugin which is responsible for the exception throw.",
              "plain": "Gets the plugin which is directly responsible for the exception being thrown\n@return plugin which is responsible for the exception throw"
            }
          },
          {
            "kind": "FIELD",
            "name": "responsiblePlugin"
          }
        ],
        "comment": {
          "body": "Wrapper exception for all cases to which a plugin can be immediately blamed for",
          "plain": "Wrapper exception for all cases to which a plugin can be immediately blamed for"
        }
      },
      {
        "kind": "CLASS",
        "name": "com.destroystokyo.paper.exception.ServerPluginMessageException",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "ServerPluginMessageException(java.lang.String,java.lang.Throwable,boolean,boolean,org.bukkit.plugin.Plugin,org.bukkit.entity.Player,java.lang.String,byte[])",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cause"
              },
              {
                "kind": "PARAMETER",
                "name": "channel"
              },
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "enableSuppression"
              },
              {
                "kind": "PARAMETER",
                "name": "message"
              },
              {
                "kind": "PARAMETER",
                "name": "player"
              },
              {
                "kind": "PARAMETER",
                "name": "responsiblePlugin"
              },
              {
                "kind": "PARAMETER",
                "name": "writableStackTrace"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "ServerPluginMessageException(java.lang.String,java.lang.Throwable,org.bukkit.plugin.Plugin,org.bukkit.entity.Player,java.lang.String,byte[])",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cause"
              },
              {
                "kind": "PARAMETER",
                "name": "channel"
              },
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "message"
              },
              {
                "kind": "PARAMETER",
                "name": "player"
              },
              {
                "kind": "PARAMETER",
                "name": "responsiblePlugin"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "ServerPluginMessageException(java.lang.Throwable,org.bukkit.plugin.Plugin,org.bukkit.entity.Player,java.lang.String,byte[])",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cause"
              },
              {
                "kind": "PARAMETER",
                "name": "channel"
              },
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "player"
              },
              {
                "kind": "PARAMETER",
                "name": "responsiblePlugin"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "channel"
          },
          {
            "kind": "FIELD",
            "name": "data"
          },
          {
            "kind": "METHOD",
            "name": "getChannel()",
            "comment": {
              "body": "Gets the channel to which the error occurred from recieving data from",
              "tags": "Returns exception channel.",
              "plain": "Gets the channel to which the error occurred from recieving data from\n@return exception channel"
            }
          },
          {
            "kind": "METHOD",
            "name": "getData()",
            "comment": {
              "body": "Gets the data to which the error occurred from",
              "tags": "Returns exception data.",
              "plain": "Gets the data to which the error occurred from\n@return exception data"
            }
          },
          {
            "kind": "METHOD",
            "name": "getPlayer()",
            "comment": {
              "body": "Gets the player which the plugin message causing the exception originated from",
              "tags": "Returns exception player.",
              "plain": "Gets the player which the plugin message causing the exception originated from\n@return exception player"
            }
          },
          {
            "kind": "FIELD",
            "name": "player"
          }
        ],
        "comment": {
          "body": "Thrown when an incoming plugin message channel throws an exception",
          "plain": "Thrown when an incoming plugin message channel throws an exception"
        }
      },
      {
        "kind": "CLASS",
        "name": "com.destroystokyo.paper.exception.ServerSchedulerException",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "ServerSchedulerException(java.lang.String,java.lang.Throwable,boolean,boolean,org.bukkit.scheduler.BukkitTask)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cause"
              },
              {
                "kind": "PARAMETER",
                "name": "enableSuppression"
              },
              {
                "kind": "PARAMETER",
                "name": "message"
              },
              {
                "kind": "PARAMETER",
                "name": "task"
              },
              {
                "kind": "PARAMETER",
                "name": "writableStackTrace"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "ServerSchedulerException(java.lang.String,java.lang.Throwable,org.bukkit.scheduler.BukkitTask)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cause"
              },
              {
                "kind": "PARAMETER",
                "name": "message"
              },
              {
                "kind": "PARAMETER",
                "name": "task"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "ServerSchedulerException(java.lang.Throwable,org.bukkit.scheduler.BukkitTask)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cause"
              },
              {
                "kind": "PARAMETER",
                "name": "task"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getTask()",
            "comment": {
              "body": "Gets the task which threw the exception",
              "tags": "Returns exception throwing task.",
              "plain": "Gets the task which threw the exception\n@return exception throwing task"
            }
          },
          {
            "kind": "FIELD",
            "name": "task"
          }
        ],
        "comment": {
          "body": "Thrown when a plugin\u0027s scheduler fails with an exception",
          "plain": "Thrown when a plugin\u0027s scheduler fails with an exception"
        }
      },
      {
        "kind": "CLASS",
        "name": "com.destroystokyo.paper.exception.ServerTabCompleteException",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "ServerTabCompleteException(java.lang.String,java.lang.Throwable,boolean,boolean,org.bukkit.command.Command,org.bukkit.command.CommandSender,java.lang.String[])",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "arguments"
              },
              {
                "kind": "PARAMETER",
                "name": "cause"
              },
              {
                "kind": "PARAMETER",
                "name": "command"
              },
              {
                "kind": "PARAMETER",
                "name": "commandSender"
              },
              {
                "kind": "PARAMETER",
                "name": "enableSuppression"
              },
              {
                "kind": "PARAMETER",
                "name": "message"
              },
              {
                "kind": "PARAMETER",
                "name": "writableStackTrace"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "ServerTabCompleteException(java.lang.String,java.lang.Throwable,org.bukkit.command.Command,org.bukkit.command.CommandSender,java.lang.String[])",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "arguments"
              },
              {
                "kind": "PARAMETER",
                "name": "cause"
              },
              {
                "kind": "PARAMETER",
                "name": "command"
              },
              {
                "kind": "PARAMETER",
                "name": "commandSender"
              },
              {
                "kind": "PARAMETER",
                "name": "message"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "ServerTabCompleteException(java.lang.Throwable,org.bukkit.command.Command,org.bukkit.command.CommandSender,java.lang.String[])",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "arguments"
              },
              {
                "kind": "PARAMETER",
                "name": "cause"
              },
              {
                "kind": "PARAMETER",
                "name": "command"
              },
              {
                "kind": "PARAMETER",
                "name": "commandSender"
              }
            ]
          }
        ],
        "comment": {
          "body": "Called when a tab-complete request throws an exception",
          "plain": "Called when a tab-complete request throws an exception"
        }
      }
    ]
  },
  {
    "kind": "PACKAGE",
    "name": "com.destroystokyo.paper.inventory.meta",
    "children": [
      {
        "kind": "INTERFACE",
        "name": "com.destroystokyo.paper.inventory.meta.ArmorStandMeta",
        "children": [
          {
            "kind": "METHOD",
            "name": "hasNoBasePlate()",
            "comment": {
              "body": "Gets whether this ArmorStand should have no base plate when spawned",
              "tags": "Returns true if it will not have a base plate.",
              "plain": "Gets whether this ArmorStand should have no base plate when spawned\n@return true if it will not have a base plate"
            }
          },
          {
            "kind": "METHOD",
            "name": "isInvisible()",
            "comment": {
              "body": "Gets whether the ArmorStand should be invisible when spawned",
              "tags": "Returns true if this should be invisible.",
              "plain": "Gets whether the ArmorStand should be invisible when spawned\n@return true if this should be invisible"
            }
          },
          {
            "kind": "METHOD",
            "name": "isMarker()",
            "comment": {
              "body": "Gets whether this ArmorStand will be a marker when spawned\n The exact details of this flag are an implementation detail",
              "tags": "Returns true if it will be a marker.",
              "plain": "Gets whether this ArmorStand will be a marker when spawned\n The exact details of this flag are an implementation detail\n@return true if it will be a marker"
            }
          },
          {
            "kind": "METHOD",
            "name": "isSmall()",
            "comment": {
              "body": "Gets whether this ArmorStand will be small when spawned",
              "tags": "Returns true if it will be small.",
              "plain": "Gets whether this ArmorStand will be small when spawned\n@return true if it will be small"
            }
          },
          {
            "kind": "METHOD",
            "name": "setInvisible(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "invisible"
              }
            ],
            "comment": {
              "body": "Sets that this ArmorStand should be invisible when spawned",
              "plain": "Sets that this ArmorStand should be invisible when spawned\n@param invisible true if set invisible"
            }
          },
          {
            "kind": "METHOD",
            "name": "setMarker(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "marker"
              }
            ],
            "comment": {
              "body": "Sets that this ArmorStand should be a marker when spawned\n The exact details of this flag are an implementation detail",
              "plain": "Sets that this ArmorStand should be a marker when spawned\n The exact details of this flag are an implementation detail\n@param marker true if a marker"
            }
          },
          {
            "kind": "METHOD",
            "name": "setNoBasePlate(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "noBasePlate"
              }
            ],
            "comment": {
              "body": "Sets that this ArmorStand should have no base plate when spawned",
              "plain": "Sets that this ArmorStand should have no base plate when spawned\n@param noBasePlate true if no base plate"
            }
          },
          {
            "kind": "METHOD",
            "name": "setShowArms(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "showArms"
              }
            ],
            "comment": {
              "body": "Sets that this ArmorStand should show arms when spawned",
              "plain": "Sets that this ArmorStand should show arms when spawned\n@param showArms true if show arms"
            }
          },
          {
            "kind": "METHOD",
            "name": "setSmall(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "small"
              }
            ],
            "comment": {
              "body": "Sets that this ArmorStand should be small when spawned",
              "plain": "Sets that this ArmorStand should be small when spawned\n@param small true if small"
            }
          },
          {
            "kind": "METHOD",
            "name": "shouldShowArms()",
            "comment": {
              "body": "Gets whether this ArmorStand should show arms when spawned",
              "tags": "Returns true if it will show arms.",
              "plain": "Gets whether this ArmorStand should show arms when spawned\n@return true if it will show arms"
            }
          }
        ]
      }
    ]
  },
  {
    "kind": "PACKAGE",
    "name": "com.destroystokyo.paper.loottable",
    "children": [
      {
        "kind": "INTERFACE",
        "name": "com.destroystokyo.paper.loottable.Lootable",
        "children": [
          {
            "kind": "METHOD",
            "name": "clearLootTable()",
            "comment": {
              "body": "Clears the associated Loot Table to this object",
              "plain": "Clears the associated Loot Table to this object"
            }
          },
          {
            "kind": "METHOD",
            "name": "getLootTableName()",
            "comment": {
              "body": "Gets the name of the Loot Table to be used in the World Folder",
              "tags": "Returns The name, or null if no loot table exists.",
              "plain": "Gets the name of the Loot Table to be used in the World Folder\n@return The name, or null if no loot table exists"
            }
          },
          {
            "kind": "METHOD",
            "name": "getLootTableSeed()",
            "comment": {
              "body": "Gets the current seed associated to the Loot Table on this object",
              "tags": "Returns The seed, or 0 for random.",
              "plain": "Gets the current seed associated to the Loot Table on this object\n@return The seed, or 0 for random"
            }
          },
          {
            "kind": "METHOD",
            "name": "hasLootTable()",
            "comment": {
              "body": "Returns whether or not this object has a Loot Table",
              "tags": "Returns Has a loot table.",
              "plain": "Returns whether or not this object has a Loot Table\n@return Has a loot table"
            }
          },
          {
            "kind": "METHOD",
            "name": "setLootTable(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ],
            "comment": {
              "body": "Sets the name of the Loot Table to be used in the World Folder\n Will use a random seed (0)",
              "tags": "Returns The previous Loot Table before the change.",
              "plain": "Sets the name of the Loot Table to be used in the World Folder\n Will use a random seed (0)\n@param name name in either foo or minecraft:foo format\n@return The previous Loot Table before the change"
            }
          },
          {
            "kind": "METHOD",
            "name": "setLootTable(java.lang.String,long)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              },
              {
                "kind": "PARAMETER",
                "name": "seed"
              }
            ],
            "comment": {
              "body": "Sets the name of the Loot Table to be used in the World Folder\n Uses supplied Seed",
              "tags": "Returns The previous Loot Table before the change.",
              "plain": "Sets the name of the Loot Table to be used in the World Folder\n Uses supplied Seed\n@param name name in either foo or minecraft:foo format\n@param seed seed for the loot table. If 0, seed will be random\n@return The previous Loot Table before the change"
            }
          },
          {
            "kind": "METHOD",
            "name": "setLootTableSeed(long)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "seed"
              }
            ],
            "comment": {
              "body": "Changes the current seed associated with the Loot Table on this object.\n\n The seed will have no affect if this object does not have a Loot Table\n associated with it.",
              "tags": "Returns The previous seed.",
              "plain": "Changes the current seed associated with the Loot Table on this object.\n\n The seed will have no affect if this object does not have a Loot Table\n associated with it.\n@throws IllegalStateException If called when this object does not have a loot table\n@param seed The seed to use, or 0 for random\n@return The previous seed"
            }
          }
        ],
        "comment": {
          "body": "Defines an object that has a Loot Table and seed associated with it.\n\n How the Loot Table and seed are used may vary based on Minecraft Versions\n and what type of object is using the Loot Table",
          "plain": "Defines an object that has a Loot Table and seed associated with it.\n\n How the Loot Table and seed are used may vary based on Minecraft Versions\n and what type of object is using the Loot Table"
        }
      },
      {
        "kind": "INTERFACE",
        "name": "com.destroystokyo.paper.loottable.LootableBlockInventory",
        "children": [
          {
            "kind": "METHOD",
            "name": "getBlock()",
            "comment": {
              "body": "Gets the block that is lootable",
              "tags": "Returns The Block.",
              "plain": "Gets the block that is lootable\n@return The Block"
            }
          }
        ]
      },
      {
        "kind": "INTERFACE",
        "name": "com.destroystokyo.paper.loottable.LootableEntityInventory",
        "children": [
          {
            "kind": "METHOD",
            "name": "getEntity()",
            "comment": {
              "body": "Gets the entity that is lootable",
              "tags": "Returns The Entity.",
              "plain": "Gets the entity that is lootable\n@return The Entity"
            }
          }
        ]
      },
      {
        "kind": "INTERFACE",
        "name": "com.destroystokyo.paper.loottable.LootableInventory",
        "children": [
          {
            "kind": "METHOD",
            "name": "getLastFilled()",
            "comment": {
              "body": "Gets the timestamp in milliseconds that the Lootable object was last refilled",
              "tags": "Returns -1 if it was never refilled, or timestamp in milliseconds.",
              "plain": "Gets the timestamp in milliseconds that the Lootable object was last refilled\n@return -1 if it was never refilled, or timestamp in milliseconds"
            }
          },
          {
            "kind": "METHOD",
            "name": "getLastLooted(java.util.UUID)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "player"
              }
            ],
            "comment": {
              "body": "Gets the timestamp, in milliseconds, of when the player last looted this object",
              "tags": "Returns Timestamp last looted, or null if player has not looted this object.",
              "plain": "Gets the timestamp, in milliseconds, of when the player last looted this object\n@param player The player to check\n@return Timestamp last looted, or null if player has not looted this object"
            }
          },
          {
            "kind": "METHOD",
            "name": "getLastLooted(org.bukkit.entity.Player)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "player"
              }
            ],
            "comment": {
              "body": "Gets the timestamp, in milliseconds, of when the player last looted this object",
              "tags": "Returns Timestamp last looted, or null if player has not looted this object.",
              "plain": "Gets the timestamp, in milliseconds, of when the player last looted this object\n@param player The player to check\n@return Timestamp last looted, or null if player has not looted this object"
            }
          },
          {
            "kind": "METHOD",
            "name": "getNextRefill()",
            "comment": {
              "body": "Gets the timestamp in milliseconds that the Lootable object will refill",
              "tags": "Returns -1 if it is not scheduled for refill, or timestamp in milliseconds.",
              "plain": "Gets the timestamp in milliseconds that the Lootable object will refill\n@return -1 if it is not scheduled for refill, or timestamp in milliseconds"
            }
          },
          {
            "kind": "METHOD",
            "name": "hasBeenFilled()",
            "comment": {
              "body": "Whether or not this object has ever been filled",
              "tags": "Returns Has ever been filled.",
              "plain": "Whether or not this object has ever been filled\n@return Has ever been filled"
            }
          },
          {
            "kind": "METHOD",
            "name": "hasPendingRefill()",
            "comment": {
              "body": "Returns Whether or not this object has been filled and now has a pending refill",
              "tags": "Returns Has pending refill.",
              "plain": "Returns Whether or not this object has been filled and now has a pending refill\n@return Has pending refill"
            }
          },
          {
            "kind": "METHOD",
            "name": "hasPlayerLooted(java.util.UUID)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "player"
              }
            ],
            "comment": {
              "body": "Has this player ever looted this block",
              "tags": "Returns Whether or not this player has looted this block.",
              "plain": "Has this player ever looted this block\n@param player The player to check\n@return Whether or not this player has looted this block"
            }
          },
          {
            "kind": "METHOD",
            "name": "hasPlayerLooted(org.bukkit.entity.Player)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "player"
              }
            ],
            "comment": {
              "body": "Has this player ever looted this block",
              "tags": "Returns Whether or not this player has looted this block.",
              "plain": "Has this player ever looted this block\n@param player The player to check\n@return Whether or not this player has looted this block"
            }
          },
          {
            "kind": "METHOD",
            "name": "isRefillEnabled()",
            "comment": {
              "body": "Server owners have to enable whether or not an object in a world should refill",
              "tags": "Returns If the world this inventory is currently in has Replenishable Lootables enabled.",
              "plain": "Server owners have to enable whether or not an object in a world should refill\n@return If the world this inventory is currently in has Replenishable Lootables enabled"
            }
          },
          {
            "kind": "METHOD",
            "name": "setHasPlayerLooted(java.util.UUID,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "looted"
              },
              {
                "kind": "PARAMETER",
                "name": "player"
              }
            ],
            "comment": {
              "body": "Change the state of whether or not a player has looted this block",
              "tags": "Returns The previous state of whether the player had looted this or not.",
              "plain": "Change the state of whether or not a player has looted this block\n@param player The player to change state for\n@param looted true to add player to looted list, false to remove\n@return The previous state of whether the player had looted this or not"
            }
          },
          {
            "kind": "METHOD",
            "name": "setHasPlayerLooted(org.bukkit.entity.Player,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "looted"
              },
              {
                "kind": "PARAMETER",
                "name": "player"
              }
            ],
            "comment": {
              "body": "Change the state of whether or not a player has looted this block",
              "tags": "Returns The previous state of whether the player had looted this or not.",
              "plain": "Change the state of whether or not a player has looted this block\n@param player The player to change state for\n@param looted true to add player to looted list, false to remove\n@return The previous state of whether the player had looted this or not"
            }
          },
          {
            "kind": "METHOD",
            "name": "setNextRefill(long)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "refillAt"
              }
            ],
            "comment": {
              "body": "Sets the timestamp in milliseconds of the next refill for this object",
              "tags": "Returns The previous scheduled time to refill, or -1 if was not scheduled.",
              "plain": "Sets the timestamp in milliseconds of the next refill for this object\n@param refillAt timestamp in milliseconds. -1 to clear next refill\n@return The previous scheduled time to refill, or -1 if was not scheduled"
            }
          }
        ],
        "comment": {
          "body": "Represents an Inventory that contains a Loot Table associated to it that will\n automatically fill on first open.\n\n A new feature and API is provided to support automatically refreshing the contents\n of the inventory based on that Loot Table after a configurable amount of time has passed.\n\n The behavior of how the Inventory is filled based on the loot table may vary based\n on Minecraft versions and the Loot Table feature.",
          "plain": "Represents an Inventory that contains a Loot Table associated to it that will\n automatically fill on first open.\n\n A new feature and API is provided to support automatically refreshing the contents\n of the inventory based on that Loot Table after a configurable amount of time has passed.\n\n The behavior of how the Inventory is filled based on the loot table may vary based\n on Minecraft versions and the Loot Table feature."
        }
      },
      {
        "kind": "CLASS",
        "name": "com.destroystokyo.paper.loottable.LootableInventoryReplenishEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "LootableInventoryReplenishEvent(org.bukkit.entity.Player,com.destroystokyo.paper.loottable.LootableInventory)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "inventory"
              },
              {
                "kind": "PARAMETER",
                "name": "player"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "cancelled"
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getInventory()"
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "FIELD",
            "name": "inventory"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          }
        ]
      }
    ]
  },
  {
    "kind": "PACKAGE",
    "name": "com.destroystokyo.paper.network",
    "children": [
      {
        "kind": "INTERFACE",
        "name": "com.destroystokyo.paper.network.NetworkClient",
        "children": [
          {
            "kind": "METHOD",
            "name": "getAddress()",
            "comment": {
              "body": "Returns the socket address of the client.",
              "tags": "Returns The client\u0027s socket address.",
              "plain": "Returns the socket address of the client.\n@return The client\u0027s socket address"
            }
          },
          {
            "kind": "METHOD",
            "name": "getProtocolVersion()",
            "comment": {
              "body": "Returns the protocol version of the client.",
              "tags": "Returns The client\u0027s protocol version, or \u003ccode\u003e-1\u003c/code\u003e if unknown.",
              "plain": "Returns the protocol version of the client.\n@return The client\u0027s protocol version, or {@code -1} if unknown\n@see \u003ca href\u003d\"http://wiki.vg/Protocol_version_numbers\"\u003eList of protocol\n     version numbers\u003c/a\u003e"
            }
          },
          {
            "kind": "METHOD",
            "name": "getVirtualHost()",
            "comment": {
              "body": "Returns the virtual host the client is connected to.\n\n \u003cp\u003eThe virtual host refers to the hostname/port the client used to\n connect to the server.\u003c/p\u003e",
              "tags": "Returns The client\u0027s virtual host, or \u003ccode\u003enull\u003c/code\u003e if unknown.",
              "plain": "Returns the virtual host the client is connected to.\n\n \u003cp\u003eThe virtual host refers to the hostname/port the client used to\n connect to the server.\u003c/p\u003e\n@return The client\u0027s virtual host, or {@code null} if unknown"
            }
          }
        ],
        "comment": {
          "body": "Represents a client connected to the server.",
          "plain": "Represents a client connected to the server."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "com.destroystokyo.paper.network.StatusClient",
        "children": [
          {
            "kind": "METHOD",
            "name": "isLegacy()",
            "comment": {
              "body": "Returns whether the client is using an older version that doesn\u0027t\n support all of the features in \u003ca href\u003d\"com/destroystokyo/paper/event/server/PaperServerListPingEvent.html\" title\u003d\"class in com.destroystokyo.paper.event.server\"\u003e\u003ccode\u003ePaperServerListPingEvent\u003c/code\u003e\u003c/a\u003e.\n\n \u003cp\u003eFor Vanilla, this returns \u003ccode\u003etrue\u003c/code\u003e for all clients older than 1.7.\u003c/p\u003e",
              "tags": "Returns \u003ccode\u003etrue\u003c/code\u003e if the client is using legacy ping.",
              "plain": "Returns whether the client is using an older version that doesn\u0027t\n support all of the features in {@link PaperServerListPingEvent}.\n\n \u003cp\u003eFor Vanilla, this returns {@code true} for all clients older than 1.7.\u003c/p\u003e\n@return {@code true} if the client is using legacy ping"
            }
          }
        ],
        "comment": {
          "body": "Represents a client requesting the current status from the server (e.g. from\n the server list).",
          "plain": "Represents a client requesting the current status from the server (e.g. from\n the server list).\n@see PaperServerListPingEvent"
        }
      }
    ]
  },
  {
    "kind": "PACKAGE",
    "name": "com.destroystokyo.paper.profile",
    "children": [
      {
        "kind": "INTERFACE",
        "name": "com.destroystokyo.paper.profile.PlayerProfile",
        "children": [
          {
            "kind": "METHOD",
            "name": "clearProperties()",
            "comment": {
              "body": "Clears all properties on this profile",
              "plain": "Clears all properties on this profile"
            }
          },
          {
            "kind": "METHOD",
            "name": "complete()",
            "comment": {
              "body": "If this profile is not complete, then make the API call to complete it.\n This is a blocking operation and should be done asynchronously.\n\n This will also complete textures. If you do not want to load textures, use {\u003ca href\u003d\"com/destroystokyo/paper/profile/PlayerProfile.html#complete(boolean)\"\u003e\u003ccode\u003ePlayerProfile.complete(boolean)\u003c/code\u003e\u003c/a\u003e}",
              "tags": "Returns If the profile is now complete (has UUID and Name) (if you get rate limited, this operation may fail).",
              "plain": "If this profile is not complete, then make the API call to complete it.\n This is a blocking operation and should be done asynchronously.\n\n This will also complete textures. If you do not want to load textures, use {{@link #complete(boolean)}}\n@return If the profile is now complete (has UUID and Name) (if you get rate limited, this operation may fail)"
            }
          },
          {
            "kind": "METHOD",
            "name": "complete(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "textures"
              }
            ],
            "comment": {
              "body": "If this profile is not complete, then make the API call to complete it.\n This is a blocking operation and should be done asynchronously.\n\n Optionally will also fill textures.",
              "tags": "Returns If the profile is now complete (has UUID and Name) (if you get rate limited, this operation may fail).",
              "plain": "If this profile is not complete, then make the API call to complete it.\n This is a blocking operation and should be done asynchronously.\n\n Optionally will also fill textures.\n@param textures controls if we should fill the profile with texture properties\n@return If the profile is now complete (has UUID and Name) (if you get rate limited, this operation may fail)"
            }
          },
          {
            "kind": "METHOD",
            "name": "completeFromCache()",
            "comment": {
              "body": "Like \u003ca href\u003d\"com/destroystokyo/paper/profile/PlayerProfile.html#complete(boolean)\"\u003e\u003ccode\u003ePlayerProfile.complete(boolean)\u003c/code\u003e\u003c/a\u003e but will try only from cache, and not make network calls\n Does not account for textures.",
              "tags": "Returns If the profile is now complete (has UUID and Name).",
              "plain": "Like {@link #complete(boolean)} but will try only from cache, and not make network calls\n Does not account for textures.\n@return If the profile is now complete (has UUID and Name)"
            }
          },
          {
            "kind": "METHOD",
            "name": "getGameProfile()",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "tags": "Returns the GameProfile for this PlayerProfile.",
              "plain": "@deprecated Will be removed in 1.13\n@return the GameProfile for this PlayerProfile"
            }
          },
          {
            "kind": "METHOD",
            "name": "getId()",
            "comment": {
              "tags": "Returns The players unique identifier, if set.",
              "plain": "@return The players unique identifier, if set"
            }
          },
          {
            "kind": "METHOD",
            "name": "getName()",
            "comment": {
              "tags": "Returns The players name, if set.",
              "plain": "@return The players name, if set"
            }
          },
          {
            "kind": "METHOD",
            "name": "getProperties()",
            "comment": {
              "tags": "Returns A Mutable set of this players properties, such as textures.\n Values specified here are subject to implementation details..",
              "plain": "@return A Mutable set of this players properties, such as textures.\n Values specified here are subject to implementation details."
            }
          },
          {
            "kind": "METHOD",
            "name": "hasProperty(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "property"
              }
            ],
            "comment": {
              "body": "Check if the Profile has the specified property",
              "tags": "Returns If the property is set.",
              "plain": "Check if the Profile has the specified property\n@param property Property name to check\n@return If the property is set"
            }
          },
          {
            "kind": "METHOD",
            "name": "hasTextures()",
            "comment": {
              "body": "Whether or not this Profile has textures associated to it",
              "tags": "Returns If has a textures property.",
              "plain": "Whether or not this Profile has textures associated to it\n@return If has a textures property"
            }
          },
          {
            "kind": "METHOD",
            "name": "isComplete()",
            "comment": {
              "tags": "Returns If the profile is now complete (has UUID and Name).",
              "plain": "@return If the profile is now complete (has UUID and Name)"
            }
          },
          {
            "kind": "METHOD",
            "name": "removeProperties(java.util.Collection\u003ccom.destroystokyo.paper.profile.ProfileProperty\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "properties"
              }
            ],
            "comment": {
              "body": "Removes all properties in the collection",
              "tags": "Returns If any property was removed.",
              "plain": "Removes all properties in the collection\n@param properties The properties to remove\n@return If any property was removed"
            }
          },
          {
            "kind": "METHOD",
            "name": "removeProperty(com.destroystokyo.paper.profile.ProfileProperty)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "property"
              }
            ],
            "comment": {
              "body": "Removes a specific property from this profile",
              "tags": "Returns If a property was removed.",
              "plain": "Removes a specific property from this profile\n@param property The property to remove\n@return If a property was removed"
            }
          },
          {
            "kind": "METHOD",
            "name": "removeProperty(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "property"
              }
            ],
            "comment": {
              "body": "Removes a specific property from this profile",
              "tags": "Returns If a property was removed.",
              "plain": "Removes a specific property from this profile\n@param property The property to remove\n@return If a property was removed"
            }
          },
          {
            "kind": "METHOD",
            "name": "setId(java.util.UUID)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "uuid"
              }
            ],
            "comment": {
              "body": "Sets this profiles UUID",
              "tags": "Returns The previous UUID.",
              "plain": "Sets this profiles UUID\n@param uuid The new UUID\n@return The previous UUID"
            }
          },
          {
            "kind": "METHOD",
            "name": "setName(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ],
            "comment": {
              "body": "Sets this profiles Name",
              "tags": "Returns The previous Name.",
              "plain": "Sets this profiles Name\n@param name The new Name\n@return The previous Name"
            }
          },
          {
            "kind": "METHOD",
            "name": "setProperties(java.util.Collection\u003ccom.destroystokyo.paper.profile.ProfileProperty\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "properties"
              }
            ],
            "comment": {
              "body": "Sets multiple properties. If any of the set properties already exist, it will be replaced",
              "plain": "Sets multiple properties. If any of the set properties already exist, it will be replaced\n@param properties The properties to set"
            }
          },
          {
            "kind": "METHOD",
            "name": "setProperty(com.destroystokyo.paper.profile.ProfileProperty)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "property"
              }
            ],
            "comment": {
              "body": "Sets a property. If the property already exists, the previous one will be replaced",
              "plain": "Sets a property. If the property already exists, the previous one will be replaced\n@param property Property to set."
            }
          }
        ],
        "comment": {
          "body": "Represents a players profile for the game, such as UUID, Name, and textures.",
          "plain": "Represents a players profile for the game, such as UUID, Name, and textures."
        }
      },
      {
        "kind": "CLASS",
        "name": "com.destroystokyo.paper.profile.ProfileProperty",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "ProfileProperty(java.lang.String,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              },
              {
                "kind": "PARAMETER",
                "name": "value"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "ProfileProperty(java.lang.String,java.lang.String,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              },
              {
                "kind": "PARAMETER",
                "name": "signature"
              },
              {
                "kind": "PARAMETER",
                "name": "value"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "equals(java.lang.Object)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "o"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getName()",
            "comment": {
              "tags": "Returns The property name, ie \"textures\".",
              "plain": "@return The property name, ie \"textures\""
            }
          },
          {
            "kind": "METHOD",
            "name": "getSignature()",
            "comment": {
              "tags": "Returns A signature from Mojang for signed properties.",
              "plain": "@return A signature from Mojang for signed properties"
            }
          },
          {
            "kind": "METHOD",
            "name": "getValue()",
            "comment": {
              "tags": "Returns The property value, likely to be base64 encoded.",
              "plain": "@return The property value, likely to be base64 encoded"
            }
          },
          {
            "kind": "METHOD",
            "name": "hashCode()"
          },
          {
            "kind": "METHOD",
            "name": "isSigned()",
            "comment": {
              "tags": "Returns If this property has a signature or not.",
              "plain": "@return If this property has a signature or not"
            }
          },
          {
            "kind": "FIELD",
            "name": "name"
          },
          {
            "kind": "FIELD",
            "name": "signature"
          },
          {
            "kind": "FIELD",
            "name": "value"
          }
        ],
        "comment": {
          "body": "Represents a property on a \u003ca href\u003d\"com/destroystokyo/paper/profile/PlayerProfile.html\" title\u003d\"interface in com.destroystokyo.paper.profile\"\u003e\u003ccode\u003ePlayerProfile\u003c/code\u003e\u003c/a\u003e",
          "plain": "Represents a property on a {@link PlayerProfile}"
        }
      }
    ]
  },
  {
    "kind": "PACKAGE",
    "name": "com.destroystokyo.paper.utils",
    "children": [
      {
        "kind": "CLASS",
        "name": "com.destroystokyo.paper.utils.CachedSizeConcurrentLinkedQueue",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "CachedSizeConcurrentLinkedQueue()"
          },
          {
            "kind": "TYPE_PARAMETER",
            "name": "E"
          },
          {
            "kind": "METHOD",
            "name": "add(E)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "e"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "cachedSize"
          },
          {
            "kind": "METHOD",
            "name": "poll()"
          },
          {
            "kind": "METHOD",
            "name": "size()"
          }
        ]
      },
      {
        "kind": "CLASS",
        "name": "com.destroystokyo.paper.utils.PaperPluginLogger",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PaperPluginLogger(org.bukkit.plugin.PluginDescriptionFile)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "description"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getLogger(org.bukkit.plugin.PluginDescriptionFile)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "description"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "setParent(java.util.logging.Logger)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "parent"
              }
            ]
          }
        ],
        "comment": {
          "body": "Prevents plugins (e.g. Essentials) from changing the parent of the plugin logger.",
          "plain": "Prevents plugins (e.g. Essentials) from changing the parent of the plugin logger."
        }
      },
      {
        "kind": "CLASS",
        "name": "com.destroystokyo.paper.utils.UnsafeUtils",
        "children": [
          {
            "kind": "FIELD",
            "name": "UNSAFE"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "UnsafeUtils()"
          },
          {
            "kind": "METHOD",
            "name": "getUnsafe()"
          },
          {
            "kind": "METHOD",
            "name": "isUnsafeSupported()"
          }
        ]
      }
    ]
  },
  {
    "kind": "PACKAGE",
    "name": "org.bukkit",
    "children": [
      {
        "kind": "ENUM",
        "name": "org.bukkit.Achievement",
        "children": [
          {
            "kind": "ENUM_CONSTANT",
            "name": "ACQUIRE_IRON"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Achievement()"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Achievement(org.bukkit.Achievement)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "parent"
              }
            ]
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BAKE_CAKE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BOOKCASE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BREED_COW"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BREW_POTION"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BUILD_BETTER_PICKAXE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BUILD_FURNACE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BUILD_HOE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BUILD_PICKAXE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BUILD_SWORD"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BUILD_WORKBENCH"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "COOK_FISH"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "DIAMONDS_TO_YOU"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENCHANTMENTS"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "END_PORTAL"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "EXPLORE_ALL_BIOMES"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "FLY_PIG"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "FULL_BEACON"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "GET_BLAZE_ROD"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "GET_DIAMONDS"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "GHAST_RETURN"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "KILL_COW"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "KILL_ENEMY"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "KILL_WITHER"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "MAKE_BREAD"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "MINE_WOOD"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "NETHER_PORTAL"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ON_A_RAIL"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "OPEN_INVENTORY"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "OVERKILL"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "OVERPOWERED"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SNIPE_SKELETON"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SPAWN_WITHER"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "THE_END"
          },
          {
            "kind": "METHOD",
            "name": "getParent()",
            "comment": {
              "body": "Returns the parent achievement of this achievement, or null if none.",
              "tags": "Returns the parent achievement or null.",
              "plain": "Returns the parent achievement of this achievement, or null if none.\n@return the parent achievement or null"
            }
          },
          {
            "kind": "METHOD",
            "name": "hasParent()",
            "comment": {
              "body": "Returns whether or not this achievement has a parent achievement.",
              "tags": "Returns whether the achievement has a parent achievement.",
              "plain": "Returns whether or not this achievement has a parent achievement.\n@return whether the achievement has a parent achievement"
            }
          },
          {
            "kind": "FIELD",
            "name": "parent"
          },
          {
            "kind": "METHOD",
            "name": "valueOf(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "values()"
          }
        ],
        "deprecated": {
          "deprecated": "true"
        },
        "comment": {
          "body": "Represents an achievement, which may be given to players.",
          "plain": "Represents an achievement, which may be given to players.\n@deprecated future versions of Minecraft do not have achievements"
        }
      },
      {
        "kind": "ENUM",
        "name": "org.bukkit.Art",
        "children": [
          {
            "kind": "ENUM_CONSTANT",
            "name": "ALBAN"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "AZTEC"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "AZTEC2"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Art(int,int,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "height"
              },
              {
                "kind": "PARAMETER",
                "name": "id"
              },
              {
                "kind": "PARAMETER",
                "name": "width"
              }
            ]
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BOMB"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BURNINGSKULL"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BUST"
          },
          {
            "kind": "FIELD",
            "name": "BY_ID"
          },
          {
            "kind": "FIELD",
            "name": "BY_NAME"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "COURBET"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "CREEBET"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "DONKEYKONG"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "FIGHTERS"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "GRAHAM"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "KEBAB"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "MATCH"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "PIGSCENE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "PLANT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "POINTER"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "POOL"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SEA"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SKELETON"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SKULL_AND_ROSES"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "STAGE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SUNSET"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "VOID"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "WANDERER"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "WASTELAND"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "WITHER"
          },
          {
            "kind": "METHOD",
            "name": "getBlockHeight()",
            "comment": {
              "body": "Gets the height of the painting, in blocks",
              "tags": "Returns The height of the painting, in blocks.",
              "plain": "Gets the height of the painting, in blocks\n@return The height of the painting, in blocks"
            }
          },
          {
            "kind": "METHOD",
            "name": "getBlockWidth()",
            "comment": {
              "body": "Gets the width of the painting, in blocks",
              "tags": "Returns The width of the painting, in blocks.",
              "plain": "Gets the width of the painting, in blocks\n@return The width of the painting, in blocks"
            }
          },
          {
            "kind": "METHOD",
            "name": "getById(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "id"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Get a painting by its numeric ID",
              "tags": "Returns The painting.",
              "plain": "Get a painting by its numeric ID\n@param id The ID\n@return The painting\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "getByName(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ],
            "comment": {
              "body": "Get a painting by its unique name\n \u003cp\u003e\n This ignores underscores and capitalization",
              "tags": "Returns The painting.",
              "plain": "Get a painting by its unique name\n \u003cp\u003e\n This ignores underscores and capitalization\n@param name The name\n@return The painting"
            }
          },
          {
            "kind": "METHOD",
            "name": "getId()",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Get the ID of this painting.",
              "tags": "Returns The ID of this painting.",
              "plain": "Get the ID of this painting.\n@return The ID of this painting\n@deprecated Magic value"
            }
          },
          {
            "kind": "FIELD",
            "name": "height"
          },
          {
            "kind": "FIELD",
            "name": "id"
          },
          {
            "kind": "METHOD",
            "name": "valueOf(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "values()"
          },
          {
            "kind": "FIELD",
            "name": "width"
          }
        ],
        "comment": {
          "body": "Represents the art on a painting",
          "plain": "Represents the art on a painting"
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.BanEntry",
        "children": [
          {
            "kind": "METHOD",
            "name": "getCreated()",
            "comment": {
              "body": "Gets the date this ban entry was created.",
              "tags": "Returns the creation date.",
              "plain": "Gets the date this ban entry was created.\n@return the creation date"
            }
          },
          {
            "kind": "METHOD",
            "name": "getExpiration()",
            "comment": {
              "body": "Gets the date this ban expires on, or null for no defined end date.",
              "tags": "Returns the expiration date.",
              "plain": "Gets the date this ban expires on, or null for no defined end date.\n@return the expiration date"
            }
          },
          {
            "kind": "METHOD",
            "name": "getReason()",
            "comment": {
              "body": "Gets the reason for this ban.",
              "tags": "Returns the ban reason, or null if not set.",
              "plain": "Gets the reason for this ban.\n@return the ban reason, or null if not set"
            }
          },
          {
            "kind": "METHOD",
            "name": "getSource()",
            "comment": {
              "body": "Gets the source of this ban.\n \u003cp\u003e\n Note: A source is considered any String, although this is generally a\n player name.",
              "tags": "Returns the source of the ban.",
              "plain": "Gets the source of this ban.\n \u003cp\u003e\n Note: A source is considered any String, although this is generally a\n player name.\n@return the source of the ban"
            }
          },
          {
            "kind": "METHOD",
            "name": "getTarget()",
            "comment": {
              "body": "Gets the target involved. This may be in the form of an IP or a player\n name.",
              "tags": "Returns the target name or IP address.",
              "plain": "Gets the target involved. This may be in the form of an IP or a player\n name.\n@return the target name or IP address"
            }
          },
          {
            "kind": "METHOD",
            "name": "save()",
            "comment": {
              "body": "Saves the ban entry, overwriting any previous data in the ban list.\n \u003cp\u003e\n Saving the ban entry of an unbanned player will cause the player to be\n banned once again.",
              "plain": "Saves the ban entry, overwriting any previous data in the ban list.\n \u003cp\u003e\n Saving the ban entry of an unbanned player will cause the player to be\n banned once again."
            }
          },
          {
            "kind": "METHOD",
            "name": "setCreated(java.util.Date)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "created"
              }
            ],
            "comment": {
              "body": "Sets the date this ban entry was created.",
              "plain": "Sets the date this ban entry was created.\n@param created the new created date, cannot be null\n@see #save() saving changes"
            }
          },
          {
            "kind": "METHOD",
            "name": "setExpiration(java.util.Date)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "expiration"
              }
            ],
            "comment": {
              "body": "Sets the date this ban expires on. Null values are considered\n \"infinite\" bans.",
              "plain": "Sets the date this ban expires on. Null values are considered\n \"infinite\" bans.\n@param expiration the new expiration date, or null to indicate an\n     eternity\n@see #save() saving changes"
            }
          },
          {
            "kind": "METHOD",
            "name": "setReason(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "reason"
              }
            ],
            "comment": {
              "body": "Sets the reason for this ban. Reasons must not be null.",
              "plain": "Sets the reason for this ban. Reasons must not be null.\n@param reason the new reason, null values assume the implementation\n     default\n@see #save() saving changes"
            }
          },
          {
            "kind": "METHOD",
            "name": "setSource(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "source"
              }
            ],
            "comment": {
              "body": "Sets the source of this ban.\n \u003cp\u003e\n Note: A source is considered any String, although this is generally a\n player name.",
              "plain": "Sets the source of this ban.\n \u003cp\u003e\n Note: A source is considered any String, although this is generally a\n player name.\n@param source the new source where null values become empty strings\n@see #save() saving changes"
            }
          }
        ],
        "comment": {
          "body": "A single entry from a ban list. This may represent either a player ban or\n an IP ban.\n \u003cp\u003e\n Ban entries include the following properties:\n \u003ctable border\u003d1\u003e\n \u003ccaption\u003eProperty information\u003c/caption\u003e\n \u003ctr\u003e\n     \u003cth\u003eProperty\u003c/th\u003e\n     \u003cth\u003eDescription\u003c/th\u003e\n \u003c/tr\u003e\u003ctr\u003e\n     \u003ctd\u003eTarget Name / IP Address\u003c/td\u003e\n     \u003ctd\u003eThe target name or IP address\u003c/td\u003e\n \u003c/tr\u003e\u003ctr\u003e\n     \u003ctd\u003eCreation Date\u003c/td\u003e\n     \u003ctd\u003eThe creation date of the ban\u003c/td\u003e\n \u003c/tr\u003e\u003ctr\u003e\n     \u003ctd\u003eSource\u003c/td\u003e\n     \u003ctd\u003eThe source of the ban, such as a player, console, plugin, etc\u003c/td\u003e\n \u003c/tr\u003e\u003ctr\u003e\n     \u003ctd\u003eExpiration Date\u003c/td\u003e\n     \u003ctd\u003eThe expiration date of the ban\u003c/td\u003e\n \u003c/tr\u003e\u003ctr\u003e\n     \u003ctd\u003eReason\u003c/td\u003e\n     \u003ctd\u003eThe reason for the ban\u003c/td\u003e\n \u003c/tr\u003e\n \u003c/table\u003e\n \u003cp\u003e\n Unsaved information is not automatically written to the implementation\u0027s\n ban list, instead, the \u003ca href\u003d\"org/bukkit/BanEntry.html#save()\"\u003e\u003ccode\u003eBanEntry.save()\u003c/code\u003e\u003c/a\u003e method must be called to write the\n changes to the ban list. If this ban entry has expired (such as from an\n unban) and is no longer found in the list, the \u003ca href\u003d\"org/bukkit/BanEntry.html#save()\"\u003e\u003ccode\u003eBanEntry.save()\u003c/code\u003e\u003c/a\u003e call will\n re-add it to the list, therefore banning the victim specified.\n \u003cp\u003e\n Likewise, changes to the associated \u003ca href\u003d\"org/bukkit/BanList.html\" title\u003d\"interface in org.bukkit\"\u003e\u003ccode\u003eBanList\u003c/code\u003e\u003c/a\u003e or other entries may or\n may not be reflected in this entry.",
          "plain": "A single entry from a ban list. This may represent either a player ban or\n an IP ban.\n \u003cp\u003e\n Ban entries include the following properties:\n \u003ctable border\u003d1\u003e\n \u003ccaption\u003eProperty information\u003c/caption\u003e\n \u003ctr\u003e\n     \u003cth\u003eProperty\u003c/th\u003e\n     \u003cth\u003eDescription\u003c/th\u003e\n \u003c/tr\u003e\u003ctr\u003e\n     \u003ctd\u003eTarget Name / IP Address\u003c/td\u003e\n     \u003ctd\u003eThe target name or IP address\u003c/td\u003e\n \u003c/tr\u003e\u003ctr\u003e\n     \u003ctd\u003eCreation Date\u003c/td\u003e\n     \u003ctd\u003eThe creation date of the ban\u003c/td\u003e\n \u003c/tr\u003e\u003ctr\u003e\n     \u003ctd\u003eSource\u003c/td\u003e\n     \u003ctd\u003eThe source of the ban, such as a player, console, plugin, etc\u003c/td\u003e\n \u003c/tr\u003e\u003ctr\u003e\n     \u003ctd\u003eExpiration Date\u003c/td\u003e\n     \u003ctd\u003eThe expiration date of the ban\u003c/td\u003e\n \u003c/tr\u003e\u003ctr\u003e\n     \u003ctd\u003eReason\u003c/td\u003e\n     \u003ctd\u003eThe reason for the ban\u003c/td\u003e\n \u003c/tr\u003e\n \u003c/table\u003e\n \u003cp\u003e\n Unsaved information is not automatically written to the implementation\u0027s\n ban list, instead, the {@link #save()} method must be called to write the\n changes to the ban list. If this ban entry has expired (such as from an\n unban) and is no longer found in the list, the {@link #save()} call will\n re-add it to the list, therefore banning the victim specified.\n \u003cp\u003e\n Likewise, changes to the associated {@link BanList} or other entries may or\n may not be reflected in this entry."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.BanList",
        "children": [
          {
            "kind": "METHOD",
            "name": "addBan(java.lang.String,java.lang.String,java.util.Date,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "expires"
              },
              {
                "kind": "PARAMETER",
                "name": "reason"
              },
              {
                "kind": "PARAMETER",
                "name": "source"
              },
              {
                "kind": "PARAMETER",
                "name": "target"
              }
            ],
            "comment": {
              "body": "Adds a ban to the this list. If a previous ban exists, this will\n update the previous entry.",
              "tags": "Returns the entry for the newly created ban, or the entry for the\n     (updated) previous ban.",
              "plain": "Adds a ban to the this list. If a previous ban exists, this will\n update the previous entry.\n@param target the target of the ban\n@param reason reason for the ban, null indicates implementation default\n@param expires date for the ban\u0027s expiration (unban), or null to imply\n     forever\n@param source source of the ban, null indicates implementation default\n@return the entry for the newly created ban, or the entry for the\n     (updated) previous ban"
            }
          },
          {
            "kind": "METHOD",
            "name": "getBanEntries()",
            "comment": {
              "body": "Gets a set containing every \u003ca href\u003d\"org/bukkit/BanEntry.html\" title\u003d\"interface in org.bukkit\"\u003e\u003ccode\u003eBanEntry\u003c/code\u003e\u003c/a\u003e in this list.",
              "tags": "Returns an immutable set containing every entry tracked by this list.",
              "plain": "Gets a set containing every {@link BanEntry} in this list.\n@return an immutable set containing every entry tracked by this list"
            }
          },
          {
            "kind": "METHOD",
            "name": "getBanEntry(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "target"
              }
            ],
            "comment": {
              "body": "Gets a \u003ca href\u003d\"org/bukkit/BanEntry.html\" title\u003d\"interface in org.bukkit\"\u003e\u003ccode\u003eBanEntry\u003c/code\u003e\u003c/a\u003e by target.",
              "tags": "Returns the corresponding entry, or null if none found.",
              "plain": "Gets a {@link BanEntry} by target.\n@param target entry parameter to search for\n@return the corresponding entry, or null if none found"
            }
          },
          {
            "kind": "METHOD",
            "name": "isBanned(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "target"
              }
            ],
            "comment": {
              "body": "Gets if a \u003ca href\u003d\"org/bukkit/BanEntry.html\" title\u003d\"interface in org.bukkit\"\u003e\u003ccode\u003eBanEntry\u003c/code\u003e\u003c/a\u003e exists for the target, indicating an active\n ban status.",
              "tags": "Returns true if a \u003ca href\u003d\"org/bukkit/BanEntry.html\" title\u003d\"interface in org.bukkit\"\u003e\u003ccode\u003eBanEntry\u003c/code\u003e\u003c/a\u003e exists for the name, indicating an\n     active ban status, false otherwise.",
              "plain": "Gets if a {@link BanEntry} exists for the target, indicating an active\n ban status.\n@param target the target to find\n@return true if a {@link BanEntry} exists for the name, indicating an\n     active ban status, false otherwise"
            }
          },
          {
            "kind": "ENUM",
            "name": "org.bukkit.BanList.Type",
            "children": [
              {
                "kind": "ENUM_CONSTANT",
                "name": "IP",
                "comment": {
                  "body": "Banned player IP addresses",
                  "plain": "Banned player IP addresses"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "NAME",
                "comment": {
                  "body": "Banned player names",
                  "plain": "Banned player names"
                }
              },
              {
                "kind": "CONSTRUCTOR",
                "name": "Type()"
              },
              {
                "kind": "METHOD",
                "name": "valueOf(java.lang.String)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "name"
                  }
                ]
              },
              {
                "kind": "METHOD",
                "name": "values()"
              }
            ],
            "comment": {
              "body": "Represents a ban-type that a \u003ca href\u003d\"org/bukkit/BanList.html\" title\u003d\"interface in org.bukkit\"\u003e\u003ccode\u003eBanList\u003c/code\u003e\u003c/a\u003e may track.",
              "plain": "Represents a ban-type that a {@link BanList} may track."
            }
          },
          {
            "kind": "METHOD",
            "name": "pardon(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "target"
              }
            ],
            "comment": {
              "body": "Removes the specified target from this list, therefore indicating a\n \"not banned\" status.",
              "plain": "Removes the specified target from this list, therefore indicating a\n \"not banned\" status.\n@param target the target to remove from this list"
            }
          }
        ],
        "comment": {
          "body": "A ban list, containing bans of some \u003ca href\u003d\"org/bukkit/BanList.Type.html\" title\u003d\"enum in org.bukkit\"\u003e\u003ccode\u003eBanList.Type\u003c/code\u003e\u003c/a\u003e.",
          "plain": "A ban list, containing bans of some {@link Type}."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.BlockChangeDelegate",
        "children": [
          {
            "kind": "METHOD",
            "name": "getHeight()",
            "comment": {
              "body": "Gets the height of the world.",
              "tags": "Returns Height of the world.",
              "plain": "Gets the height of the world.\n@return Height of the world"
            }
          },
          {
            "kind": "METHOD",
            "name": "getTypeId(int,int,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "y"
              },
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Get the block type at the location.",
              "tags": "Returns The block ID.",
              "plain": "Get the block type at the location.\n@param x X coordinate\n@param y Y coordinate\n@param z Z coordinate\n@return The block ID\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "isEmpty(int,int,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "y"
              },
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ],
            "comment": {
              "body": "Checks if the specified block is empty (air) or not.",
              "tags": "Returns True if the block is considered empty..",
              "plain": "Checks if the specified block is empty (air) or not.\n@param x X coordinate\n@param y Y coordinate\n@param z Z coordinate\n@return True if the block is considered empty."
            }
          },
          {
            "kind": "METHOD",
            "name": "setRawTypeId(int,int,int,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "typeId"
              },
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "y"
              },
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Set a block type at the specified coordinates without doing all world\n updates and notifications.\n \u003cp\u003e\n It is safe to have this call World.setTypeId, but it may be slower than\n World.setRawTypeId.",
              "tags": "Returns true if the block was set successfully.",
              "plain": "Set a block type at the specified coordinates without doing all world\n updates and notifications.\n \u003cp\u003e\n It is safe to have this call World.setTypeId, but it may be slower than\n World.setRawTypeId.\n@param x X coordinate\n@param y Y coordinate\n@param z Z coordinate\n@param typeId New block ID\n@return true if the block was set successfully\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "setRawTypeIdAndData(int,int,int,int,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "typeId"
              },
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "y"
              },
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Set a block type and data at the specified coordinates without doing\n all world updates and notifications.\n \u003cp\u003e\n It is safe to have this call World.setTypeId, but it may be slower than\n World.setRawTypeId.",
              "tags": "Returns true if the block was set successfully.",
              "plain": "Set a block type and data at the specified coordinates without doing\n all world updates and notifications.\n \u003cp\u003e\n It is safe to have this call World.setTypeId, but it may be slower than\n World.setRawTypeId.\n@param x X coordinate\n@param y Y coordinate\n@param z Z coordinate\n@param typeId New block ID\n@param data Block data\n@return true if the block was set successfully\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "setTypeId(int,int,int,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "typeId"
              },
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "y"
              },
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Set a block type at the specified coordinates.\n \u003cp\u003e\n This method cannot call World.setRawTypeId, a full update is needed.",
              "tags": "Returns true if the block was set successfully.",
              "plain": "Set a block type at the specified coordinates.\n \u003cp\u003e\n This method cannot call World.setRawTypeId, a full update is needed.\n@param x X coordinate\n@param y Y coordinate\n@param z Z coordinate\n@param typeId New block ID\n@return true if the block was set successfully\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "setTypeIdAndData(int,int,int,int,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "typeId"
              },
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "y"
              },
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Set a block type and data at the specified coordinates.\n \u003cp\u003e\n This method cannot call World.setRawTypeId, a full update is needed.",
              "tags": "Returns true if the block was set successfully.",
              "plain": "Set a block type and data at the specified coordinates.\n \u003cp\u003e\n This method cannot call World.setRawTypeId, a full update is needed.\n@param x X coordinate\n@param y Y coordinate\n@param z Z coordinate\n@param typeId New block ID\n@param data Block data\n@return true if the block was set successfully\n@deprecated Magic value"
            }
          }
        ],
        "deprecated": {
          "deprecated": "true"
        },
        "comment": {
          "body": "A delegate for handling block changes. This serves as a direct interface\n between generation algorithms in the server implementation and utilizing\n code.",
          "plain": "A delegate for handling block changes. This serves as a direct interface\n between generation algorithms in the server implementation and utilizing\n code.\n@deprecated rarely used API that was largely for implementation purposes"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.Bukkit",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "Bukkit()",
            "comment": {
              "body": "Static class cannot be initialized.",
              "plain": "Static class cannot be initialized."
            }
          },
          {
            "kind": "METHOD",
            "name": "addRecipe(org.bukkit.inventory.Recipe)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "recipe"
              }
            ],
            "comment": {
              "body": "Adds a recipe to the crafting manager.",
              "tags": "Returns true if the recipe was added, false if it wasn\u0027t for some\n     reason.",
              "plain": "Adds a recipe to the crafting manager.\n@param recipe the recipe to add\n@return true if the recipe was added, false if it wasn\u0027t for some\n     reason"
            }
          },
          {
            "kind": "METHOD",
            "name": "advancementIterator()",
            "comment": {
              "body": "Get an iterator through all advancements. Advancements cannot be removed\n from this iterator,",
              "tags": "Returns an advancement iterator.",
              "plain": "Get an iterator through all advancements. Advancements cannot be removed\n from this iterator,\n@return an advancement iterator"
            }
          },
          {
            "kind": "METHOD",
            "name": "banIP(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "address"
              }
            ],
            "comment": {
              "body": "Bans the specified address from the server.",
              "plain": "Bans the specified address from the server.\n@param address the IP address to ban"
            }
          },
          {
            "kind": "METHOD",
            "name": "broadcast(java.lang.String,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "message"
              },
              {
                "kind": "PARAMETER",
                "name": "permission"
              }
            ],
            "comment": {
              "body": "Broadcasts the specified message to every user with the given\n permission name.",
              "tags": "Returns number of message recipients.",
              "plain": "Broadcasts the specified message to every user with the given\n permission name.\n@param message message to broadcast\n@param permission the required permission {@link Permissible permissibles} must have to receive the broadcast\n@return number of message recipients"
            }
          },
          {
            "kind": "METHOD",
            "name": "broadcast(net.md_5.bungee.api.chat.BaseComponent)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "component"
              }
            ],
            "comment": {
              "body": "Sends the component to all online players.",
              "plain": "Sends the component to all online players.\n@param component the component to send"
            }
          },
          {
            "kind": "METHOD",
            "name": "broadcast(net.md_5.bungee.api.chat.BaseComponent...)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "components"
              }
            ],
            "comment": {
              "body": "Sends an array of components as a single message to all online players.",
              "plain": "Sends an array of components as a single message to all online players.\n@param components the components to send"
            }
          },
          {
            "kind": "METHOD",
            "name": "broadcastMessage(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "message"
              }
            ],
            "comment": {
              "body": "Broadcast a message to all players.\n \u003cp\u003e\n This is the same as calling \u003ca href\u003d\"org/bukkit/Bukkit.html#broadcast(java.lang.String,java.lang.String)\"\u003e\u003ccode\u003eBukkit.broadcast(java.lang.String, java.lang.String)\u003c/code\u003e\u003c/a\u003e to \u003ca href\u003d\"org/bukkit/Server.html#BROADCAST_CHANNEL_USERS\"\u003e\u003ccode\u003eServer.BROADCAST_CHANNEL_USERS\u003c/code\u003e\u003c/a\u003e",
              "tags": "Returns the number of players.",
              "plain": "Broadcast a message to all players.\n \u003cp\u003e\n This is the same as calling {@link #broadcast(java.lang.String,\n java.lang.String)} to {@link Server#BROADCAST_CHANNEL_USERS}\n@param message the message\n@return the number of players"
            }
          },
          {
            "kind": "METHOD",
            "name": "clearRecipes()",
            "comment": {
              "body": "Clears the list of crafting recipes.",
              "plain": "Clears the list of crafting recipes."
            }
          },
          {
            "kind": "METHOD",
            "name": "createBossBar(java.lang.String,org.bukkit.boss.BarColor,org.bukkit.boss.BarStyle,org.bukkit.boss.BarFlag...)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "color"
              },
              {
                "kind": "PARAMETER",
                "name": "flags"
              },
              {
                "kind": "PARAMETER",
                "name": "style"
              },
              {
                "kind": "PARAMETER",
                "name": "title"
              }
            ],
            "comment": {
              "body": "Creates a boss bar instance to display to players. The progress\n defaults to 1.0",
              "tags": "Returns the created boss bar.",
              "plain": "Creates a boss bar instance to display to players. The progress\n defaults to 1.0\n@param title the title of the boss bar\n@param color the color of the boss bar\n@param style the style of the boss bar\n@param flags an optional list of flags to set on the boss bar\n@return the created boss bar"
            }
          },
          {
            "kind": "METHOD",
            "name": "createChunkData(org.bukkit.World)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "world"
              }
            ],
            "comment": {
              "body": "Create a ChunkData for use in a generator.\n \n See \u003ca href\u003d\"org/bukkit/generator/ChunkGenerator.html#generateChunkData(org.bukkit.World,java.util.Random,int,int,org.bukkit.generator.ChunkGenerator.BiomeGrid)\"\u003e\u003ccode\u003eChunkGenerator.generateChunkData(org.bukkit.World, java.util.Random, int, int, org.bukkit.generator.ChunkGenerator.BiomeGrid)\u003c/code\u003e\u003c/a\u003e",
              "tags": "Returns a new ChunkData for the world.",
              "plain": "Create a ChunkData for use in a generator.\n \n See {@link ChunkGenerator#generateChunkData(org.bukkit.World, java.util.Random, int, int, org.bukkit.generator.ChunkGenerator.BiomeGrid)}\n@param world the world to create the ChunkData for\n@return a new ChunkData for the world"
            }
          },
          {
            "kind": "METHOD",
            "name": "createInventory(org.bukkit.inventory.InventoryHolder,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "owner"
              },
              {
                "kind": "PARAMETER",
                "name": "size"
              }
            ],
            "comment": {
              "body": "Creates an empty inventory of type \u003ca href\u003d\"org/bukkit/event/inventory/InventoryType.html#CHEST\"\u003e\u003ccode\u003eInventoryType.CHEST\u003c/code\u003e\u003c/a\u003e with the\n specified size.",
              "tags": "Returns a new inventory.",
              "plain": "Creates an empty inventory of type {@link InventoryType#CHEST} with the\n specified size.\n@param owner the holder of the inventory, or null to indicate no holder\n@param size a multiple of 9 as the size of inventory to create\n@return a new inventory\n@throws IllegalArgumentException if the size is not a multiple of 9"
            }
          },
          {
            "kind": "METHOD",
            "name": "createInventory(org.bukkit.inventory.InventoryHolder,int,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "owner"
              },
              {
                "kind": "PARAMETER",
                "name": "size"
              },
              {
                "kind": "PARAMETER",
                "name": "title"
              }
            ],
            "comment": {
              "body": "Creates an empty inventory of type \u003ca href\u003d\"org/bukkit/event/inventory/InventoryType.html#CHEST\"\u003e\u003ccode\u003eInventoryType.CHEST\u003c/code\u003e\u003c/a\u003e with the\n specified size and title.",
              "tags": "Returns a new inventory.",
              "plain": "Creates an empty inventory of type {@link InventoryType#CHEST} with the\n specified size and title.\n@param owner the holder of the inventory, or null to indicate no holder\n@param size a multiple of 9 as the size of inventory to create\n@param title the title of the inventory, displayed when inventory is\n     viewed\n@return a new inventory\n@throws IllegalArgumentException if the size is not a multiple of 9"
            }
          },
          {
            "kind": "METHOD",
            "name": "createInventory(org.bukkit.inventory.InventoryHolder,org.bukkit.event.inventory.InventoryType)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "owner"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "comment": {
              "body": "Creates an empty inventory of the specified type. If the type is \u003ca href\u003d\"org/bukkit/event/inventory/InventoryType.html#CHEST\"\u003e\u003ccode\u003eInventoryType.CHEST\u003c/code\u003e\u003c/a\u003e, the new inventory has a size of 27; otherwise the\n new inventory has the normal size for its type.",
              "tags": "Returns a new inventory.",
              "plain": "Creates an empty inventory of the specified type. If the type is {@link InventoryType#CHEST}, the new inventory has a size of 27; otherwise the\n new inventory has the normal size for its type.\n@param owner the holder of the inventory, or null to indicate no holder\n@param type the type of inventory to create\n@return a new inventory"
            }
          },
          {
            "kind": "METHOD",
            "name": "createInventory(org.bukkit.inventory.InventoryHolder,org.bukkit.event.inventory.InventoryType,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "owner"
              },
              {
                "kind": "PARAMETER",
                "name": "title"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "comment": {
              "body": "Creates an empty inventory with the specified type and title. If the type\n is \u003ca href\u003d\"org/bukkit/event/inventory/InventoryType.html#CHEST\"\u003e\u003ccode\u003eInventoryType.CHEST\u003c/code\u003e\u003c/a\u003e, the new inventory has a size of 27;\n otherwise the new inventory has the normal size for its type.\u003cbr\u003e\n It should be noted that some inventory types do not support titles and\n may not render with said titles on the Minecraft client.",
              "tags": "Returns The new inventory..",
              "plain": "Creates an empty inventory with the specified type and title. If the type\n is {@link InventoryType#CHEST}, the new inventory has a size of 27;\n otherwise the new inventory has the normal size for its type.\u003cbr\u003e\n It should be noted that some inventory types do not support titles and\n may not render with said titles on the Minecraft client.\n@param owner The holder of the inventory; can be null if there\u0027s no holder.\n@param type The type of inventory to create.\n@param title The title of the inventory, to be displayed when it is viewed.\n@return The new inventory."
            }
          },
          {
            "kind": "METHOD",
            "name": "createMap(org.bukkit.World)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "world"
              }
            ],
            "comment": {
              "body": "Create a new map with an automatically assigned ID.",
              "tags": "Returns a newly created map view.",
              "plain": "Create a new map with an automatically assigned ID.\n@param world the world the map will belong to\n@return a newly created map view"
            }
          },
          {
            "kind": "METHOD",
            "name": "createMerchant(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "title"
              }
            ],
            "comment": {
              "body": "Creates an empty merchant.",
              "tags": "Returns a new merchant.",
              "plain": "Creates an empty merchant.\n@param title the title of the corresponding merchant inventory, displayed\n when the merchant inventory is viewed\n@return a new merchant"
            }
          },
          {
            "kind": "METHOD",
            "name": "createProfile(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ],
            "comment": {
              "body": "Creates a PlayerProfile for the specified name, with UUID as null",
              "tags": "Returns A PlayerProfile object.",
              "plain": "Creates a PlayerProfile for the specified name, with UUID as null\n@param name Name to create profile for\n@return A PlayerProfile object"
            }
          },
          {
            "kind": "METHOD",
            "name": "createProfile(java.util.UUID)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "uuid"
              }
            ],
            "comment": {
              "body": "Creates a PlayerProfile for the specified uuid, with name as null",
              "tags": "Returns A PlayerProfile object.",
              "plain": "Creates a PlayerProfile for the specified uuid, with name as null\n@param uuid UUID to create profile for\n@return A PlayerProfile object"
            }
          },
          {
            "kind": "METHOD",
            "name": "createProfile(java.util.UUID,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              },
              {
                "kind": "PARAMETER",
                "name": "uuid"
              }
            ],
            "comment": {
              "body": "Creates a PlayerProfile for the specified name/uuid\n\n Both UUID and Name can not be null at same time. One must be supplied.",
              "tags": "Returns A PlayerProfile object.",
              "plain": "Creates a PlayerProfile for the specified name/uuid\n\n Both UUID and Name can not be null at same time. One must be supplied.\n@param uuid UUID to create profile for\n@param name Name to create profile for\n@return A PlayerProfile object"
            }
          },
          {
            "kind": "METHOD",
            "name": "createWorld(org.bukkit.WorldCreator)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "creator"
              }
            ],
            "comment": {
              "body": "Creates or loads a world with the given name using the specified\n options.\n \u003cp\u003e\n If the world is already loaded, it will just return the equivalent of\n getWorld(creator.name()).",
              "tags": "Returns newly created or loaded world.",
              "plain": "Creates or loads a world with the given name using the specified\n options.\n \u003cp\u003e\n If the world is already loaded, it will just return the equivalent of\n getWorld(creator.name()).\n@param creator the options to use when creating the world\n@return newly created or loaded world"
            }
          },
          {
            "kind": "METHOD",
            "name": "dispatchCommand(org.bukkit.command.CommandSender,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "commandLine"
              },
              {
                "kind": "PARAMETER",
                "name": "sender"
              }
            ],
            "comment": {
              "body": "Dispatches a command on this server, and executes it if found.",
              "tags": "Returns returns false if no target is found.",
              "plain": "Dispatches a command on this server, and executes it if found.\n@param sender the apparent sender of the command\n@param commandLine the command + arguments. Example: \u003ccode\u003etest abc\n     123\u003c/code\u003e\n@return returns false if no target is found\n@throws CommandException thrown when the executor for the given command\n     fails with an unhandled exception"
            }
          },
          {
            "kind": "METHOD",
            "name": "getAdvancement(org.bukkit.NamespacedKey)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "key"
              }
            ],
            "comment": {
              "body": "Get the advancement specified by this key.",
              "tags": "Returns advancement or null if not exists.",
              "plain": "Get the advancement specified by this key.\n@param key unique advancement key\n@return advancement or null if not exists"
            }
          },
          {
            "kind": "METHOD",
            "name": "getAllowEnd()",
            "comment": {
              "body": "Gets whether this server allows the End or not.",
              "tags": "Returns whether this server allows the End or not.",
              "plain": "Gets whether this server allows the End or not.\n@return whether this server allows the End or not"
            }
          },
          {
            "kind": "METHOD",
            "name": "getAllowFlight()",
            "comment": {
              "body": "Gets whether this server allows flying or not.",
              "tags": "Returns true if the server allows flight, false otherwise.",
              "plain": "Gets whether this server allows flying or not.\n@return true if the server allows flight, false otherwise"
            }
          },
          {
            "kind": "METHOD",
            "name": "getAllowNether()",
            "comment": {
              "body": "Gets whether this server allows the Nether or not.",
              "tags": "Returns whether this server allows the Nether or not.",
              "plain": "Gets whether this server allows the Nether or not.\n@return whether this server allows the Nether or not"
            }
          },
          {
            "kind": "METHOD",
            "name": "getAmbientSpawnLimit()",
            "comment": {
              "body": "Gets user-specified limit for number of ambient mobs that can spawn in\n a chunk.",
              "tags": "Returns the ambient spawn limit.",
              "plain": "Gets user-specified limit for number of ambient mobs that can spawn in\n a chunk.\n@return the ambient spawn limit"
            }
          },
          {
            "kind": "METHOD",
            "name": "getAnimalSpawnLimit()",
            "comment": {
              "body": "Gets user-specified limit for number of animals that can spawn in a\n chunk.",
              "tags": "Returns the animal spawn limit.",
              "plain": "Gets user-specified limit for number of animals that can spawn in a\n chunk.\n@return the animal spawn limit"
            }
          },
          {
            "kind": "METHOD",
            "name": "getBanList(org.bukkit.BanList.Type)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "comment": {
              "body": "Gets a ban list for the supplied type.\n \u003cp\u003e\n Bans by name are no longer supported and this method will return\n null when trying to request them. The replacement is bans by UUID.",
              "tags": "Returns a ban list of the specified type.",
              "plain": "Gets a ban list for the supplied type.\n \u003cp\u003e\n Bans by name are no longer supported and this method will return\n null when trying to request them. The replacement is bans by UUID.\n@param type the type of list to fetch, cannot be null\n@return a ban list of the specified type"
            }
          },
          {
            "kind": "METHOD",
            "name": "getBannedPlayers()",
            "comment": {
              "body": "Gets a set containing all banned players.",
              "tags": "Returns a set containing banned players.",
              "plain": "Gets a set containing all banned players.\n@return a set containing banned players"
            }
          },
          {
            "kind": "METHOD",
            "name": "getBukkitVersion()",
            "comment": {
              "body": "Gets the Bukkit version that this server is running.",
              "tags": "Returns version of Bukkit.",
              "plain": "Gets the Bukkit version that this server is running.\n@return version of Bukkit"
            }
          },
          {
            "kind": "METHOD",
            "name": "getCommandAliases()",
            "comment": {
              "body": "Gets a list of command aliases defined in the server properties.",
              "tags": "Returns a map of aliases to command names.",
              "plain": "Gets a list of command aliases defined in the server properties.\n@return a map of aliases to command names"
            }
          },
          {
            "kind": "METHOD",
            "name": "getCommandMap()",
            "comment": {
              "body": "Gets the active \u003ca href\u003d\"org/bukkit/command/CommandMap.html\" title\u003d\"interface in org.bukkit.command\"\u003e\u003ccode\u003eCommandMap\u003c/code\u003e\u003c/a\u003e",
              "tags": "Returns the active command map.",
              "plain": "Gets the active {@link CommandMap}\n@return the active command map"
            }
          },
          {
            "kind": "METHOD",
            "name": "getConnectionThrottle()",
            "comment": {
              "body": "Gets the value of the connection throttle setting.",
              "tags": "Returns the value of the connection throttle setting.",
              "plain": "Gets the value of the connection throttle setting.\n@return the value of the connection throttle setting"
            }
          },
          {
            "kind": "METHOD",
            "name": "getConsoleSender()",
            "comment": {
              "body": "Gets a \u003ca href\u003d\"org/bukkit/command/ConsoleCommandSender.html\" title\u003d\"interface in org.bukkit.command\"\u003e\u003ccode\u003eConsoleCommandSender\u003c/code\u003e\u003c/a\u003e that may be used as an input source\n for this server.",
              "tags": "Returns a console command sender.",
              "plain": "Gets a {@link ConsoleCommandSender} that may be used as an input source\n for this server.\n@return a console command sender"
            }
          },
          {
            "kind": "METHOD",
            "name": "getDefaultGameMode()",
            "comment": {
              "body": "Gets the default \u003ca href\u003d\"org/bukkit/GameMode.html\" title\u003d\"enum in org.bukkit\"\u003e\u003ccode\u003eGameMode\u003c/code\u003e\u003c/a\u003e for new players.",
              "tags": "Returns the default game mode.",
              "plain": "Gets the default {@link GameMode} for new players.\n@return the default game mode"
            }
          },
          {
            "kind": "METHOD",
            "name": "getEntity(java.util.UUID)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "uuid"
              }
            ],
            "comment": {
              "body": "Gets an entity on the server by its UUID",
              "tags": "Returns the entity with the given UUID, or null if it isn\u0027t found.",
              "plain": "Gets an entity on the server by its UUID\n@param uuid the UUID of the entity\n@return the entity with the given UUID, or null if it isn\u0027t found"
            }
          },
          {
            "kind": "METHOD",
            "name": "getGenerateStructures()",
            "comment": {
              "body": "Get generate-structures setting.",
              "tags": "Returns true if structure generation is enabled, false otherwise.",
              "plain": "Get generate-structures setting.\n@return true if structure generation is enabled, false otherwise"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHelpMap()",
            "comment": {
              "body": "Gets the \u003ca href\u003d\"org/bukkit/help/HelpMap.html\" title\u003d\"interface in org.bukkit.help\"\u003e\u003ccode\u003eHelpMap\u003c/code\u003e\u003c/a\u003e providing help topics for this server.",
              "tags": "Returns a help map for this server.",
              "plain": "Gets the {@link HelpMap} providing help topics for this server.\n@return a help map for this server"
            }
          },
          {
            "kind": "METHOD",
            "name": "getIPBans()",
            "comment": {
              "body": "Gets a set containing all current IPs that are banned.",
              "tags": "Returns a set containing banned IP addresses.",
              "plain": "Gets a set containing all current IPs that are banned.\n@return a set containing banned IP addresses"
            }
          },
          {
            "kind": "METHOD",
            "name": "getIdleTimeout()",
            "comment": {
              "body": "Gets the idle kick timeout.",
              "tags": "Returns the idle timeout in minutes.",
              "plain": "Gets the idle kick timeout.\n@return the idle timeout in minutes"
            }
          },
          {
            "kind": "METHOD",
            "name": "getIp()",
            "comment": {
              "body": "Get the IP that this server is bound to, or empty string if not\n specified.",
              "tags": "Returns the IP string that this server is bound to, otherwise empty\n     string.",
              "plain": "Get the IP that this server is bound to, or empty string if not\n specified.\n@return the IP string that this server is bound to, otherwise empty\n     string"
            }
          },
          {
            "kind": "METHOD",
            "name": "getItemFactory()",
            "comment": {
              "body": "Gets the instance of the item factory (for \u003ca href\u003d\"org/bukkit/inventory/meta/ItemMeta.html\" title\u003d\"interface in org.bukkit.inventory.meta\"\u003e\u003ccode\u003eItemMeta\u003c/code\u003e\u003c/a\u003e).",
              "tags": "Returns the item factory.",
              "plain": "Gets the instance of the item factory (for {@link ItemMeta}).\n@return the item factory\n@see ItemFactory"
            }
          },
          {
            "kind": "METHOD",
            "name": "getLogger()",
            "comment": {
              "body": "Returns the primary logger associated with this server instance.",
              "tags": "Returns Logger associated with this server.",
              "plain": "Returns the primary logger associated with this server instance.\n@return Logger associated with this server"
            }
          },
          {
            "kind": "METHOD",
            "name": "getMap(short)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "id"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Gets the map from the given item ID.",
              "tags": "Returns a map view if it exists, or null otherwise.",
              "plain": "Gets the map from the given item ID.\n@param id the id of the map to get\n@return a map view if it exists, or null otherwise\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "getMaxPlayers()",
            "comment": {
              "body": "Get the maximum amount of players which can login to this server.",
              "tags": "Returns the amount of players this server allows.",
              "plain": "Get the maximum amount of players which can login to this server.\n@return the amount of players this server allows"
            }
          },
          {
            "kind": "METHOD",
            "name": "getMessenger()",
            "comment": {
              "body": "Gets the \u003ca href\u003d\"org/bukkit/plugin/messaging/Messenger.html\" title\u003d\"interface in org.bukkit.plugin.messaging\"\u003e\u003ccode\u003eMessenger\u003c/code\u003e\u003c/a\u003e responsible for this server.",
              "tags": "Returns messenger responsible for this server.",
              "plain": "Gets the {@link Messenger} responsible for this server.\n@return messenger responsible for this server"
            }
          },
          {
            "kind": "METHOD",
            "name": "getMonsterSpawnLimit()",
            "comment": {
              "body": "Gets user-specified limit for number of monsters that can spawn in a\n chunk.",
              "tags": "Returns the monster spawn limit.",
              "plain": "Gets user-specified limit for number of monsters that can spawn in a\n chunk.\n@return the monster spawn limit"
            }
          },
          {
            "kind": "METHOD",
            "name": "getMotd()",
            "comment": {
              "body": "Gets the message that is displayed on the server list.",
              "tags": "Returns the servers MOTD.",
              "plain": "Gets the message that is displayed on the server list.\n@return the servers MOTD"
            }
          },
          {
            "kind": "METHOD",
            "name": "getName()",
            "comment": {
              "body": "Gets the name of this server implementation.",
              "tags": "Returns name of this server implementation.",
              "plain": "Gets the name of this server implementation.\n@return name of this server implementation"
            }
          },
          {
            "kind": "METHOD",
            "name": "getOfflinePlayer(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Gets the player by the given name, regardless if they are offline or\n online.\n \u003cp\u003e\n This method may involve a blocking web request to get the UUID for the\n given name.\n \u003cp\u003e\n This will return an object even if the player does not exist. To this\n method, all players will exist.",
              "tags": "Returns an offline player.",
              "plain": "Gets the player by the given name, regardless if they are offline or\n online.\n \u003cp\u003e\n This method may involve a blocking web request to get the UUID for the\n given name.\n \u003cp\u003e\n This will return an object even if the player does not exist. To this\n method, all players will exist.\n@deprecated Persistent storage of users should be by UUID as names are no longer\n             unique past a single session.\n@param name the name the player to retrieve\n@return an offline player\n@see #getOfflinePlayer(java.util.UUID)"
            }
          },
          {
            "kind": "METHOD",
            "name": "getOfflinePlayer(java.util.UUID)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "id"
              }
            ],
            "comment": {
              "body": "Gets the player by the given UUID, regardless if they are offline or\n online.\n \u003cp\u003e\n This will return an object even if the player does not exist. To this\n method, all players will exist.",
              "tags": "Returns an offline player.",
              "plain": "Gets the player by the given UUID, regardless if they are offline or\n online.\n \u003cp\u003e\n This will return an object even if the player does not exist. To this\n method, all players will exist.\n@param id the UUID of the player to retrieve\n@return an offline player"
            }
          },
          {
            "kind": "METHOD",
            "name": "getOfflinePlayers()",
            "comment": {
              "body": "Gets every player that has ever played on this server.",
              "tags": "Returns an array containing all previous players.",
              "plain": "Gets every player that has ever played on this server.\n@return an array containing all previous players"
            }
          },
          {
            "kind": "METHOD",
            "name": "getOnlineMode()",
            "comment": {
              "body": "Gets whether the Server is in online mode or not.",
              "tags": "Returns true if the server authenticates clients, false otherwise.",
              "plain": "Gets whether the Server is in online mode or not.\n@return true if the server authenticates clients, false otherwise"
            }
          },
          {
            "kind": "METHOD",
            "name": "getOnlinePlayers()",
            "comment": {
              "body": "Gets a view of all currently logged in players. This \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/util/Collections.html#unmodifiableCollection(java.util.Collection)\" title\u003d\"class or interface in java.util\" class\u003d\"external-link\"\u003eview\u003c/a\u003e is a reused\n object, making some operations like \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/util/Collection.html#size()\" title\u003d\"class or interface in java.util\" class\u003d\"external-link\"\u003e\u003ccode\u003eCollection.size()\u003c/code\u003e\u003c/a\u003e\n zero-allocation.\n \u003cp\u003e\n The collection is a view backed by the internal representation, such\n that, changes to the internal state of the server will be reflected\n immediately. However, the reuse of the returned collection (identity)\n is not strictly guaranteed for future or all implementations. Casting\n the collection, or relying on interface implementations (like \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/io/Serializable.html\" title\u003d\"class or interface in java.io\" class\u003d\"external-link\"\u003e\u003ccode\u003eSerializable\u003c/code\u003e\u003c/a\u003e or \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/util/List.html\" title\u003d\"class or interface in java.util\" class\u003d\"external-link\"\u003e\u003ccode\u003eList\u003c/code\u003e\u003c/a\u003e), is deprecated.\n \u003cp\u003e\n Iteration behavior is undefined outside of self-contained main-thread\n uses. Normal and immediate iterator use without consequences that\n affect the collection are fully supported. The effects following\n (non-exhaustive) \u003ca href\u003d\"org/bukkit/entity/Entity.html#teleport(org.bukkit.Location)\"\u003e\u003ccode\u003eteleportation\u003c/code\u003e\u003c/a\u003e,\n \u003ca href\u003d\"org/bukkit/entity/Damageable.html#setHealth(double)\"\u003e\u003ccode\u003edeath\u003c/code\u003e\u003c/a\u003e, and \u003ca href\u003d\"org/bukkit/entity/Player.html#kickPlayer(java.lang.String)\"\u003e\u003ccode\u003ekicking\u003c/code\u003e\u003c/a\u003e are undefined. Any use of this collection from\n asynchronous threads is unsafe.\n \u003cp\u003e\n For safe consequential iteration or mimicking the old array behavior,\n using \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/util/Collection.html#toArray(T%5B%5D)\" title\u003d\"class or interface in java.util\" class\u003d\"external-link\"\u003e\u003ccode\u003eCollection.toArray(Object[])\u003c/code\u003e\u003c/a\u003e is recommended. For making\n snapshots, \u003ccode\u003eImmutableList.copyOf(Collection)\u003c/code\u003e is recommended.",
              "tags": "Returns a view of currently online players..",
              "plain": "Gets a view of all currently logged in players. This {@linkplain Collections#unmodifiableCollection(Collection) view} is a reused\n object, making some operations like {@link Collection#size()}\n zero-allocation.\n \u003cp\u003e\n The collection is a view backed by the internal representation, such\n that, changes to the internal state of the server will be reflected\n immediately. However, the reuse of the returned collection (identity)\n is not strictly guaranteed for future or all implementations. Casting\n the collection, or relying on interface implementations (like {@link Serializable} or {@link List}), is deprecated.\n \u003cp\u003e\n Iteration behavior is undefined outside of self-contained main-thread\n uses. Normal and immediate iterator use without consequences that\n affect the collection are fully supported. The effects following\n (non-exhaustive) {@link Entity#teleport(Location) teleportation},\n {@link Player#setHealth(double) death}, and {@link Player#kickPlayer(\n String) kicking} are undefined. Any use of this collection from\n asynchronous threads is unsafe.\n \u003cp\u003e\n For safe consequential iteration or mimicking the old array behavior,\n using {@link Collection#toArray(Object[])} is recommended. For making\n snapshots, {@link ImmutableList#copyOf(Collection)} is recommended.\n@return a view of currently online players."
            }
          },
          {
            "kind": "METHOD",
            "name": "getOperators()",
            "comment": {
              "body": "Gets a set containing all player operators.",
              "tags": "Returns a set containing player operators.",
              "plain": "Gets a set containing all player operators.\n@return a set containing player operators"
            }
          },
          {
            "kind": "METHOD",
            "name": "getPlayer(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ],
            "comment": {
              "body": "Gets a player object by the given username.\n \u003cp\u003e\n This method may not return objects for offline players.",
              "tags": "Returns a player if one was found, null otherwise.",
              "plain": "Gets a player object by the given username.\n \u003cp\u003e\n This method may not return objects for offline players.\n@param name the name to look up\n@return a player if one was found, null otherwise"
            }
          },
          {
            "kind": "METHOD",
            "name": "getPlayer(java.util.UUID)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "id"
              }
            ],
            "comment": {
              "body": "Gets the player with the given UUID.",
              "tags": "Returns a player object if one was found, null otherwise.",
              "plain": "Gets the player with the given UUID.\n@param id UUID of the player to retrieve\n@return a player object if one was found, null otherwise"
            }
          },
          {
            "kind": "METHOD",
            "name": "getPlayerExact(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ],
            "comment": {
              "body": "Gets the player with the exact given name, case insensitive.",
              "tags": "Returns a player object if one was found, null otherwise.",
              "plain": "Gets the player with the exact given name, case insensitive.\n@param name Exact name of the player to retrieve\n@return a player object if one was found, null otherwise"
            }
          },
          {
            "kind": "METHOD",
            "name": "getPlayerUniqueId(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "playerName"
              }
            ],
            "comment": {
              "body": "Gets the unique ID of the player currently known as the specified player name\n In Offline Mode, will return an Offline UUID",
              "tags": "Returns A UUID, or null if that player name is not registered with Minecraft and the server is in online mode.",
              "plain": "Gets the unique ID of the player currently known as the specified player name\n In Offline Mode, will return an Offline UUID\n@param playerName the player name to look up the unique ID for\n@return A UUID, or null if that player name is not registered with Minecraft and the server is in online mode"
            }
          },
          {
            "kind": "METHOD",
            "name": "getPluginCommand(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ],
            "comment": {
              "body": "Gets a \u003ca href\u003d\"org/bukkit/command/PluginCommand.html\" title\u003d\"class in org.bukkit.command\"\u003e\u003ccode\u003ePluginCommand\u003c/code\u003e\u003c/a\u003e with the given name or alias.",
              "tags": "Returns a plugin command if found, null otherwise.",
              "plain": "Gets a {@link PluginCommand} with the given name or alias.\n@param name the name of the command to retrieve\n@return a plugin command if found, null otherwise"
            }
          },
          {
            "kind": "METHOD",
            "name": "getPluginManager()",
            "comment": {
              "body": "Gets the plugin manager for interfacing with plugins.",
              "tags": "Returns a plugin manager for this Server instance.",
              "plain": "Gets the plugin manager for interfacing with plugins.\n@return a plugin manager for this Server instance"
            }
          },
          {
            "kind": "METHOD",
            "name": "getPort()",
            "comment": {
              "body": "Get the game port that the server runs on.",
              "tags": "Returns the port number of this server.",
              "plain": "Get the game port that the server runs on.\n@return the port number of this server"
            }
          },
          {
            "kind": "METHOD",
            "name": "getRecipesFor(org.bukkit.inventory.ItemStack)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "result"
              }
            ],
            "comment": {
              "body": "Get a list of all recipes for a given item. The stack size is ignored\n in comparisons. If the durability is -1, it will match any data value.",
              "tags": "Returns a list of recipes with the given result.",
              "plain": "Get a list of all recipes for a given item. The stack size is ignored\n in comparisons. If the durability is -1, it will match any data value.\n@param result the item to match against recipe results\n@return a list of recipes with the given result"
            }
          },
          {
            "kind": "METHOD",
            "name": "getScheduler()",
            "comment": {
              "body": "Gets the scheduler for managing scheduled events.",
              "tags": "Returns a scheduling service for this server.",
              "plain": "Gets the scheduler for managing scheduled events.\n@return a scheduling service for this server"
            }
          },
          {
            "kind": "METHOD",
            "name": "getScoreboardManager()",
            "comment": {
              "body": "Gets the instance of the scoreboard manager.\n \u003cp\u003e\n This will only exist after the first world has loaded.",
              "tags": "Returns the scoreboard manager or null if no worlds are loaded..",
              "plain": "Gets the instance of the scoreboard manager.\n \u003cp\u003e\n This will only exist after the first world has loaded.\n@return the scoreboard manager or null if no worlds are loaded."
            }
          },
          {
            "kind": "METHOD",
            "name": "getServer()",
            "comment": {
              "body": "Gets the current \u003ca href\u003d\"org/bukkit/Server.html\" title\u003d\"interface in org.bukkit\"\u003e\u003ccode\u003eServer\u003c/code\u003e\u003c/a\u003e singleton",
              "tags": "Returns Server instance being ran.",
              "plain": "Gets the current {@link Server} singleton\n@return Server instance being ran"
            }
          },
          {
            "kind": "METHOD",
            "name": "getServerIcon()",
            "comment": {
              "body": "Gets an instance of the server\u0027s default server-icon.",
              "tags": "Returns the default server-icon; null values may be used by the\n     implementation to indicate no defined icon, but this behavior is\n     not guaranteed.",
              "plain": "Gets an instance of the server\u0027s default server-icon.\n@return the default server-icon; null values may be used by the\n     implementation to indicate no defined icon, but this behavior is\n     not guaranteed"
            }
          },
          {
            "kind": "METHOD",
            "name": "getServerId()",
            "comment": {
              "body": "Get an ID of this server. The ID is a simple generally alphanumeric ID\n that can be used for uniquely identifying this server.",
              "tags": "Returns the ID of this server.",
              "plain": "Get an ID of this server. The ID is a simple generally alphanumeric ID\n that can be used for uniquely identifying this server.\n@return the ID of this server"
            }
          },
          {
            "kind": "METHOD",
            "name": "getServerName()",
            "comment": {
              "body": "Get the name of this server.",
              "tags": "Returns the name of this server.",
              "plain": "Get the name of this server.\n@return the name of this server"
            }
          },
          {
            "kind": "METHOD",
            "name": "getServicesManager()",
            "comment": {
              "body": "Gets a services manager.",
              "tags": "Returns s services manager.",
              "plain": "Gets a services manager.\n@return s services manager"
            }
          },
          {
            "kind": "METHOD",
            "name": "getShutdownMessage()",
            "comment": {
              "body": "Gets the default message that is displayed when the server is stopped.",
              "tags": "Returns the shutdown message.",
              "plain": "Gets the default message that is displayed when the server is stopped.\n@return the shutdown message"
            }
          },
          {
            "kind": "METHOD",
            "name": "getSpawnRadius()",
            "comment": {
              "body": "Gets the radius, in blocks, around each worlds spawn point to protect.",
              "tags": "Returns spawn radius, or 0 if none.",
              "plain": "Gets the radius, in blocks, around each worlds spawn point to protect.\n@return spawn radius, or 0 if none"
            }
          },
          {
            "kind": "METHOD",
            "name": "getTPS()",
            "comment": {
              "body": "Gets the current server TPS",
              "tags": "Returns current server TPS (1m, 5m, 15m in Paper-Server).",
              "plain": "Gets the current server TPS\n@return current server TPS (1m, 5m, 15m in Paper-Server)"
            }
          },
          {
            "kind": "METHOD",
            "name": "getTicksPerAnimalSpawns()",
            "comment": {
              "body": "Gets default ticks per animal spawns value.\n \u003cp\u003e\n \u003cb\u003eExample Usage:\u003c/b\u003e\n \u003cul\u003e\n \u003cli\u003eA value of 1 will mean the server will attempt to spawn monsters\n     every tick.\n \u003cli\u003eA value of 400 will mean the server will attempt to spawn monsters\n     every 400th tick.\n \u003cli\u003eA value below 0 will be reset back to Minecraft\u0027s default.\n \u003c/ul\u003e\n \u003cp\u003e\n \u003cb\u003eNote:\u003c/b\u003e If set to 0, animal spawning will be disabled. We\n recommend using spawn-animals to control this instead.\n \u003cp\u003e\n Minecraft default: 400.",
              "tags": "Returns the default ticks per animal spawns value.",
              "plain": "Gets default ticks per animal spawns value.\n \u003cp\u003e\n \u003cb\u003eExample Usage:\u003c/b\u003e\n \u003cul\u003e\n \u003cli\u003eA value of 1 will mean the server will attempt to spawn monsters\n     every tick.\n \u003cli\u003eA value of 400 will mean the server will attempt to spawn monsters\n     every 400th tick.\n \u003cli\u003eA value below 0 will be reset back to Minecraft\u0027s default.\n \u003c/ul\u003e\n \u003cp\u003e\n \u003cb\u003eNote:\u003c/b\u003e If set to 0, animal spawning will be disabled. We\n recommend using spawn-animals to control this instead.\n \u003cp\u003e\n Minecraft default: 400.\n@return the default ticks per animal spawns value"
            }
          },
          {
            "kind": "METHOD",
            "name": "getTicksPerMonsterSpawns()",
            "comment": {
              "body": "Gets the default ticks per monster spawns value.\n \u003cp\u003e\n \u003cb\u003eExample Usage:\u003c/b\u003e\n \u003cul\u003e\n \u003cli\u003eA value of 1 will mean the server will attempt to spawn monsters\n     every tick.\n \u003cli\u003eA value of 400 will mean the server will attempt to spawn monsters\n     every 400th tick.\n \u003cli\u003eA value below 0 will be reset back to Minecraft\u0027s default.\n \u003c/ul\u003e\n \u003cp\u003e\n \u003cb\u003eNote:\u003c/b\u003e If set to 0, monsters spawning will be disabled. We\n recommend using spawn-monsters to control this instead.\n \u003cp\u003e\n Minecraft default: 1.",
              "tags": "Returns the default ticks per monsters spawn value.",
              "plain": "Gets the default ticks per monster spawns value.\n \u003cp\u003e\n \u003cb\u003eExample Usage:\u003c/b\u003e\n \u003cul\u003e\n \u003cli\u003eA value of 1 will mean the server will attempt to spawn monsters\n     every tick.\n \u003cli\u003eA value of 400 will mean the server will attempt to spawn monsters\n     every 400th tick.\n \u003cli\u003eA value below 0 will be reset back to Minecraft\u0027s default.\n \u003c/ul\u003e\n \u003cp\u003e\n \u003cb\u003eNote:\u003c/b\u003e If set to 0, monsters spawning will be disabled. We\n recommend using spawn-monsters to control this instead.\n \u003cp\u003e\n Minecraft default: 1.\n@return the default ticks per monsters spawn value"
            }
          },
          {
            "kind": "METHOD",
            "name": "getUnsafe()",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "tags": "Returns the unsafe values instance.",
              "plain": "@see UnsafeValues\n@return the unsafe values instance"
            }
          },
          {
            "kind": "METHOD",
            "name": "getUpdateFolder()",
            "comment": {
              "body": "Gets the name of the update folder. The update folder is used to safely\n update plugins at the right moment on a plugin load.\n \u003cp\u003e\n The update folder name is relative to the plugins folder.",
              "tags": "Returns the name of the update folder.",
              "plain": "Gets the name of the update folder. The update folder is used to safely\n update plugins at the right moment on a plugin load.\n \u003cp\u003e\n The update folder name is relative to the plugins folder.\n@return the name of the update folder"
            }
          },
          {
            "kind": "METHOD",
            "name": "getUpdateFolderFile()",
            "comment": {
              "body": "Gets the update folder. The update folder is used to safely update\n plugins at the right moment on a plugin load.",
              "tags": "Returns the update folder.",
              "plain": "Gets the update folder. The update folder is used to safely update\n plugins at the right moment on a plugin load.\n@return the update folder"
            }
          },
          {
            "kind": "METHOD",
            "name": "getVersion()",
            "comment": {
              "body": "Gets the version string of this server implementation.",
              "tags": "Returns version of this server implementation.",
              "plain": "Gets the version string of this server implementation.\n@return version of this server implementation"
            }
          },
          {
            "kind": "METHOD",
            "name": "getViewDistance()",
            "comment": {
              "body": "Get the view distance from this server.",
              "tags": "Returns the view distance from this server..",
              "plain": "Get the view distance from this server.\n@return the view distance from this server."
            }
          },
          {
            "kind": "METHOD",
            "name": "getWarningState()",
            "comment": {
              "body": "Gets the current warning state for the server.",
              "tags": "Returns the configured warning state.",
              "plain": "Gets the current warning state for the server.\n@return the configured warning state"
            }
          },
          {
            "kind": "METHOD",
            "name": "getWaterAnimalSpawnLimit()",
            "comment": {
              "body": "Gets user-specified limit for number of water animals that can spawn in\n a chunk.",
              "tags": "Returns the water animal spawn limit.",
              "plain": "Gets user-specified limit for number of water animals that can spawn in\n a chunk.\n@return the water animal spawn limit"
            }
          },
          {
            "kind": "METHOD",
            "name": "getWhitelistedPlayers()",
            "comment": {
              "body": "Gets a list of whitelisted players.",
              "tags": "Returns a set containing all whitelisted players.",
              "plain": "Gets a list of whitelisted players.\n@return a set containing all whitelisted players"
            }
          },
          {
            "kind": "METHOD",
            "name": "getWorld(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ],
            "comment": {
              "body": "Gets the world with the given name.",
              "tags": "Returns a world with the given name, or null if none exists.",
              "plain": "Gets the world with the given name.\n@param name the name of the world to retrieve\n@return a world with the given name, or null if none exists"
            }
          },
          {
            "kind": "METHOD",
            "name": "getWorld(java.util.UUID)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "uid"
              }
            ],
            "comment": {
              "body": "Gets the world from the given Unique ID.",
              "tags": "Returns a world with the given Unique ID, or null if none exists.",
              "plain": "Gets the world from the given Unique ID.\n@param uid a unique-id of the world to retrieve\n@return a world with the given Unique ID, or null if none exists"
            }
          },
          {
            "kind": "METHOD",
            "name": "getWorldContainer()",
            "comment": {
              "body": "Gets the folder that contains all of the various \u003ca href\u003d\"org/bukkit/World.html\" title\u003d\"interface in org.bukkit\"\u003e\u003ccode\u003eWorld\u003c/code\u003e\u003c/a\u003es.",
              "tags": "Returns folder that contains all worlds.",
              "plain": "Gets the folder that contains all of the various {@link World}s.\n@return folder that contains all worlds"
            }
          },
          {
            "kind": "METHOD",
            "name": "getWorldType()",
            "comment": {
              "body": "Get world type (level-type setting) for default world.",
              "tags": "Returns the value of level-type (e.g. DEFAULT, FLAT, DEFAULT_1_1).",
              "plain": "Get world type (level-type setting) for default world.\n@return the value of level-type (e.g. DEFAULT, FLAT, DEFAULT_1_1)"
            }
          },
          {
            "kind": "METHOD",
            "name": "getWorlds()",
            "comment": {
              "body": "Gets a list of all worlds on this server.",
              "tags": "Returns a list of worlds.",
              "plain": "Gets a list of all worlds on this server.\n@return a list of worlds"
            }
          },
          {
            "kind": "METHOD",
            "name": "hasWhitelist()",
            "comment": {
              "body": "Gets whether this server has a whitelist or not.",
              "tags": "Returns whether this server has a whitelist or not.",
              "plain": "Gets whether this server has a whitelist or not.\n@return whether this server has a whitelist or not"
            }
          },
          {
            "kind": "METHOD",
            "name": "isHardcore()",
            "comment": {
              "body": "Gets whether the server is in hardcore mode or not.",
              "tags": "Returns true if the server mode is hardcore, false otherwise.",
              "plain": "Gets whether the server is in hardcore mode or not.\n@return true if the server mode is hardcore, false otherwise"
            }
          },
          {
            "kind": "METHOD",
            "name": "isPrimaryThread()",
            "comment": {
              "body": "Checks the current thread against the expected primary thread for the\n server.\n \u003cp\u003e\n \u003cb\u003eNote:\u003c/b\u003e this method should not be used to indicate the current\n synchronized state of the runtime. A current thread matching the main\n thread indicates that it is synchronized, but a mismatch \u003cb\u003edoes not\n preclude\u003c/b\u003e the same assumption.",
              "tags": "Returns true if the current thread matches the expected primary thread,\n     false otherwise.",
              "plain": "Checks the current thread against the expected primary thread for the\n server.\n \u003cp\u003e\n \u003cb\u003eNote:\u003c/b\u003e this method should not be used to indicate the current\n synchronized state of the runtime. A current thread matching the main\n thread indicates that it is synchronized, but a mismatch \u003cb\u003edoes not\n preclude\u003c/b\u003e the same assumption.\n@return true if the current thread matches the expected primary thread,\n     false otherwise"
            }
          },
          {
            "kind": "METHOD",
            "name": "loadServerIcon(java.awt.image.BufferedImage)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "image"
              }
            ],
            "comment": {
              "body": "Creates a cached server-icon for the specific image.\n \u003cp\u003e\n Size and type are implementation defined. An incompatible file is\n guaranteed to throw an implementation-defined \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/lang/Exception.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003e\u003ccode\u003eException\u003c/code\u003e\u003c/a\u003e.",
              "tags": "Returns a cached server-icon that can be used for a \u003ca href\u003d\"org/bukkit/event/server/ServerListPingEvent.html#setServerIcon(org.bukkit.util.CachedServerIcon)\"\u003e\u003ccode\u003eServerListPingEvent.setServerIcon(CachedServerIcon)\u003c/code\u003e\u003c/a\u003e.",
              "plain": "Creates a cached server-icon for the specific image.\n \u003cp\u003e\n Size and type are implementation defined. An incompatible file is\n guaranteed to throw an implementation-defined {@link Exception}.\n@param image the image to use\n@throws IllegalArgumentException if image is null\n@throws Exception if the image does not meet current server\n     server-icon specifications\n@return a cached server-icon that can be used for a {@link ServerListPingEvent#setServerIcon(CachedServerIcon)}"
            }
          },
          {
            "kind": "METHOD",
            "name": "loadServerIcon(java.io.File)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "file"
              }
            ],
            "comment": {
              "body": "Loads an image from a file, and returns a cached image for the specific\n server-icon.\n \u003cp\u003e\n Size and type are implementation defined. An incompatible file is\n guaranteed to throw an implementation-defined \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/lang/Exception.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003e\u003ccode\u003eException\u003c/code\u003e\u003c/a\u003e.",
              "tags": "Returns a cached server-icon that can be used for a \u003ca href\u003d\"org/bukkit/event/server/ServerListPingEvent.html#setServerIcon(org.bukkit.util.CachedServerIcon)\"\u003e\u003ccode\u003eServerListPingEvent.setServerIcon(CachedServerIcon)\u003c/code\u003e\u003c/a\u003e.",
              "plain": "Loads an image from a file, and returns a cached image for the specific\n server-icon.\n \u003cp\u003e\n Size and type are implementation defined. An incompatible file is\n guaranteed to throw an implementation-defined {@link Exception}.\n@param file the file to load the from\n@throws IllegalArgumentException if image is null\n@throws Exception if the image does not meet current server server-icon\n     specifications\n@return a cached server-icon that can be used for a {@link ServerListPingEvent#setServerIcon(CachedServerIcon)}"
            }
          },
          {
            "kind": "METHOD",
            "name": "matchPlayer(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ],
            "comment": {
              "body": "Attempts to match any players with the given name, and returns a list\n of all possibly matches.\n \u003cp\u003e\n This list is not sorted in any particular order. If an exact match is\n found, the returned list will only contain a single result.",
              "tags": "Returns list of all possible players.",
              "plain": "Attempts to match any players with the given name, and returns a list\n of all possibly matches.\n \u003cp\u003e\n This list is not sorted in any particular order. If an exact match is\n found, the returned list will only contain a single result.\n@param name the (partial) name to match\n@return list of all possible players"
            }
          },
          {
            "kind": "METHOD",
            "name": "recipeIterator()",
            "comment": {
              "body": "Get an iterator through the list of crafting recipes.",
              "tags": "Returns an iterator.",
              "plain": "Get an iterator through the list of crafting recipes.\n@return an iterator"
            }
          },
          {
            "kind": "METHOD",
            "name": "reload()",
            "comment": {
              "body": "Reloads the server, refreshing settings and plugin information.",
              "plain": "Reloads the server, refreshing settings and plugin information."
            }
          },
          {
            "kind": "METHOD",
            "name": "reloadCommandAliases()",
            "comment": {
              "body": "Reload the Command Aliases in commands.yml",
              "tags": "Returns Whether the reload was successful.",
              "plain": "Reload the Command Aliases in commands.yml\n@return Whether the reload was successful"
            }
          },
          {
            "kind": "METHOD",
            "name": "reloadData()",
            "comment": {
              "body": "Reload only the Minecraft data for the server. This includes custom\n advancements and loot tables.",
              "plain": "Reload only the Minecraft data for the server. This includes custom\n advancements and loot tables."
            }
          },
          {
            "kind": "METHOD",
            "name": "reloadPermissions()",
            "comment": {
              "body": "Reload the Permissions in permissions.yml",
              "plain": "Reload the Permissions in permissions.yml"
            }
          },
          {
            "kind": "METHOD",
            "name": "reloadWhitelist()",
            "comment": {
              "body": "Reloads the whitelist from disk.",
              "plain": "Reloads the whitelist from disk."
            }
          },
          {
            "kind": "METHOD",
            "name": "resetRecipes()",
            "comment": {
              "body": "Resets the list of crafting recipes to the default.",
              "plain": "Resets the list of crafting recipes to the default."
            }
          },
          {
            "kind": "METHOD",
            "name": "savePlayers()",
            "comment": {
              "body": "Writes loaded players to disk.",
              "plain": "Writes loaded players to disk."
            }
          },
          {
            "kind": "FIELD",
            "name": "server"
          },
          {
            "kind": "METHOD",
            "name": "setDefaultGameMode(org.bukkit.GameMode)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "mode"
              }
            ],
            "comment": {
              "body": "Sets the default \u003ca href\u003d\"org/bukkit/GameMode.html\" title\u003d\"enum in org.bukkit\"\u003e\u003ccode\u003eGameMode\u003c/code\u003e\u003c/a\u003e for new players.",
              "plain": "Sets the default {@link GameMode} for new players.\n@param mode the new game mode"
            }
          },
          {
            "kind": "METHOD",
            "name": "setIdleTimeout(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "threshold"
              }
            ],
            "comment": {
              "body": "Set the idle kick timeout. Any players idle for the specified amount of\n time will be automatically kicked.\n \u003cp\u003e\n A value of 0 will disable the idle kick timeout.",
              "plain": "Set the idle kick timeout. Any players idle for the specified amount of\n time will be automatically kicked.\n \u003cp\u003e\n A value of 0 will disable the idle kick timeout.\n@param threshold the idle timeout in minutes"
            }
          },
          {
            "kind": "METHOD",
            "name": "setServer(org.bukkit.Server)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "server"
              }
            ],
            "comment": {
              "body": "Attempts to set the \u003ca href\u003d\"org/bukkit/Server.html\" title\u003d\"interface in org.bukkit\"\u003e\u003ccode\u003eServer\u003c/code\u003e\u003c/a\u003e singleton.\n \u003cp\u003e\n This cannot be done if the Server is already set.",
              "plain": "Attempts to set the {@link Server} singleton.\n \u003cp\u003e\n This cannot be done if the Server is already set.\n@param server Server instance"
            }
          },
          {
            "kind": "METHOD",
            "name": "setSpawnRadius(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "value"
              }
            ],
            "comment": {
              "body": "Sets the radius, in blocks, around each worlds spawn point to protect.",
              "plain": "Sets the radius, in blocks, around each worlds spawn point to protect.\n@param value new spawn radius, or 0 if none"
            }
          },
          {
            "kind": "METHOD",
            "name": "setWhitelist(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "value"
              }
            ],
            "comment": {
              "body": "Sets if the server is whitelisted.",
              "plain": "Sets if the server is whitelisted.\n@param value true for whitelist on, false for off"
            }
          },
          {
            "kind": "METHOD",
            "name": "shutdown()",
            "comment": {
              "body": "Shutdowns the server, stopping everything.",
              "plain": "Shutdowns the server, stopping everything."
            }
          },
          {
            "kind": "METHOD",
            "name": "spigot()"
          },
          {
            "kind": "METHOD",
            "name": "suggestPlayerNamesWhenNullTabCompletions()",
            "comment": {
              "body": "Checks if player names should be suggested when a command returns \u003ccode\u003enull\u003c/code\u003e as\n their tab completion result.",
              "tags": "Returns true if player names should be suggested.",
              "plain": "Checks if player names should be suggested when a command returns {@code null} as\n their tab completion result.\n@return true if player names should be suggested"
            }
          },
          {
            "kind": "METHOD",
            "name": "unbanIP(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "address"
              }
            ],
            "comment": {
              "body": "Unbans the specified address from the server.",
              "plain": "Unbans the specified address from the server.\n@param address the IP address to unban"
            }
          },
          {
            "kind": "METHOD",
            "name": "unloadWorld(java.lang.String,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              },
              {
                "kind": "PARAMETER",
                "name": "save"
              }
            ],
            "comment": {
              "body": "Unloads a world with the given name.",
              "tags": "Returns true if successful, false otherwise.",
              "plain": "Unloads a world with the given name.\n@param name Name of the world to unload\n@param save whether to save the chunks before unloading\n@return true if successful, false otherwise"
            }
          },
          {
            "kind": "METHOD",
            "name": "unloadWorld(org.bukkit.World,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "save"
              },
              {
                "kind": "PARAMETER",
                "name": "world"
              }
            ],
            "comment": {
              "body": "Unloads the given world.",
              "tags": "Returns true if successful, false otherwise.",
              "plain": "Unloads the given world.\n@param world the world to unload\n@param save whether to save the chunks before unloading\n@return true if successful, false otherwise"
            }
          }
        ],
        "comment": {
          "body": "Represents the Bukkit core, for version and Server singleton handling",
          "plain": "Represents the Bukkit core, for version and Server singleton handling"
        }
      },
      {
        "kind": "ENUM",
        "name": "org.bukkit.ChatColor",
        "children": [
          {
            "kind": "ENUM_CONSTANT",
            "name": "AQUA",
            "comment": {
              "body": "Represents aqua",
              "plain": "Represents aqua"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLACK",
            "comment": {
              "body": "Represents black",
              "plain": "Represents black"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLUE",
            "comment": {
              "body": "Represents blue",
              "plain": "Represents blue"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BOLD",
            "comment": {
              "body": "Makes the text bold.",
              "plain": "Makes the text bold."
            }
          },
          {
            "kind": "FIELD",
            "name": "BY_CHAR"
          },
          {
            "kind": "FIELD",
            "name": "BY_ID"
          },
          {
            "kind": "FIELD",
            "name": "COLOR_CHAR",
            "comment": {
              "body": "The special character which prefixes all chat colour codes. Use this if\n you need to dynamically convert colour codes from your custom format.",
              "plain": "The special character which prefixes all chat colour codes. Use this if\n you need to dynamically convert colour codes from your custom format."
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "ChatColor(char,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "code"
              },
              {
                "kind": "PARAMETER",
                "name": "intCode"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "ChatColor(char,int,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "code"
              },
              {
                "kind": "PARAMETER",
                "name": "intCode"
              },
              {
                "kind": "PARAMETER",
                "name": "isFormat"
              }
            ]
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "DARK_AQUA",
            "comment": {
              "body": "Represents dark blue (aqua)",
              "plain": "Represents dark blue (aqua)"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "DARK_BLUE",
            "comment": {
              "body": "Represents dark blue",
              "plain": "Represents dark blue"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "DARK_GRAY",
            "comment": {
              "body": "Represents dark gray",
              "plain": "Represents dark gray"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "DARK_GREEN",
            "comment": {
              "body": "Represents dark green",
              "plain": "Represents dark green"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "DARK_PURPLE",
            "comment": {
              "body": "Represents dark purple",
              "plain": "Represents dark purple"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "DARK_RED",
            "comment": {
              "body": "Represents dark red",
              "plain": "Represents dark red"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "GOLD",
            "comment": {
              "body": "Represents gold",
              "plain": "Represents gold"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "GRAY",
            "comment": {
              "body": "Represents gray",
              "plain": "Represents gray"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "GREEN",
            "comment": {
              "body": "Represents green",
              "plain": "Represents green"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ITALIC",
            "comment": {
              "body": "Makes the text italic.",
              "plain": "Makes the text italic."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "LIGHT_PURPLE",
            "comment": {
              "body": "Represents light purple",
              "plain": "Represents light purple"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "MAGIC",
            "comment": {
              "body": "Represents magical characters that change around randomly",
              "plain": "Represents magical characters that change around randomly"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "RED",
            "comment": {
              "body": "Represents red",
              "plain": "Represents red"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "RESET",
            "comment": {
              "body": "Resets all previous chat colors or formats.",
              "plain": "Resets all previous chat colors or formats."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "STRIKETHROUGH",
            "comment": {
              "body": "Makes a line appear through the text.",
              "plain": "Makes a line appear through the text."
            }
          },
          {
            "kind": "FIELD",
            "name": "STRIP_COLOR_PATTERN"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "UNDERLINE",
            "comment": {
              "body": "Makes the text appear underlined.",
              "plain": "Makes the text appear underlined."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "WHITE",
            "comment": {
              "body": "Represents white",
              "plain": "Represents white"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "YELLOW",
            "comment": {
              "body": "Represents yellow",
              "plain": "Represents yellow"
            }
          },
          {
            "kind": "METHOD",
            "name": "asBungee()"
          },
          {
            "kind": "FIELD",
            "name": "code"
          },
          {
            "kind": "METHOD",
            "name": "getByChar(char)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "code"
              }
            ],
            "comment": {
              "body": "Gets the color represented by the specified color code",
              "tags": "Returns Associative \u003ca href\u003d\"org/bukkit/ChatColor.html\" title\u003d\"enum in org.bukkit\"\u003e\u003ccode\u003eChatColor\u003c/code\u003e\u003c/a\u003e with the given code,\n     or null if it doesn\u0027t exist.",
              "plain": "Gets the color represented by the specified color code\n@param code Code to check\n@return Associative {@link org.bukkit.ChatColor} with the given code,\n     or null if it doesn\u0027t exist"
            }
          },
          {
            "kind": "METHOD",
            "name": "getByChar(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "code"
              }
            ],
            "comment": {
              "body": "Gets the color represented by the specified color code",
              "tags": "Returns Associative \u003ca href\u003d\"org/bukkit/ChatColor.html\" title\u003d\"enum in org.bukkit\"\u003e\u003ccode\u003eChatColor\u003c/code\u003e\u003c/a\u003e with the given code,\n     or null if it doesn\u0027t exist.",
              "plain": "Gets the color represented by the specified color code\n@param code Code to check\n@return Associative {@link org.bukkit.ChatColor} with the given code,\n     or null if it doesn\u0027t exist"
            }
          },
          {
            "kind": "METHOD",
            "name": "getChar()",
            "comment": {
              "body": "Gets the char value associated with this color",
              "tags": "Returns A char value of this color code.",
              "plain": "Gets the char value associated with this color\n@return A char value of this color code"
            }
          },
          {
            "kind": "METHOD",
            "name": "getLastColors(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "input"
              }
            ],
            "comment": {
              "body": "Gets the ChatColors used at the end of the given input string.",
              "tags": "Returns Any remaining ChatColors to pass onto the next line..",
              "plain": "Gets the ChatColors used at the end of the given input string.\n@param input Input string to retrieve the colors from.\n@return Any remaining ChatColors to pass onto the next line."
            }
          },
          {
            "kind": "FIELD",
            "name": "intCode"
          },
          {
            "kind": "METHOD",
            "name": "isColor()",
            "comment": {
              "body": "Checks if this code is a color code as opposed to a format code.",
              "tags": "Returns whether this ChatColor is a color code.",
              "plain": "Checks if this code is a color code as opposed to a format code.\n@return whether this ChatColor is a color code"
            }
          },
          {
            "kind": "FIELD",
            "name": "isFormat"
          },
          {
            "kind": "METHOD",
            "name": "isFormat()",
            "comment": {
              "body": "Checks if this code is a format code as opposed to a color code.",
              "tags": "Returns whether this ChatColor is a format code.",
              "plain": "Checks if this code is a format code as opposed to a color code.\n@return whether this ChatColor is a format code"
            }
          },
          {
            "kind": "METHOD",
            "name": "stripColor(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "input"
              }
            ],
            "comment": {
              "body": "Strips the given message of all color codes",
              "tags": "Returns A copy of the input string, without any coloring.",
              "plain": "Strips the given message of all color codes\n@param input String to strip of color\n@return A copy of the input string, without any coloring"
            }
          },
          {
            "kind": "FIELD",
            "name": "toString"
          },
          {
            "kind": "METHOD",
            "name": "toString()"
          },
          {
            "kind": "METHOD",
            "name": "translateAlternateColorCodes(char,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "altColorChar"
              },
              {
                "kind": "PARAMETER",
                "name": "textToTranslate"
              }
            ],
            "comment": {
              "body": "Translates a string using an alternate color code character into a\n string that uses the internal ChatColor.COLOR_CODE color code\n character. The alternate color code character will only be replaced if\n it is immediately followed by 0-9, A-F, a-f, K-O, k-o, R or r.",
              "tags": "Returns Text containing the ChatColor.COLOR_CODE color code character..",
              "plain": "Translates a string using an alternate color code character into a\n string that uses the internal ChatColor.COLOR_CODE color code\n character. The alternate color code character will only be replaced if\n it is immediately followed by 0-9, A-F, a-f, K-O, k-o, R or r.\n@param altColorChar The alternate color code character to replace. Ex: {@literal \u0026}\n@param textToTranslate Text containing the alternate color code character.\n@return Text containing the ChatColor.COLOR_CODE color code character."
            }
          },
          {
            "kind": "METHOD",
            "name": "valueOf(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "values()"
          }
        ],
        "comment": {
          "body": "All supported color values for chat",
          "plain": "All supported color values for chat"
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.Chunk",
        "children": [
          {
            "kind": "METHOD",
            "name": "getBlock(int,int,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "y"
              },
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ],
            "comment": {
              "body": "Gets a block from this chunk",
              "tags": "Returns the Block.",
              "plain": "Gets a block from this chunk\n@param x 0-15\n@param y 0-255\n@param z 0-15\n@return the Block"
            }
          },
          {
            "kind": "METHOD",
            "name": "getChunkKey()",
            "comment": {
              "tags": "Returns The Chunks X and Z coordinates packed into a long.",
              "plain": "@return The Chunks X and Z coordinates packed into a long"
            }
          },
          {
            "kind": "METHOD",
            "name": "getChunkSnapshot()",
            "comment": {
              "body": "Capture thread-safe read-only snapshot of chunk data",
              "tags": "Returns ChunkSnapshot.",
              "plain": "Capture thread-safe read-only snapshot of chunk data\n@return ChunkSnapshot"
            }
          },
          {
            "kind": "METHOD",
            "name": "getChunkSnapshot(boolean,boolean,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "includeBiome"
              },
              {
                "kind": "PARAMETER",
                "name": "includeBiomeTempRain"
              },
              {
                "kind": "PARAMETER",
                "name": "includeMaxblocky"
              }
            ],
            "comment": {
              "body": "Capture thread-safe read-only snapshot of chunk data",
              "tags": "Returns ChunkSnapshot.",
              "plain": "Capture thread-safe read-only snapshot of chunk data\n@param includeMaxblocky - if true, snapshot includes per-coordinate\n     maximum Y values\n@param includeBiome - if true, snapshot includes per-coordinate biome\n     type\n@param includeBiomeTempRain - if true, snapshot includes per-coordinate\n     raw biome temperature and rainfall\n@return ChunkSnapshot"
            }
          },
          {
            "kind": "METHOD",
            "name": "getEntities()",
            "comment": {
              "body": "Get a list of all entities in the chunk.",
              "tags": "Returns The entities..",
              "plain": "Get a list of all entities in the chunk.\n@return The entities."
            }
          },
          {
            "kind": "METHOD",
            "name": "getTileEntities()",
            "comment": {
              "body": "Get a list of all tile entities in the chunk.",
              "tags": "Returns The tile entities..",
              "plain": "Get a list of all tile entities in the chunk.\n@return The tile entities."
            }
          },
          {
            "kind": "METHOD",
            "name": "getWorld()",
            "comment": {
              "body": "Gets the world containing this chunk",
              "tags": "Returns Parent World.",
              "plain": "Gets the world containing this chunk\n@return Parent World"
            }
          },
          {
            "kind": "METHOD",
            "name": "getX()",
            "comment": {
              "body": "Gets the X-coordinate of this chunk",
              "tags": "Returns X-coordinate.",
              "plain": "Gets the X-coordinate of this chunk\n@return X-coordinate"
            }
          },
          {
            "kind": "METHOD",
            "name": "getZ()",
            "comment": {
              "body": "Gets the Z-coordinate of this chunk",
              "tags": "Returns Z-coordinate.",
              "plain": "Gets the Z-coordinate of this chunk\n@return Z-coordinate"
            }
          },
          {
            "kind": "METHOD",
            "name": "isLoaded()",
            "comment": {
              "body": "Checks if the chunk is loaded.",
              "tags": "Returns True if it is loaded..",
              "plain": "Checks if the chunk is loaded.\n@return True if it is loaded."
            }
          },
          {
            "kind": "METHOD",
            "name": "isSlimeChunk()",
            "comment": {
              "body": "Checks if this chunk can spawn slimes without being a swamp biome.",
              "tags": "Returns true if slimes are able to spawn in this chunk.",
              "plain": "Checks if this chunk can spawn slimes without being a swamp biome.\n@return true if slimes are able to spawn in this chunk"
            }
          },
          {
            "kind": "METHOD",
            "name": "load()",
            "comment": {
              "body": "Loads the chunk.",
              "tags": "Returns true if the chunk has loaded successfully, otherwise false.",
              "plain": "Loads the chunk.\n@return true if the chunk has loaded successfully, otherwise false"
            }
          },
          {
            "kind": "METHOD",
            "name": "load(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "generate"
              }
            ],
            "comment": {
              "body": "Loads the chunk.",
              "tags": "Returns true if the chunk has loaded successfully, otherwise false.",
              "plain": "Loads the chunk.\n@param generate Whether or not to generate a chunk if it doesn\u0027t\n     already exist\n@return true if the chunk has loaded successfully, otherwise false"
            }
          },
          {
            "kind": "METHOD",
            "name": "unload()",
            "comment": {
              "body": "Unloads and optionally saves the Chunk",
              "tags": "Returns true if the chunk has unloaded successfully, otherwise false.",
              "plain": "Unloads and optionally saves the Chunk\n@return true if the chunk has unloaded successfully, otherwise false"
            }
          },
          {
            "kind": "METHOD",
            "name": "unload(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "save"
              }
            ],
            "comment": {
              "body": "Unloads and optionally saves the Chunk",
              "tags": "Returns true if the chunk has unloaded successfully, otherwise false.",
              "plain": "Unloads and optionally saves the Chunk\n@param save Controls whether the chunk is saved\n@return true if the chunk has unloaded successfully, otherwise false"
            }
          },
          {
            "kind": "METHOD",
            "name": "unload(boolean,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "safe"
              },
              {
                "kind": "PARAMETER",
                "name": "save"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Unloads and optionally saves the Chunk",
              "tags": "Returns true if the chunk has unloaded successfully, otherwise false.",
              "plain": "Unloads and optionally saves the Chunk\n@param save Controls whether the chunk is saved\n@param safe Controls whether to unload the chunk when players are\n     nearby\n@return true if the chunk has unloaded successfully, otherwise false\n@deprecated it is never safe to remove a chunk in use"
            }
          }
        ],
        "comment": {
          "body": "Represents a chunk of blocks",
          "plain": "Represents a chunk of blocks"
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.ChunkSnapshot",
        "children": [
          {
            "kind": "METHOD",
            "name": "getBiome(int,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ],
            "comment": {
              "body": "Get biome at given coordinates",
              "tags": "Returns Biome at given coordinate.",
              "plain": "Get biome at given coordinates\n@param x X-coordinate\n@param z Z-coordinate\n@return Biome at given coordinate"
            }
          },
          {
            "kind": "METHOD",
            "name": "getBlockData(int,int,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "y"
              },
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Get block data for block at corresponding coordinate in the chunk",
              "tags": "Returns 0-15.",
              "plain": "Get block data for block at corresponding coordinate in the chunk\n@param x 0-15\n@param y 0-127\n@param z 0-15\n@return 0-15\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "getBlockEmittedLight(int,int,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "y"
              },
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ],
            "comment": {
              "body": "Get light level emitted by block at corresponding coordinate in the\n chunk",
              "tags": "Returns 0-15.",
              "plain": "Get light level emitted by block at corresponding coordinate in the\n chunk\n@param x 0-15\n@param y 0-127\n@param z 0-15\n@return 0-15"
            }
          },
          {
            "kind": "METHOD",
            "name": "getBlockSkyLight(int,int,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "y"
              },
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ],
            "comment": {
              "body": "Get sky light level for block at corresponding coordinate in the chunk",
              "tags": "Returns 0-15.",
              "plain": "Get sky light level for block at corresponding coordinate in the chunk\n@param x 0-15\n@param y 0-127\n@param z 0-15\n@return 0-15"
            }
          },
          {
            "kind": "METHOD",
            "name": "getBlockType(int,int,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "y"
              },
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ],
            "comment": {
              "body": "Get block type for block at corresponding coordinate in the chunk",
              "tags": "Returns block material type.",
              "plain": "Get block type for block at corresponding coordinate in the chunk\n@param x 0-15\n@param y 0-127\n@param z 0-15\n@return block material type"
            }
          },
          {
            "kind": "METHOD",
            "name": "getBlockTypeId(int,int,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "y"
              },
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Get block type for block at corresponding coordinate in the chunk",
              "tags": "Returns 0-255.",
              "plain": "Get block type for block at corresponding coordinate in the chunk\n@param x 0-15\n@param y 0-127\n@param z 0-15\n@return 0-255\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "getCaptureFullTime()",
            "comment": {
              "body": "Get world full time when chunk snapshot was captured",
              "tags": "Returns time in ticks.",
              "plain": "Get world full time when chunk snapshot was captured\n@return time in ticks"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHighestBlockYAt(int,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ],
            "comment": {
              "body": "Gets the highest non-air coordinate at the given coordinates",
              "tags": "Returns Y-coordinate of the highest non-air block.",
              "plain": "Gets the highest non-air coordinate at the given coordinates\n@param x X-coordinate of the blocks\n@param z Z-coordinate of the blocks\n@return Y-coordinate of the highest non-air block"
            }
          },
          {
            "kind": "METHOD",
            "name": "getRawBiomeRainfall(int,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Get raw biome rainfall (0.0-1.0) at given coordinate",
              "tags": "Returns rainfall at given coordinate.",
              "plain": "Get raw biome rainfall (0.0-1.0) at given coordinate\n@param x X-coordinate\n@param z Z-coordinate\n@return rainfall at given coordinate\n@deprecated this is not a chunk property in current Minecraft versions"
            }
          },
          {
            "kind": "METHOD",
            "name": "getRawBiomeTemperature(int,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ],
            "comment": {
              "body": "Get raw biome temperature (0.0-1.0) at given coordinate",
              "tags": "Returns temperature at given coordinate.",
              "plain": "Get raw biome temperature (0.0-1.0) at given coordinate\n@param x X-coordinate\n@param z Z-coordinate\n@return temperature at given coordinate"
            }
          },
          {
            "kind": "METHOD",
            "name": "getWorldName()",
            "comment": {
              "body": "Gets name of the world containing this chunk",
              "tags": "Returns Parent World Name.",
              "plain": "Gets name of the world containing this chunk\n@return Parent World Name"
            }
          },
          {
            "kind": "METHOD",
            "name": "getX()",
            "comment": {
              "body": "Gets the X-coordinate of this chunk",
              "tags": "Returns X-coordinate.",
              "plain": "Gets the X-coordinate of this chunk\n@return X-coordinate"
            }
          },
          {
            "kind": "METHOD",
            "name": "getZ()",
            "comment": {
              "body": "Gets the Z-coordinate of this chunk",
              "tags": "Returns Z-coordinate.",
              "plain": "Gets the Z-coordinate of this chunk\n@return Z-coordinate"
            }
          },
          {
            "kind": "METHOD",
            "name": "isSectionEmpty(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "sy"
              }
            ],
            "comment": {
              "body": "Test if section is empty",
              "tags": "Returns true if empty, false if not.",
              "plain": "Test if section is empty\n@param sy - section Y coordinate (block Y / 16)\n@return true if empty, false if not"
            }
          }
        ],
        "comment": {
          "body": "Represents a static, thread-safe snapshot of chunk of blocks.\n \u003cp\u003e\n Purpose is to allow clean, efficient copy of a chunk data to be made, and\n then handed off for processing in another thread (e.g. map rendering)",
          "plain": "Represents a static, thread-safe snapshot of chunk of blocks.\n \u003cp\u003e\n Purpose is to allow clean, efficient copy of a chunk data to be made, and\n then handed off for processing in another thread (e.g. map rendering)"
        }
      },
      {
        "kind": "ENUM",
        "name": "org.bukkit.CoalType",
        "children": [
          {
            "kind": "FIELD",
            "name": "BY_DATA"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "CHARCOAL"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "COAL"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "CoalType(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "data"
          },
          {
            "kind": "METHOD",
            "name": "getByData(byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Gets the type of coal with the given data value",
              "tags": "Returns The \u003ca href\u003d\"org/bukkit/CoalType.html\" title\u003d\"enum in org.bukkit\"\u003e\u003ccode\u003eCoalType\u003c/code\u003e\u003c/a\u003e representing the given value, or null if\n     it doesn\u0027t exist.",
              "plain": "Gets the type of coal with the given data value\n@param data Data value to fetch\n@return The {@link CoalType} representing the given value, or null if\n     it doesn\u0027t exist\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "getData()",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Gets the associated data value representing this type of coal",
              "tags": "Returns A byte containing the data value of this coal type.",
              "plain": "Gets the associated data value representing this type of coal\n@return A byte containing the data value of this coal type\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "valueOf(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "values()"
          }
        ],
        "comment": {
          "body": "Represents the two types of coal",
          "plain": "Represents the two types of coal"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.Color",
        "children": [
          {
            "kind": "FIELD",
            "name": "AQUA",
            "comment": {
              "body": "Aqua, or (0x00,0xFF,0xFF) in (R,G,B)",
              "plain": "Aqua, or (0x00,0xFF,0xFF) in (R,G,B)"
            }
          },
          {
            "kind": "FIELD",
            "name": "BIT_MASK"
          },
          {
            "kind": "FIELD",
            "name": "BLACK",
            "comment": {
              "body": "Black, or (0x00,0x00,0x00) in (R,G,B)",
              "plain": "Black, or (0x00,0x00,0x00) in (R,G,B)"
            }
          },
          {
            "kind": "FIELD",
            "name": "BLUE",
            "comment": {
              "body": "Blue, or (0x00,0x00,0xFF) in (R,G,B)",
              "plain": "Blue, or (0x00,0x00,0xFF) in (R,G,B)"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Color(int,int,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "blue"
              },
              {
                "kind": "PARAMETER",
                "name": "green"
              },
              {
                "kind": "PARAMETER",
                "name": "red"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "FUCHSIA",
            "comment": {
              "body": "Fuchsia, or (0xFF,0x00,0xFF) in (R,G,B)",
              "plain": "Fuchsia, or (0xFF,0x00,0xFF) in (R,G,B)"
            }
          },
          {
            "kind": "FIELD",
            "name": "GRAY",
            "comment": {
              "body": "Gray, or (0x80,0x80,0x80) in (R,G,B)",
              "plain": "Gray, or (0x80,0x80,0x80) in (R,G,B)"
            }
          },
          {
            "kind": "FIELD",
            "name": "GREEN",
            "comment": {
              "body": "Green, or (0x00,0x80,0x00) in (R,G,B)",
              "plain": "Green, or (0x00,0x80,0x00) in (R,G,B)"
            }
          },
          {
            "kind": "FIELD",
            "name": "LIME",
            "comment": {
              "body": "Lime, or (0x00,0xFF,0x00) in (R,G,B)",
              "plain": "Lime, or (0x00,0xFF,0x00) in (R,G,B)"
            }
          },
          {
            "kind": "FIELD",
            "name": "MAROON",
            "comment": {
              "body": "Maroon, or (0x80,0x00,0x00) in (R,G,B)",
              "plain": "Maroon, or (0x80,0x00,0x00) in (R,G,B)"
            }
          },
          {
            "kind": "FIELD",
            "name": "NAVY",
            "comment": {
              "body": "Navy, or (0x00,0x00,0x80) in (R,G,B)",
              "plain": "Navy, or (0x00,0x00,0x80) in (R,G,B)"
            }
          },
          {
            "kind": "FIELD",
            "name": "OLIVE",
            "comment": {
              "body": "Olive, or (0x80,0x80,0x00) in (R,G,B)",
              "plain": "Olive, or (0x80,0x80,0x00) in (R,G,B)"
            }
          },
          {
            "kind": "FIELD",
            "name": "ORANGE",
            "comment": {
              "body": "Orange, or (0xFF,0xA5,0x00) in (R,G,B)",
              "plain": "Orange, or (0xFF,0xA5,0x00) in (R,G,B)"
            }
          },
          {
            "kind": "FIELD",
            "name": "PURPLE",
            "comment": {
              "body": "Purple, or (0x80,0x00,0x80) in (R,G,B)",
              "plain": "Purple, or (0x80,0x00,0x80) in (R,G,B)"
            }
          },
          {
            "kind": "FIELD",
            "name": "RED",
            "comment": {
              "body": "Red, or (0xFF,0x00,0x00) in (R,G,B)",
              "plain": "Red, or (0xFF,0x00,0x00) in (R,G,B)"
            }
          },
          {
            "kind": "FIELD",
            "name": "SILVER",
            "comment": {
              "body": "Silver, or (0xC0,0xC0,0xC0) in (R,G,B)",
              "plain": "Silver, or (0xC0,0xC0,0xC0) in (R,G,B)"
            }
          },
          {
            "kind": "FIELD",
            "name": "TEAL",
            "comment": {
              "body": "Teal, or (0x00,0x80,0x80) in (R,G,B)",
              "plain": "Teal, or (0x00,0x80,0x80) in (R,G,B)"
            }
          },
          {
            "kind": "FIELD",
            "name": "WHITE",
            "comment": {
              "body": "White, or (0xFF,0xFF,0xFF) in (R,G,B)",
              "plain": "White, or (0xFF,0xFF,0xFF) in (R,G,B)"
            }
          },
          {
            "kind": "FIELD",
            "name": "YELLOW",
            "comment": {
              "body": "Yellow, or (0xFF,0xFF,0x00) in (R,G,B)",
              "plain": "Yellow, or (0xFF,0xFF,0x00) in (R,G,B)"
            }
          },
          {
            "kind": "METHOD",
            "name": "asBGR()",
            "comment": {
              "tags": "Returns An integer representation of this color, as 0xBBGGRR.",
              "plain": "@return An integer representation of this color, as 0xBBGGRR"
            }
          },
          {
            "kind": "METHOD",
            "name": "asInt(java.lang.String,java.util.Map\u003cjava.lang.String,java.lang.Object\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "map"
              },
              {
                "kind": "PARAMETER",
                "name": "string"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "asRGB()",
            "comment": {
              "tags": "Returns An integer representation of this color, as 0xRRGGBB.",
              "plain": "@return An integer representation of this color, as 0xRRGGBB"
            }
          },
          {
            "kind": "FIELD",
            "name": "blue"
          },
          {
            "kind": "METHOD",
            "name": "deserialize(java.util.Map\u003cjava.lang.String,java.lang.Object\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "map"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "equals(java.lang.Object)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "o"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "fromBGR(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "bgr"
              }
            ],
            "comment": {
              "body": "Creates a new color object from an integer that contains the blue,\n green, and red bytes in the lowest order 24 bits.",
              "tags": "Returns a new color object for specified values.",
              "plain": "Creates a new color object from an integer that contains the blue,\n green, and red bytes in the lowest order 24 bits.\n@param bgr the integer storing the blue, green, and red values\n@return a new color object for specified values\n@throws IllegalArgumentException if any data is in the highest order 8\n     bits"
            }
          },
          {
            "kind": "METHOD",
            "name": "fromBGR(int,int,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "blue"
              },
              {
                "kind": "PARAMETER",
                "name": "green"
              },
              {
                "kind": "PARAMETER",
                "name": "red"
              }
            ],
            "comment": {
              "body": "Creates a new Color object from a blue, green, and red",
              "tags": "Returns a new Color object for the red, green, blue.",
              "plain": "Creates a new Color object from a blue, green, and red\n@param blue integer from 0-255\n@param green integer from 0-255\n@param red integer from 0-255\n@return a new Color object for the red, green, blue\n@throws IllegalArgumentException if any value is strictly {@literal \u003e255 or \u003c0}"
            }
          },
          {
            "kind": "METHOD",
            "name": "fromRGB(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "rgb"
              }
            ],
            "comment": {
              "body": "Creates a new color object from an integer that contains the red,\n green, and blue bytes in the lowest order 24 bits.",
              "tags": "Returns a new color object for specified values.",
              "plain": "Creates a new color object from an integer that contains the red,\n green, and blue bytes in the lowest order 24 bits.\n@param rgb the integer storing the red, green, and blue values\n@return a new color object for specified values\n@throws IllegalArgumentException if any data is in the highest order 8\n     bits"
            }
          },
          {
            "kind": "METHOD",
            "name": "fromRGB(int,int,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "blue"
              },
              {
                "kind": "PARAMETER",
                "name": "green"
              },
              {
                "kind": "PARAMETER",
                "name": "red"
              }
            ],
            "comment": {
              "body": "Creates a new Color object from a red, green, and blue",
              "tags": "Returns a new Color object for the red, green, blue.",
              "plain": "Creates a new Color object from a red, green, and blue\n@param red integer from 0-255\n@param green integer from 0-255\n@param blue integer from 0-255\n@return a new Color object for the red, green, blue\n@throws IllegalArgumentException if any value is strictly {@literal \u003e255 or \u003c0}"
            }
          },
          {
            "kind": "METHOD",
            "name": "getBlue()",
            "comment": {
              "body": "Gets the blue component",
              "tags": "Returns blue component, from 0 to 255.",
              "plain": "Gets the blue component\n@return blue component, from 0 to 255"
            }
          },
          {
            "kind": "METHOD",
            "name": "getGreen()",
            "comment": {
              "body": "Gets the green component",
              "tags": "Returns green component, from 0 to 255.",
              "plain": "Gets the green component\n@return green component, from 0 to 255"
            }
          },
          {
            "kind": "METHOD",
            "name": "getRed()",
            "comment": {
              "body": "Gets the red component",
              "tags": "Returns red component, from 0 to 255.",
              "plain": "Gets the red component\n@return red component, from 0 to 255"
            }
          },
          {
            "kind": "FIELD",
            "name": "green"
          },
          {
            "kind": "METHOD",
            "name": "hashCode()"
          },
          {
            "kind": "METHOD",
            "name": "mixColors(org.bukkit.Color...)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "colors"
              }
            ],
            "comment": {
              "body": "Creates a new color with its RGB components changed as if it was dyed\n with the colors passed in, replicating vanilla workbench dyeing",
              "tags": "Returns A new color with the changed rgb components.",
              "plain": "Creates a new color with its RGB components changed as if it was dyed\n with the colors passed in, replicating vanilla workbench dyeing\n@param colors The colors to dye with\n@return A new color with the changed rgb components"
            }
          },
          {
            "kind": "METHOD",
            "name": "mixDyes(org.bukkit.DyeColor...)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "colors"
              }
            ],
            "comment": {
              "body": "Creates a new color with its RGB components changed as if it was dyed\n with the colors passed in, replicating vanilla workbench dyeing",
              "tags": "Returns A new color with the changed rgb components.",
              "plain": "Creates a new color with its RGB components changed as if it was dyed\n with the colors passed in, replicating vanilla workbench dyeing\n@param colors The DyeColors to dye with\n@return A new color with the changed rgb components"
            }
          },
          {
            "kind": "FIELD",
            "name": "red"
          },
          {
            "kind": "METHOD",
            "name": "serialize()"
          },
          {
            "kind": "METHOD",
            "name": "setBlue(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "blue"
              }
            ],
            "comment": {
              "body": "Creates a new Color object with specified component",
              "tags": "Returns a new color object with the red component.",
              "plain": "Creates a new Color object with specified component\n@param blue the red component, from 0 to 255\n@return a new color object with the red component"
            }
          },
          {
            "kind": "METHOD",
            "name": "setGreen(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "green"
              }
            ],
            "comment": {
              "body": "Creates a new Color object with specified component",
              "tags": "Returns a new color object with the red component.",
              "plain": "Creates a new Color object with specified component\n@param green the red component, from 0 to 255\n@return a new color object with the red component"
            }
          },
          {
            "kind": "METHOD",
            "name": "setRed(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "red"
              }
            ],
            "comment": {
              "body": "Creates a new Color object with specified component",
              "tags": "Returns a new color object with the red component.",
              "plain": "Creates a new Color object with specified component\n@param red the red component, from 0 to 255\n@return a new color object with the red component"
            }
          },
          {
            "kind": "METHOD",
            "name": "toString()"
          }
        ],
        "comment": {
          "body": "A container for a color palette. This class is immutable; the set methods\n return a new color. The color names listed as fields are HTML4 standards,\n but subject to change.",
          "plain": "A container for a color palette. This class is immutable; the set methods\n return a new color. The color names listed as fields are HTML4 standards,\n but subject to change."
        }
      },
      {
        "kind": "ENUM",
        "name": "org.bukkit.CropState",
        "children": [
          {
            "kind": "FIELD",
            "name": "BY_DATA"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "CropState(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              }
            ]
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "GERMINATED",
            "comment": {
              "body": "First growth stage",
              "plain": "First growth stage"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "MEDIUM",
            "comment": {
              "body": "Fourth growth stage",
              "plain": "Fourth growth stage"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "RIPE",
            "comment": {
              "body": "Ripe stage",
              "plain": "Ripe stage"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SEEDED",
            "comment": {
              "body": "State when first seeded",
              "plain": "State when first seeded"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SMALL",
            "comment": {
              "body": "Third growth stage",
              "plain": "Third growth stage"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "TALL",
            "comment": {
              "body": "Fifth growth stage",
              "plain": "Fifth growth stage"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "VERY_SMALL",
            "comment": {
              "body": "Second growth stage",
              "plain": "Second growth stage"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "VERY_TALL",
            "comment": {
              "body": "Almost ripe stage",
              "plain": "Almost ripe stage"
            }
          },
          {
            "kind": "FIELD",
            "name": "data"
          },
          {
            "kind": "METHOD",
            "name": "getByData(byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Gets the CropState with the given data value",
              "tags": "Returns The \u003ca href\u003d\"org/bukkit/CropState.html\" title\u003d\"enum in org.bukkit\"\u003e\u003ccode\u003eCropState\u003c/code\u003e\u003c/a\u003e representing the given value, or null if\n     it doesn\u0027t exist.",
              "plain": "Gets the CropState with the given data value\n@param data Data value to fetch\n@return The {@link CropState} representing the given value, or null if\n     it doesn\u0027t exist\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "getData()",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Gets the associated data value representing this growth state",
              "tags": "Returns A byte containing the data value of this growth state.",
              "plain": "Gets the associated data value representing this growth state\n@return A byte containing the data value of this growth state\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "valueOf(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "values()"
          }
        ],
        "comment": {
          "body": "Represents the different growth states of crops",
          "plain": "Represents the different growth states of crops"
        }
      },
      {
        "kind": "ENUM",
        "name": "org.bukkit.Difficulty",
        "children": [
          {
            "kind": "FIELD",
            "name": "BY_ID"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Difficulty(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "value"
              }
            ]
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "EASY",
            "comment": {
              "body": "Hostile mobs spawn, enemies deal less damage than on normal difficulty,\n the hunger bar does deplete and starving deals up to 5 hearts of\n damage. (Default value)",
              "plain": "Hostile mobs spawn, enemies deal less damage than on normal difficulty,\n the hunger bar does deplete and starving deals up to 5 hearts of\n damage. (Default value)"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "HARD",
            "comment": {
              "body": "Hostile mobs spawn, enemies deal greater damage than on normal\n difficulty, the hunger bar does deplete and starving can kill players.",
              "plain": "Hostile mobs spawn, enemies deal greater damage than on normal\n difficulty, the hunger bar does deplete and starving can kill players."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "NORMAL",
            "comment": {
              "body": "Hostile mobs spawn, enemies deal normal amounts of damage, the hunger\n bar does deplete and starving deals up to 9.5 hearts of damage.",
              "plain": "Hostile mobs spawn, enemies deal normal amounts of damage, the hunger\n bar does deplete and starving deals up to 9.5 hearts of damage."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "PEACEFUL",
            "comment": {
              "body": "Players regain health over time, hostile mobs don\u0027t spawn, the hunger\n bar does not deplete.",
              "plain": "Players regain health over time, hostile mobs don\u0027t spawn, the hunger\n bar does not deplete."
            }
          },
          {
            "kind": "METHOD",
            "name": "getByValue(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "value"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Gets the Difficulty represented by the specified value",
              "tags": "Returns Associative \u003ca href\u003d\"org/bukkit/Difficulty.html\" title\u003d\"enum in org.bukkit\"\u003e\u003ccode\u003eDifficulty\u003c/code\u003e\u003c/a\u003e with the given value, or null if\n     it doesn\u0027t exist.",
              "plain": "Gets the Difficulty represented by the specified value\n@param value Value to check\n@return Associative {@link Difficulty} with the given value, or null if\n     it doesn\u0027t exist\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "getValue()",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Gets the difficulty value associated with this Difficulty.",
              "tags": "Returns An integer value of this difficulty.",
              "plain": "Gets the difficulty value associated with this Difficulty.\n@return An integer value of this difficulty\n@deprecated Magic value"
            }
          },
          {
            "kind": "FIELD",
            "name": "value"
          },
          {
            "kind": "METHOD",
            "name": "valueOf(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "values()"
          }
        ],
        "comment": {
          "body": "Represents the various difficulty levels that are available.",
          "plain": "Represents the various difficulty levels that are available."
        }
      },
      {
        "kind": "ENUM",
        "name": "org.bukkit.DyeColor",
        "children": [
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLACK",
            "comment": {
              "body": "Represents black dye.",
              "plain": "Represents black dye."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLUE",
            "comment": {
              "body": "Represents blue dye.",
              "plain": "Represents blue dye."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BROWN",
            "comment": {
              "body": "Represents brown dye.",
              "plain": "Represents brown dye."
            }
          },
          {
            "kind": "FIELD",
            "name": "BY_COLOR"
          },
          {
            "kind": "FIELD",
            "name": "BY_DYE_DATA"
          },
          {
            "kind": "FIELD",
            "name": "BY_FIREWORK"
          },
          {
            "kind": "FIELD",
            "name": "BY_WOOL_DATA"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "CYAN",
            "comment": {
              "body": "Represents cyan dye.",
              "plain": "Represents cyan dye."
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "DyeColor(int,int,org.bukkit.Color,org.bukkit.Color)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "color"
              },
              {
                "kind": "PARAMETER",
                "name": "dyeData"
              },
              {
                "kind": "PARAMETER",
                "name": "firework"
              },
              {
                "kind": "PARAMETER",
                "name": "woolData"
              }
            ]
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "GRAY",
            "comment": {
              "body": "Represents gray dye.",
              "plain": "Represents gray dye."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "GREEN",
            "comment": {
              "body": "Represents green dye.",
              "plain": "Represents green dye."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "LIGHT_BLUE",
            "comment": {
              "body": "Represents light blue dye.",
              "plain": "Represents light blue dye."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "LIME",
            "comment": {
              "body": "Represents lime dye.",
              "plain": "Represents lime dye."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "MAGENTA",
            "comment": {
              "body": "Represents magenta dye.",
              "plain": "Represents magenta dye."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ORANGE",
            "comment": {
              "body": "Represents orange dye.",
              "plain": "Represents orange dye."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "PINK",
            "comment": {
              "body": "Represents pink dye.",
              "plain": "Represents pink dye."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "PURPLE",
            "comment": {
              "body": "Represents purple dye.",
              "plain": "Represents purple dye."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "RED",
            "comment": {
              "body": "Represents red dye.",
              "plain": "Represents red dye."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SILVER",
            "comment": {
              "body": "Represents silver dye.",
              "plain": "Represents silver dye."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "WHITE",
            "comment": {
              "body": "Represents white dye.",
              "plain": "Represents white dye."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "YELLOW",
            "comment": {
              "body": "Represents yellow dye.",
              "plain": "Represents yellow dye."
            }
          },
          {
            "kind": "FIELD",
            "name": "color"
          },
          {
            "kind": "FIELD",
            "name": "dyeData"
          },
          {
            "kind": "FIELD",
            "name": "firework"
          },
          {
            "kind": "METHOD",
            "name": "getByColor(org.bukkit.Color)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "color"
              }
            ],
            "comment": {
              "body": "Gets the DyeColor with the given color value.",
              "tags": "Returns The \u003ca href\u003d\"org/bukkit/DyeColor.html\" title\u003d\"enum in org.bukkit\"\u003e\u003ccode\u003eDyeColor\u003c/code\u003e\u003c/a\u003e representing the given value, or null if\n     it doesn\u0027t exist.",
              "plain": "Gets the DyeColor with the given color value.\n@param color Color value to get the dye by\n@return The {@link DyeColor} representing the given value, or null if\n     it doesn\u0027t exist"
            }
          },
          {
            "kind": "METHOD",
            "name": "getByDyeData(byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Gets the DyeColor with the given dye data value.",
              "tags": "Returns The \u003ca href\u003d\"org/bukkit/DyeColor.html\" title\u003d\"enum in org.bukkit\"\u003e\u003ccode\u003eDyeColor\u003c/code\u003e\u003c/a\u003e representing the given value, or null if\n     it doesn\u0027t exist.",
              "plain": "Gets the DyeColor with the given dye data value.\n@param data Dye data value to fetch\n@return The {@link DyeColor} representing the given value, or null if\n     it doesn\u0027t exist\n@see #getByWoolData(byte)\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "getByFireworkColor(org.bukkit.Color)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "color"
              }
            ],
            "comment": {
              "body": "Gets the DyeColor with the given firework color value.",
              "tags": "Returns The \u003ca href\u003d\"org/bukkit/DyeColor.html\" title\u003d\"enum in org.bukkit\"\u003e\u003ccode\u003eDyeColor\u003c/code\u003e\u003c/a\u003e representing the given value, or null if\n     it doesn\u0027t exist.",
              "plain": "Gets the DyeColor with the given firework color value.\n@param color Color value to get dye by\n@return The {@link DyeColor} representing the given value, or null if\n     it doesn\u0027t exist"
            }
          },
          {
            "kind": "METHOD",
            "name": "getByWoolData(byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Gets the DyeColor with the given wool data value.",
              "tags": "Returns The \u003ca href\u003d\"org/bukkit/DyeColor.html\" title\u003d\"enum in org.bukkit\"\u003e\u003ccode\u003eDyeColor\u003c/code\u003e\u003c/a\u003e representing the given value, or null if\n     it doesn\u0027t exist.",
              "plain": "Gets the DyeColor with the given wool data value.\n@param data Wool data value to fetch\n@return The {@link DyeColor} representing the given value, or null if\n     it doesn\u0027t exist\n@see #getByDyeData(byte)\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "getColor()",
            "comment": {
              "body": "Gets the color that this dye represents.",
              "tags": "Returns The \u003ca href\u003d\"org/bukkit/Color.html\" title\u003d\"class in org.bukkit\"\u003e\u003ccode\u003eColor\u003c/code\u003e\u003c/a\u003e that this dye represents.",
              "plain": "Gets the color that this dye represents.\n@return The {@link Color} that this dye represents"
            }
          },
          {
            "kind": "METHOD",
            "name": "getDyeData()",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Gets the associated dye data value representing this color.",
              "tags": "Returns A byte containing the dye data value of this color.",
              "plain": "Gets the associated dye data value representing this color.\n@return A byte containing the dye data value of this color\n@see #getWoolData()\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "getFireworkColor()",
            "comment": {
              "body": "Gets the firework color that this dye represents.",
              "tags": "Returns The \u003ca href\u003d\"org/bukkit/Color.html\" title\u003d\"class in org.bukkit\"\u003e\u003ccode\u003eColor\u003c/code\u003e\u003c/a\u003e that this dye represents.",
              "plain": "Gets the firework color that this dye represents.\n@return The {@link Color} that this dye represents"
            }
          },
          {
            "kind": "METHOD",
            "name": "getWoolData()",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Gets the associated wool data value representing this color.",
              "tags": "Returns A byte containing the wool data value of this color.",
              "plain": "Gets the associated wool data value representing this color.\n@return A byte containing the wool data value of this color\n@see #getDyeData()\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "valueOf(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "values()"
          },
          {
            "kind": "FIELD",
            "name": "woolData"
          }
        ],
        "comment": {
          "body": "All supported color values for dyes and cloth",
          "plain": "All supported color values for dyes and cloth"
        }
      },
      {
        "kind": "ENUM",
        "name": "org.bukkit.Effect",
        "children": [
          {
            "kind": "ENUM_CONSTANT",
            "name": "ANVIL_BREAK",
            "comment": {
              "body": "The sound played when an anvil breaks",
              "plain": "The sound played when an anvil breaks"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ANVIL_LAND",
            "comment": {
              "body": "The sound played when an anvil lands after\n falling",
              "plain": "The sound played when an anvil lands after\n falling"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ANVIL_USE",
            "comment": {
              "body": "The sound played when an anvil is used",
              "plain": "The sound played when an anvil is used"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BAT_TAKEOFF",
            "comment": {
              "body": "Sound played by a bat taking off",
              "plain": "Sound played by a bat taking off"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLAZE_SHOOT",
            "comment": {
              "body": "Sound of blaze firing.",
              "plain": "Sound of blaze firing."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BOW_FIRE",
            "comment": {
              "body": "Sound of a bow firing.",
              "plain": "Sound of a bow firing."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BREWING_STAND_BREW",
            "comment": {
              "body": "The sound played by brewing stands when brewing",
              "plain": "The sound played by brewing stands when brewing"
            }
          },
          {
            "kind": "FIELD",
            "name": "BY_ID"
          },
          {
            "kind": "FIELD",
            "name": "BY_NAME"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "CHORUS_FLOWER_DEATH",
            "comment": {
              "body": "The sound played when a chorus flower dies",
              "plain": "The sound played when a chorus flower dies"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "CHORUS_FLOWER_GROW",
            "comment": {
              "body": "The sound played when a chorus flower grows",
              "plain": "The sound played when a chorus flower grows"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "CLICK1",
            "comment": {
              "body": "A click sound.",
              "plain": "A click sound."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "CLICK2",
            "comment": {
              "body": "An alternate click sound.",
              "plain": "An alternate click sound."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "CLOUD",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "A puff of white smoke",
              "plain": "A puff of white smoke\n@deprecated Spigot specific API, use {@link Particle}."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "COLOURED_DUST",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Multicolored dust particles",
              "plain": "Multicolored dust particles\n@deprecated Spigot specific API, use {@link Particle}."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "CRIT",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Critical hit particles",
              "plain": "Critical hit particles\n@deprecated Spigot specific API, use {@link Particle}."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "DOOR_CLOSE",
            "comment": {
              "body": "Sound of a door closing.",
              "plain": "Sound of a door closing."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "DOOR_TOGGLE",
            "comment": {
              "body": "Sound of a door opening.",
              "plain": "Sound of a door opening."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "DRAGON_BREATH",
            "comment": {
              "body": "The sound/particles used by the enderdragon\u0027s breath\n attack.",
              "plain": "The sound/particles used by the enderdragon\u0027s breath\n attack."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENDERDRAGON_GROWL",
            "comment": {
              "body": "The sound of an enderdragon growling",
              "plain": "The sound of an enderdragon growling"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENDERDRAGON_SHOOT",
            "comment": {
              "body": "Sound of an enderdragon firing",
              "plain": "Sound of an enderdragon firing"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENDEREYE_LAUNCH",
            "comment": {
              "body": "The sound played when launching an endereye",
              "plain": "The sound played when launching an endereye"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENDER_SIGNAL",
            "comment": {
              "body": "An ender eye signal; a visual effect.",
              "plain": "An ender eye signal; a visual effect."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "END_GATEWAY_SPAWN",
            "comment": {
              "body": "The sound/particles caused by a end gateway spawning",
              "plain": "The sound/particles caused by a end gateway spawning"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "EXPLOSION",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Explosion particles",
              "plain": "Explosion particles\n@deprecated Spigot specific API, use {@link Particle}."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "EXPLOSION_HUGE",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "The biggest explosion particle effect",
              "plain": "The biggest explosion particle effect\n@deprecated Spigot specific API, use {@link Particle}."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "EXPLOSION_LARGE",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "A larger version of the explode particle",
              "plain": "A larger version of the explode particle\n@deprecated Spigot specific API, use {@link Particle}."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "EXTINGUISH",
            "comment": {
              "body": "Sound of fire being extinguished.",
              "plain": "Sound of fire being extinguished."
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Effect(int,org.bukkit.Effect.Type)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "id"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Effect(int,org.bukkit.Effect.Type,java.lang.Class\u003c?\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "id"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Effect(java.lang.String,org.bukkit.Effect.Type)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "particleName"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Effect(java.lang.String,org.bukkit.Effect.Type,java.lang.Class\u003c?\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "particleName"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ]
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "FENCE_GATE_CLOSE",
            "comment": {
              "body": "Sound of a door closing.",
              "plain": "Sound of a door closing."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "FENCE_GATE_TOGGLE",
            "comment": {
              "body": "Sound of a door opening.",
              "plain": "Sound of a door opening."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "FIREWORKS_SPARK",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "The spark that comes off a fireworks",
              "plain": "The spark that comes off a fireworks\n@deprecated Spigot specific API, use {@link Particle}."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "FIREWORK_SHOOT",
            "comment": {
              "body": "The sound played when launching a firework",
              "plain": "The sound played when launching a firework"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "FLAME",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Fire particles",
              "plain": "Fire particles\n@deprecated Spigot specific API, use {@link Particle}."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "FLYING_GLYPH",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "The symbols that fly towards the enchantment table",
              "plain": "The symbols that fly towards the enchantment table\n@deprecated Spigot specific API, use {@link Particle}."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "FOOTSTEP",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "A small gray square",
              "plain": "A small gray square\n@deprecated Spigot specific API, use {@link Particle}."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "GHAST_SHOOT",
            "comment": {
              "body": "Sound of ghast firing.",
              "plain": "Sound of ghast firing."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "GHAST_SHRIEK",
            "comment": {
              "body": "Sound of ghast shrieking.",
              "plain": "Sound of ghast shrieking."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "HAPPY_VILLAGER",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "The particle that appears when trading with a villager",
              "plain": "The particle that appears when trading with a villager\n@deprecated Spigot specific API, use {@link Particle}."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "HEART",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "The particle that appears when breading animals",
              "plain": "The particle that appears when breading animals\n@deprecated Spigot specific API, use {@link Particle}."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "INSTANT_SPELL",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "A puff of white stars",
              "plain": "A puff of white stars\n@deprecated Spigot specific API, use {@link Particle}."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "IRON_DOOR_CLOSE",
            "comment": {
              "body": "Sound of a door closing.",
              "plain": "Sound of a door closing."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "IRON_DOOR_TOGGLE",
            "comment": {
              "body": "Sound of a door opening.",
              "plain": "Sound of a door opening."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "IRON_TRAPDOOR_CLOSE",
            "comment": {
              "body": "Sound of a door closing.",
              "plain": "Sound of a door closing."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "IRON_TRAPDOOR_TOGGLE",
            "comment": {
              "body": "Sound of a door opening.",
              "plain": "Sound of a door opening."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ITEM_BREAK",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "The particles generated when a tool breaks.\n This particle requires a Material so that the client can select the correct texture.",
              "plain": "The particles generated when a tool breaks.\n This particle requires a Material so that the client can select the correct texture.\n@deprecated Spigot specific API, use {@link Particle}."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "LARGE_SMOKE",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "The smoke particles that appears on blazes, minecarts\n with furnaces and fire",
              "plain": "The smoke particles that appears on blazes, minecarts\n with furnaces and fire\n@deprecated Spigot specific API, use {@link Particle}."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "LAVADRIP",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "The lava drip particle that appears on blocks under lava",
              "plain": "The lava drip particle that appears on blocks under lava\n@deprecated Spigot specific API, use {@link Particle}."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "LAVA_POP",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "The particles that pop out of lava",
              "plain": "The particles that pop out of lava\n@deprecated Spigot specific API, use {@link Particle}."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "MAGIC_CRIT",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Blue critical hit particles",
              "plain": "Blue critical hit particles\n@deprecated Spigot specific API, use {@link Particle}."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "MOBSPAWNER_FLAMES",
            "comment": {
              "body": "The flames seen on a mobspawner; a visual effect.",
              "plain": "The flames seen on a mobspawner; a visual effect."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "NOTE",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "The note that appears above note blocks",
              "plain": "The note that appears above note blocks\n@deprecated Spigot specific API, use {@link Particle}."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "PARTICLE_SMOKE",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Smoke particles",
              "plain": "Smoke particles\n@deprecated Spigot specific API, use {@link Particle}."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "PORTAL",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "The particles shown at nether portals",
              "plain": "The particles shown at nether portals\n@deprecated Spigot specific API, use {@link Particle}."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "PORTAL_TRAVEL",
            "comment": {
              "body": "The sound played when traveling through a portal",
              "plain": "The sound played when traveling through a portal"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "POTION_BREAK",
            "comment": {
              "body": "Visual effect of a splash potion breaking. Needs potion data value as\n additional info.",
              "plain": "Visual effect of a splash potion breaking. Needs potion data value as\n additional info."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "POTION_SWIRL",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Multicolored potion effect particles",
              "plain": "Multicolored potion effect particles\n@deprecated Spigot specific API, use {@link Particle}."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "POTION_SWIRL_TRANSPARENT",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Multicolored potion effect particles that are slightly transparent",
              "plain": "Multicolored potion effect particles that are slightly transparent\n@deprecated Spigot specific API, use {@link Particle}."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "RECORD_PLAY",
            "comment": {
              "body": "A song from a record. Needs the record item ID as additional info",
              "plain": "A song from a record. Needs the record item ID as additional info"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SLIME",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "The particle shown when a slime jumps",
              "plain": "The particle shown when a slime jumps\n@deprecated Spigot specific API, use {@link Particle}."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SMALL_SMOKE",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Small gray particles",
              "plain": "Small gray particles\n@deprecated Spigot specific API, use {@link Particle}."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SMOKE",
            "comment": {
              "body": "A visual smoke effect. Needs direction as additional info.",
              "plain": "A visual smoke effect. Needs direction as additional info."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SNOWBALL_BREAK",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Snowball breaking",
              "plain": "Snowball breaking\n@deprecated Spigot specific API, use {@link Particle}."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SNOW_SHOVEL",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "White particles",
              "plain": "White particles\n@deprecated Spigot specific API, use {@link Particle}."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SPELL",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "A puff of white potion swirls",
              "plain": "A puff of white potion swirls\n@deprecated Spigot specific API, use {@link Particle}."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SPLASH",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Water particles",
              "plain": "Water particles\n@deprecated Spigot specific API, use {@link Particle}."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "STEP_SOUND",
            "comment": {
              "body": "Sound of a block breaking. Needs block ID as additional info.",
              "plain": "Sound of a block breaking. Needs block ID as additional info."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "TILE_BREAK",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "The particles generated while breaking a block.\n This particle requires a Material and data value so that the client can select the correct texture.",
              "plain": "The particles generated while breaking a block.\n This particle requires a Material and data value so that the client can select the correct texture.\n@deprecated Spigot specific API, use {@link Particle}."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "TILE_DUST",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "The particles generated while sprinting a block\n This particle requires a Material and data value so that the client can select the correct texture.",
              "plain": "The particles generated while sprinting a block\n This particle requires a Material and data value so that the client can select the correct texture.\n@deprecated Spigot specific API, use {@link Particle}."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "TRAPDOOR_CLOSE",
            "comment": {
              "body": "Sound of a trapdoor closing.",
              "plain": "Sound of a trapdoor closing."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "TRAPDOOR_TOGGLE",
            "comment": {
              "body": "Sound of a trapdoor opening.",
              "plain": "Sound of a trapdoor opening."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "VILLAGER_PLANT_GROW",
            "comment": {
              "body": "Particles displayed when a villager grows a plant, data\n is the number of particles",
              "plain": "Particles displayed when a villager grows a plant, data\n is the number of particles"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "VILLAGER_THUNDERCLOUD",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "The particle that appears when hitting a villager",
              "plain": "The particle that appears when hitting a villager\n@deprecated Spigot specific API, use {@link Particle}."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "VOID_FOG",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Small gray particles",
              "plain": "Small gray particles\n@deprecated Spigot specific API, use {@link Particle}."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "WATERDRIP",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "The water drip particle that appears on blocks under water",
              "plain": "The water drip particle that appears on blocks under water\n@deprecated Spigot specific API, use {@link Particle}."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "WITCH_MAGIC",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "A puff of purple particles",
              "plain": "A puff of purple particles\n@deprecated Spigot specific API, use {@link Particle}."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "WITHER_BREAK_BLOCK",
            "comment": {
              "body": "The sound played when a wither breaks a block",
              "plain": "The sound played when a wither breaks a block"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "WITHER_SHOOT",
            "comment": {
              "body": "Sound of a wither shooting",
              "plain": "Sound of a wither shooting"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ZOMBIE_CHEW_IRON_DOOR",
            "comment": {
              "body": "Sound of zombies chewing on iron doors.",
              "plain": "Sound of zombies chewing on iron doors."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ZOMBIE_CHEW_WOODEN_DOOR",
            "comment": {
              "body": "Sound of zombies chewing on wooden doors.",
              "plain": "Sound of zombies chewing on wooden doors."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ZOMBIE_CONVERTED_VILLAGER",
            "comment": {
              "body": "The sound played when a villager is converted by\n a zombie",
              "plain": "The sound played when a villager is converted by\n a zombie"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ZOMBIE_DESTROY_DOOR",
            "comment": {
              "body": "Sound of zombies destroying a door.",
              "plain": "Sound of zombies destroying a door."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ZOMBIE_INFECT",
            "comment": {
              "body": "The sound played when a zombie infects a target",
              "plain": "The sound played when a zombie infects a target"
            }
          },
          {
            "kind": "FIELD",
            "name": "data"
          },
          {
            "kind": "METHOD",
            "name": "getById(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "id"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Gets the Effect associated with the given ID.",
              "tags": "Returns Effect with the given ID.",
              "plain": "Gets the Effect associated with the given ID.\n@param id ID of the Effect to return\n@return Effect with the given ID\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "getByName(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Gets the Effect associated with the given name.",
              "tags": "Returns Effect with the given name.",
              "plain": "Gets the Effect associated with the given name.\n@param name name of the Effect to return\n@return Effect with the given name\n@deprecated Spigot specific API, use {@link Particle}."
            }
          },
          {
            "kind": "METHOD",
            "name": "getData()",
            "comment": {
              "tags": "Returns if this Effect isn\u0027t of type PARTICLE it returns the class which represents data for this effect, or null if none.",
              "plain": "@return if this Effect isn\u0027t of type PARTICLE it returns the class which represents data for this effect, or null if none"
            }
          },
          {
            "kind": "METHOD",
            "name": "getId()",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Gets the ID for this effect.",
              "tags": "Returns if this Effect isn\u0027t of type PARTICLE it returns ID of this effect.",
              "plain": "Gets the ID for this effect.\n@return if this Effect isn\u0027t of type PARTICLE it returns ID of this effect\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "getName()",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Returns the effect\u0027s name. This returns null if the effect is not a particle",
              "tags": "Returns The effect\u0027s name.",
              "plain": "Returns the effect\u0027s name. This returns null if the effect is not a particle\n@return The effect\u0027s name\n@deprecated Spigot specific API, use {@link Particle}."
            }
          },
          {
            "kind": "METHOD",
            "name": "getType()",
            "comment": {
              "tags": "Returns The type of the effect..",
              "plain": "@return The type of the effect."
            }
          },
          {
            "kind": "FIELD",
            "name": "id"
          },
          {
            "kind": "ENUM",
            "name": "org.bukkit.Effect.Type",
            "children": [
              {
                "kind": "ENUM_CONSTANT",
                "name": "PARTICLE"
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "SOUND"
              },
              {
                "kind": "CONSTRUCTOR",
                "name": "Type()"
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "VISUAL"
              },
              {
                "kind": "METHOD",
                "name": "valueOf(java.lang.String)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "name"
                  }
                ]
              },
              {
                "kind": "METHOD",
                "name": "values()"
              }
            ],
            "comment": {
              "body": "Represents the type of an effect.",
              "plain": "Represents the type of an effect."
            }
          },
          {
            "kind": "FIELD",
            "name": "particleName"
          },
          {
            "kind": "FIELD",
            "name": "type"
          },
          {
            "kind": "METHOD",
            "name": "valueOf(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "values()"
          }
        ],
        "comment": {
          "body": "A list of effects that the server is able to send to players.",
          "plain": "A list of effects that the server is able to send to players."
        }
      },
      {
        "kind": "ENUM",
        "name": "org.bukkit.EntityEffect",
        "children": [
          {
            "kind": "ENUM_CONSTANT",
            "name": "ARMOR_STAND_HIT",
            "comment": {
              "body": "Armor stand is hit.",
              "plain": "Armor stand is hit."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ARROW_PARTICLES",
            "comment": {
              "body": "Colored particles from a tipped arrow.",
              "plain": "Colored particles from a tipped arrow."
            }
          },
          {
            "kind": "FIELD",
            "name": "BY_DATA"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "DEATH",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "When a mob dies.\n \u003cp\u003e\n \u003cb\u003eThis will cause client-glitches!\u003c/b\u003e",
              "plain": "When a mob dies.\n \u003cp\u003e\n \u003cb\u003eThis will cause client-glitches!\u003c/b\u003e\n@deprecated although this effect may trigger other events on non-living\n entities, it\u0027s only supported usage is on living ones."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_POOF",
            "comment": {
              "body": "Silverfish entering block, spawner spawning.",
              "plain": "Silverfish entering block, spawner spawning."
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "EntityEffect(int,java.lang.Class\u003c? extends org.bukkit.entity.Entity\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "clazz"
              },
              {
                "kind": "PARAMETER",
                "name": "data"
              }
            ]
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "FIREWORK_EXPLODE",
            "comment": {
              "body": "When a firework explodes.",
              "plain": "When a firework explodes."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "GUARDIAN_TARGET",
            "comment": {
              "body": "Guardian sets laser target.",
              "plain": "Guardian sets laser target."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "HURT",
            "comment": {
              "body": "When mobs get hurt.",
              "plain": "When mobs get hurt."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "HURT_DROWN",
            "comment": {
              "body": "Entity hurt due to drowning damage.",
              "plain": "Entity hurt due to drowning damage."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "HURT_EXPLOSION",
            "comment": {
              "body": "Entity hurt due to explosion damage.",
              "plain": "Entity hurt due to explosion damage."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "IRON_GOLEM_ROSE",
            "comment": {
              "body": "When an Iron Golem gives a rose.",
              "plain": "When an Iron Golem gives a rose."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "IRON_GOLEM_SHEATH",
            "comment": {
              "body": "Iron golem puts away rose.",
              "plain": "Iron golem puts away rose."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "LOVE_HEARTS",
            "comment": {
              "body": "Hearts from a breeding entity.",
              "plain": "Hearts from a breeding entity."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "RABBIT_JUMP",
            "comment": {
              "body": "Rabbit jumping.",
              "plain": "Rabbit jumping."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SHEEP_EAT",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "When an entity eats a LONG_GRASS block.",
              "plain": "When an entity eats a LONG_GRASS block.\n@deprecated although this effect may trigger other events on non-living\n entities, it\u0027s only supported usage is on living ones."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SHIELD_BLOCK",
            "comment": {
              "body": "Shield blocks attack.",
              "plain": "Shield blocks attack."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SHIELD_BREAK",
            "comment": {
              "body": "Shield breaks.",
              "plain": "Shield breaks."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SQUID_ROTATE",
            "comment": {
              "body": "Resets squid rotation.",
              "plain": "Resets squid rotation."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "THORNS_HURT",
            "comment": {
              "body": "Entity hurt by thorns attack.",
              "plain": "Entity hurt by thorns attack."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "TOTEM_RESURRECT",
            "comment": {
              "body": "Totem prevents entity death.",
              "plain": "Totem prevents entity death."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "VILLAGER_ANGRY",
            "comment": {
              "body": "When a villager is angry.",
              "plain": "When a villager is angry."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "VILLAGER_HAPPY",
            "comment": {
              "body": "Happy particles from a villager.",
              "plain": "Happy particles from a villager."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "VILLAGER_HEART",
            "comment": {
              "body": "Hearts from a villager.",
              "plain": "Hearts from a villager."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "WITCH_MAGIC",
            "comment": {
              "body": "Magic particles from a witch.",
              "plain": "Magic particles from a witch."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "WOLF_HEARTS",
            "comment": {
              "body": "The hearts when taming a wolf succeeds.",
              "plain": "The hearts when taming a wolf succeeds."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "WOLF_SHAKE",
            "comment": {
              "body": "When a wolf shakes (after being wet).",
              "plain": "When a wolf shakes (after being wet)."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "WOLF_SMOKE",
            "comment": {
              "body": "The smoke when taming a wolf fails.",
              "plain": "The smoke when taming a wolf fails."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ZOMBIE_TRANSFORM",
            "comment": {
              "body": "When a zombie transforms into a villager by shaking violently.",
              "plain": "When a zombie transforms into a villager by shaking violently."
            }
          },
          {
            "kind": "FIELD",
            "name": "applicable"
          },
          {
            "kind": "FIELD",
            "name": "data"
          },
          {
            "kind": "METHOD",
            "name": "getApplicable()",
            "comment": {
              "body": "Gets entity superclass which this affect is applicable to.",
              "tags": "Returns applicable class.",
              "plain": "Gets entity superclass which this affect is applicable to.\n@return applicable class"
            }
          },
          {
            "kind": "METHOD",
            "name": "getByData(byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Gets the EntityEffect with the given data value",
              "tags": "Returns The \u003ca href\u003d\"org/bukkit/EntityEffect.html\" title\u003d\"enum in org.bukkit\"\u003e\u003ccode\u003eEntityEffect\u003c/code\u003e\u003c/a\u003e representing the given value, or null\n     if it doesn\u0027t exist.",
              "plain": "Gets the EntityEffect with the given data value\n@param data Data value to fetch\n@return The {@link EntityEffect} representing the given value, or null\n     if it doesn\u0027t exist\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "getData()",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Gets the data value of this EntityEffect",
              "tags": "Returns The data value.",
              "plain": "Gets the data value of this EntityEffect\n@return The data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "valueOf(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "values()"
          }
        ],
        "comment": {
          "body": "A list of all Effects that can happen to entities.",
          "plain": "A list of all Effects that can happen to entities."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.FireworkEffect",
        "children": [
          {
            "kind": "FIELD",
            "name": "COLORS"
          },
          {
            "kind": "FIELD",
            "name": "FADE_COLORS"
          },
          {
            "kind": "FIELD",
            "name": "FLICKER"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "FireworkEffect(boolean,boolean,com.google.common.collect.ImmutableList\u003corg.bukkit.Color\u003e,com.google.common.collect.ImmutableList\u003corg.bukkit.Color\u003e,org.bukkit.FireworkEffect.Type)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "colors"
              },
              {
                "kind": "PARAMETER",
                "name": "fadeColors"
              },
              {
                "kind": "PARAMETER",
                "name": "flicker"
              },
              {
                "kind": "PARAMETER",
                "name": "trail"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "TRAIL"
          },
          {
            "kind": "FIELD",
            "name": "TYPE"
          },
          {
            "kind": "METHOD",
            "name": "builder()",
            "comment": {
              "body": "Construct a firework effect.",
              "tags": "Returns A utility object for building a firework effect.",
              "plain": "Construct a firework effect.\n@return A utility object for building a firework effect"
            }
          },
          {
            "kind": "FIELD",
            "name": "colors"
          },
          {
            "kind": "METHOD",
            "name": "deserialize(java.util.Map\u003cjava.lang.String,java.lang.Object\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "map"
              }
            ],
            "comment": {
              "tags": "Returns the resulting serializable.",
              "plain": "@see ConfigurationSerializable\n@param map the map to deserialize\n@return the resulting serializable"
            }
          },
          {
            "kind": "METHOD",
            "name": "equals(java.lang.Object)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "obj"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "fadeColors"
          },
          {
            "kind": "FIELD",
            "name": "flicker"
          },
          {
            "kind": "METHOD",
            "name": "getColors()",
            "comment": {
              "body": "Get the primary colors of the firework effect.",
              "tags": "Returns An immutable list of the primary colors.",
              "plain": "Get the primary colors of the firework effect.\n@return An immutable list of the primary colors"
            }
          },
          {
            "kind": "METHOD",
            "name": "getFadeColors()",
            "comment": {
              "body": "Get the fade colors of the firework effect.",
              "tags": "Returns An immutable list of the fade colors.",
              "plain": "Get the fade colors of the firework effect.\n@return An immutable list of the fade colors"
            }
          },
          {
            "kind": "METHOD",
            "name": "getType()",
            "comment": {
              "body": "Get the type of the firework effect.",
              "tags": "Returns The effect type.",
              "plain": "Get the type of the firework effect.\n@return The effect type"
            }
          },
          {
            "kind": "METHOD",
            "name": "hasFlicker()",
            "comment": {
              "body": "Get whether the firework effect flickers.",
              "tags": "Returns true if it flickers, false if not.",
              "plain": "Get whether the firework effect flickers.\n@return true if it flickers, false if not"
            }
          },
          {
            "kind": "METHOD",
            "name": "hasTrail()",
            "comment": {
              "body": "Get whether the firework effect has a trail.",
              "tags": "Returns true if it has a trail, false if not.",
              "plain": "Get whether the firework effect has a trail.\n@return true if it has a trail, false if not"
            }
          },
          {
            "kind": "METHOD",
            "name": "hashCode()"
          },
          {
            "kind": "CLASS",
            "name": "org.bukkit.FireworkEffect.Builder",
            "children": [
              {
                "kind": "CONSTRUCTOR",
                "name": "Builder()"
              },
              {
                "kind": "METHOD",
                "name": "build()",
                "comment": {
                  "body": "Create a \u003ca href\u003d\"org/bukkit/FireworkEffect.html\" title\u003d\"class in org.bukkit\"\u003e\u003ccode\u003eFireworkEffect\u003c/code\u003e\u003c/a\u003e from the current contents of this\n builder.\n \u003cp\u003e\n To successfully build, you must have specified at least one color.",
                  "tags": "Returns The representative firework effect.",
                  "plain": "Create a {@link FireworkEffect} from the current contents of this\n builder.\n \u003cp\u003e\n To successfully build, you must have specified at least one color.\n@return The representative firework effect"
                }
              },
              {
                "kind": "FIELD",
                "name": "colors"
              },
              {
                "kind": "FIELD",
                "name": "fadeColors"
              },
              {
                "kind": "FIELD",
                "name": "flicker"
              },
              {
                "kind": "METHOD",
                "name": "flicker(boolean)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "flicker"
                  }
                ],
                "comment": {
                  "body": "Set whether the firework effect should flicker.",
                  "tags": "Returns This object, for chaining.",
                  "plain": "Set whether the firework effect should flicker.\n@param flicker true if it should flicker, false if not\n@return This object, for chaining"
                }
              },
              {
                "kind": "FIELD",
                "name": "trail"
              },
              {
                "kind": "METHOD",
                "name": "trail(boolean)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "trail"
                  }
                ],
                "comment": {
                  "body": "Set whether the firework effect should have a trail.",
                  "tags": "Returns This object, for chaining.",
                  "plain": "Set whether the firework effect should have a trail.\n@param trail true if it should have a trail, false for no trail\n@return This object, for chaining"
                }
              },
              {
                "kind": "FIELD",
                "name": "type"
              },
              {
                "kind": "METHOD",
                "name": "with(org.bukkit.FireworkEffect.Type)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "type"
                  }
                ],
                "comment": {
                  "body": "Specify the type of the firework effect.",
                  "tags": "Returns This object, for chaining.",
                  "plain": "Specify the type of the firework effect.\n@param type The effect type\n@return This object, for chaining\n@throws IllegalArgumentException If type is null"
                }
              },
              {
                "kind": "METHOD",
                "name": "withColor(java.lang.Iterable\u003c?\u003e)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "colors"
                  }
                ],
                "comment": {
                  "body": "Add several primary colors to the firework effect.",
                  "tags": "Returns This object, for chaining.",
                  "plain": "Add several primary colors to the firework effect.\n@param colors An iterable object whose iterator yields the desired\n     colors\n@return This object, for chaining\n@throws IllegalArgumentException If colors is null\n@throws IllegalArgumentException If any color is null (may be\n     thrown after changes have occurred)"
                }
              },
              {
                "kind": "METHOD",
                "name": "withColor(org.bukkit.Color)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "color"
                  }
                ],
                "comment": {
                  "body": "Add a primary color to the firework effect.",
                  "tags": "Returns This object, for chaining.",
                  "plain": "Add a primary color to the firework effect.\n@param color The color to add\n@return This object, for chaining\n@throws IllegalArgumentException If color is null"
                }
              },
              {
                "kind": "METHOD",
                "name": "withColor(org.bukkit.Color...)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "colors"
                  }
                ],
                "comment": {
                  "body": "Add several primary colors to the firework effect.",
                  "tags": "Returns This object, for chaining.",
                  "plain": "Add several primary colors to the firework effect.\n@param colors The colors to add\n@return This object, for chaining\n@throws IllegalArgumentException If colors is null\n@throws IllegalArgumentException If any color is null (may be\n     thrown after changes have occurred)"
                }
              },
              {
                "kind": "METHOD",
                "name": "withFade(java.lang.Iterable\u003c?\u003e)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "colors"
                  }
                ],
                "comment": {
                  "body": "Add several fade colors to the firework effect.",
                  "tags": "Returns This object, for chaining.",
                  "plain": "Add several fade colors to the firework effect.\n@param colors An iterable object whose iterator yields the desired\n     colors\n@return This object, for chaining\n@throws IllegalArgumentException If colors is null\n@throws IllegalArgumentException If any color is null (may be\n     thrown after changes have occurred)"
                }
              },
              {
                "kind": "METHOD",
                "name": "withFade(org.bukkit.Color)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "color"
                  }
                ],
                "comment": {
                  "body": "Add a fade color to the firework effect.",
                  "tags": "Returns This object, for chaining.",
                  "plain": "Add a fade color to the firework effect.\n@param color The color to add\n@return This object, for chaining\n@throws IllegalArgumentException If colors is null\n@throws IllegalArgumentException If any color is null (may be\n     thrown after changes have occurred)"
                }
              },
              {
                "kind": "METHOD",
                "name": "withFade(org.bukkit.Color...)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "colors"
                  }
                ],
                "comment": {
                  "body": "Add several fade colors to the firework effect.",
                  "tags": "Returns This object, for chaining.",
                  "plain": "Add several fade colors to the firework effect.\n@param colors The colors to add\n@return This object, for chaining\n@throws IllegalArgumentException If colors is null\n@throws IllegalArgumentException If any color is null (may be\n     thrown after changes have occurred)"
                }
              },
              {
                "kind": "METHOD",
                "name": "withFlicker()",
                "comment": {
                  "body": "Add a flicker to the firework effect.",
                  "tags": "Returns This object, for chaining.",
                  "plain": "Add a flicker to the firework effect.\n@return This object, for chaining"
                }
              },
              {
                "kind": "METHOD",
                "name": "withTrail()",
                "comment": {
                  "body": "Add a trail to the firework effect.",
                  "tags": "Returns This object, for chaining.",
                  "plain": "Add a trail to the firework effect.\n@return This object, for chaining"
                }
              }
            ],
            "comment": {
              "body": "This is a builder for FireworkEffects.",
              "plain": "This is a builder for FireworkEffects.\n@see FireworkEffect#builder()"
            }
          },
          {
            "kind": "ENUM",
            "name": "org.bukkit.FireworkEffect.Type",
            "children": [
              {
                "kind": "ENUM_CONSTANT",
                "name": "BALL",
                "comment": {
                  "body": "A small ball effect.",
                  "plain": "A small ball effect."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "BALL_LARGE",
                "comment": {
                  "body": "A large ball effect.",
                  "plain": "A large ball effect."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "BURST",
                "comment": {
                  "body": "A burst effect.",
                  "plain": "A burst effect."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "CREEPER",
                "comment": {
                  "body": "A creeper-face effect.",
                  "plain": "A creeper-face effect."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "STAR",
                "comment": {
                  "body": "A star-shaped effect.",
                  "plain": "A star-shaped effect."
                }
              },
              {
                "kind": "CONSTRUCTOR",
                "name": "Type()"
              },
              {
                "kind": "METHOD",
                "name": "valueOf(java.lang.String)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "name"
                  }
                ]
              },
              {
                "kind": "METHOD",
                "name": "values()"
              }
            ],
            "comment": {
              "body": "The type or shape of the effect.",
              "plain": "The type or shape of the effect."
            }
          },
          {
            "kind": "METHOD",
            "name": "serialize()"
          },
          {
            "kind": "FIELD",
            "name": "string"
          },
          {
            "kind": "METHOD",
            "name": "toString()"
          },
          {
            "kind": "FIELD",
            "name": "trail"
          },
          {
            "kind": "FIELD",
            "name": "type"
          }
        ],
        "comment": {
          "body": "Represents a single firework effect.",
          "plain": "Represents a single firework effect."
        }
      },
      {
        "kind": "ENUM",
        "name": "org.bukkit.GameMode",
        "children": [
          {
            "kind": "ENUM_CONSTANT",
            "name": "ADVENTURE",
            "comment": {
              "body": "Adventure mode cannot break blocks without the correct tools.",
              "plain": "Adventure mode cannot break blocks without the correct tools."
            }
          },
          {
            "kind": "FIELD",
            "name": "BY_ID"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "CREATIVE",
            "comment": {
              "body": "Creative mode may fly, build instantly, become invulnerable and create\n free items.",
              "plain": "Creative mode may fly, build instantly, become invulnerable and create\n free items."
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "GameMode(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "value"
              }
            ]
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SPECTATOR",
            "comment": {
              "body": "Spectator mode cannot interact with the world in anyway and is \n invisible to normal players. This grants the player the \n ability to no-clip through the world.",
              "plain": "Spectator mode cannot interact with the world in anyway and is \n invisible to normal players. This grants the player the \n ability to no-clip through the world."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SURVIVAL",
            "comment": {
              "body": "Survival mode is the \"normal\" gameplay type, with no special features.",
              "plain": "Survival mode is the \"normal\" gameplay type, with no special features."
            }
          },
          {
            "kind": "METHOD",
            "name": "getByValue(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "value"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Gets the GameMode represented by the specified value",
              "tags": "Returns Associative \u003ca href\u003d\"org/bukkit/GameMode.html\" title\u003d\"enum in org.bukkit\"\u003e\u003ccode\u003eGameMode\u003c/code\u003e\u003c/a\u003e with the given value, or null if\n     it doesn\u0027t exist.",
              "plain": "Gets the GameMode represented by the specified value\n@param value Value to check\n@return Associative {@link GameMode} with the given value, or null if\n     it doesn\u0027t exist\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "getValue()",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Gets the mode value associated with this GameMode",
              "tags": "Returns An integer value of this gamemode.",
              "plain": "Gets the mode value associated with this GameMode\n@return An integer value of this gamemode\n@deprecated Magic value"
            }
          },
          {
            "kind": "FIELD",
            "name": "value"
          },
          {
            "kind": "METHOD",
            "name": "valueOf(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "values()"
          }
        ],
        "comment": {
          "body": "Represents the various type of game modes that \u003ca href\u003d\"org/bukkit/entity/HumanEntity.html\" title\u003d\"interface in org.bukkit.entity\"\u003e\u003ccode\u003eHumanEntity\u003c/code\u003e\u003c/a\u003es may\n have",
          "plain": "Represents the various type of game modes that {@link HumanEntity}s may\n have"
        }
      },
      {
        "kind": "ENUM",
        "name": "org.bukkit.GrassSpecies",
        "children": [
          {
            "kind": "FIELD",
            "name": "BY_DATA"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "DEAD",
            "comment": {
              "body": "Represents the dead looking grass.",
              "plain": "Represents the dead looking grass."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "FERN_LIKE",
            "comment": {
              "body": "Represents the fern-looking grass species.",
              "plain": "Represents the fern-looking grass species."
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "GrassSpecies(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              }
            ]
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "NORMAL",
            "comment": {
              "body": "Represents the normal grass species.",
              "plain": "Represents the normal grass species."
            }
          },
          {
            "kind": "FIELD",
            "name": "data"
          },
          {
            "kind": "METHOD",
            "name": "getByData(byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Gets the GrassSpecies with the given data value",
              "tags": "Returns The \u003ca href\u003d\"org/bukkit/GrassSpecies.html\" title\u003d\"enum in org.bukkit\"\u003e\u003ccode\u003eGrassSpecies\u003c/code\u003e\u003c/a\u003e representing the given value, or null\n     if it doesn\u0027t exist.",
              "plain": "Gets the GrassSpecies with the given data value\n@param data Data value to fetch\n@return The {@link GrassSpecies} representing the given value, or null\n     if it doesn\u0027t exist\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "getData()",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Gets the associated data value representing this species",
              "tags": "Returns A byte containing the data value of this grass species.",
              "plain": "Gets the associated data value representing this species\n@return A byte containing the data value of this grass species\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "valueOf(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "values()"
          }
        ],
        "comment": {
          "body": "Represents the different types of grass.",
          "plain": "Represents the different types of grass."
        }
      },
      {
        "kind": "ENUM",
        "name": "org.bukkit.Instrument",
        "children": [
          {
            "kind": "ENUM_CONSTANT",
            "name": "BASS_DRUM",
            "comment": {
              "body": "Bass drum is normally played when a note block is on top of a\n stone-like block.",
              "plain": "Bass drum is normally played when a note block is on top of a\n stone-like block."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BASS_GUITAR",
            "comment": {
              "body": "Bass guitar is normally played when a note block is on top of a wooden\n block.",
              "plain": "Bass guitar is normally played when a note block is on top of a wooden\n block."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BELL",
            "comment": {
              "body": "Bell is normally played when a note block is on top of a gold block.",
              "plain": "Bell is normally played when a note block is on top of a gold block."
            }
          },
          {
            "kind": "FIELD",
            "name": "BY_DATA"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "CHIME",
            "comment": {
              "body": "Chime is normally played when a note block is on top of a packed ice\n block.",
              "plain": "Chime is normally played when a note block is on top of a packed ice\n block."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "FLUTE",
            "comment": {
              "body": "Flute is normally played when a note block is on top of a clay block.",
              "plain": "Flute is normally played when a note block is on top of a clay block."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "GUITAR",
            "comment": {
              "body": "Guitar is normally played when a note block is on top of a woolen block.",
              "plain": "Guitar is normally played when a note block is on top of a woolen block."
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Instrument(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ]
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "PIANO",
            "comment": {
              "body": "Piano is the standard instrument for a note block.",
              "plain": "Piano is the standard instrument for a note block."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SNARE_DRUM",
            "comment": {
              "body": "Snare drum is normally played when a note block is on top of a sandy\n block.",
              "plain": "Snare drum is normally played when a note block is on top of a sandy\n block."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "STICKS",
            "comment": {
              "body": "Sticks are normally played when a note block is on top of a glass\n block.",
              "plain": "Sticks are normally played when a note block is on top of a glass\n block."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "XYLOPHONE",
            "comment": {
              "body": "Xylophone is normally played when a note block is on top of a bone block.",
              "plain": "Xylophone is normally played when a note block is on top of a bone block."
            }
          },
          {
            "kind": "METHOD",
            "name": "getByType(byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Get an instrument by its type ID.",
              "tags": "Returns The instrument.",
              "plain": "Get an instrument by its type ID.\n@param type The type ID\n@return The instrument\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "getType()",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "tags": "Returns The type ID of this instrument..",
              "plain": "@return The type ID of this instrument.\n@deprecated Magic value"
            }
          },
          {
            "kind": "FIELD",
            "name": "type"
          },
          {
            "kind": "METHOD",
            "name": "valueOf(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "values()"
          }
        ]
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.Keyed",
        "children": [
          {
            "kind": "METHOD",
            "name": "getKey()",
            "comment": {
              "body": "Return the namespaced identifier for this object.",
              "tags": "Returns this object\u0027s key.",
              "plain": "Return the namespaced identifier for this object.\n@return this object\u0027s key"
            }
          }
        ],
        "comment": {
          "body": "Represents an object which has a \u003ca href\u003d\"org/bukkit/NamespacedKey.html\" title\u003d\"class in org.bukkit\"\u003e\u003ccode\u003eNamespacedKey\u003c/code\u003e\u003c/a\u003e attached to it.",
          "plain": "Represents an object which has a {@link NamespacedKey} attached to it."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.Location",
        "children": [
          {
            "kind": "METHOD",
            "name": "\u003cT\u003egetNearbyEntitiesByType(java.lang.Class\u003c? extends T\u003e,double)",
            "children": [
              {
                "kind": "TYPE_PARAMETER",
                "name": "T"
              },
              {
                "kind": "PARAMETER",
                "name": "clazz"
              },
              {
                "kind": "PARAMETER",
                "name": "radius"
              }
            ],
            "comment": {
              "body": "Gets all nearby entities of the specified type, within the specified radius (bounding box)",
              "tags": "Returns the collection of entities of type clazz near location. This will always be a non-null collection..",
              "plain": "Gets all nearby entities of the specified type, within the specified radius (bounding box)\n@param clazz Type to filter by\n@param radius X/Y/Z radius to search within\n@param \u003cT\u003e the entity type\n@return the collection of entities of type clazz near location. This will always be a non-null collection."
            }
          },
          {
            "kind": "METHOD",
            "name": "\u003cT\u003egetNearbyEntitiesByType(java.lang.Class\u003c? extends T\u003e,double,double)",
            "children": [
              {
                "kind": "TYPE_PARAMETER",
                "name": "T"
              },
              {
                "kind": "PARAMETER",
                "name": "clazz"
              },
              {
                "kind": "PARAMETER",
                "name": "xzRadius"
              },
              {
                "kind": "PARAMETER",
                "name": "yRadius"
              }
            ],
            "comment": {
              "body": "Gets all nearby entities of the specified type, within the specified radius, with x and x radius matching (bounding box)",
              "tags": "Returns the collection of entities near location. This will always be a non-null collection..",
              "plain": "Gets all nearby entities of the specified type, within the specified radius, with x and x radius matching (bounding box)\n@param clazz Type to filter by\n@param xzRadius X/Z radius to search within\n@param yRadius Y radius to search within\n@param \u003cT\u003e the entity type\n@return the collection of entities near location. This will always be a non-null collection."
            }
          },
          {
            "kind": "METHOD",
            "name": "\u003cT\u003egetNearbyEntitiesByType(java.lang.Class\u003c? extends T\u003e,double,double,double)",
            "children": [
              {
                "kind": "TYPE_PARAMETER",
                "name": "T"
              },
              {
                "kind": "PARAMETER",
                "name": "clazz"
              },
              {
                "kind": "PARAMETER",
                "name": "xRadius"
              },
              {
                "kind": "PARAMETER",
                "name": "yRadius"
              },
              {
                "kind": "PARAMETER",
                "name": "zRadius"
              }
            ],
            "comment": {
              "body": "Gets all nearby entities of the specified type, within the specified radius (bounding box)",
              "tags": "Returns the collection of entities near location. This will always be a non-null collection..",
              "plain": "Gets all nearby entities of the specified type, within the specified radius (bounding box)\n@param clazz Type to filter by\n@param xRadius X Radius\n@param yRadius Y Radius\n@param zRadius Z Radius\n@param \u003cT\u003e the entity type\n@return the collection of entities near location. This will always be a non-null collection."
            }
          },
          {
            "kind": "METHOD",
            "name": "\u003cT\u003egetNearbyEntitiesByType(java.lang.Class\u003c? extends T\u003e,double,double,java.util.function.Predicate\u003cT\u003e)",
            "children": [
              {
                "kind": "TYPE_PARAMETER",
                "name": "T"
              },
              {
                "kind": "PARAMETER",
                "name": "clazz"
              },
              {
                "kind": "PARAMETER",
                "name": "predicate"
              },
              {
                "kind": "PARAMETER",
                "name": "xzRadius"
              },
              {
                "kind": "PARAMETER",
                "name": "yRadius"
              }
            ],
            "comment": {
              "body": "Gets all nearby entities of the specified type, within the specified radius, with x and x radius matching (bounding box)",
              "tags": "Returns the collection of entities near location. This will always be a non-null collection..",
              "plain": "Gets all nearby entities of the specified type, within the specified radius, with x and x radius matching (bounding box)\n@param clazz Type to filter by\n@param xzRadius X/Z radius to search within\n@param yRadius Y radius to search within\n@param predicate a predicate used to filter results\n@param \u003cT\u003e the entity type\n@return the collection of entities near location. This will always be a non-null collection."
            }
          },
          {
            "kind": "METHOD",
            "name": "\u003cT\u003egetNearbyEntitiesByType(java.lang.Class\u003c? extends T\u003e,double,java.util.function.Predicate\u003cT\u003e)",
            "children": [
              {
                "kind": "TYPE_PARAMETER",
                "name": "T"
              },
              {
                "kind": "PARAMETER",
                "name": "clazz"
              },
              {
                "kind": "PARAMETER",
                "name": "predicate"
              },
              {
                "kind": "PARAMETER",
                "name": "radius"
              }
            ],
            "comment": {
              "body": "Gets all nearby entities of the specified type, within the specified radius (bounding box)",
              "tags": "Returns the collection of entities near location. This will always be a non-null collection..",
              "plain": "Gets all nearby entities of the specified type, within the specified radius (bounding box)\n@param clazz Type to filter by\n@param radius X/Y/Z radius to search within\n@param predicate a predicate used to filter results\n@param \u003cT\u003e the entity type\n@return the collection of entities near location. This will always be a non-null collection."
            }
          },
          {
            "kind": "METHOD",
            "name": "\u003cT\u003egetNearbyEntitiesByType(java.lang.Class\u003c? extends org.bukkit.entity.Entity\u003e,double,double,double,java.util.function.Predicate\u003cT\u003e)",
            "children": [
              {
                "kind": "TYPE_PARAMETER",
                "name": "T"
              },
              {
                "kind": "PARAMETER",
                "name": "clazz"
              },
              {
                "kind": "PARAMETER",
                "name": "predicate"
              },
              {
                "kind": "PARAMETER",
                "name": "xRadius"
              },
              {
                "kind": "PARAMETER",
                "name": "yRadius"
              },
              {
                "kind": "PARAMETER",
                "name": "zRadius"
              }
            ],
            "comment": {
              "body": "Gets all nearby entities of the specified type, within the specified radius (bounding box)",
              "tags": "Returns the collection of entities near location. This will always be a non-null collection..",
              "plain": "Gets all nearby entities of the specified type, within the specified radius (bounding box)\n@param clazz Type to filter by\n@param xRadius X Radius\n@param yRadius Y Radius\n@param zRadius Z Radius\n@param predicate a predicate used to filter results\n@param \u003cT\u003e the entity type\n@return the collection of entities near location. This will always be a non-null collection."
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Location(org.bukkit.World,double,double,double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "world"
              },
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "y"
              },
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ],
            "comment": {
              "body": "Constructs a new Location with the given coordinates",
              "plain": "Constructs a new Location with the given coordinates\n@param world The world in which this location resides\n@param x The x-coordinate of this new location\n@param y The y-coordinate of this new location\n@param z The z-coordinate of this new location"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Location(org.bukkit.World,double,double,double,float,float)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "pitch"
              },
              {
                "kind": "PARAMETER",
                "name": "world"
              },
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "y"
              },
              {
                "kind": "PARAMETER",
                "name": "yaw"
              },
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ],
            "comment": {
              "body": "Constructs a new Location with the given coordinates and direction",
              "plain": "Constructs a new Location with the given coordinates and direction\n@param world The world in which this location resides\n@param x The x-coordinate of this new location\n@param y The y-coordinate of this new location\n@param z The z-coordinate of this new location\n@param yaw The absolute rotation on the x-plane, in degrees\n@param pitch The absolute rotation on the y-plane, in degrees"
            }
          },
          {
            "kind": "METHOD",
            "name": "add(double,double,double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "y"
              },
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ],
            "comment": {
              "body": "Adds the location by another. Not world-aware.",
              "tags": "Returns the same location.",
              "plain": "Adds the location by another. Not world-aware.\n@see Vector\n@param x X coordinate\n@param y Y coordinate\n@param z Z coordinate\n@return the same location"
            }
          },
          {
            "kind": "METHOD",
            "name": "add(org.bukkit.Location)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "vec"
              }
            ],
            "comment": {
              "body": "Adds the location by another.",
              "tags": "Returns the same location.",
              "plain": "Adds the location by another.\n@see Vector\n@param vec The other location\n@return the same location\n@throws IllegalArgumentException for differing worlds"
            }
          },
          {
            "kind": "METHOD",
            "name": "add(org.bukkit.Location,double,double,double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "base"
              },
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "y"
              },
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ],
            "comment": {
              "body": "Takes the x/y/z from base and adds the specified x/y/z to it and returns self\n\n This mutates this object, clone first.",
              "tags": "Returns self (not cloned).",
              "plain": "Takes the x/y/z from base and adds the specified x/y/z to it and returns self\n\n This mutates this object, clone first.\n@param base The base coordinate to modify\n@param x X coordinate to add to base\n@param y Y coordinate to add to base\n@param z Z coordinate to add to base\n@return self (not cloned)"
            }
          },
          {
            "kind": "METHOD",
            "name": "add(org.bukkit.util.Vector)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "vec"
              }
            ],
            "comment": {
              "body": "Adds the location by a vector.",
              "tags": "Returns the same location.",
              "plain": "Adds the location by a vector.\n@see Vector\n@param vec Vector to use\n@return the same location"
            }
          },
          {
            "kind": "METHOD",
            "name": "checkFinite()",
            "comment": {
              "body": "Check if each component of this Location is finite.",
              "plain": "Check if each component of this Location is finite.\n@throws IllegalArgumentException if any component is not finite"
            }
          },
          {
            "kind": "METHOD",
            "name": "clone()"
          },
          {
            "kind": "METHOD",
            "name": "createExplosion(float)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "power"
              }
            ],
            "comment": {
              "body": "Creates explosion at this location with given power\n\n Will break blocks and ignite blocks on fire.",
              "tags": "Returns false if explosion was canceled, otherwise true.",
              "plain": "Creates explosion at this location with given power\n\n Will break blocks and ignite blocks on fire.\n@param power The power of explosion, where 4F is TNT\n@return false if explosion was canceled, otherwise true"
            }
          },
          {
            "kind": "METHOD",
            "name": "createExplosion(float,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "power"
              },
              {
                "kind": "PARAMETER",
                "name": "setFire"
              }
            ],
            "comment": {
              "body": "Creates explosion at this location with given power and optionally\n setting blocks on fire.\n\n Will break blocks.",
              "tags": "Returns false if explosion was canceled, otherwise true.",
              "plain": "Creates explosion at this location with given power and optionally\n setting blocks on fire.\n\n Will break blocks.\n@param power The power of explosion, where 4F is TNT\n@param setFire Whether or not to set blocks on fire\n@return false if explosion was canceled, otherwise true"
            }
          },
          {
            "kind": "METHOD",
            "name": "createExplosion(float,boolean,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "breakBlocks"
              },
              {
                "kind": "PARAMETER",
                "name": "power"
              },
              {
                "kind": "PARAMETER",
                "name": "setFire"
              }
            ],
            "comment": {
              "body": "Creates explosion at this location with given power and optionally\n setting blocks on fire.",
              "tags": "Returns false if explosion was canceled, otherwise true.",
              "plain": "Creates explosion at this location with given power and optionally\n setting blocks on fire.\n@param power The power of explosion, where 4F is TNT\n@param setFire Whether or not to set blocks on fire\n@param breakBlocks Whether or not to have blocks be destroyed\n@return false if explosion was canceled, otherwise true"
            }
          },
          {
            "kind": "METHOD",
            "name": "createExplosion(org.bukkit.entity.Entity,float)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "power"
              },
              {
                "kind": "PARAMETER",
                "name": "source"
              }
            ],
            "comment": {
              "body": "Creates explosion at this location with given power, with the specified entity as the source.\n\n Will break blocks and ignite blocks on fire.",
              "tags": "Returns false if explosion was canceled, otherwise true.",
              "plain": "Creates explosion at this location with given power, with the specified entity as the source.\n\n Will break blocks and ignite blocks on fire.\n@param source The source entity of the explosion\n@param power The power of explosion, where 4F is TNT\n@return false if explosion was canceled, otherwise true"
            }
          },
          {
            "kind": "METHOD",
            "name": "createExplosion(org.bukkit.entity.Entity,float,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "power"
              },
              {
                "kind": "PARAMETER",
                "name": "setFire"
              },
              {
                "kind": "PARAMETER",
                "name": "source"
              }
            ],
            "comment": {
              "body": "Creates explosion at this location with given power and optionally\n setting blocks on fire, with the specified entity as the source.\n\n Will break blocks.",
              "tags": "Returns false if explosion was canceled, otherwise true.",
              "plain": "Creates explosion at this location with given power and optionally\n setting blocks on fire, with the specified entity as the source.\n\n Will break blocks.\n@param source The source entity of the explosion\n@param power The power of explosion, where 4F is TNT\n@param setFire Whether or not to set blocks on fire\n@return false if explosion was canceled, otherwise true"
            }
          },
          {
            "kind": "METHOD",
            "name": "createExplosion(org.bukkit.entity.Entity,float,boolean,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "breakBlocks"
              },
              {
                "kind": "PARAMETER",
                "name": "power"
              },
              {
                "kind": "PARAMETER",
                "name": "setFire"
              },
              {
                "kind": "PARAMETER",
                "name": "source"
              }
            ],
            "comment": {
              "body": "Creates explosion at this location with given power and optionally\n setting blocks on fire, with the specified entity as the source.",
              "tags": "Returns false if explosion was canceled, otherwise true.",
              "plain": "Creates explosion at this location with given power and optionally\n setting blocks on fire, with the specified entity as the source.\n@param source The source entity of the explosion\n@param power The power of explosion, where 4F is TNT\n@param setFire Whether or not to set blocks on fire\n@param breakBlocks Whether or not to have blocks be destroyed\n@return false if explosion was canceled, otherwise true"
            }
          },
          {
            "kind": "METHOD",
            "name": "deserialize(java.util.Map\u003cjava.lang.String,java.lang.Object\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "args"
              }
            ],
            "comment": {
              "body": "Required method for deserialization",
              "tags": "Returns deserialized location.",
              "plain": "Required method for deserialization\n@param args map to deserialize\n@return deserialized location\n@throws IllegalArgumentException if the world don\u0027t exists\n@see ConfigurationSerializable"
            }
          },
          {
            "kind": "METHOD",
            "name": "distance(org.bukkit.Location)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "o"
              }
            ],
            "comment": {
              "body": "Get the distance between this location and another. The value of this\n method is not cached and uses a costly square-root function, so do not\n repeatedly call this method to get the location\u0027s magnitude. NaN will\n be returned if the inner result of the sqrt() function overflows, which\n will be caused if the distance is too long.",
              "tags": "Returns the distance.",
              "plain": "Get the distance between this location and another. The value of this\n method is not cached and uses a costly square-root function, so do not\n repeatedly call this method to get the location\u0027s magnitude. NaN will\n be returned if the inner result of the sqrt() function overflows, which\n will be caused if the distance is too long.\n@see Vector\n@param o The other location\n@return the distance\n@throws IllegalArgumentException for differing worlds"
            }
          },
          {
            "kind": "METHOD",
            "name": "distanceSquared(org.bukkit.Location)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "o"
              }
            ],
            "comment": {
              "body": "Get the squared distance between this location and another.",
              "tags": "Returns the distance.",
              "plain": "Get the squared distance between this location and another.\n@see Vector\n@param o The other location\n@return the distance\n@throws IllegalArgumentException for differing worlds"
            }
          },
          {
            "kind": "METHOD",
            "name": "equals(java.lang.Object)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "obj"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getBlock()",
            "comment": {
              "body": "Gets the block at the represented location",
              "tags": "Returns Block at the represented location.",
              "plain": "Gets the block at the represented location\n@return Block at the represented location"
            }
          },
          {
            "kind": "METHOD",
            "name": "getBlockX()",
            "comment": {
              "body": "Gets the floored value of the X component, indicating the block that\n this location is contained with.",
              "tags": "Returns block X.",
              "plain": "Gets the floored value of the X component, indicating the block that\n this location is contained with.\n@return block X"
            }
          },
          {
            "kind": "METHOD",
            "name": "getBlockY()",
            "comment": {
              "body": "Gets the floored value of the Y component, indicating the block that\n this location is contained with.",
              "tags": "Returns block y.",
              "plain": "Gets the floored value of the Y component, indicating the block that\n this location is contained with.\n@return block y"
            }
          },
          {
            "kind": "METHOD",
            "name": "getBlockZ()",
            "comment": {
              "body": "Gets the floored value of the Z component, indicating the block that\n this location is contained with.",
              "tags": "Returns block z.",
              "plain": "Gets the floored value of the Z component, indicating the block that\n this location is contained with.\n@return block z"
            }
          },
          {
            "kind": "METHOD",
            "name": "getChunk()",
            "comment": {
              "body": "Gets the chunk at the represented location",
              "tags": "Returns Chunk at the represented location.",
              "plain": "Gets the chunk at the represented location\n@return Chunk at the represented location"
            }
          },
          {
            "kind": "METHOD",
            "name": "getDirection()",
            "comment": {
              "body": "Gets a unit-vector pointing in the direction that this Location is\n facing.",
              "tags": "Returns a vector pointing the direction of this location\u0027s \u003ca href\u003d\"org/bukkit/Location.html#getPitch()\"\u003e\u003ccode\u003epitch\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"org/bukkit/Location.html#getYaw()\"\u003e\u003ccode\u003eyaw\u003c/code\u003e\u003c/a\u003e.",
              "plain": "Gets a unit-vector pointing in the direction that this Location is\n facing.\n@return a vector pointing the direction of this location\u0027s {@link #getPitch() pitch} and {@link #getYaw() yaw}"
            }
          },
          {
            "kind": "METHOD",
            "name": "getNearbyEntities(double,double,double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "y"
              },
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ],
            "comment": {
              "body": "Returns a list of entities within a bounding box centered around a Location.\n\n Some implementations may impose artificial restrictions on the size of the search bounding box.",
              "tags": "Returns the collection of entities near location. This will always be a non-null collection..",
              "plain": "Returns a list of entities within a bounding box centered around a Location.\n\n Some implementations may impose artificial restrictions on the size of the search bounding box.\n@param x 1/2 the size of the box along x axis\n@param y 1/2 the size of the box along y axis\n@param z 1/2 the size of the box along z axis\n@return the collection of entities near location. This will always be a non-null collection."
            }
          },
          {
            "kind": "METHOD",
            "name": "getNearbyLivingEntities(double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "radius"
              }
            ],
            "comment": {
              "body": "Gets nearby players within the specified radius (bounding box)",
              "tags": "Returns the collection of entities near location. This will always be a non-null collection..",
              "plain": "Gets nearby players within the specified radius (bounding box)\n@param radius X Radius\n@return the collection of entities near location. This will always be a non-null collection."
            }
          },
          {
            "kind": "METHOD",
            "name": "getNearbyLivingEntities(double,double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "xzRadius"
              },
              {
                "kind": "PARAMETER",
                "name": "yRadius"
              }
            ],
            "comment": {
              "body": "Gets nearby players within the specified radius (bounding box)",
              "tags": "Returns the collection of living entities near location. This will always be a non-null collection..",
              "plain": "Gets nearby players within the specified radius (bounding box)\n@param xzRadius X/Z Radius\n@param yRadius Y Radius\n@return the collection of living entities near location. This will always be a non-null collection."
            }
          },
          {
            "kind": "METHOD",
            "name": "getNearbyLivingEntities(double,double,double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "xRadius"
              },
              {
                "kind": "PARAMETER",
                "name": "yRadius"
              },
              {
                "kind": "PARAMETER",
                "name": "zRadius"
              }
            ],
            "comment": {
              "body": "Gets nearby players within the specified radius (bounding box)",
              "tags": "Returns the collection of living entities near location. This will always be a non-null collection..",
              "plain": "Gets nearby players within the specified radius (bounding box)\n@param xRadius X Radius\n@param yRadius Y Radius\n@param zRadius Z radius\n@return the collection of living entities near location. This will always be a non-null collection."
            }
          },
          {
            "kind": "METHOD",
            "name": "getNearbyLivingEntities(double,double,double,java.util.function.Predicate\u003corg.bukkit.entity.LivingEntity\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "predicate"
              },
              {
                "kind": "PARAMETER",
                "name": "xRadius"
              },
              {
                "kind": "PARAMETER",
                "name": "yRadius"
              },
              {
                "kind": "PARAMETER",
                "name": "zRadius"
              }
            ],
            "comment": {
              "body": "Gets nearby players within the specified radius (bounding box)",
              "tags": "Returns the collection of living entities near location. This will always be a non-null collection..",
              "plain": "Gets nearby players within the specified radius (bounding box)\n@param xRadius X Radius\n@param yRadius Y Radius\n@param zRadius Z radius\n@param predicate a predicate used to filter results\n@return the collection of living entities near location. This will always be a non-null collection."
            }
          },
          {
            "kind": "METHOD",
            "name": "getNearbyLivingEntities(double,double,java.util.function.Predicate\u003corg.bukkit.entity.LivingEntity\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "predicate"
              },
              {
                "kind": "PARAMETER",
                "name": "xzRadius"
              },
              {
                "kind": "PARAMETER",
                "name": "yRadius"
              }
            ],
            "comment": {
              "body": "Gets nearby players within the specified radius (bounding box)",
              "tags": "Returns the collection of living entities near location. This will always be a non-null collection..",
              "plain": "Gets nearby players within the specified radius (bounding box)\n@param xzRadius X/Z Radius\n@param yRadius Y Radius\n@param predicate a predicate used to filter results\n@return the collection of living entities near location. This will always be a non-null collection."
            }
          },
          {
            "kind": "METHOD",
            "name": "getNearbyLivingEntities(double,java.util.function.Predicate\u003corg.bukkit.entity.LivingEntity\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "predicate"
              },
              {
                "kind": "PARAMETER",
                "name": "radius"
              }
            ],
            "comment": {
              "body": "Gets nearby players within the specified radius (bounding box)",
              "tags": "Returns the collection of living entities near location. This will always be a non-null collection..",
              "plain": "Gets nearby players within the specified radius (bounding box)\n@param radius Radius\n@param predicate a predicate used to filter results\n@return the collection of living entities near location. This will always be a non-null collection."
            }
          },
          {
            "kind": "METHOD",
            "name": "getNearbyPlayers(double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "radius"
              }
            ],
            "comment": {
              "body": "Gets nearby players within the specified radius (bounding box)",
              "tags": "Returns the collection of players near location. This will always be a non-null collection..",
              "plain": "Gets nearby players within the specified radius (bounding box)\n@param radius X/Y/Z Radius\n@return the collection of players near location. This will always be a non-null collection."
            }
          },
          {
            "kind": "METHOD",
            "name": "getNearbyPlayers(double,double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "xzRadius"
              },
              {
                "kind": "PARAMETER",
                "name": "yRadius"
              }
            ],
            "comment": {
              "body": "Gets nearby players within the specified radius (bounding box)",
              "tags": "Returns the collection of players near location. This will always be a non-null collection..",
              "plain": "Gets nearby players within the specified radius (bounding box)\n@param xzRadius X/Z Radius\n@param yRadius Y Radius\n@return the collection of players near location. This will always be a non-null collection."
            }
          },
          {
            "kind": "METHOD",
            "name": "getNearbyPlayers(double,double,double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "xRadius"
              },
              {
                "kind": "PARAMETER",
                "name": "yRadius"
              },
              {
                "kind": "PARAMETER",
                "name": "zRadius"
              }
            ],
            "comment": {
              "body": "Gets nearby players within the specified radius (bounding box)",
              "tags": "Returns the collection of players near location. This will always be a non-null collection..",
              "plain": "Gets nearby players within the specified radius (bounding box)\n@param xRadius X Radius\n@param yRadius Y Radius\n@param zRadius Z Radius\n@return the collection of players near location. This will always be a non-null collection."
            }
          },
          {
            "kind": "METHOD",
            "name": "getNearbyPlayers(double,double,double,java.util.function.Predicate\u003corg.bukkit.entity.Player\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "predicate"
              },
              {
                "kind": "PARAMETER",
                "name": "xRadius"
              },
              {
                "kind": "PARAMETER",
                "name": "yRadius"
              },
              {
                "kind": "PARAMETER",
                "name": "zRadius"
              }
            ],
            "comment": {
              "body": "Gets nearby players within the specified radius (bounding box)",
              "tags": "Returns the collection of players near location. This will always be a non-null collection..",
              "plain": "Gets nearby players within the specified radius (bounding box)\n@param xRadius X Radius\n@param yRadius Y Radius\n@param zRadius Z Radius\n@param predicate a predicate used to filter results\n@return the collection of players near location. This will always be a non-null collection."
            }
          },
          {
            "kind": "METHOD",
            "name": "getNearbyPlayers(double,double,java.util.function.Predicate\u003corg.bukkit.entity.Player\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "predicate"
              },
              {
                "kind": "PARAMETER",
                "name": "xzRadius"
              },
              {
                "kind": "PARAMETER",
                "name": "yRadius"
              }
            ],
            "comment": {
              "body": "Gets nearby players within the specified radius (bounding box)",
              "tags": "Returns the collection of players near location. This will always be a non-null collection..",
              "plain": "Gets nearby players within the specified radius (bounding box)\n@param xzRadius X/Z Radius\n@param yRadius Y Radius\n@param predicate a predicate used to filter results\n@return the collection of players near location. This will always be a non-null collection."
            }
          },
          {
            "kind": "METHOD",
            "name": "getNearbyPlayers(double,java.util.function.Predicate\u003corg.bukkit.entity.Player\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "predicate"
              },
              {
                "kind": "PARAMETER",
                "name": "radius"
              }
            ],
            "comment": {
              "body": "Gets nearby players within the specified radius (bounding box)",
              "tags": "Returns the collection of players near location. This will always be a non-null collection..",
              "plain": "Gets nearby players within the specified radius (bounding box)\n@param radius X/Y/Z Radius\n@param predicate a predicate used to filter results\n@return the collection of players near location. This will always be a non-null collection."
            }
          },
          {
            "kind": "METHOD",
            "name": "getPitch()",
            "comment": {
              "body": "Gets the pitch of this location, measured in degrees.\n \u003cul\u003e\n \u003cli\u003eA pitch of 0 represents level forward facing.\n \u003cli\u003eA pitch of 90 represents downward facing, or negative y\n     direction.\n \u003cli\u003eA pitch of -90 represents upward facing, or positive y direction.\n \u003c/ul\u003e\n Increasing pitch values the equivalent of looking down.",
              "tags": "Returns the incline\u0027s pitch.",
              "plain": "Gets the pitch of this location, measured in degrees.\n \u003cul\u003e\n \u003cli\u003eA pitch of 0 represents level forward facing.\n \u003cli\u003eA pitch of 90 represents downward facing, or negative y\n     direction.\n \u003cli\u003eA pitch of -90 represents upward facing, or positive y direction.\n \u003c/ul\u003e\n Increasing pitch values the equivalent of looking down.\n@return the incline\u0027s pitch"
            }
          },
          {
            "kind": "METHOD",
            "name": "getWorld()",
            "comment": {
              "body": "Gets the world that this location resides in",
              "tags": "Returns World that contains this location.",
              "plain": "Gets the world that this location resides in\n@return World that contains this location"
            }
          },
          {
            "kind": "METHOD",
            "name": "getX()",
            "comment": {
              "body": "Gets the x-coordinate of this location",
              "tags": "Returns x-coordinate.",
              "plain": "Gets the x-coordinate of this location\n@return x-coordinate"
            }
          },
          {
            "kind": "METHOD",
            "name": "getY()",
            "comment": {
              "body": "Gets the y-coordinate of this location",
              "tags": "Returns y-coordinate.",
              "plain": "Gets the y-coordinate of this location\n@return y-coordinate"
            }
          },
          {
            "kind": "METHOD",
            "name": "getYaw()",
            "comment": {
              "body": "Gets the yaw of this location, measured in degrees.\n \u003cul\u003e\n \u003cli\u003eA yaw of 0 or 360 represents the positive z direction.\n \u003cli\u003eA yaw of 180 represents the negative z direction.\n \u003cli\u003eA yaw of 90 represents the negative x direction.\n \u003cli\u003eA yaw of 270 represents the positive x direction.\n \u003c/ul\u003e\n Increasing yaw values are the equivalent of turning to your\n right-facing, increasing the scale of the next respective axis, and\n decreasing the scale of the previous axis.",
              "tags": "Returns the rotation\u0027s yaw.",
              "plain": "Gets the yaw of this location, measured in degrees.\n \u003cul\u003e\n \u003cli\u003eA yaw of 0 or 360 represents the positive z direction.\n \u003cli\u003eA yaw of 180 represents the negative z direction.\n \u003cli\u003eA yaw of 90 represents the negative x direction.\n \u003cli\u003eA yaw of 270 represents the positive x direction.\n \u003c/ul\u003e\n Increasing yaw values are the equivalent of turning to your\n right-facing, increasing the scale of the next respective axis, and\n decreasing the scale of the previous axis.\n@return the rotation\u0027s yaw"
            }
          },
          {
            "kind": "METHOD",
            "name": "getZ()",
            "comment": {
              "body": "Gets the z-coordinate of this location",
              "tags": "Returns z-coordinate.",
              "plain": "Gets the z-coordinate of this location\n@return z-coordinate"
            }
          },
          {
            "kind": "METHOD",
            "name": "hashCode()"
          },
          {
            "kind": "METHOD",
            "name": "isChunkLoaded()"
          },
          {
            "kind": "METHOD",
            "name": "isGenerated()",
            "comment": {
              "body": "Checks if a \u003ca href\u003d\"org/bukkit/Chunk.html\" title\u003d\"interface in org.bukkit\"\u003e\u003ccode\u003eChunk\u003c/code\u003e\u003c/a\u003e has been generated at this location.",
              "tags": "Returns true if a chunk has been generated at this location.",
              "plain": "Checks if a {@link Chunk} has been generated at this location.\n@return true if a chunk has been generated at this location"
            }
          },
          {
            "kind": "METHOD",
            "name": "length()",
            "comment": {
              "body": "Gets the magnitude of the location, defined as sqrt(x^2+y^2+z^2). The\n value of this method is not cached and uses a costly square-root\n function, so do not repeatedly call this method to get the location\u0027s\n magnitude. NaN will be returned if the inner result of the sqrt()\n function overflows, which will be caused if the length is too long. Not\n world-aware and orientation independent.",
              "tags": "Returns the magnitude.",
              "plain": "Gets the magnitude of the location, defined as sqrt(x^2+y^2+z^2). The\n value of this method is not cached and uses a costly square-root\n function, so do not repeatedly call this method to get the location\u0027s\n magnitude. NaN will be returned if the inner result of the sqrt()\n function overflows, which will be caused if the length is too long. Not\n world-aware and orientation independent.\n@see Vector\n@return the magnitude"
            }
          },
          {
            "kind": "METHOD",
            "name": "lengthSquared()",
            "comment": {
              "body": "Gets the magnitude of the location squared. Not world-aware and\n orientation independent.",
              "tags": "Returns the magnitude.",
              "plain": "Gets the magnitude of the location squared. Not world-aware and\n orientation independent.\n@see Vector\n@return the magnitude"
            }
          },
          {
            "kind": "METHOD",
            "name": "locToBlock(double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "loc"
              }
            ],
            "comment": {
              "body": "Safely converts a double (location coordinate) to an int (block\n coordinate)",
              "tags": "Returns Block coordinate.",
              "plain": "Safely converts a double (location coordinate) to an int (block\n coordinate)\n@param loc Precise coordinate\n@return Block coordinate"
            }
          },
          {
            "kind": "METHOD",
            "name": "multiply(double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "m"
              }
            ],
            "comment": {
              "body": "Performs scalar multiplication, multiplying all components with a\n scalar. Not world-aware.",
              "tags": "Returns the same location.",
              "plain": "Performs scalar multiplication, multiplying all components with a\n scalar. Not world-aware.\n@param m The factor\n@see Vector\n@return the same location"
            }
          },
          {
            "kind": "FIELD",
            "name": "pitch"
          },
          {
            "kind": "METHOD",
            "name": "serialize()"
          },
          {
            "kind": "METHOD",
            "name": "set(double,double,double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "y"
              },
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ],
            "comment": {
              "body": "Sets the position of this Location and returns itself\n\n This mutates this object, clone first.",
              "tags": "Returns self (not cloned).",
              "plain": "Sets the position of this Location and returns itself\n\n This mutates this object, clone first.\n@param x X coordinate\n@param y Y coordinate\n@param z Z coordinate\n@return self (not cloned)"
            }
          },
          {
            "kind": "METHOD",
            "name": "setDirection(org.bukkit.util.Vector)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "vector"
              }
            ],
            "comment": {
              "body": "Sets the \u003ca href\u003d\"org/bukkit/Location.html#getYaw()\"\u003e\u003ccode\u003eyaw\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"org/bukkit/Location.html#getPitch()\"\u003e\u003ccode\u003epitch\u003c/code\u003e\u003c/a\u003e to point\n in the direction of the vector.",
              "tags": "Returns the same location.",
              "plain": "Sets the {@link #getYaw() yaw} and {@link #getPitch() pitch} to point\n in the direction of the vector.\n@param vector the direction vector\n@return the same location"
            }
          },
          {
            "kind": "METHOD",
            "name": "setPitch(float)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "pitch"
              }
            ],
            "comment": {
              "body": "Sets the pitch of this location, measured in degrees.\n \u003cul\u003e\n \u003cli\u003eA pitch of 0 represents level forward facing.\n \u003cli\u003eA pitch of 90 represents downward facing, or negative y\n     direction.\n \u003cli\u003eA pitch of -90 represents upward facing, or positive y direction.\n \u003c/ul\u003e\n Increasing pitch values the equivalent of looking down.",
              "plain": "Sets the pitch of this location, measured in degrees.\n \u003cul\u003e\n \u003cli\u003eA pitch of 0 represents level forward facing.\n \u003cli\u003eA pitch of 90 represents downward facing, or negative y\n     direction.\n \u003cli\u003eA pitch of -90 represents upward facing, or positive y direction.\n \u003c/ul\u003e\n Increasing pitch values the equivalent of looking down.\n@param pitch new incline\u0027s pitch"
            }
          },
          {
            "kind": "METHOD",
            "name": "setWorld(org.bukkit.World)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "world"
              }
            ],
            "comment": {
              "body": "Sets the world that this location resides in",
              "plain": "Sets the world that this location resides in\n@param world New world that this location resides in"
            }
          },
          {
            "kind": "METHOD",
            "name": "setX(double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "x"
              }
            ],
            "comment": {
              "body": "Sets the x-coordinate of this location",
              "plain": "Sets the x-coordinate of this location\n@param x X-coordinate"
            }
          },
          {
            "kind": "METHOD",
            "name": "setY(double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "y"
              }
            ],
            "comment": {
              "body": "Sets the y-coordinate of this location",
              "plain": "Sets the y-coordinate of this location\n@param y y-coordinate"
            }
          },
          {
            "kind": "METHOD",
            "name": "setYaw(float)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "yaw"
              }
            ],
            "comment": {
              "body": "Sets the yaw of this location, measured in degrees.\n \u003cul\u003e\n \u003cli\u003eA yaw of 0 or 360 represents the positive z direction.\n \u003cli\u003eA yaw of 180 represents the negative z direction.\n \u003cli\u003eA yaw of 90 represents the negative x direction.\n \u003cli\u003eA yaw of 270 represents the positive x direction.\n \u003c/ul\u003e\n Increasing yaw values are the equivalent of turning to your\n right-facing, increasing the scale of the next respective axis, and\n decreasing the scale of the previous axis.",
              "plain": "Sets the yaw of this location, measured in degrees.\n \u003cul\u003e\n \u003cli\u003eA yaw of 0 or 360 represents the positive z direction.\n \u003cli\u003eA yaw of 180 represents the negative z direction.\n \u003cli\u003eA yaw of 90 represents the negative x direction.\n \u003cli\u003eA yaw of 270 represents the positive x direction.\n \u003c/ul\u003e\n Increasing yaw values are the equivalent of turning to your\n right-facing, increasing the scale of the next respective axis, and\n decreasing the scale of the previous axis.\n@param yaw new rotation\u0027s yaw"
            }
          },
          {
            "kind": "METHOD",
            "name": "setZ(double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ],
            "comment": {
              "body": "Sets the z-coordinate of this location",
              "plain": "Sets the z-coordinate of this location\n@param z z-coordinate"
            }
          },
          {
            "kind": "METHOD",
            "name": "subtract(double,double,double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "y"
              },
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ],
            "comment": {
              "body": "Subtracts the location by another. Not world-aware and\n orientation independent.",
              "tags": "Returns the same location.",
              "plain": "Subtracts the location by another. Not world-aware and\n orientation independent.\n@see Vector\n@param x X coordinate\n@param y Y coordinate\n@param z Z coordinate\n@return the same location"
            }
          },
          {
            "kind": "METHOD",
            "name": "subtract(org.bukkit.Location)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "vec"
              }
            ],
            "comment": {
              "body": "Subtracts the location by another.",
              "tags": "Returns the same location.",
              "plain": "Subtracts the location by another.\n@see Vector\n@param vec The other location\n@return the same location\n@throws IllegalArgumentException for differing worlds"
            }
          },
          {
            "kind": "METHOD",
            "name": "subtract(org.bukkit.Location,double,double,double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "base"
              },
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "y"
              },
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ],
            "comment": {
              "body": "Takes the x/y/z from base and subtracts the specified x/y/z to it and returns self\n\n This mutates this object, clone first.",
              "tags": "Returns self (not cloned).",
              "plain": "Takes the x/y/z from base and subtracts the specified x/y/z to it and returns self\n\n This mutates this object, clone first.\n@param base The base coordinate to modify\n@param x X coordinate to subtract from base\n@param y Y coordinate to subtract from base\n@param z Z coordinate to subtract from base\n@return self (not cloned)"
            }
          },
          {
            "kind": "METHOD",
            "name": "subtract(org.bukkit.util.Vector)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "vec"
              }
            ],
            "comment": {
              "body": "Subtracts the location by a vector.",
              "tags": "Returns the same location.",
              "plain": "Subtracts the location by a vector.\n@see Vector\n@param vec The vector to use\n@return the same location"
            }
          },
          {
            "kind": "METHOD",
            "name": "toBlockKey()",
            "comment": {
              "tags": "Returns The block key for this location\u0027s block location..",
              "plain": "@return The block key for this location\u0027s block location.\n@see Block#getBlockKey()"
            }
          },
          {
            "kind": "METHOD",
            "name": "toBlockLocation()",
            "comment": {
              "tags": "Returns A new location where X/Y/Z are on the Block location (integer value of X/Y/Z).",
              "plain": "@return A new location where X/Y/Z are on the Block location (integer value of X/Y/Z)"
            }
          },
          {
            "kind": "METHOD",
            "name": "toCenterLocation()",
            "comment": {
              "tags": "Returns A new location where X/Y/Z are the center of the block.",
              "plain": "@return A new location where X/Y/Z are the center of the block"
            }
          },
          {
            "kind": "METHOD",
            "name": "toString()"
          },
          {
            "kind": "METHOD",
            "name": "toVector()",
            "comment": {
              "body": "Constructs a new \u003ca href\u003d\"org/bukkit/util/Vector.html\" title\u003d\"class in org.bukkit.util\"\u003e\u003ccode\u003eVector\u003c/code\u003e\u003c/a\u003e based on this Location",
              "tags": "Returns New Vector containing the coordinates represented by this\n     Location.",
              "plain": "Constructs a new {@link Vector} based on this Location\n@return New Vector containing the coordinates represented by this\n     Location"
            }
          },
          {
            "kind": "FIELD",
            "name": "world"
          },
          {
            "kind": "FIELD",
            "name": "x"
          },
          {
            "kind": "FIELD",
            "name": "y"
          },
          {
            "kind": "FIELD",
            "name": "yaw"
          },
          {
            "kind": "FIELD",
            "name": "z"
          },
          {
            "kind": "METHOD",
            "name": "zero()",
            "comment": {
              "body": "Zero this location\u0027s components. Not world-aware.",
              "tags": "Returns the same location.",
              "plain": "Zero this location\u0027s components. Not world-aware.\n@see Vector\n@return the same location"
            }
          }
        ],
        "comment": {
          "body": "Represents a 3-dimensional position in a world.\n \u003cbr\u003e\n No constraints are placed on any angular values other than that they be\n specified in degrees. This means that negative angles or angles of greater\n magnitude than 360 are valid, but may be normalized to any other equivalent\n representation by the implementation.",
          "plain": "Represents a 3-dimensional position in a world.\n \u003cbr\u003e\n No constraints are placed on any angular values other than that they be\n specified in degrees. This means that negative angles or angles of greater\n magnitude than 360 are valid, but may be normalized to any other equivalent\n representation by the implementation."
        }
      },
      {
        "kind": "ENUM",
        "name": "org.bukkit.Material",
        "children": [
          {
            "kind": "ENUM_CONSTANT",
            "name": "ACACIA_DOOR"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ACACIA_DOOR_ITEM"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ACACIA_FENCE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ACACIA_FENCE_GATE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ACACIA_STAIRS"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ACTIVATOR_RAIL"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "AIR"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ANVIL"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "APPLE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ARMOR_STAND"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ARROW"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BAKED_POTATO"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BANNER"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BARRIER"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BEACON"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BED"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BEDROCK"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BED_BLOCK"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BEETROOT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BEETROOT_BLOCK"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BEETROOT_SEEDS"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BEETROOT_SOUP"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BIRCH_DOOR"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BIRCH_DOOR_ITEM"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BIRCH_FENCE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BIRCH_FENCE_GATE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BIRCH_WOOD_STAIRS"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLACK_GLAZED_TERRACOTTA"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLACK_SHULKER_BOX"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLAZE_POWDER"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLAZE_ROD"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLUE_GLAZED_TERRACOTTA"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLUE_SHULKER_BOX"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BOAT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BOAT_ACACIA"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BOAT_BIRCH"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BOAT_DARK_OAK"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BOAT_JUNGLE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BOAT_SPRUCE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BONE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BONE_BLOCK"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BOOK"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BOOKSHELF"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BOOK_AND_QUILL"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BOW"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BOWL"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BREAD"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BREWING_STAND"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BREWING_STAND_ITEM"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BRICK"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BRICK_STAIRS"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BROWN_GLAZED_TERRACOTTA"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BROWN_MUSHROOM"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BROWN_SHULKER_BOX"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BUCKET"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BURNING_FURNACE"
          },
          {
            "kind": "FIELD",
            "name": "BY_NAME"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "CACTUS"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "CAKE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "CAKE_BLOCK"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "CARPET"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "CARROT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "CARROT_ITEM"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "CARROT_STICK"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "CAULDRON"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "CAULDRON_ITEM"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "CHAINMAIL_BOOTS"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "CHAINMAIL_CHESTPLATE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "CHAINMAIL_HELMET"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "CHAINMAIL_LEGGINGS"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "CHEST"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "CHORUS_FLOWER"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "CHORUS_FRUIT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "CHORUS_FRUIT_POPPED"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "CHORUS_PLANT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "CLAY"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "CLAY_BALL"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "CLAY_BRICK"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "COAL"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "COAL_BLOCK"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "COAL_ORE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "COBBLESTONE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "COBBLESTONE_STAIRS"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "COBBLE_WALL"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "COCOA"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "COMMAND"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "COMMAND_CHAIN"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "COMMAND_MINECART"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "COMMAND_REPEATING"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "COMPASS"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "CONCRETE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "CONCRETE_POWDER"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "COOKED_BEEF"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "COOKED_CHICKEN"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "COOKED_FISH"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "COOKED_MUTTON"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "COOKED_RABBIT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "COOKIE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "CROPS"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "CYAN_GLAZED_TERRACOTTA"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "CYAN_SHULKER_BOX"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "DARK_OAK_DOOR"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "DARK_OAK_DOOR_ITEM"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "DARK_OAK_FENCE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "DARK_OAK_FENCE_GATE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "DARK_OAK_STAIRS"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "DAYLIGHT_DETECTOR"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "DAYLIGHT_DETECTOR_INVERTED"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "DEAD_BUSH"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "DETECTOR_RAIL"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "DIAMOND"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "DIAMOND_AXE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "DIAMOND_BARDING"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "DIAMOND_BLOCK"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "DIAMOND_BOOTS"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "DIAMOND_CHESTPLATE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "DIAMOND_HELMET"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "DIAMOND_HOE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "DIAMOND_LEGGINGS"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "DIAMOND_ORE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "DIAMOND_PICKAXE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "DIAMOND_SPADE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "DIAMOND_SWORD"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "DIODE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "DIODE_BLOCK_OFF"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "DIODE_BLOCK_ON"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "DIRT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "DISPENSER"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "DOUBLE_PLANT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "DOUBLE_STEP"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "DOUBLE_STONE_SLAB2"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "DRAGONS_BREATH"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "DRAGON_EGG"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "DROPPER"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "EGG"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ELYTRA"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "EMERALD"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "EMERALD_BLOCK"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "EMERALD_ORE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "EMPTY_MAP"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENCHANTED_BOOK"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENCHANTMENT_TABLE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENDER_CHEST"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENDER_PEARL"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENDER_PORTAL"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENDER_PORTAL_FRAME"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENDER_STONE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "END_BRICKS"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "END_CRYSTAL"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "END_GATEWAY"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "END_ROD"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "EXPLOSIVE_MINECART"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "EXP_BOTTLE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "EYE_OF_ENDER"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "FEATHER"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "FENCE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "FENCE_GATE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "FERMENTED_SPIDER_EYE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "FIRE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "FIREBALL"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "FIREWORK"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "FIREWORK_CHARGE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "FISHING_ROD"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "FLINT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "FLINT_AND_STEEL"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "FLOWER_POT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "FLOWER_POT_ITEM"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "FROSTED_ICE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "FURNACE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "GHAST_TEAR"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "GLASS"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "GLASS_BOTTLE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "GLOWING_REDSTONE_ORE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "GLOWSTONE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "GLOWSTONE_DUST"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "GOLDEN_APPLE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "GOLDEN_CARROT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "GOLD_AXE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "GOLD_BARDING"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "GOLD_BLOCK"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "GOLD_BOOTS"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "GOLD_CHESTPLATE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "GOLD_HELMET"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "GOLD_HOE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "GOLD_INGOT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "GOLD_LEGGINGS"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "GOLD_NUGGET"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "GOLD_ORE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "GOLD_PICKAXE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "GOLD_PLATE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "GOLD_RECORD"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "GOLD_SPADE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "GOLD_SWORD"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "GRASS"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "GRASS_PATH"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "GRAVEL"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "GRAY_GLAZED_TERRACOTTA"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "GRAY_SHULKER_BOX"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "GREEN_GLAZED_TERRACOTTA"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "GREEN_RECORD"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "GREEN_SHULKER_BOX"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "GRILLED_PORK"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "HARD_CLAY"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "HAY_BLOCK"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "HOPPER"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "HOPPER_MINECART"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "HUGE_MUSHROOM_1"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "HUGE_MUSHROOM_2"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ICE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "INK_SACK"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "IRON_AXE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "IRON_BARDING"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "IRON_BLOCK"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "IRON_BOOTS"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "IRON_CHESTPLATE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "IRON_DOOR"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "IRON_DOOR_BLOCK"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "IRON_FENCE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "IRON_HELMET"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "IRON_HOE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "IRON_INGOT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "IRON_LEGGINGS"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "IRON_NUGGET"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "IRON_ORE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "IRON_PICKAXE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "IRON_PLATE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "IRON_SPADE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "IRON_SWORD"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "IRON_TRAPDOOR"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ITEM_FRAME"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "JACK_O_LANTERN"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "JUKEBOX"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "JUNGLE_DOOR"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "JUNGLE_DOOR_ITEM"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "JUNGLE_FENCE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "JUNGLE_FENCE_GATE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "JUNGLE_WOOD_STAIRS"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "KNOWLEDGE_BOOK"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "LADDER"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "LAPIS_BLOCK"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "LAPIS_ORE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "LAVA"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "LAVA_BUCKET"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "LEASH"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "LEATHER"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "LEATHER_BOOTS"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "LEATHER_CHESTPLATE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "LEATHER_HELMET"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "LEATHER_LEGGINGS"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "LEAVES"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "LEAVES_2"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "LEVER"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "LIGHT_BLUE_GLAZED_TERRACOTTA"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "LIGHT_BLUE_SHULKER_BOX"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "LIME_GLAZED_TERRACOTTA"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "LIME_SHULKER_BOX"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "LINGERING_POTION"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "LOG"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "LOG_2"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "LONG_GRASS"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "MAGENTA_GLAZED_TERRACOTTA"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "MAGENTA_SHULKER_BOX"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "MAGMA"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "MAGMA_CREAM"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "MAP",
            "comment": {
              "plain": "@see MapView"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "MELON"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "MELON_BLOCK"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "MELON_SEEDS"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "MELON_STEM"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "MILK_BUCKET"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "MINECART"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "MOB_SPAWNER"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "MONSTER_EGG"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "MONSTER_EGGS"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "MOSSY_COBBLESTONE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "MUSHROOM_SOUP"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "MUTTON"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "MYCEL"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Material(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "id"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Material(int,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "id"
              },
              {
                "kind": "PARAMETER",
                "name": "stack"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Material(int,int,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "durability"
              },
              {
                "kind": "PARAMETER",
                "name": "id"
              },
              {
                "kind": "PARAMETER",
                "name": "stack"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Material(int,int,int,java.lang.Class\u003c? extends org.bukkit.material.MaterialData\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "durability"
              },
              {
                "kind": "PARAMETER",
                "name": "id"
              },
              {
                "kind": "PARAMETER",
                "name": "stack"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Material(int,int,java.lang.Class\u003c? extends org.bukkit.material.MaterialData\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "id"
              },
              {
                "kind": "PARAMETER",
                "name": "stack"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Material(int,java.lang.Class\u003c? extends org.bukkit.material.MaterialData\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "id"
              }
            ]
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "NAME_TAG"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "NETHERRACK"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "NETHER_BRICK"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "NETHER_BRICK_ITEM"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "NETHER_BRICK_STAIRS"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "NETHER_FENCE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "NETHER_STALK"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "NETHER_STAR"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "NETHER_WARTS"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "NETHER_WART_BLOCK"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "NOTE_BLOCK"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "OBSERVER"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "OBSIDIAN"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ORANGE_GLAZED_TERRACOTTA"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ORANGE_SHULKER_BOX"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "PACKED_ICE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "PAINTING"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "PAPER"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "PINK_GLAZED_TERRACOTTA"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "PINK_SHULKER_BOX"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "PISTON_BASE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "PISTON_EXTENSION"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "PISTON_MOVING_PIECE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "PISTON_STICKY_BASE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "POISONOUS_POTATO"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "PORK"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "PORTAL"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "POTATO"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "POTATO_ITEM"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "POTION"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "POWERED_MINECART"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "POWERED_RAIL"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "PRISMARINE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "PRISMARINE_CRYSTALS"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "PRISMARINE_SHARD"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "PUMPKIN"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "PUMPKIN_PIE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "PUMPKIN_SEEDS"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "PUMPKIN_STEM"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "PURPLE_GLAZED_TERRACOTTA"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "PURPLE_SHULKER_BOX"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "PURPUR_BLOCK"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "PURPUR_DOUBLE_SLAB"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "PURPUR_PILLAR"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "PURPUR_SLAB"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "PURPUR_STAIRS"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "QUARTZ"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "QUARTZ_BLOCK"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "QUARTZ_ORE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "QUARTZ_STAIRS"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "RABBIT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "RABBIT_FOOT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "RABBIT_HIDE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "RABBIT_STEW"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "RAILS"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "RAW_BEEF"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "RAW_CHICKEN"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "RAW_FISH"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "RECORD_10"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "RECORD_11"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "RECORD_12"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "RECORD_3"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "RECORD_4"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "RECORD_5"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "RECORD_6"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "RECORD_7"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "RECORD_8"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "RECORD_9"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "REDSTONE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "REDSTONE_BLOCK"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "REDSTONE_COMPARATOR"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "REDSTONE_COMPARATOR_OFF"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "REDSTONE_COMPARATOR_ON"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "REDSTONE_LAMP_OFF"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "REDSTONE_LAMP_ON"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "REDSTONE_ORE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "REDSTONE_TORCH_OFF"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "REDSTONE_TORCH_ON"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "REDSTONE_WIRE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "RED_GLAZED_TERRACOTTA"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "RED_MUSHROOM"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "RED_NETHER_BRICK"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "RED_ROSE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "RED_SANDSTONE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "RED_SANDSTONE_STAIRS"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "RED_SHULKER_BOX"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ROTTEN_FLESH"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SADDLE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SAND"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SANDSTONE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SANDSTONE_STAIRS"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SAPLING"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SEA_LANTERN"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SEEDS"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SHEARS"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SHIELD"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SHULKER_SHELL"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SIGN"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SIGN_POST"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SILVER_GLAZED_TERRACOTTA"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SILVER_SHULKER_BOX"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SKULL"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SKULL_ITEM"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SLIME_BALL"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SLIME_BLOCK"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SMOOTH_BRICK"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SMOOTH_STAIRS"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SNOW"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SNOW_BALL"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SNOW_BLOCK"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SOIL"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SOUL_SAND"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SPECKLED_MELON"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SPECTRAL_ARROW"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SPIDER_EYE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SPLASH_POTION"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SPONGE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SPRUCE_DOOR"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SPRUCE_DOOR_ITEM"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SPRUCE_FENCE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SPRUCE_FENCE_GATE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SPRUCE_WOOD_STAIRS"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "STAINED_CLAY"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "STAINED_GLASS"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "STAINED_GLASS_PANE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "STANDING_BANNER"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "STATIONARY_LAVA"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "STATIONARY_WATER"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "STEP"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "STICK"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "STONE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "STONE_AXE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "STONE_BUTTON"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "STONE_HOE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "STONE_PICKAXE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "STONE_PLATE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "STONE_SLAB2"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "STONE_SPADE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "STONE_SWORD"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "STORAGE_MINECART"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "STRING"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "STRUCTURE_BLOCK"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "STRUCTURE_VOID"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SUGAR"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SUGAR_CANE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SUGAR_CANE_BLOCK"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SULPHUR"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "THIN_GLASS"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "TIPPED_ARROW"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "TNT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "TORCH"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "TOTEM"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "TRAPPED_CHEST"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "TRAP_DOOR"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "TRIPWIRE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "TRIPWIRE_HOOK"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "VINE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "WALL_BANNER"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "WALL_SIGN"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "WATCH"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "WATER"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "WATER_BUCKET"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "WATER_LILY"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "WEB"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "WHEAT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "WHITE_GLAZED_TERRACOTTA"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "WHITE_SHULKER_BOX"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "WOOD"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "WOODEN_DOOR"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "WOOD_AXE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "WOOD_BUTTON"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "WOOD_DOOR"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "WOOD_DOUBLE_STEP"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "WOOD_HOE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "WOOD_PICKAXE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "WOOD_PLATE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "WOOD_SPADE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "WOOD_STAIRS"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "WOOD_STEP"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "WOOD_SWORD"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "WOOL"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "WORKBENCH"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "WRITTEN_BOOK"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "YELLOW_FLOWER"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "YELLOW_GLAZED_TERRACOTTA"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "YELLOW_SHULKER_BOX"
          },
          {
            "kind": "FIELD",
            "name": "byId"
          },
          {
            "kind": "FIELD",
            "name": "ctor"
          },
          {
            "kind": "FIELD",
            "name": "durability"
          },
          {
            "kind": "METHOD",
            "name": "getData()",
            "comment": {
              "body": "Gets the MaterialData class associated with this Material",
              "tags": "Returns MaterialData associated with this Material.",
              "plain": "Gets the MaterialData class associated with this Material\n@return MaterialData associated with this Material"
            }
          },
          {
            "kind": "METHOD",
            "name": "getId()",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Gets the item ID or block ID of this Material",
              "tags": "Returns ID of this material.",
              "plain": "Gets the item ID or block ID of this Material\n@return ID of this material\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "getMaterial(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "id"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Attempts to get the Material with the given ID",
              "tags": "Returns Material if found, or null.",
              "plain": "Attempts to get the Material with the given ID\n@param id ID of the material to get\n@return Material if found, or null\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "getMaterial(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ],
            "comment": {
              "body": "Attempts to get the Material with the given name.\n \u003cp\u003e\n This is a normal lookup, names must be the precise name they are given\n in the enum.",
              "tags": "Returns Material if found, or null.",
              "plain": "Attempts to get the Material with the given name.\n \u003cp\u003e\n This is a normal lookup, names must be the precise name they are given\n in the enum.\n@param name Name of the material to get\n@return Material if found, or null"
            }
          },
          {
            "kind": "METHOD",
            "name": "getMaxDurability()",
            "comment": {
              "body": "Gets the maximum durability of this material",
              "tags": "Returns Maximum durability for this material.",
              "plain": "Gets the maximum durability of this material\n@return Maximum durability for this material"
            }
          },
          {
            "kind": "METHOD",
            "name": "getMaxStackSize()",
            "comment": {
              "body": "Gets the maximum amount of this material that can be held in a stack",
              "tags": "Returns Maximum stack size for this material.",
              "plain": "Gets the maximum amount of this material that can be held in a stack\n@return Maximum stack size for this material"
            }
          },
          {
            "kind": "METHOD",
            "name": "getNewData(byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "raw"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Constructs a new MaterialData relevant for this Material, with the\n given initial data",
              "tags": "Returns New MaterialData with the given data.",
              "plain": "Constructs a new MaterialData relevant for this Material, with the\n given initial data\n@param raw Initial data to construct the MaterialData with\n@return New MaterialData with the given data\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "hasGravity()",
            "comment": {
              "tags": "Returns True if this material is affected by gravity..",
              "plain": "@return True if this material is affected by gravity."
            }
          },
          {
            "kind": "FIELD",
            "name": "id"
          },
          {
            "kind": "METHOD",
            "name": "isBlock()",
            "comment": {
              "body": "Checks if this Material is a placable block",
              "tags": "Returns true if this material is a block.",
              "plain": "Checks if this Material is a placable block\n@return true if this material is a block"
            }
          },
          {
            "kind": "METHOD",
            "name": "isBurnable()",
            "comment": {
              "body": "Check if the material is a block and can burn away",
              "tags": "Returns True if this material is a block and can burn away.",
              "plain": "Check if the material is a block and can burn away\n@return True if this material is a block and can burn away"
            }
          },
          {
            "kind": "METHOD",
            "name": "isEdible()",
            "comment": {
              "body": "Checks if this Material is edible.",
              "tags": "Returns true if this Material is edible..",
              "plain": "Checks if this Material is edible.\n@return true if this Material is edible."
            }
          },
          {
            "kind": "METHOD",
            "name": "isFlammable()",
            "comment": {
              "body": "Check if the material is a block and can catch fire",
              "tags": "Returns True if this material is a block and can catch fire.",
              "plain": "Check if the material is a block and can catch fire\n@return True if this material is a block and can catch fire"
            }
          },
          {
            "kind": "METHOD",
            "name": "isFuel()",
            "comment": {
              "body": "Checks if this Material can be used as fuel in a Furnace",
              "tags": "Returns true if this Material can be used as fuel..",
              "plain": "Checks if this Material can be used as fuel in a Furnace\n@return true if this Material can be used as fuel."
            }
          },
          {
            "kind": "METHOD",
            "name": "isItem()",
            "comment": {
              "body": "Checks if this Material is an obtainable item.",
              "tags": "Returns true if this material is an item.",
              "plain": "Checks if this Material is an obtainable item.\n@return true if this material is an item"
            }
          },
          {
            "kind": "METHOD",
            "name": "isOccluding()",
            "comment": {
              "body": "Check if the material is a block and completely blocks vision",
              "tags": "Returns True if this material is a block and completely blocks vision.",
              "plain": "Check if the material is a block and completely blocks vision\n@return True if this material is a block and completely blocks vision"
            }
          },
          {
            "kind": "METHOD",
            "name": "isRecord()",
            "comment": {
              "tags": "Returns True if this material represents a playable music disk..",
              "plain": "@return True if this material represents a playable music disk."
            }
          },
          {
            "kind": "METHOD",
            "name": "isSolid()",
            "comment": {
              "body": "Check if the material is a block and solid (can be built upon)",
              "tags": "Returns True if this material is a block and solid.",
              "plain": "Check if the material is a block and solid (can be built upon)\n@return True if this material is a block and solid"
            }
          },
          {
            "kind": "METHOD",
            "name": "isTransparent()",
            "comment": {
              "body": "Check if the material is a block and does not block any light",
              "tags": "Returns True if this material is a block and does not block any light.",
              "plain": "Check if the material is a block and does not block any light\n@return True if this material is a block and does not block any light"
            }
          },
          {
            "kind": "METHOD",
            "name": "matchMaterial(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ],
            "comment": {
              "body": "Attempts to match the Material with the given name.\n \u003cp\u003e\n This is a match lookup; names will be converted to uppercase, then\n stripped of special characters in an attempt to format it like the\n enum.\n \u003cp\u003e\n Using this for match by ID is deprecated.",
              "tags": "Returns Material if found, or null.",
              "plain": "Attempts to match the Material with the given name.\n \u003cp\u003e\n This is a match lookup; names will be converted to uppercase, then\n stripped of special characters in an attempt to format it like the\n enum.\n \u003cp\u003e\n Using this for match by ID is deprecated.\n@param name Name of the material to get\n@return Material if found, or null"
            }
          },
          {
            "kind": "FIELD",
            "name": "maxStack"
          },
          {
            "kind": "METHOD",
            "name": "valueOf(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "values()"
          }
        ],
        "comment": {
          "body": "An enum of all material IDs accepted by the official server and client",
          "plain": "An enum of all material IDs accepted by the official server and client"
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.Nameable",
        "children": [
          {
            "kind": "METHOD",
            "name": "getCustomName()",
            "comment": {
              "body": "Gets the custom name on a mob or block. If there is no name this method\n will return null.\n \u003cp\u003e\n This value has no effect on players, they will always use their real\n name.",
              "tags": "Returns name of the mob/block or null.",
              "plain": "Gets the custom name on a mob or block. If there is no name this method\n will return null.\n \u003cp\u003e\n This value has no effect on players, they will always use their real\n name.\n@return name of the mob/block or null"
            }
          },
          {
            "kind": "METHOD",
            "name": "setCustomName(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ],
            "comment": {
              "body": "Sets a custom name on a mob or block. This name will be used in death\n messages and can be sent to the client as a nameplate over the mob.\n \u003cp\u003e\n Setting the name to null or an empty string will clear it.\n \u003cp\u003e\n This value has no effect on players, they will always use their real\n name.",
              "plain": "Sets a custom name on a mob or block. This name will be used in death\n messages and can be sent to the client as a nameplate over the mob.\n \u003cp\u003e\n Setting the name to null or an empty string will clear it.\n \u003cp\u003e\n This value has no effect on players, they will always use their real\n name.\n@param name the name to set"
            }
          }
        ]
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.NamespacedKey",
        "children": [
          {
            "kind": "FIELD",
            "name": "BUKKIT",
            "comment": {
              "body": "The namespace representing all keys generated by Bukkit for backwards\n compatibility measures.",
              "plain": "The namespace representing all keys generated by Bukkit for backwards\n compatibility measures."
            }
          },
          {
            "kind": "FIELD",
            "name": "MINECRAFT",
            "comment": {
              "body": "The namespace representing all inbuilt keys.",
              "plain": "The namespace representing all inbuilt keys."
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "NamespacedKey(java.lang.String,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "key"
              },
              {
                "kind": "PARAMETER",
                "name": "namespace"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Create a key in a specific namespace.",
              "plain": "Create a key in a specific namespace.\n@param namespace String representing a grouping of keys\n@param key Name for this specific key\n@deprecated should never be used by plugins, for internal use only!!"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "NamespacedKey(org.bukkit.plugin.Plugin,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "key"
              },
              {
                "kind": "PARAMETER",
                "name": "plugin"
              }
            ],
            "comment": {
              "body": "Create a key in the plugin\u0027s namespace.",
              "plain": "Create a key in the plugin\u0027s namespace.\n@param plugin the plugin to use for the namespace\n@param key the key to create"
            }
          },
          {
            "kind": "FIELD",
            "name": "VALID_KEY"
          },
          {
            "kind": "FIELD",
            "name": "VALID_NAMESPACE"
          },
          {
            "kind": "METHOD",
            "name": "equals(java.lang.Object)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "obj"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getKey()"
          },
          {
            "kind": "METHOD",
            "name": "getNamespace()"
          },
          {
            "kind": "METHOD",
            "name": "hashCode()"
          },
          {
            "kind": "FIELD",
            "name": "key"
          },
          {
            "kind": "METHOD",
            "name": "minecraft(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "key"
              }
            ],
            "comment": {
              "body": "Get a key in the Minecraft namespace.",
              "tags": "Returns new key in the Minecraft namespace.",
              "plain": "Get a key in the Minecraft namespace.\n@param key the key to use\n@return new key in the Minecraft namespace"
            }
          },
          {
            "kind": "FIELD",
            "name": "namespace"
          },
          {
            "kind": "METHOD",
            "name": "randomKey()",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Return a new random key in the \u003ca href\u003d\"org/bukkit/NamespacedKey.html#BUKKIT\"\u003e\u003ccode\u003eNamespacedKey.BUKKIT\u003c/code\u003e\u003c/a\u003e namespace.",
              "tags": "Returns new key.",
              "plain": "Return a new random key in the {@link #BUKKIT} namespace.\n@return new key\n@deprecated should never be used by plugins, for internal use only!!"
            }
          },
          {
            "kind": "METHOD",
            "name": "toString()"
          }
        ],
        "comment": {
          "body": "Represents a String based key which consists of two components - a namespace\n and a key.\n\n Namespaces may only contain lowercase alphanumeric characters, periods,\n underscores, and hyphens.\n \u003cp\u003e\n Keys may only contain lowercase alphanumeric characters, periods,\n underscores, hyphens, and forward slashes.",
          "plain": "Represents a String based key which consists of two components - a namespace\n and a key.\n\n Namespaces may only contain lowercase alphanumeric characters, periods,\n underscores, and hyphens.\n \u003cp\u003e\n Keys may only contain lowercase alphanumeric characters, periods,\n underscores, hyphens, and forward slashes."
        }
      },
      {
        "kind": "ENUM",
        "name": "org.bukkit.NetherWartsState",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "NetherWartsState()"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "RIPE",
            "comment": {
              "body": "Ready to harvest",
              "plain": "Ready to harvest"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SEEDED",
            "comment": {
              "body": "State when first seeded",
              "plain": "State when first seeded"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "STAGE_ONE",
            "comment": {
              "body": "First growth stage",
              "plain": "First growth stage"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "STAGE_TWO",
            "comment": {
              "body": "Second growth stage",
              "plain": "Second growth stage"
            }
          },
          {
            "kind": "METHOD",
            "name": "valueOf(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "values()"
          }
        ]
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.Note",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "Note(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "note"
              }
            ],
            "comment": {
              "body": "Creates a new note.",
              "plain": "Creates a new note.\n@param note Internal note id. {@link #getId()} always return this\n     value. The value has to be in the interval [0;\u0026nbsp;24]."
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Note(int,org.bukkit.Note.Tone,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "octave"
              },
              {
                "kind": "PARAMETER",
                "name": "sharped"
              },
              {
                "kind": "PARAMETER",
                "name": "tone"
              }
            ],
            "comment": {
              "body": "Creates a new note.",
              "plain": "Creates a new note.\n@param octave The octave where the note is in. Has to be 0 - 2.\n@param tone The tone within the octave. If the octave is 2 the note has\n     to be F#.\n@param sharped Set if the tone is sharped (e.g. for F#)."
            }
          },
          {
            "kind": "METHOD",
            "name": "equals(java.lang.Object)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "obj"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "flat(int,org.bukkit.Note.Tone)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "octave"
              },
              {
                "kind": "PARAMETER",
                "name": "tone"
              }
            ],
            "comment": {
              "body": "Creates a new note for a flat tone, such as A-flat.",
              "tags": "Returns The new note..",
              "plain": "Creates a new note for a flat tone, such as A-flat.\n@param octave The octave where the note is in. Has to be 0 - 1.\n@param tone The tone within the octave.\n@return The new note."
            }
          },
          {
            "kind": "METHOD",
            "name": "flattened()",
            "comment": {
              "tags": "Returns The note a semitone below this one..",
              "plain": "@return The note a semitone below this one."
            }
          },
          {
            "kind": "METHOD",
            "name": "getId()",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Returns the internal id of this note.",
              "tags": "Returns the internal id of this note..",
              "plain": "Returns the internal id of this note.\n@return the internal id of this note.\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "getOctave()",
            "comment": {
              "body": "Returns the octave of this note.",
              "tags": "Returns the octave of this note..",
              "plain": "Returns the octave of this note.\n@return the octave of this note."
            }
          },
          {
            "kind": "METHOD",
            "name": "getTone()",
            "comment": {
              "body": "Returns the tone of this note.",
              "tags": "Returns the tone of this note..",
              "plain": "Returns the tone of this note.\n@return the tone of this note."
            }
          },
          {
            "kind": "METHOD",
            "name": "getToneByte()"
          },
          {
            "kind": "METHOD",
            "name": "hashCode()"
          },
          {
            "kind": "METHOD",
            "name": "isSharped()",
            "comment": {
              "body": "Returns if this note is sharped.",
              "tags": "Returns if this note is sharped..",
              "plain": "Returns if this note is sharped.\n@return if this note is sharped."
            }
          },
          {
            "kind": "METHOD",
            "name": "natural(int,org.bukkit.Note.Tone)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "octave"
              },
              {
                "kind": "PARAMETER",
                "name": "tone"
              }
            ],
            "comment": {
              "body": "Creates a new note for a natural tone, such as A-natural.",
              "tags": "Returns The new note..",
              "plain": "Creates a new note for a natural tone, such as A-natural.\n@param octave The octave where the note is in. Has to be 0 - 1.\n@param tone The tone within the octave.\n@return The new note."
            }
          },
          {
            "kind": "FIELD",
            "name": "note"
          },
          {
            "kind": "ENUM",
            "name": "org.bukkit.Note.Tone",
            "children": [
              {
                "kind": "ENUM_CONSTANT",
                "name": "A"
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "B"
              },
              {
                "kind": "FIELD",
                "name": "BY_DATA"
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "C"
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "D"
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "E"
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "F"
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "G"
              },
              {
                "kind": "FIELD",
                "name": "TONES_COUNT",
                "comment": {
                  "body": "The number of tones including sharped tones.",
                  "plain": "The number of tones including sharped tones."
                }
              },
              {
                "kind": "CONSTRUCTOR",
                "name": "Tone(int,boolean)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "id"
                  },
                  {
                    "kind": "PARAMETER",
                    "name": "sharpable"
                  }
                ]
              },
              {
                "kind": "METHOD",
                "name": "getById(byte)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "id"
                  }
                ],
                "deprecated": {
                  "deprecated": "true"
                },
                "comment": {
                  "body": "Returns the tone to id. Also returning the semitones.",
                  "tags": "Returns the tone to id..",
                  "plain": "Returns the tone to id. Also returning the semitones.\n@param id the id of the tone.\n@return the tone to id.\n@deprecated Magic value"
                }
              },
              {
                "kind": "METHOD",
                "name": "getId()",
                "deprecated": {
                  "deprecated": "true"
                },
                "comment": {
                  "body": "Returns the not sharped id of this tone.",
                  "tags": "Returns the not sharped id of this tone..",
                  "plain": "Returns the not sharped id of this tone.\n@return the not sharped id of this tone.\n@deprecated Magic value"
                }
              },
              {
                "kind": "METHOD",
                "name": "getId(boolean)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "sharped"
                  }
                ],
                "deprecated": {
                  "deprecated": "true"
                },
                "comment": {
                  "body": "Returns the id of this tone. These method allows to return the\n sharped id of the tone. If the tone couldn\u0027t be sharped it always\n return the not sharped id of this tone.",
                  "tags": "Returns the id of this tone..",
                  "plain": "Returns the id of this tone. These method allows to return the\n sharped id of the tone. If the tone couldn\u0027t be sharped it always\n return the not sharped id of this tone.\n@param sharped Set to true to return the sharped id.\n@return the id of this tone.\n@deprecated Magic value"
                }
              },
              {
                "kind": "FIELD",
                "name": "id"
              },
              {
                "kind": "METHOD",
                "name": "isSharpable()",
                "comment": {
                  "body": "Returns if this tone could be sharped.",
                  "tags": "Returns if this tone could be sharped..",
                  "plain": "Returns if this tone could be sharped.\n@return if this tone could be sharped."
                }
              },
              {
                "kind": "METHOD",
                "name": "isSharped(byte)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "id"
                  }
                ],
                "deprecated": {
                  "deprecated": "true"
                },
                "comment": {
                  "body": "Returns if this tone id is the sharped id of the tone.",
                  "tags": "Returns if the tone id is the sharped id of the tone..",
                  "plain": "Returns if this tone id is the sharped id of the tone.\n@param id the id of the tone.\n@return if the tone id is the sharped id of the tone.\n@throws IllegalArgumentException if neither the tone nor the\n     semitone have the id.\n@deprecated Magic value"
                }
              },
              {
                "kind": "FIELD",
                "name": "sharpable"
              },
              {
                "kind": "METHOD",
                "name": "valueOf(java.lang.String)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "name"
                  }
                ]
              },
              {
                "kind": "METHOD",
                "name": "values()"
              }
            ],
            "comment": {
              "body": "An enum holding tones.",
              "plain": "An enum holding tones."
            }
          },
          {
            "kind": "METHOD",
            "name": "sharp(int,org.bukkit.Note.Tone)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "octave"
              },
              {
                "kind": "PARAMETER",
                "name": "tone"
              }
            ],
            "comment": {
              "body": "Creates a new note for a sharp tone, such as A-sharp.",
              "tags": "Returns The new note..",
              "plain": "Creates a new note for a sharp tone, such as A-sharp.\n@param octave The octave where the note is in. Has to be 0 - 2.\n@param tone The tone within the octave. If the octave is 2 the note has\n     to be F#.\n@return The new note."
            }
          },
          {
            "kind": "METHOD",
            "name": "sharped()",
            "comment": {
              "tags": "Returns The note a semitone above this one..",
              "plain": "@return The note a semitone above this one."
            }
          },
          {
            "kind": "METHOD",
            "name": "toString()"
          }
        ],
        "comment": {
          "body": "A note class to store a specific note.",
          "plain": "A note class to store a specific note."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.OfflinePlayer",
        "children": [
          {
            "kind": "METHOD",
            "name": "banPlayer(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "reason"
              }
            ],
            "comment": {
              "body": "Permanently Bans this player from the server",
              "tags": "Returns Ban Entry.",
              "plain": "Permanently Bans this player from the server\n@param reason Reason for Ban\n@return Ban Entry"
            }
          },
          {
            "kind": "METHOD",
            "name": "banPlayer(java.lang.String,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "reason"
              },
              {
                "kind": "PARAMETER",
                "name": "source"
              }
            ],
            "comment": {
              "body": "Permanently Bans this player from the server",
              "tags": "Returns Ban Entry.",
              "plain": "Permanently Bans this player from the server\n@param reason Reason for Ban\n@param source Source of the ban, or null for default\n@return Ban Entry"
            }
          },
          {
            "kind": "METHOD",
            "name": "banPlayer(java.lang.String,java.util.Date)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "expires"
              },
              {
                "kind": "PARAMETER",
                "name": "reason"
              }
            ],
            "comment": {
              "body": "Bans this player from the server",
              "tags": "Returns Ban Entry.",
              "plain": "Bans this player from the server\n@param reason Reason for Ban\n@param expires When to expire the ban\n@return Ban Entry"
            }
          },
          {
            "kind": "METHOD",
            "name": "banPlayer(java.lang.String,java.util.Date,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "expires"
              },
              {
                "kind": "PARAMETER",
                "name": "reason"
              },
              {
                "kind": "PARAMETER",
                "name": "source"
              }
            ],
            "comment": {
              "body": "Bans this player from the server",
              "tags": "Returns Ban Entry.",
              "plain": "Bans this player from the server\n@param reason Reason for Ban\n@param expires When to expire the ban\n@param source Source of the ban or null for default\n@return Ban Entry"
            }
          },
          {
            "kind": "METHOD",
            "name": "banPlayer(java.lang.String,java.util.Date,java.lang.String,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "expires"
              },
              {
                "kind": "PARAMETER",
                "name": "kickIfOnline"
              },
              {
                "kind": "PARAMETER",
                "name": "reason"
              },
              {
                "kind": "PARAMETER",
                "name": "source"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getBedSpawnLocation()",
            "comment": {
              "body": "Gets the Location where the player will spawn at their bed, null if\n they have not slept in one or their current bed spawn is invalid.",
              "tags": "Returns Bed Spawn Location if bed exists, otherwise null..",
              "plain": "Gets the Location where the player will spawn at their bed, null if\n they have not slept in one or their current bed spawn is invalid.\n@return Bed Spawn Location if bed exists, otherwise null."
            }
          },
          {
            "kind": "METHOD",
            "name": "getFirstPlayed()",
            "comment": {
              "body": "Gets the first date and time that this player was witnessed on this\n server.\n \u003cp\u003e\n If the player has never played before, this will return 0. Otherwise,\n it will be the amount of milliseconds since midnight, January 1, 1970\n UTC.",
              "tags": "Returns Date of first log-in for this player, or 0.",
              "plain": "Gets the first date and time that this player was witnessed on this\n server.\n \u003cp\u003e\n If the player has never played before, this will return 0. Otherwise,\n it will be the amount of milliseconds since midnight, January 1, 1970\n UTC.\n@return Date of first log-in for this player, or 0"
            }
          },
          {
            "kind": "METHOD",
            "name": "getLastPlayed()",
            "comment": {
              "body": "Gets the last date and time that this player was witnessed on this\n server.\n \u003cp\u003e\n If the player has never played before, this will return 0. Otherwise,\n it will be the amount of milliseconds since midnight, January 1, 1970\n UTC.",
              "tags": "Returns Date of last log-in for this player, or 0.",
              "plain": "Gets the last date and time that this player was witnessed on this\n server.\n \u003cp\u003e\n If the player has never played before, this will return 0. Otherwise,\n it will be the amount of milliseconds since midnight, January 1, 1970\n UTC.\n@return Date of last log-in for this player, or 0"
            }
          },
          {
            "kind": "METHOD",
            "name": "getName()",
            "comment": {
              "body": "Returns the name of this player\n \u003cp\u003e\n Names are no longer unique past a single game session. For persistent storage\n it is recommended that you use \u003ca href\u003d\"org/bukkit/OfflinePlayer.html#getUniqueId()\"\u003e\u003ccode\u003eOfflinePlayer.getUniqueId()\u003c/code\u003e\u003c/a\u003e instead.",
              "tags": "Returns Player name or null if we have not seen a name for this player yet.",
              "plain": "Returns the name of this player\n \u003cp\u003e\n Names are no longer unique past a single game session. For persistent storage\n it is recommended that you use {@link #getUniqueId()} instead.\n@return Player name or null if we have not seen a name for this player yet"
            }
          },
          {
            "kind": "METHOD",
            "name": "getPlayer()",
            "comment": {
              "body": "Gets a \u003ca href\u003d\"org/bukkit/entity/Player.html\" title\u003d\"interface in org.bukkit.entity\"\u003e\u003ccode\u003ePlayer\u003c/code\u003e\u003c/a\u003e object that this represents, if there is one\n \u003cp\u003e\n If the player is online, this will return that player. Otherwise,\n it will return null.",
              "tags": "Returns Online player.",
              "plain": "Gets a {@link Player} object that this represents, if there is one\n \u003cp\u003e\n If the player is online, this will return that player. Otherwise,\n it will return null.\n@return Online player"
            }
          },
          {
            "kind": "METHOD",
            "name": "getUniqueId()",
            "comment": {
              "body": "Returns the UUID of this player",
              "tags": "Returns Player UUID.",
              "plain": "Returns the UUID of this player\n@return Player UUID"
            }
          },
          {
            "kind": "METHOD",
            "name": "hasPlayedBefore()",
            "comment": {
              "body": "Checks if this player has played on this server before.",
              "tags": "Returns True if the player has played before, otherwise false.",
              "plain": "Checks if this player has played on this server before.\n@return True if the player has played before, otherwise false"
            }
          },
          {
            "kind": "METHOD",
            "name": "isBanned()",
            "comment": {
              "body": "Checks if this player is banned or not",
              "tags": "Returns true if banned, otherwise false.",
              "plain": "Checks if this player is banned or not\n@return true if banned, otherwise false"
            }
          },
          {
            "kind": "METHOD",
            "name": "isOnline()",
            "comment": {
              "body": "Checks if this player is currently online",
              "tags": "Returns true if they are online.",
              "plain": "Checks if this player is currently online\n@return true if they are online"
            }
          },
          {
            "kind": "METHOD",
            "name": "isWhitelisted()",
            "comment": {
              "body": "Checks if this player is whitelisted or not",
              "tags": "Returns true if whitelisted.",
              "plain": "Checks if this player is whitelisted or not\n@return true if whitelisted"
            }
          },
          {
            "kind": "METHOD",
            "name": "setWhitelisted(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "value"
              }
            ],
            "comment": {
              "body": "Sets if this player is whitelisted or not",
              "plain": "Sets if this player is whitelisted or not\n@param value true if whitelisted"
            }
          }
        ]
      },
      {
        "kind": "ENUM",
        "name": "org.bukkit.Particle",
        "children": [
          {
            "kind": "ENUM_CONSTANT",
            "name": "BARRIER"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_CRACK"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_DUST"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "CLOUD"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "CRIT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "CRIT_MAGIC"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "DAMAGE_INDICATOR"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "DRAGON_BREATH"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "DRIP_LAVA"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "DRIP_WATER"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENCHANTMENT_TABLE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "END_ROD"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "EXPLOSION_HUGE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "EXPLOSION_LARGE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "EXPLOSION_NORMAL"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "FALLING_DUST"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "FIREWORKS_SPARK"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "FLAME"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "FOOTSTEP"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "HEART"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ITEM_CRACK"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ITEM_TAKE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "LAVA"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "MOB_APPEARANCE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "NOTE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "PORTAL"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Particle()"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Particle(java.lang.Class\u003c?\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              }
            ]
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "REDSTONE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SLIME"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SMOKE_LARGE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SMOKE_NORMAL"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SNOWBALL"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SNOW_SHOVEL"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SPELL"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SPELL_INSTANT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SPELL_MOB"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SPELL_MOB_AMBIENT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SPELL_WITCH"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SPIT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SUSPENDED"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SUSPENDED_DEPTH"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SWEEP_ATTACK"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "TOTEM"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "TOWN_AURA"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "VILLAGER_ANGRY"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "VILLAGER_HAPPY"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "WATER_BUBBLE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "WATER_DROP"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "WATER_SPLASH"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "WATER_WAKE"
          },
          {
            "kind": "METHOD",
            "name": "builder()",
            "comment": {
              "body": "Creates a \u003ca href\u003d\"com/destroystokyo/paper/ParticleBuilder.html\" title\u003d\"class in com.destroystokyo.paper\"\u003e\u003ccode\u003eParticleBuilder\u003c/code\u003e\u003c/a\u003e",
              "tags": "Returns a \u003ca href\u003d\"com/destroystokyo/paper/ParticleBuilder.html\" title\u003d\"class in com.destroystokyo.paper\"\u003e\u003ccode\u003eParticleBuilder\u003c/code\u003e\u003c/a\u003e for the particle.",
              "plain": "Creates a {@link com.destroystokyo.paper.ParticleBuilder}\n@return a {@link com.destroystokyo.paper.ParticleBuilder} for the particle"
            }
          },
          {
            "kind": "FIELD",
            "name": "dataType"
          },
          {
            "kind": "METHOD",
            "name": "getDataType()",
            "comment": {
              "body": "Returns the required data type for the particle",
              "tags": "Returns the required data type.",
              "plain": "Returns the required data type for the particle\n@return the required data type"
            }
          },
          {
            "kind": "METHOD",
            "name": "valueOf(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "values()"
          }
        ]
      },
      {
        "kind": "ENUM",
        "name": "org.bukkit.PortalType",
        "children": [
          {
            "kind": "ENUM_CONSTANT",
            "name": "CUSTOM",
            "comment": {
              "body": "This is a custom Plugin portal.",
              "plain": "This is a custom Plugin portal."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENDER",
            "comment": {
              "body": "This is an Ender portal.",
              "plain": "This is an Ender portal."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "NETHER",
            "comment": {
              "body": "This is a Nether portal, made of obsidian.",
              "plain": "This is a Nether portal, made of obsidian."
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "PortalType()"
          },
          {
            "kind": "METHOD",
            "name": "valueOf(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "values()"
          }
        ],
        "comment": {
          "body": "Represents various types of portals that can be made in a world.",
          "plain": "Represents various types of portals that can be made in a world."
        }
      },
      {
        "kind": "ENUM",
        "name": "org.bukkit.Rotation",
        "children": [
          {
            "kind": "ENUM_CONSTANT",
            "name": "CLOCKWISE",
            "comment": {
              "body": "Rotated clockwise by 90 degrees",
              "plain": "Rotated clockwise by 90 degrees"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "CLOCKWISE_135",
            "comment": {
              "body": "Rotated clockwise by 135 degrees",
              "plain": "Rotated clockwise by 135 degrees"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "CLOCKWISE_45",
            "comment": {
              "body": "Rotated clockwise by 45 degrees",
              "plain": "Rotated clockwise by 45 degrees"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "COUNTER_CLOCKWISE",
            "comment": {
              "body": "Rotated counter-clockwise by 90 degrees",
              "plain": "Rotated counter-clockwise by 90 degrees"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "COUNTER_CLOCKWISE_45",
            "comment": {
              "body": "Rotated counter-clockwise by 45 degrees",
              "plain": "Rotated counter-clockwise by 45 degrees"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "FLIPPED",
            "comment": {
              "body": "Flipped upside-down, a 180 degree rotation",
              "plain": "Flipped upside-down, a 180 degree rotation"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "FLIPPED_45",
            "comment": {
              "body": "Flipped upside-down + 45 degree rotation",
              "plain": "Flipped upside-down + 45 degree rotation"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "NONE",
            "comment": {
              "body": "No rotation",
              "plain": "No rotation"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Rotation()"
          },
          {
            "kind": "METHOD",
            "name": "rotateClockwise()",
            "comment": {
              "body": "Rotate clockwise by 90 degrees.",
              "tags": "Returns the relative rotation.",
              "plain": "Rotate clockwise by 90 degrees.\n@return the relative rotation"
            }
          },
          {
            "kind": "METHOD",
            "name": "rotateCounterClockwise()",
            "comment": {
              "body": "Rotate counter-clockwise by 90 degrees.",
              "tags": "Returns the relative rotation.",
              "plain": "Rotate counter-clockwise by 90 degrees.\n@return the relative rotation"
            }
          },
          {
            "kind": "FIELD",
            "name": "rotations"
          },
          {
            "kind": "METHOD",
            "name": "valueOf(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "values()"
          }
        ],
        "comment": {
          "body": "An enum to specify a rotation based orientation, like that on a clock.\n \u003cp\u003e\n It represents how something is viewed, as opposed to cardinal directions.",
          "plain": "An enum to specify a rotation based orientation, like that on a clock.\n \u003cp\u003e\n It represents how something is viewed, as opposed to cardinal directions."
        }
      },
      {
        "kind": "ENUM",
        "name": "org.bukkit.SandstoneType",
        "children": [
          {
            "kind": "FIELD",
            "name": "BY_DATA"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "CRACKED"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "GLYPHED"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SMOOTH"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "SandstoneType(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "data"
          },
          {
            "kind": "METHOD",
            "name": "getByData(byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Gets the type of sandstone with the given data value",
              "tags": "Returns The \u003ca href\u003d\"org/bukkit/SandstoneType.html\" title\u003d\"enum in org.bukkit\"\u003e\u003ccode\u003eSandstoneType\u003c/code\u003e\u003c/a\u003e representing the given value, or null\n     if it doesn\u0027t exist.",
              "plain": "Gets the type of sandstone with the given data value\n@param data Data value to fetch\n@return The {@link SandstoneType} representing the given value, or null\n     if it doesn\u0027t exist\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "getData()",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Gets the associated data value representing this type of sandstone",
              "tags": "Returns A byte containing the data value of this sandstone type.",
              "plain": "Gets the associated data value representing this type of sandstone\n@return A byte containing the data value of this sandstone type\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "valueOf(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "values()"
          }
        ],
        "comment": {
          "body": "Represents the three different types of Sandstone",
          "plain": "Represents the three different types of Sandstone"
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.Server",
        "children": [
          {
            "kind": "FIELD",
            "name": "BROADCAST_CHANNEL_ADMINISTRATIVE",
            "comment": {
              "body": "Used for all administrative messages, such as an operator using a\n command.\n \u003cp\u003e\n For use in \u003ca href\u003d\"org/bukkit/Server.html#broadcast(java.lang.String,java.lang.String)\"\u003e\u003ccode\u003eServer.broadcast(java.lang.String, java.lang.String)\u003c/code\u003e\u003c/a\u003e.",
              "plain": "Used for all administrative messages, such as an operator using a\n command.\n \u003cp\u003e\n For use in {@link #broadcast(java.lang.String, java.lang.String)}."
            }
          },
          {
            "kind": "FIELD",
            "name": "BROADCAST_CHANNEL_USERS",
            "comment": {
              "body": "Used for all announcement messages, such as informing users that a\n player has joined.\n \u003cp\u003e\n For use in \u003ca href\u003d\"org/bukkit/Server.html#broadcast(java.lang.String,java.lang.String)\"\u003e\u003ccode\u003eServer.broadcast(java.lang.String, java.lang.String)\u003c/code\u003e\u003c/a\u003e.",
              "plain": "Used for all announcement messages, such as informing users that a\n player has joined.\n \u003cp\u003e\n For use in {@link #broadcast(java.lang.String, java.lang.String)}."
            }
          },
          {
            "kind": "METHOD",
            "name": "addRecipe(org.bukkit.inventory.Recipe)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "recipe"
              }
            ],
            "comment": {
              "body": "Adds a recipe to the crafting manager.",
              "tags": "Returns true if the recipe was added, false if it wasn\u0027t for some\n     reason.",
              "plain": "Adds a recipe to the crafting manager.\n@param recipe the recipe to add\n@return true if the recipe was added, false if it wasn\u0027t for some\n     reason"
            }
          },
          {
            "kind": "METHOD",
            "name": "advancementIterator()",
            "comment": {
              "body": "Get an iterator through all advancements. Advancements cannot be removed\n from this iterator,",
              "tags": "Returns an advancement iterator.",
              "plain": "Get an iterator through all advancements. Advancements cannot be removed\n from this iterator,\n@return an advancement iterator"
            }
          },
          {
            "kind": "METHOD",
            "name": "banIP(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "address"
              }
            ],
            "comment": {
              "body": "Bans the specified address from the server.",
              "plain": "Bans the specified address from the server.\n@param address the IP address to ban"
            }
          },
          {
            "kind": "METHOD",
            "name": "broadcast(java.lang.String,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "message"
              },
              {
                "kind": "PARAMETER",
                "name": "permission"
              }
            ],
            "comment": {
              "body": "Broadcasts the specified message to every user with the given\n permission name.",
              "tags": "Returns number of message recipients.",
              "plain": "Broadcasts the specified message to every user with the given\n permission name.\n@param message message to broadcast\n@param permission the required permission {@link Permissible permissibles} must have to receive the broadcast\n@return number of message recipients"
            }
          },
          {
            "kind": "METHOD",
            "name": "broadcast(net.md_5.bungee.api.chat.BaseComponent)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "component"
              }
            ],
            "comment": {
              "body": "Sends the component to all online players.",
              "plain": "Sends the component to all online players.\n@param component the component to send"
            }
          },
          {
            "kind": "METHOD",
            "name": "broadcast(net.md_5.bungee.api.chat.BaseComponent...)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "components"
              }
            ],
            "comment": {
              "body": "Sends an array of components as a single message to all online players.",
              "plain": "Sends an array of components as a single message to all online players.\n@param components the components to send"
            }
          },
          {
            "kind": "METHOD",
            "name": "broadcastMessage(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "message"
              }
            ],
            "comment": {
              "body": "Broadcast a message to all players.\n \u003cp\u003e\n This is the same as calling \u003ca href\u003d\"org/bukkit/Server.html#broadcast(java.lang.String,java.lang.String)\"\u003e\u003ccode\u003eServer.broadcast(java.lang.String, java.lang.String)\u003c/code\u003e\u003c/a\u003e to \u003ca href\u003d\"org/bukkit/Server.html#BROADCAST_CHANNEL_USERS\"\u003e\u003ccode\u003eServer.BROADCAST_CHANNEL_USERS\u003c/code\u003e\u003c/a\u003e",
              "tags": "Returns the number of players.",
              "plain": "Broadcast a message to all players.\n \u003cp\u003e\n This is the same as calling {@link #broadcast(java.lang.String,\n java.lang.String)} to {@link #BROADCAST_CHANNEL_USERS}\n@param message the message\n@return the number of players"
            }
          },
          {
            "kind": "METHOD",
            "name": "clearRecipes()",
            "comment": {
              "body": "Clears the list of crafting recipes.",
              "plain": "Clears the list of crafting recipes."
            }
          },
          {
            "kind": "METHOD",
            "name": "createBossBar(java.lang.String,org.bukkit.boss.BarColor,org.bukkit.boss.BarStyle,org.bukkit.boss.BarFlag...)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "color"
              },
              {
                "kind": "PARAMETER",
                "name": "flags"
              },
              {
                "kind": "PARAMETER",
                "name": "style"
              },
              {
                "kind": "PARAMETER",
                "name": "title"
              }
            ],
            "comment": {
              "body": "Creates a boss bar instance to display to players. The progress\n defaults to 1.0",
              "tags": "Returns the created boss bar.",
              "plain": "Creates a boss bar instance to display to players. The progress\n defaults to 1.0\n@param title the title of the boss bar\n@param color the color of the boss bar\n@param style the style of the boss bar\n@param flags an optional list of flags to set on the boss bar\n@return the created boss bar"
            }
          },
          {
            "kind": "METHOD",
            "name": "createChunkData(org.bukkit.World)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "world"
              }
            ],
            "comment": {
              "body": "Create a ChunkData for use in a generator.\n \n See \u003ca href\u003d\"org/bukkit/generator/ChunkGenerator.html#generateChunkData(org.bukkit.World,java.util.Random,int,int,org.bukkit.generator.ChunkGenerator.BiomeGrid)\"\u003e\u003ccode\u003eChunkGenerator.generateChunkData(org.bukkit.World, java.util.Random, int, int, org.bukkit.generator.ChunkGenerator.BiomeGrid)\u003c/code\u003e\u003c/a\u003e",
              "tags": "Returns a new ChunkData for the world.",
              "plain": "Create a ChunkData for use in a generator.\n \n See {@link ChunkGenerator#generateChunkData(org.bukkit.World, java.util.Random, int, int, org.bukkit.generator.ChunkGenerator.BiomeGrid)}\n@param world the world to create the ChunkData for\n@return a new ChunkData for the world"
            }
          },
          {
            "kind": "METHOD",
            "name": "createInventory(org.bukkit.inventory.InventoryHolder,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "owner"
              },
              {
                "kind": "PARAMETER",
                "name": "size"
              }
            ],
            "comment": {
              "body": "Creates an empty inventory of type \u003ca href\u003d\"org/bukkit/event/inventory/InventoryType.html#CHEST\"\u003e\u003ccode\u003eInventoryType.CHEST\u003c/code\u003e\u003c/a\u003e with the\n specified size.",
              "tags": "Returns a new inventory.",
              "plain": "Creates an empty inventory of type {@link InventoryType#CHEST} with the\n specified size.\n@param owner the holder of the inventory, or null to indicate no holder\n@param size a multiple of 9 as the size of inventory to create\n@return a new inventory\n@throws IllegalArgumentException if the size is not a multiple of 9"
            }
          },
          {
            "kind": "METHOD",
            "name": "createInventory(org.bukkit.inventory.InventoryHolder,int,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "owner"
              },
              {
                "kind": "PARAMETER",
                "name": "size"
              },
              {
                "kind": "PARAMETER",
                "name": "title"
              }
            ],
            "comment": {
              "body": "Creates an empty inventory of type \u003ca href\u003d\"org/bukkit/event/inventory/InventoryType.html#CHEST\"\u003e\u003ccode\u003eInventoryType.CHEST\u003c/code\u003e\u003c/a\u003e with the\n specified size and title.",
              "tags": "Returns a new inventory.",
              "plain": "Creates an empty inventory of type {@link InventoryType#CHEST} with the\n specified size and title.\n@param owner the holder of the inventory, or null to indicate no holder\n@param size a multiple of 9 as the size of inventory to create\n@param title the title of the inventory, displayed when inventory is\n     viewed\n@return a new inventory\n@throws IllegalArgumentException if the size is not a multiple of 9"
            }
          },
          {
            "kind": "METHOD",
            "name": "createInventory(org.bukkit.inventory.InventoryHolder,org.bukkit.event.inventory.InventoryType)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "owner"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "comment": {
              "body": "Creates an empty inventory of the specified type. If the type is \u003ca href\u003d\"org/bukkit/event/inventory/InventoryType.html#CHEST\"\u003e\u003ccode\u003eInventoryType.CHEST\u003c/code\u003e\u003c/a\u003e, the new inventory has a size of 27; otherwise the\n new inventory has the normal size for its type.",
              "tags": "Returns a new inventory.",
              "plain": "Creates an empty inventory of the specified type. If the type is {@link InventoryType#CHEST}, the new inventory has a size of 27; otherwise the\n new inventory has the normal size for its type.\n@param owner the holder of the inventory, or null to indicate no holder\n@param type the type of inventory to create\n@return a new inventory"
            }
          },
          {
            "kind": "METHOD",
            "name": "createInventory(org.bukkit.inventory.InventoryHolder,org.bukkit.event.inventory.InventoryType,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "owner"
              },
              {
                "kind": "PARAMETER",
                "name": "title"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "comment": {
              "body": "Creates an empty inventory with the specified type and title. If the type\n is \u003ca href\u003d\"org/bukkit/event/inventory/InventoryType.html#CHEST\"\u003e\u003ccode\u003eInventoryType.CHEST\u003c/code\u003e\u003c/a\u003e, the new inventory has a size of 27;\n otherwise the new inventory has the normal size for its type.\u003cbr\u003e\n It should be noted that some inventory types do not support titles and\n may not render with said titles on the Minecraft client.",
              "tags": "Returns The new inventory..",
              "plain": "Creates an empty inventory with the specified type and title. If the type\n is {@link InventoryType#CHEST}, the new inventory has a size of 27;\n otherwise the new inventory has the normal size for its type.\u003cbr\u003e\n It should be noted that some inventory types do not support titles and\n may not render with said titles on the Minecraft client.\n@param owner The holder of the inventory; can be null if there\u0027s no holder.\n@param type The type of inventory to create.\n@param title The title of the inventory, to be displayed when it is viewed.\n@return The new inventory."
            }
          },
          {
            "kind": "METHOD",
            "name": "createMap(org.bukkit.World)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "world"
              }
            ],
            "comment": {
              "body": "Create a new map with an automatically assigned ID.",
              "tags": "Returns a newly created map view.",
              "plain": "Create a new map with an automatically assigned ID.\n@param world the world the map will belong to\n@return a newly created map view"
            }
          },
          {
            "kind": "METHOD",
            "name": "createMerchant(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "title"
              }
            ],
            "comment": {
              "body": "Creates an empty merchant.",
              "tags": "Returns a new merchant.",
              "plain": "Creates an empty merchant.\n@param title the title of the corresponding merchant inventory, displayed\n when the merchant inventory is viewed\n@return a new merchant"
            }
          },
          {
            "kind": "METHOD",
            "name": "createProfile(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ],
            "comment": {
              "body": "Creates a PlayerProfile for the specified name, with UUID as null",
              "tags": "Returns A PlayerProfile object.",
              "plain": "Creates a PlayerProfile for the specified name, with UUID as null\n@param name Name to create profile for\n@return A PlayerProfile object"
            }
          },
          {
            "kind": "METHOD",
            "name": "createProfile(java.util.UUID)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "uuid"
              }
            ],
            "comment": {
              "body": "Creates a PlayerProfile for the specified uuid, with name as null",
              "tags": "Returns A PlayerProfile object.",
              "plain": "Creates a PlayerProfile for the specified uuid, with name as null\n@param uuid UUID to create profile for\n@return A PlayerProfile object"
            }
          },
          {
            "kind": "METHOD",
            "name": "createProfile(java.util.UUID,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              },
              {
                "kind": "PARAMETER",
                "name": "uuid"
              }
            ],
            "comment": {
              "body": "Creates a PlayerProfile for the specified name/uuid\n\n Both UUID and Name can not be null at same time. One must be supplied.",
              "tags": "Returns A PlayerProfile object.",
              "plain": "Creates a PlayerProfile for the specified name/uuid\n\n Both UUID and Name can not be null at same time. One must be supplied.\n@param uuid UUID to create profile for\n@param name Name to create profile for\n@return A PlayerProfile object"
            }
          },
          {
            "kind": "METHOD",
            "name": "createWorld(org.bukkit.WorldCreator)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "creator"
              }
            ],
            "comment": {
              "body": "Creates or loads a world with the given name using the specified\n options.\n \u003cp\u003e\n If the world is already loaded, it will just return the equivalent of\n getWorld(creator.name()).",
              "tags": "Returns newly created or loaded world.",
              "plain": "Creates or loads a world with the given name using the specified\n options.\n \u003cp\u003e\n If the world is already loaded, it will just return the equivalent of\n getWorld(creator.name()).\n@param creator the options to use when creating the world\n@return newly created or loaded world"
            }
          },
          {
            "kind": "METHOD",
            "name": "dispatchCommand(org.bukkit.command.CommandSender,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "commandLine"
              },
              {
                "kind": "PARAMETER",
                "name": "sender"
              }
            ],
            "comment": {
              "body": "Dispatches a command on this server, and executes it if found.",
              "tags": "Returns returns false if no target is found.",
              "plain": "Dispatches a command on this server, and executes it if found.\n@param sender the apparent sender of the command\n@param commandLine the command + arguments. Example: \u003ccode\u003etest abc\n     123\u003c/code\u003e\n@return returns false if no target is found\n@throws CommandException thrown when the executor for the given command\n     fails with an unhandled exception"
            }
          },
          {
            "kind": "METHOD",
            "name": "getAdvancement(org.bukkit.NamespacedKey)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "key"
              }
            ],
            "comment": {
              "body": "Get the advancement specified by this key.",
              "tags": "Returns advancement or null if not exists.",
              "plain": "Get the advancement specified by this key.\n@param key unique advancement key\n@return advancement or null if not exists"
            }
          },
          {
            "kind": "METHOD",
            "name": "getAllowEnd()",
            "comment": {
              "body": "Gets whether this server allows the End or not.",
              "tags": "Returns whether this server allows the End or not.",
              "plain": "Gets whether this server allows the End or not.\n@return whether this server allows the End or not"
            }
          },
          {
            "kind": "METHOD",
            "name": "getAllowFlight()",
            "comment": {
              "body": "Gets whether this server allows flying or not.",
              "tags": "Returns true if the server allows flight, false otherwise.",
              "plain": "Gets whether this server allows flying or not.\n@return true if the server allows flight, false otherwise"
            }
          },
          {
            "kind": "METHOD",
            "name": "getAllowNether()",
            "comment": {
              "body": "Gets whether this server allows the Nether or not.",
              "tags": "Returns whether this server allows the Nether or not.",
              "plain": "Gets whether this server allows the Nether or not.\n@return whether this server allows the Nether or not"
            }
          },
          {
            "kind": "METHOD",
            "name": "getAmbientSpawnLimit()",
            "comment": {
              "body": "Gets user-specified limit for number of ambient mobs that can spawn in\n a chunk.",
              "tags": "Returns the ambient spawn limit.",
              "plain": "Gets user-specified limit for number of ambient mobs that can spawn in\n a chunk.\n@return the ambient spawn limit"
            }
          },
          {
            "kind": "METHOD",
            "name": "getAnimalSpawnLimit()",
            "comment": {
              "body": "Gets user-specified limit for number of animals that can spawn in a\n chunk.",
              "tags": "Returns the animal spawn limit.",
              "plain": "Gets user-specified limit for number of animals that can spawn in a\n chunk.\n@return the animal spawn limit"
            }
          },
          {
            "kind": "METHOD",
            "name": "getBanList(org.bukkit.BanList.Type)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "comment": {
              "body": "Gets a ban list for the supplied type.\n \u003cp\u003e\n Bans by name are no longer supported and this method will return\n null when trying to request them. The replacement is bans by UUID.",
              "tags": "Returns a ban list of the specified type.",
              "plain": "Gets a ban list for the supplied type.\n \u003cp\u003e\n Bans by name are no longer supported and this method will return\n null when trying to request them. The replacement is bans by UUID.\n@param type the type of list to fetch, cannot be null\n@return a ban list of the specified type"
            }
          },
          {
            "kind": "METHOD",
            "name": "getBannedPlayers()",
            "comment": {
              "body": "Gets a set containing all banned players.",
              "tags": "Returns a set containing banned players.",
              "plain": "Gets a set containing all banned players.\n@return a set containing banned players"
            }
          },
          {
            "kind": "METHOD",
            "name": "getBukkitVersion()",
            "comment": {
              "body": "Gets the Bukkit version that this server is running.",
              "tags": "Returns version of Bukkit.",
              "plain": "Gets the Bukkit version that this server is running.\n@return version of Bukkit"
            }
          },
          {
            "kind": "METHOD",
            "name": "getCommandAliases()",
            "comment": {
              "body": "Gets a list of command aliases defined in the server properties.",
              "tags": "Returns a map of aliases to command names.",
              "plain": "Gets a list of command aliases defined in the server properties.\n@return a map of aliases to command names"
            }
          },
          {
            "kind": "METHOD",
            "name": "getCommandMap()",
            "comment": {
              "body": "Gets the active \u003ca href\u003d\"org/bukkit/command/CommandMap.html\" title\u003d\"interface in org.bukkit.command\"\u003e\u003ccode\u003eCommandMap\u003c/code\u003e\u003c/a\u003e",
              "tags": "Returns the active command map.",
              "plain": "Gets the active {@link CommandMap}\n@return the active command map"
            }
          },
          {
            "kind": "METHOD",
            "name": "getConnectionThrottle()",
            "comment": {
              "body": "Gets the value of the connection throttle setting.",
              "tags": "Returns the value of the connection throttle setting.",
              "plain": "Gets the value of the connection throttle setting.\n@return the value of the connection throttle setting"
            }
          },
          {
            "kind": "METHOD",
            "name": "getConsoleSender()",
            "comment": {
              "body": "Gets a \u003ca href\u003d\"org/bukkit/command/ConsoleCommandSender.html\" title\u003d\"interface in org.bukkit.command\"\u003e\u003ccode\u003eConsoleCommandSender\u003c/code\u003e\u003c/a\u003e that may be used as an input source\n for this server.",
              "tags": "Returns a console command sender.",
              "plain": "Gets a {@link ConsoleCommandSender} that may be used as an input source\n for this server.\n@return a console command sender"
            }
          },
          {
            "kind": "METHOD",
            "name": "getDefaultGameMode()",
            "comment": {
              "body": "Gets the default \u003ca href\u003d\"org/bukkit/GameMode.html\" title\u003d\"enum in org.bukkit\"\u003e\u003ccode\u003eGameMode\u003c/code\u003e\u003c/a\u003e for new players.",
              "tags": "Returns the default game mode.",
              "plain": "Gets the default {@link GameMode} for new players.\n@return the default game mode"
            }
          },
          {
            "kind": "METHOD",
            "name": "getEntity(java.util.UUID)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "uuid"
              }
            ],
            "comment": {
              "body": "Gets an entity on the server by its UUID",
              "tags": "Returns the entity with the given UUID, or null if it isn\u0027t found.",
              "plain": "Gets an entity on the server by its UUID\n@param uuid the UUID of the entity\n@return the entity with the given UUID, or null if it isn\u0027t found"
            }
          },
          {
            "kind": "METHOD",
            "name": "getGenerateStructures()",
            "comment": {
              "body": "Get generate-structures setting.",
              "tags": "Returns true if structure generation is enabled, false otherwise.",
              "plain": "Get generate-structures setting.\n@return true if structure generation is enabled, false otherwise"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHelpMap()",
            "comment": {
              "body": "Gets the \u003ca href\u003d\"org/bukkit/help/HelpMap.html\" title\u003d\"interface in org.bukkit.help\"\u003e\u003ccode\u003eHelpMap\u003c/code\u003e\u003c/a\u003e providing help topics for this server.",
              "tags": "Returns a help map for this server.",
              "plain": "Gets the {@link HelpMap} providing help topics for this server.\n@return a help map for this server"
            }
          },
          {
            "kind": "METHOD",
            "name": "getIPBans()",
            "comment": {
              "body": "Gets a set containing all current IPs that are banned.",
              "tags": "Returns a set containing banned IP addresses.",
              "plain": "Gets a set containing all current IPs that are banned.\n@return a set containing banned IP addresses"
            }
          },
          {
            "kind": "METHOD",
            "name": "getIdleTimeout()",
            "comment": {
              "body": "Gets the idle kick timeout.",
              "tags": "Returns the idle timeout in minutes.",
              "plain": "Gets the idle kick timeout.\n@return the idle timeout in minutes"
            }
          },
          {
            "kind": "METHOD",
            "name": "getIp()",
            "comment": {
              "body": "Get the IP that this server is bound to, or empty string if not\n specified.",
              "tags": "Returns the IP string that this server is bound to, otherwise empty\n     string.",
              "plain": "Get the IP that this server is bound to, or empty string if not\n specified.\n@return the IP string that this server is bound to, otherwise empty\n     string"
            }
          },
          {
            "kind": "METHOD",
            "name": "getItemFactory()",
            "comment": {
              "body": "Gets the instance of the item factory (for \u003ca href\u003d\"org/bukkit/inventory/meta/ItemMeta.html\" title\u003d\"interface in org.bukkit.inventory.meta\"\u003e\u003ccode\u003eItemMeta\u003c/code\u003e\u003c/a\u003e).",
              "tags": "Returns the item factory.",
              "plain": "Gets the instance of the item factory (for {@link ItemMeta}).\n@return the item factory\n@see ItemFactory"
            }
          },
          {
            "kind": "METHOD",
            "name": "getLogger()",
            "comment": {
              "body": "Returns the primary logger associated with this server instance.",
              "tags": "Returns Logger associated with this server.",
              "plain": "Returns the primary logger associated with this server instance.\n@return Logger associated with this server"
            }
          },
          {
            "kind": "METHOD",
            "name": "getMap(short)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "id"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Gets the map from the given item ID.",
              "tags": "Returns a map view if it exists, or null otherwise.",
              "plain": "Gets the map from the given item ID.\n@param id the id of the map to get\n@return a map view if it exists, or null otherwise\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "getMaxPlayers()",
            "comment": {
              "body": "Get the maximum amount of players which can login to this server.",
              "tags": "Returns the amount of players this server allows.",
              "plain": "Get the maximum amount of players which can login to this server.\n@return the amount of players this server allows"
            }
          },
          {
            "kind": "METHOD",
            "name": "getMessenger()",
            "comment": {
              "body": "Gets the \u003ca href\u003d\"org/bukkit/plugin/messaging/Messenger.html\" title\u003d\"interface in org.bukkit.plugin.messaging\"\u003e\u003ccode\u003eMessenger\u003c/code\u003e\u003c/a\u003e responsible for this server.",
              "tags": "Returns messenger responsible for this server.",
              "plain": "Gets the {@link Messenger} responsible for this server.\n@return messenger responsible for this server"
            }
          },
          {
            "kind": "METHOD",
            "name": "getMonsterSpawnLimit()",
            "comment": {
              "body": "Gets user-specified limit for number of monsters that can spawn in a\n chunk.",
              "tags": "Returns the monster spawn limit.",
              "plain": "Gets user-specified limit for number of monsters that can spawn in a\n chunk.\n@return the monster spawn limit"
            }
          },
          {
            "kind": "METHOD",
            "name": "getMotd()",
            "comment": {
              "body": "Gets the message that is displayed on the server list.",
              "tags": "Returns the servers MOTD.",
              "plain": "Gets the message that is displayed on the server list.\n@return the servers MOTD"
            }
          },
          {
            "kind": "METHOD",
            "name": "getName()",
            "comment": {
              "body": "Gets the name of this server implementation.",
              "tags": "Returns name of this server implementation.",
              "plain": "Gets the name of this server implementation.\n@return name of this server implementation"
            }
          },
          {
            "kind": "METHOD",
            "name": "getOfflinePlayer(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Gets the player by the given name, regardless if they are offline or\n online.\n \u003cp\u003e\n This method may involve a blocking web request to get the UUID for the\n given name.\n \u003cp\u003e\n This will return an object even if the player does not exist. To this\n method, all players will exist.",
              "tags": "Returns an offline player.",
              "plain": "Gets the player by the given name, regardless if they are offline or\n online.\n \u003cp\u003e\n This method may involve a blocking web request to get the UUID for the\n given name.\n \u003cp\u003e\n This will return an object even if the player does not exist. To this\n method, all players will exist.\n@deprecated Persistent storage of users should be by UUID as names are no longer\n             unique past a single session.\n@param name the name the player to retrieve\n@return an offline player\n@see #getOfflinePlayer(java.util.UUID)"
            }
          },
          {
            "kind": "METHOD",
            "name": "getOfflinePlayer(java.util.UUID)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "id"
              }
            ],
            "comment": {
              "body": "Gets the player by the given UUID, regardless if they are offline or\n online.\n \u003cp\u003e\n This will return an object even if the player does not exist. To this\n method, all players will exist.",
              "tags": "Returns an offline player.",
              "plain": "Gets the player by the given UUID, regardless if they are offline or\n online.\n \u003cp\u003e\n This will return an object even if the player does not exist. To this\n method, all players will exist.\n@param id the UUID of the player to retrieve\n@return an offline player"
            }
          },
          {
            "kind": "METHOD",
            "name": "getOfflinePlayers()",
            "comment": {
              "body": "Gets every player that has ever played on this server.",
              "tags": "Returns an array containing all previous players.",
              "plain": "Gets every player that has ever played on this server.\n@return an array containing all previous players"
            }
          },
          {
            "kind": "METHOD",
            "name": "getOnlineMode()",
            "comment": {
              "body": "Gets whether the Server is in online mode or not.",
              "tags": "Returns true if the server authenticates clients, false otherwise.",
              "plain": "Gets whether the Server is in online mode or not.\n@return true if the server authenticates clients, false otherwise"
            }
          },
          {
            "kind": "METHOD",
            "name": "getOnlinePlayers()",
            "comment": {
              "body": "Gets a view of all currently logged in players. This \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/util/Collections.html#unmodifiableCollection(java.util.Collection)\" title\u003d\"class or interface in java.util\" class\u003d\"external-link\"\u003eview\u003c/a\u003e is a reused\n object, making some operations like \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/util/Collection.html#size()\" title\u003d\"class or interface in java.util\" class\u003d\"external-link\"\u003e\u003ccode\u003eCollection.size()\u003c/code\u003e\u003c/a\u003e\n zero-allocation.\n \u003cp\u003e\n The collection is a view backed by the internal representation, such\n that, changes to the internal state of the server will be reflected\n immediately. However, the reuse of the returned collection (identity)\n is not strictly guaranteed for future or all implementations. Casting\n the collection, or relying on interface implementations (like \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/io/Serializable.html\" title\u003d\"class or interface in java.io\" class\u003d\"external-link\"\u003e\u003ccode\u003eSerializable\u003c/code\u003e\u003c/a\u003e or \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/util/List.html\" title\u003d\"class or interface in java.util\" class\u003d\"external-link\"\u003e\u003ccode\u003eList\u003c/code\u003e\u003c/a\u003e), is deprecated.\n \u003cp\u003e\n Iteration behavior is undefined outside of self-contained main-thread\n uses. Normal and immediate iterator use without consequences that\n affect the collection are fully supported. The effects following\n (non-exhaustive) \u003ca href\u003d\"org/bukkit/entity/Entity.html#teleport(org.bukkit.Location)\"\u003e\u003ccode\u003eteleportation\u003c/code\u003e\u003c/a\u003e,\n \u003ca href\u003d\"org/bukkit/entity/Damageable.html#setHealth(double)\"\u003e\u003ccode\u003edeath\u003c/code\u003e\u003c/a\u003e, and \u003ca href\u003d\"org/bukkit/entity/Player.html#kickPlayer(java.lang.String)\"\u003e\u003ccode\u003ekicking\u003c/code\u003e\u003c/a\u003e are undefined. Any use of this collection from\n asynchronous threads is unsafe.\n \u003cp\u003e\n For safe consequential iteration or mimicking the old array behavior,\n using \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/util/Collection.html#toArray(T%5B%5D)\" title\u003d\"class or interface in java.util\" class\u003d\"external-link\"\u003e\u003ccode\u003eCollection.toArray(Object[])\u003c/code\u003e\u003c/a\u003e is recommended. For making\n snapshots, \u003ccode\u003eImmutableList.copyOf(Collection)\u003c/code\u003e is recommended.",
              "tags": "Returns a view of currently online players..",
              "plain": "Gets a view of all currently logged in players. This {@linkplain Collections#unmodifiableCollection(Collection) view} is a reused\n object, making some operations like {@link Collection#size()}\n zero-allocation.\n \u003cp\u003e\n The collection is a view backed by the internal representation, such\n that, changes to the internal state of the server will be reflected\n immediately. However, the reuse of the returned collection (identity)\n is not strictly guaranteed for future or all implementations. Casting\n the collection, or relying on interface implementations (like {@link Serializable} or {@link List}), is deprecated.\n \u003cp\u003e\n Iteration behavior is undefined outside of self-contained main-thread\n uses. Normal and immediate iterator use without consequences that\n affect the collection are fully supported. The effects following\n (non-exhaustive) {@link Entity#teleport(Location) teleportation},\n {@link Player#setHealth(double) death}, and {@link Player#kickPlayer(\n String) kicking} are undefined. Any use of this collection from\n asynchronous threads is unsafe.\n \u003cp\u003e\n For safe consequential iteration or mimicking the old array behavior,\n using {@link Collection#toArray(Object[])} is recommended. For making\n snapshots, {@link ImmutableList#copyOf(Collection)} is recommended.\n@return a view of currently online players."
            }
          },
          {
            "kind": "METHOD",
            "name": "getOperators()",
            "comment": {
              "body": "Gets a set containing all player operators.",
              "tags": "Returns a set containing player operators.",
              "plain": "Gets a set containing all player operators.\n@return a set containing player operators"
            }
          },
          {
            "kind": "METHOD",
            "name": "getPlayer(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ],
            "comment": {
              "body": "Gets a player object by the given username.\n \u003cp\u003e\n This method may not return objects for offline players.",
              "tags": "Returns a player if one was found, null otherwise.",
              "plain": "Gets a player object by the given username.\n \u003cp\u003e\n This method may not return objects for offline players.\n@param name the name to look up\n@return a player if one was found, null otherwise"
            }
          },
          {
            "kind": "METHOD",
            "name": "getPlayer(java.util.UUID)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "id"
              }
            ],
            "comment": {
              "body": "Gets the player with the given UUID.",
              "tags": "Returns a player object if one was found, null otherwise.",
              "plain": "Gets the player with the given UUID.\n@param id UUID of the player to retrieve\n@return a player object if one was found, null otherwise"
            }
          },
          {
            "kind": "METHOD",
            "name": "getPlayerExact(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ],
            "comment": {
              "body": "Gets the player with the exact given name, case insensitive.",
              "tags": "Returns a player object if one was found, null otherwise.",
              "plain": "Gets the player with the exact given name, case insensitive.\n@param name Exact name of the player to retrieve\n@return a player object if one was found, null otherwise"
            }
          },
          {
            "kind": "METHOD",
            "name": "getPlayerUniqueId(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "playerName"
              }
            ],
            "comment": {
              "body": "Gets the unique ID of the player currently known as the specified player name\n In Offline Mode, will return an Offline UUID",
              "tags": "Returns A UUID, or null if that player name is not registered with Minecraft and the server is in online mode.",
              "plain": "Gets the unique ID of the player currently known as the specified player name\n In Offline Mode, will return an Offline UUID\n@param playerName the player name to look up the unique ID for\n@return A UUID, or null if that player name is not registered with Minecraft and the server is in online mode"
            }
          },
          {
            "kind": "METHOD",
            "name": "getPluginCommand(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ],
            "comment": {
              "body": "Gets a \u003ca href\u003d\"org/bukkit/command/PluginCommand.html\" title\u003d\"class in org.bukkit.command\"\u003e\u003ccode\u003ePluginCommand\u003c/code\u003e\u003c/a\u003e with the given name or alias.",
              "tags": "Returns a plugin command if found, null otherwise.",
              "plain": "Gets a {@link PluginCommand} with the given name or alias.\n@param name the name of the command to retrieve\n@return a plugin command if found, null otherwise"
            }
          },
          {
            "kind": "METHOD",
            "name": "getPluginManager()",
            "comment": {
              "body": "Gets the plugin manager for interfacing with plugins.",
              "tags": "Returns a plugin manager for this Server instance.",
              "plain": "Gets the plugin manager for interfacing with plugins.\n@return a plugin manager for this Server instance"
            }
          },
          {
            "kind": "METHOD",
            "name": "getPort()",
            "comment": {
              "body": "Get the game port that the server runs on.",
              "tags": "Returns the port number of this server.",
              "plain": "Get the game port that the server runs on.\n@return the port number of this server"
            }
          },
          {
            "kind": "METHOD",
            "name": "getRecipesFor(org.bukkit.inventory.ItemStack)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "result"
              }
            ],
            "comment": {
              "body": "Get a list of all recipes for a given item. The stack size is ignored\n in comparisons. If the durability is -1, it will match any data value.",
              "tags": "Returns a list of recipes with the given result.",
              "plain": "Get a list of all recipes for a given item. The stack size is ignored\n in comparisons. If the durability is -1, it will match any data value.\n@param result the item to match against recipe results\n@return a list of recipes with the given result"
            }
          },
          {
            "kind": "METHOD",
            "name": "getScheduler()",
            "comment": {
              "body": "Gets the scheduler for managing scheduled events.",
              "tags": "Returns a scheduling service for this server.",
              "plain": "Gets the scheduler for managing scheduled events.\n@return a scheduling service for this server"
            }
          },
          {
            "kind": "METHOD",
            "name": "getScoreboardManager()",
            "comment": {
              "body": "Gets the instance of the scoreboard manager.\n \u003cp\u003e\n This will only exist after the first world has loaded.",
              "tags": "Returns the scoreboard manager or null if no worlds are loaded..",
              "plain": "Gets the instance of the scoreboard manager.\n \u003cp\u003e\n This will only exist after the first world has loaded.\n@return the scoreboard manager or null if no worlds are loaded."
            }
          },
          {
            "kind": "METHOD",
            "name": "getServerIcon()",
            "comment": {
              "body": "Gets an instance of the server\u0027s default server-icon.",
              "tags": "Returns the default server-icon; null values may be used by the\n     implementation to indicate no defined icon, but this behavior is\n     not guaranteed.",
              "plain": "Gets an instance of the server\u0027s default server-icon.\n@return the default server-icon; null values may be used by the\n     implementation to indicate no defined icon, but this behavior is\n     not guaranteed"
            }
          },
          {
            "kind": "METHOD",
            "name": "getServerId()",
            "comment": {
              "body": "Get an ID of this server. The ID is a simple generally alphanumeric ID\n that can be used for uniquely identifying this server.",
              "tags": "Returns the ID of this server.",
              "plain": "Get an ID of this server. The ID is a simple generally alphanumeric ID\n that can be used for uniquely identifying this server.\n@return the ID of this server"
            }
          },
          {
            "kind": "METHOD",
            "name": "getServerName()",
            "comment": {
              "body": "Get the name of this server.",
              "tags": "Returns the name of this server.",
              "plain": "Get the name of this server.\n@return the name of this server"
            }
          },
          {
            "kind": "METHOD",
            "name": "getServicesManager()",
            "comment": {
              "body": "Gets a services manager.",
              "tags": "Returns s services manager.",
              "plain": "Gets a services manager.\n@return s services manager"
            }
          },
          {
            "kind": "METHOD",
            "name": "getShutdownMessage()",
            "comment": {
              "body": "Gets the default message that is displayed when the server is stopped.",
              "tags": "Returns the shutdown message.",
              "plain": "Gets the default message that is displayed when the server is stopped.\n@return the shutdown message"
            }
          },
          {
            "kind": "METHOD",
            "name": "getSpawnRadius()",
            "comment": {
              "body": "Gets the radius, in blocks, around each worlds spawn point to protect.",
              "tags": "Returns spawn radius, or 0 if none.",
              "plain": "Gets the radius, in blocks, around each worlds spawn point to protect.\n@return spawn radius, or 0 if none"
            }
          },
          {
            "kind": "METHOD",
            "name": "getTPS()",
            "comment": {
              "body": "Gets the current server TPS",
              "tags": "Returns current server TPS (1m, 5m, 15m in Paper-Server).",
              "plain": "Gets the current server TPS\n@return current server TPS (1m, 5m, 15m in Paper-Server)"
            }
          },
          {
            "kind": "METHOD",
            "name": "getTicksPerAnimalSpawns()",
            "comment": {
              "body": "Gets default ticks per animal spawns value.\n \u003cp\u003e\n \u003cb\u003eExample Usage:\u003c/b\u003e\n \u003cul\u003e\n \u003cli\u003eA value of 1 will mean the server will attempt to spawn monsters\n     every tick.\n \u003cli\u003eA value of 400 will mean the server will attempt to spawn monsters\n     every 400th tick.\n \u003cli\u003eA value below 0 will be reset back to Minecraft\u0027s default.\n \u003c/ul\u003e\n \u003cp\u003e\n \u003cb\u003eNote:\u003c/b\u003e If set to 0, animal spawning will be disabled. We\n recommend using spawn-animals to control this instead.\n \u003cp\u003e\n Minecraft default: 400.",
              "tags": "Returns the default ticks per animal spawns value.",
              "plain": "Gets default ticks per animal spawns value.\n \u003cp\u003e\n \u003cb\u003eExample Usage:\u003c/b\u003e\n \u003cul\u003e\n \u003cli\u003eA value of 1 will mean the server will attempt to spawn monsters\n     every tick.\n \u003cli\u003eA value of 400 will mean the server will attempt to spawn monsters\n     every 400th tick.\n \u003cli\u003eA value below 0 will be reset back to Minecraft\u0027s default.\n \u003c/ul\u003e\n \u003cp\u003e\n \u003cb\u003eNote:\u003c/b\u003e If set to 0, animal spawning will be disabled. We\n recommend using spawn-animals to control this instead.\n \u003cp\u003e\n Minecraft default: 400.\n@return the default ticks per animal spawns value"
            }
          },
          {
            "kind": "METHOD",
            "name": "getTicksPerMonsterSpawns()",
            "comment": {
              "body": "Gets the default ticks per monster spawns value.\n \u003cp\u003e\n \u003cb\u003eExample Usage:\u003c/b\u003e\n \u003cul\u003e\n \u003cli\u003eA value of 1 will mean the server will attempt to spawn monsters\n     every tick.\n \u003cli\u003eA value of 400 will mean the server will attempt to spawn monsters\n     every 400th tick.\n \u003cli\u003eA value below 0 will be reset back to Minecraft\u0027s default.\n \u003c/ul\u003e\n \u003cp\u003e\n \u003cb\u003eNote:\u003c/b\u003e If set to 0, monsters spawning will be disabled. We\n recommend using spawn-monsters to control this instead.\n \u003cp\u003e\n Minecraft default: 1.",
              "tags": "Returns the default ticks per monsters spawn value.",
              "plain": "Gets the default ticks per monster spawns value.\n \u003cp\u003e\n \u003cb\u003eExample Usage:\u003c/b\u003e\n \u003cul\u003e\n \u003cli\u003eA value of 1 will mean the server will attempt to spawn monsters\n     every tick.\n \u003cli\u003eA value of 400 will mean the server will attempt to spawn monsters\n     every 400th tick.\n \u003cli\u003eA value below 0 will be reset back to Minecraft\u0027s default.\n \u003c/ul\u003e\n \u003cp\u003e\n \u003cb\u003eNote:\u003c/b\u003e If set to 0, monsters spawning will be disabled. We\n recommend using spawn-monsters to control this instead.\n \u003cp\u003e\n Minecraft default: 1.\n@return the default ticks per monsters spawn value"
            }
          },
          {
            "kind": "METHOD",
            "name": "getUnsafe()",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "tags": "Returns the unsafe values instance.",
              "plain": "@see UnsafeValues\n@return the unsafe values instance"
            }
          },
          {
            "kind": "METHOD",
            "name": "getUpdateFolder()",
            "comment": {
              "body": "Gets the name of the update folder. The update folder is used to safely\n update plugins at the right moment on a plugin load.\n \u003cp\u003e\n The update folder name is relative to the plugins folder.",
              "tags": "Returns the name of the update folder.",
              "plain": "Gets the name of the update folder. The update folder is used to safely\n update plugins at the right moment on a plugin load.\n \u003cp\u003e\n The update folder name is relative to the plugins folder.\n@return the name of the update folder"
            }
          },
          {
            "kind": "METHOD",
            "name": "getUpdateFolderFile()",
            "comment": {
              "body": "Gets the update folder. The update folder is used to safely update\n plugins at the right moment on a plugin load.",
              "tags": "Returns the update folder.",
              "plain": "Gets the update folder. The update folder is used to safely update\n plugins at the right moment on a plugin load.\n@return the update folder"
            }
          },
          {
            "kind": "METHOD",
            "name": "getVersion()",
            "comment": {
              "body": "Gets the version string of this server implementation.",
              "tags": "Returns version of this server implementation.",
              "plain": "Gets the version string of this server implementation.\n@return version of this server implementation"
            }
          },
          {
            "kind": "METHOD",
            "name": "getViewDistance()",
            "comment": {
              "body": "Get the view distance from this server.",
              "tags": "Returns the view distance from this server..",
              "plain": "Get the view distance from this server.\n@return the view distance from this server."
            }
          },
          {
            "kind": "METHOD",
            "name": "getWarningState()",
            "comment": {
              "body": "Gets the current warning state for the server.",
              "tags": "Returns the configured warning state.",
              "plain": "Gets the current warning state for the server.\n@return the configured warning state"
            }
          },
          {
            "kind": "METHOD",
            "name": "getWaterAnimalSpawnLimit()",
            "comment": {
              "body": "Gets user-specified limit for number of water animals that can spawn in\n a chunk.",
              "tags": "Returns the water animal spawn limit.",
              "plain": "Gets user-specified limit for number of water animals that can spawn in\n a chunk.\n@return the water animal spawn limit"
            }
          },
          {
            "kind": "METHOD",
            "name": "getWhitelistedPlayers()",
            "comment": {
              "body": "Gets a list of whitelisted players.",
              "tags": "Returns a set containing all whitelisted players.",
              "plain": "Gets a list of whitelisted players.\n@return a set containing all whitelisted players"
            }
          },
          {
            "kind": "METHOD",
            "name": "getWorld(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ],
            "comment": {
              "body": "Gets the world with the given name.",
              "tags": "Returns a world with the given name, or null if none exists.",
              "plain": "Gets the world with the given name.\n@param name the name of the world to retrieve\n@return a world with the given name, or null if none exists"
            }
          },
          {
            "kind": "METHOD",
            "name": "getWorld(java.util.UUID)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "uid"
              }
            ],
            "comment": {
              "body": "Gets the world from the given Unique ID.",
              "tags": "Returns a world with the given Unique ID, or null if none exists.",
              "plain": "Gets the world from the given Unique ID.\n@param uid a unique-id of the world to retrieve\n@return a world with the given Unique ID, or null if none exists"
            }
          },
          {
            "kind": "METHOD",
            "name": "getWorldContainer()",
            "comment": {
              "body": "Gets the folder that contains all of the various \u003ca href\u003d\"org/bukkit/World.html\" title\u003d\"interface in org.bukkit\"\u003e\u003ccode\u003eWorld\u003c/code\u003e\u003c/a\u003es.",
              "tags": "Returns folder that contains all worlds.",
              "plain": "Gets the folder that contains all of the various {@link World}s.\n@return folder that contains all worlds"
            }
          },
          {
            "kind": "METHOD",
            "name": "getWorldType()",
            "comment": {
              "body": "Get world type (level-type setting) for default world.",
              "tags": "Returns the value of level-type (e.g. DEFAULT, FLAT, DEFAULT_1_1).",
              "plain": "Get world type (level-type setting) for default world.\n@return the value of level-type (e.g. DEFAULT, FLAT, DEFAULT_1_1)"
            }
          },
          {
            "kind": "METHOD",
            "name": "getWorlds()",
            "comment": {
              "body": "Gets a list of all worlds on this server.",
              "tags": "Returns a list of worlds.",
              "plain": "Gets a list of all worlds on this server.\n@return a list of worlds"
            }
          },
          {
            "kind": "METHOD",
            "name": "hasWhitelist()",
            "comment": {
              "body": "Gets whether this server has a whitelist or not.",
              "tags": "Returns whether this server has a whitelist or not.",
              "plain": "Gets whether this server has a whitelist or not.\n@return whether this server has a whitelist or not"
            }
          },
          {
            "kind": "METHOD",
            "name": "isHardcore()",
            "comment": {
              "body": "Gets whether the server is in hardcore mode or not.",
              "tags": "Returns true if the server mode is hardcore, false otherwise.",
              "plain": "Gets whether the server is in hardcore mode or not.\n@return true if the server mode is hardcore, false otherwise"
            }
          },
          {
            "kind": "METHOD",
            "name": "isPrimaryThread()",
            "comment": {
              "body": "Checks the current thread against the expected primary thread for the\n server.\n \u003cp\u003e\n \u003cb\u003eNote:\u003c/b\u003e this method should not be used to indicate the current\n synchronized state of the runtime. A current thread matching the main\n thread indicates that it is synchronized, but a mismatch \u003cb\u003edoes not\n preclude\u003c/b\u003e the same assumption.",
              "tags": "Returns true if the current thread matches the expected primary thread,\n     false otherwise.",
              "plain": "Checks the current thread against the expected primary thread for the\n server.\n \u003cp\u003e\n \u003cb\u003eNote:\u003c/b\u003e this method should not be used to indicate the current\n synchronized state of the runtime. A current thread matching the main\n thread indicates that it is synchronized, but a mismatch \u003cb\u003edoes not\n preclude\u003c/b\u003e the same assumption.\n@return true if the current thread matches the expected primary thread,\n     false otherwise"
            }
          },
          {
            "kind": "METHOD",
            "name": "loadServerIcon(java.awt.image.BufferedImage)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "image"
              }
            ],
            "comment": {
              "body": "Creates a cached server-icon for the specific image.\n \u003cp\u003e\n Size and type are implementation defined. An incompatible file is\n guaranteed to throw an implementation-defined \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/lang/Exception.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003e\u003ccode\u003eException\u003c/code\u003e\u003c/a\u003e.",
              "tags": "Returns a cached server-icon that can be used for a \u003ca href\u003d\"org/bukkit/event/server/ServerListPingEvent.html#setServerIcon(org.bukkit.util.CachedServerIcon)\"\u003e\u003ccode\u003eServerListPingEvent.setServerIcon(CachedServerIcon)\u003c/code\u003e\u003c/a\u003e.",
              "plain": "Creates a cached server-icon for the specific image.\n \u003cp\u003e\n Size and type are implementation defined. An incompatible file is\n guaranteed to throw an implementation-defined {@link Exception}.\n@param image the image to use\n@throws IllegalArgumentException if image is null\n@throws Exception if the image does not meet current server\n     server-icon specifications\n@return a cached server-icon that can be used for a {@link ServerListPingEvent#setServerIcon(CachedServerIcon)}"
            }
          },
          {
            "kind": "METHOD",
            "name": "loadServerIcon(java.io.File)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "file"
              }
            ],
            "comment": {
              "body": "Loads an image from a file, and returns a cached image for the specific\n server-icon.\n \u003cp\u003e\n Size and type are implementation defined. An incompatible file is\n guaranteed to throw an implementation-defined \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/lang/Exception.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003e\u003ccode\u003eException\u003c/code\u003e\u003c/a\u003e.",
              "tags": "Returns a cached server-icon that can be used for a \u003ca href\u003d\"org/bukkit/event/server/ServerListPingEvent.html#setServerIcon(org.bukkit.util.CachedServerIcon)\"\u003e\u003ccode\u003eServerListPingEvent.setServerIcon(CachedServerIcon)\u003c/code\u003e\u003c/a\u003e.",
              "plain": "Loads an image from a file, and returns a cached image for the specific\n server-icon.\n \u003cp\u003e\n Size and type are implementation defined. An incompatible file is\n guaranteed to throw an implementation-defined {@link Exception}.\n@param file the file to load the from\n@throws IllegalArgumentException if image is null\n@throws Exception if the image does not meet current server server-icon\n     specifications\n@return a cached server-icon that can be used for a {@link ServerListPingEvent#setServerIcon(CachedServerIcon)}"
            }
          },
          {
            "kind": "METHOD",
            "name": "matchPlayer(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ],
            "comment": {
              "body": "Attempts to match any players with the given name, and returns a list\n of all possibly matches.\n \u003cp\u003e\n This list is not sorted in any particular order. If an exact match is\n found, the returned list will only contain a single result.",
              "tags": "Returns list of all possible players.",
              "plain": "Attempts to match any players with the given name, and returns a list\n of all possibly matches.\n \u003cp\u003e\n This list is not sorted in any particular order. If an exact match is\n found, the returned list will only contain a single result.\n@param name the (partial) name to match\n@return list of all possible players"
            }
          },
          {
            "kind": "CLASS",
            "name": "org.bukkit.Server.Spigot",
            "children": [
              {
                "kind": "CONSTRUCTOR",
                "name": "Spigot()"
              },
              {
                "kind": "METHOD",
                "name": "broadcast(net.md_5.bungee.api.chat.BaseComponent)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "component"
                  }
                ],
                "comment": {
                  "body": "Sends the component to the player",
                  "plain": "Sends the component to the player\n@param component the components to send"
                }
              },
              {
                "kind": "METHOD",
                "name": "broadcast(net.md_5.bungee.api.chat.BaseComponent...)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "components"
                  }
                ],
                "comment": {
                  "body": "Sends an array of components as a single message to the player",
                  "plain": "Sends an array of components as a single message to the player\n@param components the components to send"
                }
              },
              {
                "kind": "METHOD",
                "name": "getBukkitConfig()"
              },
              {
                "kind": "METHOD",
                "name": "getConfig()",
                "deprecated": {
                  "deprecated": "true"
                }
              },
              {
                "kind": "METHOD",
                "name": "getPaperConfig()"
              },
              {
                "kind": "METHOD",
                "name": "getSpigotConfig()"
              },
              {
                "kind": "METHOD",
                "name": "restart()",
                "comment": {
                  "body": "Restart the server. If the server administrator has not configured restarting, the server will stop.",
                  "plain": "Restart the server. If the server administrator has not configured restarting, the server will stop."
                }
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "recipeIterator()",
            "comment": {
              "body": "Get an iterator through the list of crafting recipes.",
              "tags": "Returns an iterator.",
              "plain": "Get an iterator through the list of crafting recipes.\n@return an iterator"
            }
          },
          {
            "kind": "METHOD",
            "name": "reload()",
            "comment": {
              "body": "Reloads the server, refreshing settings and plugin information.",
              "plain": "Reloads the server, refreshing settings and plugin information."
            }
          },
          {
            "kind": "METHOD",
            "name": "reloadCommandAliases()"
          },
          {
            "kind": "METHOD",
            "name": "reloadData()",
            "comment": {
              "body": "Reload only the Minecraft data for the server. This includes custom\n advancements and loot tables.",
              "plain": "Reload only the Minecraft data for the server. This includes custom\n advancements and loot tables."
            }
          },
          {
            "kind": "METHOD",
            "name": "reloadPermissions()"
          },
          {
            "kind": "METHOD",
            "name": "reloadWhitelist()",
            "comment": {
              "body": "Reloads the whitelist from disk.",
              "plain": "Reloads the whitelist from disk."
            }
          },
          {
            "kind": "METHOD",
            "name": "resetRecipes()",
            "comment": {
              "body": "Resets the list of crafting recipes to the default.",
              "plain": "Resets the list of crafting recipes to the default."
            }
          },
          {
            "kind": "METHOD",
            "name": "savePlayers()",
            "comment": {
              "body": "Writes loaded players to disk.",
              "plain": "Writes loaded players to disk."
            }
          },
          {
            "kind": "METHOD",
            "name": "setDefaultGameMode(org.bukkit.GameMode)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "mode"
              }
            ],
            "comment": {
              "body": "Sets the default \u003ca href\u003d\"org/bukkit/GameMode.html\" title\u003d\"enum in org.bukkit\"\u003e\u003ccode\u003eGameMode\u003c/code\u003e\u003c/a\u003e for new players.",
              "plain": "Sets the default {@link GameMode} for new players.\n@param mode the new game mode"
            }
          },
          {
            "kind": "METHOD",
            "name": "setIdleTimeout(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "threshold"
              }
            ],
            "comment": {
              "body": "Set the idle kick timeout. Any players idle for the specified amount of\n time will be automatically kicked.\n \u003cp\u003e\n A value of 0 will disable the idle kick timeout.",
              "plain": "Set the idle kick timeout. Any players idle for the specified amount of\n time will be automatically kicked.\n \u003cp\u003e\n A value of 0 will disable the idle kick timeout.\n@param threshold the idle timeout in minutes"
            }
          },
          {
            "kind": "METHOD",
            "name": "setSpawnRadius(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "value"
              }
            ],
            "comment": {
              "body": "Sets the radius, in blocks, around each worlds spawn point to protect.",
              "plain": "Sets the radius, in blocks, around each worlds spawn point to protect.\n@param value new spawn radius, or 0 if none"
            }
          },
          {
            "kind": "METHOD",
            "name": "setWhitelist(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "value"
              }
            ],
            "comment": {
              "body": "Sets if the server is whitelisted.",
              "plain": "Sets if the server is whitelisted.\n@param value true for whitelist on, false for off"
            }
          },
          {
            "kind": "METHOD",
            "name": "shutdown()",
            "comment": {
              "body": "Shutdowns the server, stopping everything.",
              "plain": "Shutdowns the server, stopping everything."
            }
          },
          {
            "kind": "METHOD",
            "name": "spigot()"
          },
          {
            "kind": "METHOD",
            "name": "suggestPlayerNamesWhenNullTabCompletions()",
            "comment": {
              "body": "Checks if player names should be suggested when a command returns \u003ccode\u003enull\u003c/code\u003e as\n their tab completion result.",
              "tags": "Returns true if player names should be suggested.",
              "plain": "Checks if player names should be suggested when a command returns {@code null} as\n their tab completion result.\n@return true if player names should be suggested"
            }
          },
          {
            "kind": "METHOD",
            "name": "unbanIP(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "address"
              }
            ],
            "comment": {
              "body": "Unbans the specified address from the server.",
              "plain": "Unbans the specified address from the server.\n@param address the IP address to unban"
            }
          },
          {
            "kind": "METHOD",
            "name": "unloadWorld(java.lang.String,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              },
              {
                "kind": "PARAMETER",
                "name": "save"
              }
            ],
            "comment": {
              "body": "Unloads a world with the given name.",
              "tags": "Returns true if successful, false otherwise.",
              "plain": "Unloads a world with the given name.\n@param name Name of the world to unload\n@param save whether to save the chunks before unloading\n@return true if successful, false otherwise"
            }
          },
          {
            "kind": "METHOD",
            "name": "unloadWorld(org.bukkit.World,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "save"
              },
              {
                "kind": "PARAMETER",
                "name": "world"
              }
            ],
            "comment": {
              "body": "Unloads the given world.",
              "tags": "Returns true if successful, false otherwise.",
              "plain": "Unloads the given world.\n@param world the world to unload\n@param save whether to save the chunks before unloading\n@return true if successful, false otherwise"
            }
          }
        ],
        "comment": {
          "body": "Represents a server implementation.",
          "plain": "Represents a server implementation."
        }
      },
      {
        "kind": "ENUM",
        "name": "org.bukkit.SkullType",
        "children": [
          {
            "kind": "ENUM_CONSTANT",
            "name": "CREEPER"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "DRAGON"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "PLAYER"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SKELETON"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "SkullType()"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "WITHER"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ZOMBIE"
          },
          {
            "kind": "METHOD",
            "name": "valueOf(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "values()"
          }
        ],
        "comment": {
          "body": "Represents the different types of skulls.",
          "plain": "Represents the different types of skulls."
        }
      },
      {
        "kind": "ENUM",
        "name": "org.bukkit.Sound",
        "children": [
          {
            "kind": "ENUM_CONSTANT",
            "name": "AMBIENT_CAVE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_ANVIL_BREAK"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_ANVIL_DESTROY"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_ANVIL_FALL"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_ANVIL_HIT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_ANVIL_LAND"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_ANVIL_PLACE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_ANVIL_STEP"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_ANVIL_USE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_BREWING_STAND_BREW"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_CHEST_CLOSE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_CHEST_LOCKED"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_CHEST_OPEN"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_CHORUS_FLOWER_DEATH"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_CHORUS_FLOWER_GROW"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_CLOTH_BREAK"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_CLOTH_FALL"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_CLOTH_HIT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_CLOTH_PLACE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_CLOTH_STEP"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_COMPARATOR_CLICK"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_DISPENSER_DISPENSE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_DISPENSER_FAIL"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_DISPENSER_LAUNCH"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_ENCHANTMENT_TABLE_USE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_ENDERCHEST_CLOSE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_ENDERCHEST_OPEN"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_END_GATEWAY_SPAWN"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_END_PORTAL_FRAME_FILL"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_END_PORTAL_SPAWN"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_FENCE_GATE_CLOSE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_FENCE_GATE_OPEN"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_FIRE_AMBIENT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_FIRE_EXTINGUISH"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_FURNACE_FIRE_CRACKLE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_GLASS_BREAK"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_GLASS_FALL"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_GLASS_HIT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_GLASS_PLACE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_GLASS_STEP"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_GRASS_BREAK"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_GRASS_FALL"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_GRASS_HIT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_GRASS_PLACE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_GRASS_STEP"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_GRAVEL_BREAK"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_GRAVEL_FALL"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_GRAVEL_HIT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_GRAVEL_PLACE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_GRAVEL_STEP"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_IRON_DOOR_CLOSE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_IRON_DOOR_OPEN"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_IRON_TRAPDOOR_CLOSE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_IRON_TRAPDOOR_OPEN"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_LADDER_BREAK"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_LADDER_FALL"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_LADDER_HIT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_LADDER_PLACE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_LADDER_STEP"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_LAVA_AMBIENT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_LAVA_EXTINGUISH"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_LAVA_POP"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_LEVER_CLICK"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_METAL_BREAK"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_METAL_FALL"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_METAL_HIT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_METAL_PLACE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_METAL_PRESSUREPLATE_CLICK_OFF"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_METAL_PRESSUREPLATE_CLICK_ON"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_METAL_STEP"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_NOTE_BASEDRUM"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_NOTE_BASS"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_NOTE_BELL"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_NOTE_CHIME"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_NOTE_FLUTE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_NOTE_GUITAR"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_NOTE_HARP"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_NOTE_HAT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_NOTE_PLING"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_NOTE_SNARE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_NOTE_XYLOPHONE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_PISTON_CONTRACT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_PISTON_EXTEND"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_PORTAL_AMBIENT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_PORTAL_TRAVEL"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_PORTAL_TRIGGER"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_REDSTONE_TORCH_BURNOUT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_SAND_BREAK"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_SAND_FALL"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_SAND_HIT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_SAND_PLACE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_SAND_STEP"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_SHULKER_BOX_CLOSE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_SHULKER_BOX_OPEN"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_SLIME_BREAK"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_SLIME_FALL"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_SLIME_HIT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_SLIME_PLACE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_SLIME_STEP"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_SNOW_BREAK"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_SNOW_FALL"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_SNOW_HIT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_SNOW_PLACE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_SNOW_STEP"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_STONE_BREAK"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_STONE_BUTTON_CLICK_OFF"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_STONE_BUTTON_CLICK_ON"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_STONE_FALL"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_STONE_HIT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_STONE_PLACE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_STONE_PRESSUREPLATE_CLICK_OFF"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_STONE_PRESSUREPLATE_CLICK_ON"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_STONE_STEP"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_TRIPWIRE_ATTACH"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_TRIPWIRE_CLICK_OFF"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_TRIPWIRE_CLICK_ON"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_TRIPWIRE_DETACH"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_WATERLILY_PLACE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_WATER_AMBIENT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_WOODEN_DOOR_CLOSE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_WOODEN_DOOR_OPEN"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_WOODEN_TRAPDOOR_CLOSE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_WOODEN_TRAPDOOR_OPEN"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_WOOD_BREAK"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_WOOD_BUTTON_CLICK_OFF"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_WOOD_BUTTON_CLICK_ON"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_WOOD_FALL"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_WOOD_HIT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_WOOD_PLACE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_WOOD_PRESSUREPLATE_CLICK_OFF"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_WOOD_PRESSUREPLATE_CLICK_ON"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK_WOOD_STEP"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENCHANT_THORNS_HIT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_ARMORSTAND_BREAK"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_ARMORSTAND_FALL"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_ARMORSTAND_HIT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_ARMORSTAND_PLACE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_ARROW_HIT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_ARROW_HIT_PLAYER"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_ARROW_SHOOT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_BAT_AMBIENT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_BAT_DEATH"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_BAT_HURT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_BAT_LOOP"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_BAT_TAKEOFF"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_BLAZE_AMBIENT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_BLAZE_BURN"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_BLAZE_DEATH"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_BLAZE_HURT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_BLAZE_SHOOT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_BOAT_PADDLE_LAND"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_BOAT_PADDLE_WATER"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_BOBBER_RETRIEVE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_BOBBER_SPLASH"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_BOBBER_THROW"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_CAT_AMBIENT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_CAT_DEATH"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_CAT_HISS"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_CAT_HURT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_CAT_PURR"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_CAT_PURREOW"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_CHICKEN_AMBIENT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_CHICKEN_DEATH"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_CHICKEN_EGG"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_CHICKEN_HURT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_CHICKEN_STEP"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_COW_AMBIENT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_COW_DEATH"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_COW_HURT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_COW_MILK"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_COW_STEP"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_CREEPER_DEATH"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_CREEPER_HURT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_CREEPER_PRIMED"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_DONKEY_AMBIENT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_DONKEY_ANGRY"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_DONKEY_CHEST"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_DONKEY_DEATH"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_DONKEY_HURT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_EGG_THROW"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_ELDER_GUARDIAN_AMBIENT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_ELDER_GUARDIAN_AMBIENT_LAND"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_ELDER_GUARDIAN_CURSE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_ELDER_GUARDIAN_DEATH"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_ELDER_GUARDIAN_DEATH_LAND"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_ELDER_GUARDIAN_FLOP"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_ELDER_GUARDIAN_HURT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_ELDER_GUARDIAN_HURT_LAND"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_ENDERDRAGON_AMBIENT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_ENDERDRAGON_DEATH"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_ENDERDRAGON_FIREBALL_EXPLODE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_ENDERDRAGON_FLAP"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_ENDERDRAGON_GROWL"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_ENDERDRAGON_HURT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_ENDERDRAGON_SHOOT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_ENDEREYE_DEATH"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_ENDEREYE_LAUNCH"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_ENDERMEN_AMBIENT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_ENDERMEN_DEATH"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_ENDERMEN_HURT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_ENDERMEN_SCREAM"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_ENDERMEN_STARE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_ENDERMEN_TELEPORT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_ENDERMITE_AMBIENT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_ENDERMITE_DEATH"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_ENDERMITE_HURT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_ENDERMITE_STEP"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_ENDERPEARL_THROW"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_EVOCATION_FANGS_ATTACK"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_EVOCATION_ILLAGER_AMBIENT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_EVOCATION_ILLAGER_CAST_SPELL"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_EVOCATION_ILLAGER_DEATH"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_EVOCATION_ILLAGER_HURT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_EVOCATION_ILLAGER_PREPARE_ATTACK"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_EVOCATION_ILLAGER_PREPARE_SUMMON"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_EVOCATION_ILLAGER_PREPARE_WOLOLO"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_EXPERIENCE_BOTTLE_THROW"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_EXPERIENCE_ORB_PICKUP"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_FIREWORK_BLAST"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_FIREWORK_BLAST_FAR"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_FIREWORK_LARGE_BLAST"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_FIREWORK_LARGE_BLAST_FAR"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_FIREWORK_LAUNCH"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_FIREWORK_SHOOT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_FIREWORK_TWINKLE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_FIREWORK_TWINKLE_FAR"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_GENERIC_BIG_FALL"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_GENERIC_BURN"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_GENERIC_DEATH"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_GENERIC_DRINK"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_GENERIC_EAT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_GENERIC_EXPLODE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_GENERIC_EXTINGUISH_FIRE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_GENERIC_HURT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_GENERIC_SMALL_FALL"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_GENERIC_SPLASH"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_GENERIC_SWIM"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_GHAST_AMBIENT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_GHAST_DEATH"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_GHAST_HURT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_GHAST_SCREAM"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_GHAST_SHOOT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_GHAST_WARN"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_GUARDIAN_AMBIENT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_GUARDIAN_AMBIENT_LAND"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_GUARDIAN_ATTACK"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_GUARDIAN_DEATH"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_GUARDIAN_DEATH_LAND"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_GUARDIAN_FLOP"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_GUARDIAN_HURT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_GUARDIAN_HURT_LAND"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_HORSE_AMBIENT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_HORSE_ANGRY"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_HORSE_ARMOR"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_HORSE_BREATHE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_HORSE_DEATH"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_HORSE_EAT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_HORSE_GALLOP"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_HORSE_HURT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_HORSE_JUMP"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_HORSE_LAND"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_HORSE_SADDLE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_HORSE_STEP"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_HORSE_STEP_WOOD"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_HOSTILE_BIG_FALL"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_HOSTILE_DEATH"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_HOSTILE_HURT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_HOSTILE_SMALL_FALL"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_HOSTILE_SPLASH"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_HOSTILE_SWIM"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_HUSK_AMBIENT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_HUSK_DEATH"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_HUSK_HURT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_HUSK_STEP"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_ILLUSION_ILLAGER_AMBIENT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_ILLUSION_ILLAGER_CAST_SPELL"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_ILLUSION_ILLAGER_DEATH"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_ILLUSION_ILLAGER_HURT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_ILLUSION_ILLAGER_MIRROR_MOVE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_ILLUSION_ILLAGER_PREPARE_BLINDNESS"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_ILLUSION_ILLAGER_PREPARE_MIRROR"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_IRONGOLEM_ATTACK"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_IRONGOLEM_DEATH"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_IRONGOLEM_HURT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_IRONGOLEM_STEP"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_ITEMFRAME_ADD_ITEM"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_ITEMFRAME_BREAK"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_ITEMFRAME_PLACE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_ITEMFRAME_REMOVE_ITEM"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_ITEMFRAME_ROTATE_ITEM"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_ITEM_BREAK"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_ITEM_PICKUP"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_LEASHKNOT_BREAK"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_LEASHKNOT_PLACE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_LIGHTNING_IMPACT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_LIGHTNING_THUNDER"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_LINGERINGPOTION_THROW"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_LLAMA_AMBIENT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_LLAMA_ANGRY"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_LLAMA_CHEST"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_LLAMA_DEATH"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_LLAMA_EAT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_LLAMA_HURT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_LLAMA_SPIT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_LLAMA_STEP"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_LLAMA_SWAG"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_MAGMACUBE_DEATH"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_MAGMACUBE_HURT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_MAGMACUBE_JUMP"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_MAGMACUBE_SQUISH"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_MINECART_INSIDE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_MINECART_RIDING"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_MOOSHROOM_SHEAR"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_MULE_AMBIENT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_MULE_CHEST"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_MULE_DEATH"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_MULE_HURT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_PAINTING_BREAK"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_PAINTING_PLACE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_PARROT_AMBIENT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_PARROT_DEATH"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_PARROT_EAT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_PARROT_FLY"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_PARROT_HURT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_PARROT_IMITATE_BLAZE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_PARROT_IMITATE_CREEPER"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_PARROT_IMITATE_ELDER_GUARDIAN"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_PARROT_IMITATE_ENDERDRAGON"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_PARROT_IMITATE_ENDERMAN"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_PARROT_IMITATE_ENDERMITE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_PARROT_IMITATE_EVOCATION_ILLAGER"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_PARROT_IMITATE_GHAST"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_PARROT_IMITATE_HUSK"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_PARROT_IMITATE_ILLUSION_ILLAGER"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_PARROT_IMITATE_MAGMACUBE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_PARROT_IMITATE_POLAR_BEAR"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_PARROT_IMITATE_SHULKER"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_PARROT_IMITATE_SILVERFISH"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_PARROT_IMITATE_SKELETON"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_PARROT_IMITATE_SLIME"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_PARROT_IMITATE_SPIDER"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_PARROT_IMITATE_STRAY"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_PARROT_IMITATE_VEX"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_PARROT_IMITATE_VINDICATION_ILLAGER"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_PARROT_IMITATE_WITCH"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_PARROT_IMITATE_WITHER"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_PARROT_IMITATE_WITHER_SKELETON"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_PARROT_IMITATE_WOLF"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_PARROT_IMITATE_ZOMBIE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_PARROT_IMITATE_ZOMBIE_PIGMAN"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_PARROT_IMITATE_ZOMBIE_VILLAGER"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_PARROT_STEP"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_PIG_AMBIENT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_PIG_DEATH"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_PIG_HURT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_PIG_SADDLE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_PIG_STEP"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_PLAYER_ATTACK_CRIT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_PLAYER_ATTACK_KNOCKBACK"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_PLAYER_ATTACK_NODAMAGE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_PLAYER_ATTACK_STRONG"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_PLAYER_ATTACK_SWEEP"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_PLAYER_ATTACK_WEAK"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_PLAYER_BIG_FALL"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_PLAYER_BREATH"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_PLAYER_BURP"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_PLAYER_DEATH"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_PLAYER_HURT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_PLAYER_HURT_DROWN"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_PLAYER_HURT_ON_FIRE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_PLAYER_LEVELUP"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_PLAYER_SMALL_FALL"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_PLAYER_SPLASH"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_PLAYER_SWIM"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_POLAR_BEAR_AMBIENT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_POLAR_BEAR_BABY_AMBIENT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_POLAR_BEAR_DEATH"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_POLAR_BEAR_HURT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_POLAR_BEAR_STEP"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_POLAR_BEAR_WARNING"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_RABBIT_AMBIENT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_RABBIT_ATTACK"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_RABBIT_DEATH"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_RABBIT_HURT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_RABBIT_JUMP"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_SHEEP_AMBIENT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_SHEEP_DEATH"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_SHEEP_HURT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_SHEEP_SHEAR"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_SHEEP_STEP"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_SHULKER_AMBIENT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_SHULKER_BULLET_HIT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_SHULKER_BULLET_HURT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_SHULKER_CLOSE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_SHULKER_DEATH"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_SHULKER_HURT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_SHULKER_HURT_CLOSED"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_SHULKER_OPEN"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_SHULKER_SHOOT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_SHULKER_TELEPORT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_SILVERFISH_AMBIENT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_SILVERFISH_DEATH"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_SILVERFISH_HURT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_SILVERFISH_STEP"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_SKELETON_AMBIENT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_SKELETON_DEATH"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_SKELETON_HORSE_AMBIENT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_SKELETON_HORSE_DEATH"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_SKELETON_HORSE_HURT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_SKELETON_HURT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_SKELETON_SHOOT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_SKELETON_STEP"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_SLIME_ATTACK"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_SLIME_DEATH"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_SLIME_HURT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_SLIME_JUMP"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_SLIME_SQUISH"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_SMALL_MAGMACUBE_DEATH"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_SMALL_MAGMACUBE_HURT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_SMALL_MAGMACUBE_SQUISH"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_SMALL_SLIME_DEATH"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_SMALL_SLIME_HURT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_SMALL_SLIME_JUMP"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_SMALL_SLIME_SQUISH"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_SNOWBALL_THROW"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_SNOWMAN_AMBIENT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_SNOWMAN_DEATH"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_SNOWMAN_HURT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_SNOWMAN_SHOOT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_SPIDER_AMBIENT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_SPIDER_DEATH"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_SPIDER_HURT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_SPIDER_STEP"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_SPLASH_POTION_BREAK"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_SPLASH_POTION_THROW"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_SQUID_AMBIENT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_SQUID_DEATH"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_SQUID_HURT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_STRAY_AMBIENT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_STRAY_DEATH"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_STRAY_HURT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_STRAY_STEP"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_TNT_PRIMED"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_VEX_AMBIENT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_VEX_CHARGE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_VEX_DEATH"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_VEX_HURT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_VILLAGER_AMBIENT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_VILLAGER_DEATH"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_VILLAGER_HURT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_VILLAGER_NO"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_VILLAGER_TRADING"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_VILLAGER_YES"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_VINDICATION_ILLAGER_AMBIENT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_VINDICATION_ILLAGER_DEATH"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_VINDICATION_ILLAGER_HURT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_WITCH_AMBIENT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_WITCH_DEATH"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_WITCH_DRINK"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_WITCH_HURT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_WITCH_THROW"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_WITHER_AMBIENT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_WITHER_BREAK_BLOCK"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_WITHER_DEATH"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_WITHER_HURT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_WITHER_SHOOT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_WITHER_SKELETON_AMBIENT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_WITHER_SKELETON_DEATH"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_WITHER_SKELETON_HURT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_WITHER_SKELETON_STEP"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_WITHER_SPAWN"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_WOLF_AMBIENT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_WOLF_DEATH"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_WOLF_GROWL"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_WOLF_HOWL"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_WOLF_HURT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_WOLF_PANT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_WOLF_SHAKE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_WOLF_STEP"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_WOLF_WHINE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_ZOMBIE_AMBIENT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_ZOMBIE_ATTACK_DOOR_WOOD"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_ZOMBIE_ATTACK_IRON_DOOR"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_ZOMBIE_BREAK_DOOR_WOOD"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_ZOMBIE_DEATH"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_ZOMBIE_HORSE_AMBIENT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_ZOMBIE_HORSE_DEATH"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_ZOMBIE_HORSE_HURT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_ZOMBIE_HURT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_ZOMBIE_INFECT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_ZOMBIE_PIG_AMBIENT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_ZOMBIE_PIG_ANGRY"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_ZOMBIE_PIG_DEATH"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_ZOMBIE_PIG_HURT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_ZOMBIE_STEP"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_ZOMBIE_VILLAGER_AMBIENT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_ZOMBIE_VILLAGER_CONVERTED"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_ZOMBIE_VILLAGER_CURE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_ZOMBIE_VILLAGER_DEATH"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_ZOMBIE_VILLAGER_HURT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_ZOMBIE_VILLAGER_STEP"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ITEM_ARMOR_EQUIP_CHAIN"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ITEM_ARMOR_EQUIP_DIAMOND"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ITEM_ARMOR_EQUIP_ELYTRA"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ITEM_ARMOR_EQUIP_GENERIC"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ITEM_ARMOR_EQUIP_GOLD"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ITEM_ARMOR_EQUIP_IRON"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ITEM_ARMOR_EQUIP_LEATHER"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ITEM_BOTTLE_EMPTY"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ITEM_BOTTLE_FILL"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ITEM_BOTTLE_FILL_DRAGONBREATH"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ITEM_BUCKET_EMPTY"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ITEM_BUCKET_EMPTY_LAVA"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ITEM_BUCKET_FILL"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ITEM_BUCKET_FILL_LAVA"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ITEM_CHORUS_FRUIT_TELEPORT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ITEM_ELYTRA_FLYING"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ITEM_FIRECHARGE_USE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ITEM_FLINTANDSTEEL_USE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ITEM_HOE_TILL"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ITEM_SHIELD_BLOCK"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ITEM_SHIELD_BREAK"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ITEM_SHOVEL_FLATTEN"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ITEM_TOTEM_USE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "MUSIC_CREATIVE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "MUSIC_CREDITS"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "MUSIC_DRAGON"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "MUSIC_END"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "MUSIC_GAME"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "MUSIC_MENU"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "MUSIC_NETHER"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "RECORD_11"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "RECORD_13"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "RECORD_BLOCKS"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "RECORD_CAT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "RECORD_CHIRP"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "RECORD_FAR"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "RECORD_MALL"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "RECORD_MELLOHI"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "RECORD_STAL"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "RECORD_STRAD"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "RECORD_WAIT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "RECORD_WARD"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Sound()"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "UI_BUTTON_CLICK"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "UI_TOAST_CHALLENGE_COMPLETE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "UI_TOAST_IN"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "UI_TOAST_OUT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "WEATHER_RAIN"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "WEATHER_RAIN_ABOVE"
          },
          {
            "kind": "METHOD",
            "name": "valueOf(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "values()"
          }
        ],
        "comment": {
          "body": "An Enum of Sounds the server is able to send to players.\n \u003cp\u003e\n WARNING: At any time, sounds may be added/removed from this Enum or even\n MineCraft itself! There is no guarantee the sounds will play. There is no\n guarantee values will not be removed from this Enum. As such, you should not\n depend on the ordinal values of this class.",
          "plain": "An Enum of Sounds the server is able to send to players.\n \u003cp\u003e\n WARNING: At any time, sounds may be added/removed from this Enum or even\n MineCraft itself! There is no guarantee the sounds will play. There is no\n guarantee values will not be removed from this Enum. As such, you should not\n depend on the ordinal values of this class."
        }
      },
      {
        "kind": "ENUM",
        "name": "org.bukkit.SoundCategory",
        "children": [
          {
            "kind": "ENUM_CONSTANT",
            "name": "AMBIENT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCKS"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "HOSTILE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "MASTER"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "MUSIC"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "NEUTRAL"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "PLAYERS"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "RECORDS"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "SoundCategory()"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "VOICE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "WEATHER"
          },
          {
            "kind": "METHOD",
            "name": "valueOf(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "values()"
          }
        ],
        "comment": {
          "body": "An Enum of categories for sounds.",
          "plain": "An Enum of categories for sounds."
        }
      },
      {
        "kind": "ENUM",
        "name": "org.bukkit.Statistic",
        "children": [
          {
            "kind": "ENUM_CONSTANT",
            "name": "ANIMALS_BRED"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ARMOR_CLEANED"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "AVIATE_ONE_CM"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BANNER_CLEANED"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BEACON_INTERACTION"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BOAT_ONE_CM"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BREAK_ITEM"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BREWINGSTAND_INTERACTION"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "CAKE_SLICES_EATEN"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "CAULDRON_FILLED"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "CAULDRON_USED"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "CHEST_OPENED"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "CLIMB_ONE_CM"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "CRAFTING_TABLE_INTERACTION"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "CRAFT_ITEM"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "CROUCH_ONE_CM"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "DAMAGE_DEALT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "DAMAGE_TAKEN"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "DEATHS"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "DISPENSER_INSPECTED"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "DIVE_ONE_CM"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "DROP"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "DROPPER_INSPECTED"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENDERCHEST_OPENED"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENTITY_KILLED_BY"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "FALL_ONE_CM"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "FISH_CAUGHT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "FLOWER_POTTED"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "FLY_ONE_CM"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "FURNACE_INTERACTION"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "HOPPER_INSPECTED"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "HORSE_ONE_CM"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ITEM_ENCHANTED"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "JUMP"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "KILL_ENTITY"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "LEAVE_GAME"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "MINECART_ONE_CM"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "MINE_BLOCK"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "MOB_KILLS"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "NOTEBLOCK_PLAYED"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "NOTEBLOCK_TUNED"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "PICKUP"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "PIG_ONE_CM"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "PLAYER_KILLS"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "PLAY_ONE_TICK"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "RECORD_PLAYED"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SHULKER_BOX_OPENED"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SLEEP_IN_BED"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SNEAK_TIME"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SPRINT_ONE_CM"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SWIM_ONE_CM"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Statistic()"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Statistic(org.bukkit.Statistic.Type)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ]
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "TALKED_TO_VILLAGER"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "TIME_SINCE_DEATH"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "TRADED_WITH_VILLAGER"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "TRAPPED_CHEST_TRIGGERED"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "USE_ITEM"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "WALK_ONE_CM"
          },
          {
            "kind": "METHOD",
            "name": "getType()",
            "comment": {
              "body": "Gets the type of this statistic.",
              "tags": "Returns the type of this statistic.",
              "plain": "Gets the type of this statistic.\n@return the type of this statistic"
            }
          },
          {
            "kind": "METHOD",
            "name": "isBlock()",
            "comment": {
              "body": "Checks if this is a substatistic dealing with blocks.\n \u003cp\u003e\n This is a redundant method and equivalent to checking\n \u003ccode\u003egetType() \u003d\u003d Type.BLOCK\u003c/code\u003e",
              "tags": "Returns true if this deals with blocks.",
              "plain": "Checks if this is a substatistic dealing with blocks.\n \u003cp\u003e\n This is a redundant method and equivalent to checking\n \u003ccode\u003egetType() \u003d\u003d Type.BLOCK\u003c/code\u003e\n@return true if this deals with blocks"
            }
          },
          {
            "kind": "METHOD",
            "name": "isSubstatistic()",
            "comment": {
              "body": "Checks if this is a substatistic.\n \u003cp\u003e\n A substatistic exists en masse for each block, item, or entitytype, depending on\n \u003ca href\u003d\"org/bukkit/Statistic.html#getType()\"\u003e\u003ccode\u003eStatistic.getType()\u003c/code\u003e\u003c/a\u003e.\n \u003cp\u003e\n This is a redundant method and equivalent to checking\n \u003ccode\u003egetType() !\u003d Type.UNTYPED\u003c/code\u003e",
              "tags": "Returns true if this is a substatistic.",
              "plain": "Checks if this is a substatistic.\n \u003cp\u003e\n A substatistic exists en masse for each block, item, or entitytype, depending on\n {@link #getType()}.\n \u003cp\u003e\n This is a redundant method and equivalent to checking\n \u003ccode\u003egetType() !\u003d Type.UNTYPED\u003c/code\u003e\n@return true if this is a substatistic"
            }
          },
          {
            "kind": "ENUM",
            "name": "org.bukkit.Statistic.Type",
            "children": [
              {
                "kind": "ENUM_CONSTANT",
                "name": "BLOCK",
                "comment": {
                  "body": "Statistics of this type require a Block Material qualifier.",
                  "plain": "Statistics of this type require a Block Material qualifier."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "ENTITY",
                "comment": {
                  "body": "Statistics of this type require an EntityType qualifier.",
                  "plain": "Statistics of this type require an EntityType qualifier."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "ITEM",
                "comment": {
                  "body": "Statistics of this type require an Item Material qualifier.",
                  "plain": "Statistics of this type require an Item Material qualifier."
                }
              },
              {
                "kind": "CONSTRUCTOR",
                "name": "Type()"
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "UNTYPED",
                "comment": {
                  "body": "Statistics of this type do not require a qualifier.",
                  "plain": "Statistics of this type do not require a qualifier."
                }
              },
              {
                "kind": "METHOD",
                "name": "valueOf(java.lang.String)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "name"
                  }
                ]
              },
              {
                "kind": "METHOD",
                "name": "values()"
              }
            ],
            "comment": {
              "body": "The type of statistic.",
              "plain": "The type of statistic."
            }
          },
          {
            "kind": "FIELD",
            "name": "type"
          },
          {
            "kind": "METHOD",
            "name": "valueOf(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "values()"
          }
        ],
        "comment": {
          "body": "Represents a countable statistic, which is tracked by the server.",
          "plain": "Represents a countable statistic, which is tracked by the server."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.TravelAgent",
        "children": [
          {
            "kind": "METHOD",
            "name": "createPortal(org.bukkit.Location)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "location"
              }
            ],
            "comment": {
              "body": "Attempt to create a portal near the given location.\n \u003cp\u003e\n In the case of a Nether portal teleportation, this will attempt to\n create a Nether portal.\n \u003cp\u003e\n In the case of an Ender portal teleportation, this will (re-)create the\n obsidian platform and clean blocks above it.",
              "tags": "Returns true if a portal was successfully created.",
              "plain": "Attempt to create a portal near the given location.\n \u003cp\u003e\n In the case of a Nether portal teleportation, this will attempt to\n create a Nether portal.\n \u003cp\u003e\n In the case of an Ender portal teleportation, this will (re-)create the\n obsidian platform and clean blocks above it.\n@param location the desired location of the portal\n@return true if a portal was successfully created"
            }
          },
          {
            "kind": "METHOD",
            "name": "findOrCreate(org.bukkit.Location)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "location"
              }
            ],
            "comment": {
              "body": "Attempt to find a portal near the given location, if a portal is not\n found it will attempt to create one.",
              "tags": "Returns the location of a portal which has been found or returns the\n     location passed to the method if unsuccessful.",
              "plain": "Attempt to find a portal near the given location, if a portal is not\n found it will attempt to create one.\n@param location the location where the search for a portal should begin\n@return the location of a portal which has been found or returns the\n     location passed to the method if unsuccessful\n@see #createPortal(Location)"
            }
          },
          {
            "kind": "METHOD",
            "name": "findPortal(org.bukkit.Location)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "location"
              }
            ],
            "comment": {
              "body": "Attempt to find a portal near the given location.",
              "tags": "Returns the location of the nearest portal to the location.",
              "plain": "Attempt to find a portal near the given location.\n@param location the desired location of the portal\n@return the location of the nearest portal to the location"
            }
          },
          {
            "kind": "METHOD",
            "name": "getCanCreatePortal()",
            "comment": {
              "body": "Returns whether the TravelAgent will attempt to create a destination\n portal or not.",
              "tags": "Returns whether the TravelAgent should create a destination portal or\n     not.",
              "plain": "Returns whether the TravelAgent will attempt to create a destination\n portal or not.\n@return whether the TravelAgent should create a destination portal or\n     not"
            }
          },
          {
            "kind": "METHOD",
            "name": "getCreationRadius()",
            "comment": {
              "body": "Gets the maximum radius from the given location to create a portal.",
              "tags": "Returns the currently set creation radius.",
              "plain": "Gets the maximum radius from the given location to create a portal.\n@return the currently set creation radius"
            }
          },
          {
            "kind": "METHOD",
            "name": "getSearchRadius()",
            "comment": {
              "body": "Gets the search radius value for finding an available portal.",
              "tags": "Returns the currently set search radius.",
              "plain": "Gets the search radius value for finding an available portal.\n@return the currently set search radius"
            }
          },
          {
            "kind": "METHOD",
            "name": "setCanCreatePortal(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "create"
              }
            ],
            "comment": {
              "body": "Sets whether the TravelAgent should attempt to create a destination\n portal or not.",
              "plain": "Sets whether the TravelAgent should attempt to create a destination\n portal or not.\n@param create Sets whether the TravelAgent should create a destination\n     portal or not"
            }
          },
          {
            "kind": "METHOD",
            "name": "setCreationRadius(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "radius"
              }
            ],
            "comment": {
              "body": "Sets the maximum radius from the given location to create a portal.",
              "tags": "Returns this travel agent.",
              "plain": "Sets the maximum radius from the given location to create a portal.\n@param radius the radius in which to create a portal from the location\n@return this travel agent"
            }
          },
          {
            "kind": "METHOD",
            "name": "setSearchRadius(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "radius"
              }
            ],
            "comment": {
              "body": "Set the Block radius to search in for available portals.",
              "tags": "Returns this travel agent.",
              "plain": "Set the Block radius to search in for available portals.\n@param radius the radius in which to search for a portal from the\n     location\n@return this travel agent"
            }
          }
        ],
        "comment": {
          "body": "The Travel Agent handles the creation and the research of Nether and End\n portals when Entities try to use one.\n \u003cp\u003e\n It is used in \u003ca href\u003d\"org/bukkit/event/entity/EntityPortalEvent.html\" title\u003d\"class in org.bukkit.event.entity\"\u003e\u003ccode\u003eEntityPortalEvent\u003c/code\u003e\u003c/a\u003e and in\n \u003ca href\u003d\"org/bukkit/event/player/PlayerPortalEvent.html\" title\u003d\"class in org.bukkit.event.player\"\u003e\u003ccode\u003ePlayerPortalEvent\u003c/code\u003e\u003c/a\u003e to help developers\n reproduce and/or modify Vanilla behaviour.",
          "plain": "The Travel Agent handles the creation and the research of Nether and End\n portals when Entities try to use one.\n \u003cp\u003e\n It is used in {@link org.bukkit.event.entity.EntityPortalEvent} and in\n {@link org.bukkit.event.player.PlayerPortalEvent} to help developers\n reproduce and/or modify Vanilla behaviour."
        }
      },
      {
        "kind": "ENUM",
        "name": "org.bukkit.TreeSpecies",
        "children": [
          {
            "kind": "ENUM_CONSTANT",
            "name": "ACACIA",
            "comment": {
              "body": "Represents acacia trees.",
              "plain": "Represents acacia trees."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BIRCH",
            "comment": {
              "body": "Represents birches.",
              "plain": "Represents birches."
            }
          },
          {
            "kind": "FIELD",
            "name": "BY_DATA"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "DARK_OAK",
            "comment": {
              "body": "Represents dark oak trees.",
              "plain": "Represents dark oak trees."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "GENERIC",
            "comment": {
              "body": "Represents the common tree species.",
              "plain": "Represents the common tree species."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "JUNGLE",
            "comment": {
              "body": "Represents jungle trees.",
              "plain": "Represents jungle trees."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "REDWOOD",
            "comment": {
              "body": "Represents the darker barked/leaved tree species.",
              "plain": "Represents the darker barked/leaved tree species."
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "TreeSpecies(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "data"
          },
          {
            "kind": "METHOD",
            "name": "getByData(byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Gets the TreeSpecies with the given data value",
              "tags": "Returns The \u003ca href\u003d\"org/bukkit/TreeSpecies.html\" title\u003d\"enum in org.bukkit\"\u003e\u003ccode\u003eTreeSpecies\u003c/code\u003e\u003c/a\u003e representing the given value, or null\n     if it doesn\u0027t exist.",
              "plain": "Gets the TreeSpecies with the given data value\n@param data Data value to fetch\n@return The {@link TreeSpecies} representing the given value, or null\n     if it doesn\u0027t exist\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "getData()",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Gets the associated data value representing this species",
              "tags": "Returns A byte containing the data value of this tree species.",
              "plain": "Gets the associated data value representing this species\n@return A byte containing the data value of this tree species\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "valueOf(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "values()"
          }
        ],
        "comment": {
          "body": "Represents the different species of trees regardless of size.",
          "plain": "Represents the different species of trees regardless of size."
        }
      },
      {
        "kind": "ENUM",
        "name": "org.bukkit.TreeType",
        "children": [
          {
            "kind": "ENUM_CONSTANT",
            "name": "ACACIA",
            "comment": {
              "body": "Acacia tree.",
              "plain": "Acacia tree."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BIG_TREE",
            "comment": {
              "body": "Regular tree, extra tall with branches",
              "plain": "Regular tree, extra tall with branches"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BIRCH",
            "comment": {
              "body": "Birch tree",
              "plain": "Birch tree"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BROWN_MUSHROOM",
            "comment": {
              "body": "Big brown mushroom; tall and umbrella-like",
              "plain": "Big brown mushroom; tall and umbrella-like"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "CHORUS_PLANT",
            "comment": {
              "body": "Large plant native to The End",
              "plain": "Large plant native to The End"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "COCOA_TREE",
            "comment": {
              "body": "Jungle tree with cocoa plants; 1 block wide",
              "plain": "Jungle tree with cocoa plants; 1 block wide"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "DARK_OAK",
            "comment": {
              "body": "Dark Oak tree.",
              "plain": "Dark Oak tree."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "JUNGLE",
            "comment": {
              "body": "Standard jungle tree; 4 blocks wide and tall",
              "plain": "Standard jungle tree; 4 blocks wide and tall"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "JUNGLE_BUSH",
            "comment": {
              "body": "Small bush that grows in the jungle",
              "plain": "Small bush that grows in the jungle"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "MEGA_REDWOOD",
            "comment": {
              "body": "Mega redwood tree; 4 blocks wide and tall",
              "plain": "Mega redwood tree; 4 blocks wide and tall"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "REDWOOD",
            "comment": {
              "body": "Redwood tree, shaped like a pine tree",
              "plain": "Redwood tree, shaped like a pine tree"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "RED_MUSHROOM",
            "comment": {
              "body": "Big red mushroom; short and fat",
              "plain": "Big red mushroom; short and fat"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SMALL_JUNGLE",
            "comment": {
              "body": "Smaller jungle tree; 1 block wide",
              "plain": "Smaller jungle tree; 1 block wide"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SWAMP",
            "comment": {
              "body": "Swamp tree (regular with vines on the side)",
              "plain": "Swamp tree (regular with vines on the side)"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "TALL_BIRCH",
            "comment": {
              "body": "Tall birch tree",
              "plain": "Tall birch tree"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "TALL_REDWOOD",
            "comment": {
              "body": "Tall redwood tree with just a few leaves at the top",
              "plain": "Tall redwood tree with just a few leaves at the top"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "TREE",
            "comment": {
              "body": "Regular tree, no branches",
              "plain": "Regular tree, no branches"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "TreeType()"
          },
          {
            "kind": "METHOD",
            "name": "valueOf(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "values()"
          }
        ],
        "comment": {
          "body": "Tree and organic structure types.",
          "plain": "Tree and organic structure types."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.UnsafeValues",
        "children": [
          {
            "kind": "METHOD",
            "name": "getAchievementFromInternalName(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getMaterialFromInternalName(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getStatisticFromInternalName(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "loadAdvancement(org.bukkit.NamespacedKey,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "advancement"
              },
              {
                "kind": "PARAMETER",
                "name": "key"
              }
            ],
            "comment": {
              "body": "Load an advancement represented by the specified string into the server.\n The advancement format is governed by Minecraft and has no specified\n layout.\n \u003cbr\u003e\n It is currently a JSON object, as described by the Minecraft Wiki:\n http://minecraft.gamepedia.com/Advancements\n \u003cbr\u003e\n Loaded advancements will be stored and persisted across server restarts\n and reloads.\n \u003cbr\u003e\n Callers should be prepared for \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/lang/Exception.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003e\u003ccode\u003eException\u003c/code\u003e\u003c/a\u003e to be thrown.",
              "tags": "Returns the loaded advancement or null if an error occurred.",
              "plain": "Load an advancement represented by the specified string into the server.\n The advancement format is governed by Minecraft and has no specified\n layout.\n \u003cbr\u003e\n It is currently a JSON object, as described by the Minecraft Wiki:\n http://minecraft.gamepedia.com/Advancements\n \u003cbr\u003e\n Loaded advancements will be stored and persisted across server restarts\n and reloads.\n \u003cbr\u003e\n Callers should be prepared for {@link Exception} to be thrown.\n@param key the unique advancement key\n@param advancement representation of the advancement\n@return the loaded advancement or null if an error occurred"
            }
          },
          {
            "kind": "METHOD",
            "name": "modifyItemStack(org.bukkit.inventory.ItemStack,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "arguments"
              },
              {
                "kind": "PARAMETER",
                "name": "stack"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "removeAdvancement(org.bukkit.NamespacedKey)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "key"
              }
            ],
            "comment": {
              "body": "Delete an advancement which was loaded and saved by\n \u003ca href\u003d\"org/bukkit/UnsafeValues.html#loadAdvancement(org.bukkit.NamespacedKey,java.lang.String)\"\u003e\u003ccode\u003eUnsafeValues.loadAdvancement(org.bukkit.NamespacedKey, java.lang.String)\u003c/code\u003e\u003c/a\u003e.\n \u003cbr\u003e\n This method will only remove advancement from persistent storage. It\n should be accompanied by a call to \u003ca href\u003d\"org/bukkit/Server.html#reloadData()\"\u003e\u003ccode\u003eServer.reloadData()\u003c/code\u003e\u003c/a\u003e in order\n to fully remove it from the running instance.",
              "tags": "Returns true if a file matching this key was found and deleted.",
              "plain": "Delete an advancement which was loaded and saved by\n {@link #loadAdvancement(org.bukkit.NamespacedKey, java.lang.String)}.\n \u003cbr\u003e\n This method will only remove advancement from persistent storage. It\n should be accompanied by a call to {@link Server#reloadData()} in order\n to fully remove it from the running instance.\n@param key the unique advancement key\n@return true if a file matching this key was found and deleted"
            }
          },
          {
            "kind": "METHOD",
            "name": "tabCompleteInternalMaterialName(java.lang.String,java.util.List\u003cjava.lang.String\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "completions"
              },
              {
                "kind": "PARAMETER",
                "name": "token"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "tabCompleteInternalStatisticOrAchievementName(java.lang.String,java.util.List\u003cjava.lang.String\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "completions"
              },
              {
                "kind": "PARAMETER",
                "name": "token"
              }
            ]
          }
        ],
        "deprecated": {
          "deprecated": "true"
        },
        "comment": {
          "body": "This interface provides value conversions that may be specific to a\n runtime, or have arbitrary meaning (read: magic values).\n \u003cp\u003e\n Their existence and behavior is not guaranteed across future versions. They\n may be poorly named, throw exceptions, have misleading parameters, or any\n other bad programming practice.",
          "plain": "This interface provides value conversions that may be specific to a\n runtime, or have arbitrary meaning (read: magic values).\n \u003cp\u003e\n Their existence and behavior is not guaranteed across future versions. They\n may be poorly named, throw exceptions, have misleading parameters, or any\n other bad programming practice."
        }
      },
      {
        "kind": "ANNOTATION_TYPE",
        "name": "org.bukkit.Utility",
        "comment": {
          "body": "This annotation indicates a method (and sometimes constructor) will chain\n its internal operations.\n \u003cp\u003e\n This is solely meant for identifying methods that don\u0027t need to be\n overridden / handled manually.",
          "plain": "This annotation indicates a method (and sometimes constructor) will chain\n its internal operations.\n \u003cp\u003e\n This is solely meant for identifying methods that don\u0027t need to be\n overridden / handled manually."
        }
      },
      {
        "kind": "ANNOTATION_TYPE",
        "name": "org.bukkit.Warning",
        "children": [
          {
            "kind": "ENUM",
            "name": "org.bukkit.Warning.WarningState",
            "children": [
              {
                "kind": "ENUM_CONSTANT",
                "name": "DEFAULT",
                "comment": {
                  "body": "Indicates each warning would default to the configured \u003ca href\u003d\"org/bukkit/Warning.html\" title\u003d\"annotation in org.bukkit\"\u003e\u003ccode\u003eWarning\u003c/code\u003e\u003c/a\u003e annotation, or always if annotation not found.",
                  "plain": "Indicates each warning would default to the configured {@link Warning} annotation, or always if annotation not found."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "OFF",
                "comment": {
                  "body": "Indicates no warnings should be printed for deprecated items.",
                  "plain": "Indicates no warnings should be printed for deprecated items."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "ON",
                "comment": {
                  "body": "Indicates all warnings should be printed for deprecated items.",
                  "plain": "Indicates all warnings should be printed for deprecated items."
                }
              },
              {
                "kind": "CONSTRUCTOR",
                "name": "WarningState()"
              },
              {
                "kind": "METHOD",
                "name": "printFor(org.bukkit.Warning)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "warning"
                  }
                ],
                "comment": {
                  "body": "This method checks the provided warning should be printed for this\n state",
                  "tags": "Returns \u003cul\u003e\n     \u003cli\u003eON is always True\n     \u003cli\u003eOFF is always false\n     \u003cli\u003eDEFAULT is false if and only if annotation is not null and\n     specifies false for \u003ca href\u003d\"org/bukkit/Warning.html#value()\"\u003e\u003ccode\u003eWarning.value()\u003c/code\u003e\u003c/a\u003e, true otherwise.\n     \u003c/ul\u003e.",
                  "plain": "This method checks the provided warning should be printed for this\n state\n@param warning The warning annotation added to a deprecated item\n@return \u003cul\u003e\n     \u003cli\u003eON is always True\n     \u003cli\u003eOFF is always false\n     \u003cli\u003eDEFAULT is false if and only if annotation is not null and\n     specifies false for {@link Warning#value()}, true otherwise.\n     \u003c/ul\u003e"
                }
              },
              {
                "kind": "METHOD",
                "name": "value(java.lang.String)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "value"
                  }
                ],
                "comment": {
                  "body": "This method returns the corresponding warning state for the given\n string value.",
                  "tags": "Returns \u003ca href\u003d\"org/bukkit/Warning.WarningState.html#DEFAULT\"\u003e\u003ccode\u003eWarning.WarningState.DEFAULT\u003c/code\u003e\u003c/a\u003e if not found, or the respective\n     WarningState.",
                  "plain": "This method returns the corresponding warning state for the given\n string value.\n@param value The string value to check\n@return {@link #DEFAULT} if not found, or the respective\n     WarningState"
                }
              },
              {
                "kind": "METHOD",
                "name": "valueOf(java.lang.String)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "name"
                  }
                ]
              },
              {
                "kind": "FIELD",
                "name": "values"
              },
              {
                "kind": "METHOD",
                "name": "values()"
              }
            ],
            "comment": {
              "body": "This represents the states that server verbose for warnings may be.",
              "plain": "This represents the states that server verbose for warnings may be."
            }
          },
          {
            "kind": "METHOD",
            "name": "reason()",
            "comment": {
              "body": "This can provide detailed information on why the event is deprecated.",
              "tags": "Returns The reason an event is deprecated.",
              "plain": "This can provide detailed information on why the event is deprecated.\n@return The reason an event is deprecated"
            }
          },
          {
            "kind": "METHOD",
            "name": "value()",
            "comment": {
              "body": "This sets if the deprecation warnings when registering events gets\n printed when the setting is in the default state.",
              "tags": "Returns false normally, or true to encourage warning printout.",
              "plain": "This sets if the deprecation warnings when registering events gets\n printed when the setting is in the default state.\n@return false normally, or true to encourage warning printout"
            }
          }
        ],
        "comment": {
          "body": "This designates the warning state for a specific item.\n \u003cp\u003e\n When the server settings dictate \u0027default\u0027 warnings, warnings are printed\n if the \u003ca href\u003d\"org/bukkit/Warning.html#value()\"\u003e\u003ccode\u003eWarning.value()\u003c/code\u003e\u003c/a\u003e is true.",
          "plain": "This designates the warning state for a specific item.\n \u003cp\u003e\n When the server settings dictate \u0027default\u0027 warnings, warnings are printed\n if the {@link #value()} is true."
        }
      },
      {
        "kind": "ENUM",
        "name": "org.bukkit.WeatherType",
        "children": [
          {
            "kind": "ENUM_CONSTANT",
            "name": "CLEAR",
            "comment": {
              "body": "Clear weather, clouds but no rain.",
              "plain": "Clear weather, clouds but no rain."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "DOWNFALL",
            "comment": {
              "body": "Raining or snowing depending on biome.",
              "plain": "Raining or snowing depending on biome."
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "WeatherType()"
          },
          {
            "kind": "METHOD",
            "name": "valueOf(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "values()"
          }
        ],
        "comment": {
          "body": "An enum of all current weather types",
          "plain": "An enum of all current weather types"
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.World",
        "children": [
          {
            "kind": "METHOD",
            "name": "\u003cT\u003egetEntitiesByClass(java.lang.Class\u003cT\u003e)",
            "children": [
              {
                "kind": "TYPE_PARAMETER",
                "name": "T"
              },
              {
                "kind": "PARAMETER",
                "name": "cls"
              }
            ],
            "comment": {
              "body": "Get a collection of all entities in this World matching the given\n class/interface",
              "tags": "Returns A List of all Entities currently residing in this world that\n     match the given class/interface.",
              "plain": "Get a collection of all entities in this World matching the given\n class/interface\n@param \u003cT\u003e an entity subclass\n@param cls The class representing the type of entity to match\n@return A List of all Entities currently residing in this world that\n     match the given class/interface"
            }
          },
          {
            "kind": "METHOD",
            "name": "\u003cT\u003egetEntitiesByClass(java.lang.Class\u003cT\u003e...)",
            "children": [
              {
                "kind": "TYPE_PARAMETER",
                "name": "T"
              },
              {
                "kind": "PARAMETER",
                "name": "classes"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Get a collection of all entities in this World matching the given\n class/interface",
              "tags": "Returns A List of all Entities currently residing in this world that\n     match the given class/interface.",
              "plain": "Get a collection of all entities in this World matching the given\n class/interface\n@param \u003cT\u003e an entity subclass\n@param classes The classes representing the types of entity to match\n@return A List of all Entities currently residing in this world that\n     match the given class/interface"
            }
          },
          {
            "kind": "METHOD",
            "name": "\u003cT\u003egetNearbyEntitiesByType(java.lang.Class\u003c? extends T\u003e,org.bukkit.Location,double)",
            "children": [
              {
                "kind": "TYPE_PARAMETER",
                "name": "T"
              },
              {
                "kind": "PARAMETER",
                "name": "clazz"
              },
              {
                "kind": "PARAMETER",
                "name": "loc"
              },
              {
                "kind": "PARAMETER",
                "name": "radius"
              }
            ],
            "comment": {
              "body": "Gets all nearby entities of the specified type, within the specified radius (bounding box)",
              "tags": "Returns the collection of entities near location. This will always be a non-null collection..",
              "plain": "Gets all nearby entities of the specified type, within the specified radius (bounding box)\n@param clazz Type to filter by\n@param loc Center location\n@param radius X/Y/Z radius to search within\n@param \u003cT\u003e the entity type\n@return the collection of entities near location. This will always be a non-null collection."
            }
          },
          {
            "kind": "METHOD",
            "name": "\u003cT\u003egetNearbyEntitiesByType(java.lang.Class\u003c? extends T\u003e,org.bukkit.Location,double,double)",
            "children": [
              {
                "kind": "TYPE_PARAMETER",
                "name": "T"
              },
              {
                "kind": "PARAMETER",
                "name": "clazz"
              },
              {
                "kind": "PARAMETER",
                "name": "loc"
              },
              {
                "kind": "PARAMETER",
                "name": "xzRadius"
              },
              {
                "kind": "PARAMETER",
                "name": "yRadius"
              }
            ],
            "comment": {
              "body": "Gets all nearby entities of the specified type, within the specified radius, with x and x radius matching (bounding box)",
              "tags": "Returns the collection of entities near location. This will always be a non-null collection..",
              "plain": "Gets all nearby entities of the specified type, within the specified radius, with x and x radius matching (bounding box)\n@param clazz Type to filter by\n@param loc Center location\n@param xzRadius X/Z radius to search within\n@param yRadius Y radius to search within\n@param \u003cT\u003e the entity type\n@return the collection of entities near location. This will always be a non-null collection."
            }
          },
          {
            "kind": "METHOD",
            "name": "\u003cT\u003egetNearbyEntitiesByType(java.lang.Class\u003c? extends T\u003e,org.bukkit.Location,double,double,double)",
            "children": [
              {
                "kind": "TYPE_PARAMETER",
                "name": "T"
              },
              {
                "kind": "PARAMETER",
                "name": "clazz"
              },
              {
                "kind": "PARAMETER",
                "name": "loc"
              },
              {
                "kind": "PARAMETER",
                "name": "xRadius"
              },
              {
                "kind": "PARAMETER",
                "name": "yRadius"
              },
              {
                "kind": "PARAMETER",
                "name": "zRadius"
              }
            ],
            "comment": {
              "body": "Gets all nearby entities of the specified type, within the specified radius (bounding box)",
              "tags": "Returns the collection of entities near location. This will always be a non-null collection..",
              "plain": "Gets all nearby entities of the specified type, within the specified radius (bounding box)\n@param clazz Type to filter by\n@param loc Center location\n@param xRadius X Radius\n@param yRadius Y Radius\n@param zRadius Z Radius\n@param \u003cT\u003e the entity type\n@return the collection of entities near location. This will always be a non-null collection."
            }
          },
          {
            "kind": "METHOD",
            "name": "\u003cT\u003egetNearbyEntitiesByType(java.lang.Class\u003c? extends T\u003e,org.bukkit.Location,double,double,java.util.function.Predicate\u003cT\u003e)",
            "children": [
              {
                "kind": "TYPE_PARAMETER",
                "name": "T"
              },
              {
                "kind": "PARAMETER",
                "name": "clazz"
              },
              {
                "kind": "PARAMETER",
                "name": "loc"
              },
              {
                "kind": "PARAMETER",
                "name": "predicate"
              },
              {
                "kind": "PARAMETER",
                "name": "xzRadius"
              },
              {
                "kind": "PARAMETER",
                "name": "yRadius"
              }
            ],
            "comment": {
              "body": "Gets all nearby entities of the specified type, within the specified radius, with x and x radius matching (bounding box)",
              "tags": "Returns the collection of entities near location. This will always be a non-null collection..",
              "plain": "Gets all nearby entities of the specified type, within the specified radius, with x and x radius matching (bounding box)\n@param clazz Type to filter by\n@param loc Center location\n@param xzRadius X/Z radius to search within\n@param yRadius Y radius to search within\n@param predicate a predicate used to filter results\n@param \u003cT\u003e the entity type\n@return the collection of entities near location. This will always be a non-null collection."
            }
          },
          {
            "kind": "METHOD",
            "name": "\u003cT\u003egetNearbyEntitiesByType(java.lang.Class\u003c? extends T\u003e,org.bukkit.Location,double,java.util.function.Predicate\u003cT\u003e)",
            "children": [
              {
                "kind": "TYPE_PARAMETER",
                "name": "T"
              },
              {
                "kind": "PARAMETER",
                "name": "clazz"
              },
              {
                "kind": "PARAMETER",
                "name": "loc"
              },
              {
                "kind": "PARAMETER",
                "name": "predicate"
              },
              {
                "kind": "PARAMETER",
                "name": "radius"
              }
            ],
            "comment": {
              "body": "Gets all nearby entities of the specified type, within the specified radius (bounding box)",
              "tags": "Returns the collection of entities near location. This will always be a non-null collection..",
              "plain": "Gets all nearby entities of the specified type, within the specified radius (bounding box)\n@param clazz Type to filter by\n@param loc Center location\n@param radius X/Y/Z radius to search within\n@param predicate a predicate used to filter results\n@param \u003cT\u003e the entity type\n@return the collection of entities near location. This will always be a non-null collection."
            }
          },
          {
            "kind": "METHOD",
            "name": "\u003cT\u003egetNearbyEntitiesByType(java.lang.Class\u003c? extends org.bukkit.entity.Entity\u003e,org.bukkit.Location,double,double,double,java.util.function.Predicate\u003cT\u003e)",
            "children": [
              {
                "kind": "TYPE_PARAMETER",
                "name": "T"
              },
              {
                "kind": "PARAMETER",
                "name": "clazz"
              },
              {
                "kind": "PARAMETER",
                "name": "loc"
              },
              {
                "kind": "PARAMETER",
                "name": "predicate"
              },
              {
                "kind": "PARAMETER",
                "name": "xRadius"
              },
              {
                "kind": "PARAMETER",
                "name": "yRadius"
              },
              {
                "kind": "PARAMETER",
                "name": "zRadius"
              }
            ],
            "comment": {
              "body": "Gets all nearby entities of the specified type, within the specified radius (bounding box)",
              "tags": "Returns the collection of entities near location. This will always be a non-null collection..",
              "plain": "Gets all nearby entities of the specified type, within the specified radius (bounding box)\n@param clazz Type to filter by\n@param loc Center location\n@param xRadius X Radius\n@param yRadius Y Radius\n@param zRadius Z Radius\n@param predicate a predicate used to filter results\n@param \u003cT\u003e the entity type\n@return the collection of entities near location. This will always be a non-null collection."
            }
          },
          {
            "kind": "METHOD",
            "name": "\u003cT\u003eplayEffect(org.bukkit.Location,org.bukkit.Effect,T)",
            "children": [
              {
                "kind": "TYPE_PARAMETER",
                "name": "T"
              },
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "effect"
              },
              {
                "kind": "PARAMETER",
                "name": "location"
              }
            ],
            "comment": {
              "body": "Plays an effect to all players within a default radius around a given\n location.",
              "plain": "Plays an effect to all players within a default radius around a given\n location.\n@param \u003cT\u003e data dependant on the type of effect\n@param location the {@link Location} around which players must be to\n     hear the sound\n@param effect the {@link Effect}\n@param data a data bit needed for some effects"
            }
          },
          {
            "kind": "METHOD",
            "name": "\u003cT\u003eplayEffect(org.bukkit.Location,org.bukkit.Effect,T,int)",
            "children": [
              {
                "kind": "TYPE_PARAMETER",
                "name": "T"
              },
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "effect"
              },
              {
                "kind": "PARAMETER",
                "name": "location"
              },
              {
                "kind": "PARAMETER",
                "name": "radius"
              }
            ],
            "comment": {
              "body": "Plays an effect to all players within a given radius around a location.",
              "plain": "Plays an effect to all players within a given radius around a location.\n@param \u003cT\u003e data dependant on the type of effect\n@param location the {@link Location} around which players must be to\n     hear the effect\n@param effect the {@link Effect}\n@param data a data bit needed for some effects\n@param radius the radius around the location"
            }
          },
          {
            "kind": "METHOD",
            "name": "\u003cT\u003espawn(org.bukkit.Location,java.lang.Class\u003cT\u003e)",
            "children": [
              {
                "kind": "TYPE_PARAMETER",
                "name": "T"
              },
              {
                "kind": "PARAMETER",
                "name": "clazz"
              },
              {
                "kind": "PARAMETER",
                "name": "location"
              }
            ],
            "comment": {
              "body": "Spawn an entity of a specific class at the given \u003ca href\u003d\"org/bukkit/Location.html\" title\u003d\"class in org.bukkit\"\u003e\u003ccode\u003eLocation\u003c/code\u003e\u003c/a\u003e",
              "tags": "Returns an instance of the spawned \u003ca href\u003d\"org/bukkit/entity/Entity.html\" title\u003d\"interface in org.bukkit.entity\"\u003e\u003ccode\u003eEntity\u003c/code\u003e\u003c/a\u003e.",
              "plain": "Spawn an entity of a specific class at the given {@link Location}\n@param location the {@link Location} to spawn the entity at\n@param clazz the class of the {@link Entity} to spawn\n@param \u003cT\u003e the class of the {@link Entity} to spawn\n@return an instance of the spawned {@link Entity}\n@throws IllegalArgumentException if either parameter is null or the\n     {@link Entity} requested cannot be spawned"
            }
          },
          {
            "kind": "METHOD",
            "name": "\u003cT\u003espawn(org.bukkit.Location,java.lang.Class\u003cT\u003e,org.bukkit.util.Consumer\u003cT\u003e)",
            "children": [
              {
                "kind": "TYPE_PARAMETER",
                "name": "T"
              },
              {
                "kind": "PARAMETER",
                "name": "clazz"
              },
              {
                "kind": "PARAMETER",
                "name": "function"
              },
              {
                "kind": "PARAMETER",
                "name": "location"
              }
            ],
            "comment": {
              "body": "Spawn an entity of a specific class at the given \u003ca href\u003d\"org/bukkit/Location.html\" title\u003d\"class in org.bukkit\"\u003e\u003ccode\u003eLocation\u003c/code\u003e\u003c/a\u003e, with\n the supplied function run before the entity is added to the world.\n \u003cbr\u003e\n Note that when the function is run, the entity will not be actually in\n the world. Any operation involving such as teleporting the entity is undefined\n until after this function returns.",
              "tags": "Returns an instance of the spawned \u003ca href\u003d\"org/bukkit/entity/Entity.html\" title\u003d\"interface in org.bukkit.entity\"\u003e\u003ccode\u003eEntity\u003c/code\u003e\u003c/a\u003e.",
              "plain": "Spawn an entity of a specific class at the given {@link Location}, with\n the supplied function run before the entity is added to the world.\n \u003cbr\u003e\n Note that when the function is run, the entity will not be actually in\n the world. Any operation involving such as teleporting the entity is undefined\n until after this function returns.\n@param location the {@link Location} to spawn the entity at\n@param clazz the class of the {@link Entity} to spawn\n@param function the function to be run before the entity is spawned.\n@param \u003cT\u003e the class of the {@link Entity} to spawn\n@return an instance of the spawned {@link Entity}\n@throws IllegalArgumentException if either parameter is null or the\n     {@link Entity} requested cannot be spawned"
            }
          },
          {
            "kind": "METHOD",
            "name": "\u003cT\u003espawnArrow(org.bukkit.Location,org.bukkit.util.Vector,float,float,java.lang.Class\u003cT\u003e)",
            "children": [
              {
                "kind": "TYPE_PARAMETER",
                "name": "T"
              },
              {
                "kind": "PARAMETER",
                "name": "clazz"
              },
              {
                "kind": "PARAMETER",
                "name": "direction"
              },
              {
                "kind": "PARAMETER",
                "name": "location"
              },
              {
                "kind": "PARAMETER",
                "name": "speed"
              },
              {
                "kind": "PARAMETER",
                "name": "spread"
              }
            ],
            "comment": {
              "body": "Creates an arrow entity of the given class at the given \u003ca href\u003d\"org/bukkit/Location.html\" title\u003d\"class in org.bukkit\"\u003e\u003ccode\u003eLocation\u003c/code\u003e\u003c/a\u003e",
              "tags": "Returns Arrow entity spawned as a result of this method.",
              "plain": "Creates an arrow entity of the given class at the given {@link Location}\n@param \u003cT\u003e type of arrow to spawn\n@param location Location to spawn the arrow\n@param direction Direction to shoot the arrow in\n@param speed Speed of the arrow. A recommend speed is 0.6\n@param spread Spread of the arrow. A recommend spread is 12\n@param clazz the Entity class for the arrow\n {@link org.bukkit.entity.SpectralArrow},{@link org.bukkit.entity.Arrow},{@link org.bukkit.entity.TippedArrow}\n@return Arrow entity spawned as a result of this method"
            }
          },
          {
            "kind": "METHOD",
            "name": "\u003cT\u003espawnParticle(org.bukkit.Particle,double,double,double,int,T)",
            "children": [
              {
                "kind": "TYPE_PARAMETER",
                "name": "T"
              },
              {
                "kind": "PARAMETER",
                "name": "count"
              },
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "particle"
              },
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "y"
              },
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ],
            "comment": {
              "body": "Spawns the particle (the number of times specified by count)\n at the target location.",
              "plain": "Spawns the particle (the number of times specified by count)\n at the target location.\n@param particle the particle to spawn\n@param x the position on the x axis to spawn at\n@param y the position on the y axis to spawn at\n@param z the position on the z axis to spawn at\n@param count the number of particles\n@param data the data to use for the particle or null,\n             the type of this depends on {@link Particle#getDataType()}\n@param \u003cT\u003e Type"
            }
          },
          {
            "kind": "METHOD",
            "name": "\u003cT\u003espawnParticle(org.bukkit.Particle,double,double,double,int,double,double,double,T)",
            "children": [
              {
                "kind": "TYPE_PARAMETER",
                "name": "T"
              },
              {
                "kind": "PARAMETER",
                "name": "count"
              },
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "offsetX"
              },
              {
                "kind": "PARAMETER",
                "name": "offsetY"
              },
              {
                "kind": "PARAMETER",
                "name": "offsetZ"
              },
              {
                "kind": "PARAMETER",
                "name": "particle"
              },
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "y"
              },
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ],
            "comment": {
              "body": "Spawns the particle (the number of times specified by count)\n at the target location. The position of each particle will be\n randomized positively and negatively by the offset parameters\n on each axis.",
              "plain": "Spawns the particle (the number of times specified by count)\n at the target location. The position of each particle will be\n randomized positively and negatively by the offset parameters\n on each axis.\n@param particle the particle to spawn\n@param x the position on the x axis to spawn at\n@param y the position on the y axis to spawn at\n@param z the position on the z axis to spawn at\n@param count the number of particles\n@param offsetX the maximum random offset on the X axis\n@param offsetY the maximum random offset on the Y axis\n@param offsetZ the maximum random offset on the Z axis\n@param data the data to use for the particle or null,\n             the type of this depends on {@link Particle#getDataType()}\n@param \u003cT\u003e Type"
            }
          },
          {
            "kind": "METHOD",
            "name": "\u003cT\u003espawnParticle(org.bukkit.Particle,double,double,double,int,double,double,double,double,T)",
            "children": [
              {
                "kind": "TYPE_PARAMETER",
                "name": "T"
              },
              {
                "kind": "PARAMETER",
                "name": "count"
              },
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "extra"
              },
              {
                "kind": "PARAMETER",
                "name": "offsetX"
              },
              {
                "kind": "PARAMETER",
                "name": "offsetY"
              },
              {
                "kind": "PARAMETER",
                "name": "offsetZ"
              },
              {
                "kind": "PARAMETER",
                "name": "particle"
              },
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "y"
              },
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ],
            "comment": {
              "body": "Spawns the particle (the number of times specified by count)\n at the target location. The position of each particle will be\n randomized positively and negatively by the offset parameters\n on each axis.",
              "plain": "Spawns the particle (the number of times specified by count)\n at the target location. The position of each particle will be\n randomized positively and negatively by the offset parameters\n on each axis.\n@param particle the particle to spawn\n@param x the position on the x axis to spawn at\n@param y the position on the y axis to spawn at\n@param z the position on the z axis to spawn at\n@param count the number of particles\n@param offsetX the maximum random offset on the X axis\n@param offsetY the maximum random offset on the Y axis\n@param offsetZ the maximum random offset on the Z axis\n@param extra the extra data for this particle, depends on the\n              particle used (normally speed)\n@param data the data to use for the particle or null,\n             the type of this depends on {@link Particle#getDataType()}\n@param \u003cT\u003e Type"
            }
          },
          {
            "kind": "METHOD",
            "name": "\u003cT\u003espawnParticle(org.bukkit.Particle,java.util.List\u003corg.bukkit.entity.Player\u003e,org.bukkit.entity.Player,double,double,double,int,double,double,double,double,T)",
            "children": [
              {
                "kind": "TYPE_PARAMETER",
                "name": "T"
              },
              {
                "kind": "PARAMETER",
                "name": "count"
              },
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "extra"
              },
              {
                "kind": "PARAMETER",
                "name": "offsetX"
              },
              {
                "kind": "PARAMETER",
                "name": "offsetY"
              },
              {
                "kind": "PARAMETER",
                "name": "offsetZ"
              },
              {
                "kind": "PARAMETER",
                "name": "particle"
              },
              {
                "kind": "PARAMETER",
                "name": "receivers"
              },
              {
                "kind": "PARAMETER",
                "name": "source"
              },
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "y"
              },
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ],
            "comment": {
              "body": "Spawns the particle (the number of times specified by count)\n at the target location. The position of each particle will be\n randomized positively and negatively by the offset parameters\n on each axis.",
              "plain": "Spawns the particle (the number of times specified by count)\n at the target location. The position of each particle will be\n randomized positively and negatively by the offset parameters\n on each axis.\n@param particle the particle to spawn\n@param receivers List of players to receive the particles, or null for all in world\n@param source Source of the particles to be used in visibility checks, or null if no player source\n@param x the position on the x axis to spawn at\n@param y the position on the y axis to spawn at\n@param z the position on the z axis to spawn at\n@param count the number of particles\n@param offsetX the maximum random offset on the X axis\n@param offsetY the maximum random offset on the Y axis\n@param offsetZ the maximum random offset on the Z axis\n@param extra the extra data for this particle, depends on the\n              particle used (normally speed)\n@param data the data to use for the particle or null,\n             the type of this depends on {@link Particle#getDataType()}\n@param \u003cT\u003e Type"
            }
          },
          {
            "kind": "METHOD",
            "name": "\u003cT\u003espawnParticle(org.bukkit.Particle,java.util.List\u003corg.bukkit.entity.Player\u003e,org.bukkit.entity.Player,double,double,double,int,double,double,double,double,T,boolean)",
            "children": [
              {
                "kind": "TYPE_PARAMETER",
                "name": "T"
              },
              {
                "kind": "PARAMETER",
                "name": "count"
              },
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "extra"
              },
              {
                "kind": "PARAMETER",
                "name": "force"
              },
              {
                "kind": "PARAMETER",
                "name": "offsetX"
              },
              {
                "kind": "PARAMETER",
                "name": "offsetY"
              },
              {
                "kind": "PARAMETER",
                "name": "offsetZ"
              },
              {
                "kind": "PARAMETER",
                "name": "particle"
              },
              {
                "kind": "PARAMETER",
                "name": "receivers"
              },
              {
                "kind": "PARAMETER",
                "name": "source"
              },
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "y"
              },
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ],
            "comment": {
              "body": "Spawns the particle (the number of times specified by count)\n at the target location. The position of each particle will be\n randomized positively and negatively by the offset parameters\n on each axis.",
              "plain": "Spawns the particle (the number of times specified by count)\n at the target location. The position of each particle will be\n randomized positively and negatively by the offset parameters\n on each axis.\n@param particle the particle to spawn\n@param receivers List of players to receive the particles, or null for all in world\n@param source Source of the particles to be used in visibility checks, or null if no player source\n@param x the position on the x axis to spawn at\n@param y the position on the y axis to spawn at\n@param z the position on the z axis to spawn at\n@param count the number of particles\n@param offsetX the maximum random offset on the X axis\n@param offsetY the maximum random offset on the Y axis\n@param offsetZ the maximum random offset on the Z axis\n@param extra the extra data for this particle, depends on the\n              particle used (normally speed)\n@param data the data to use for the particle or null,\n             the type of this depends on {@link Particle#getDataType()}\n@param \u003cT\u003e Type\n@param force allows the particle to be seen further away from the player\n              and shows to players using any vanilla client particle settings"
            }
          },
          {
            "kind": "METHOD",
            "name": "\u003cT\u003espawnParticle(org.bukkit.Particle,org.bukkit.Location,int,T)",
            "children": [
              {
                "kind": "TYPE_PARAMETER",
                "name": "T"
              },
              {
                "kind": "PARAMETER",
                "name": "count"
              },
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "location"
              },
              {
                "kind": "PARAMETER",
                "name": "particle"
              }
            ],
            "comment": {
              "body": "Spawns the particle (the number of times specified by count)\n at the target location.",
              "plain": "Spawns the particle (the number of times specified by count)\n at the target location.\n@param particle the particle to spawn\n@param location the location to spawn at\n@param count the number of particles\n@param data the data to use for the particle or null,\n             the type of this depends on {@link Particle#getDataType()}\n@param \u003cT\u003e Type"
            }
          },
          {
            "kind": "METHOD",
            "name": "\u003cT\u003espawnParticle(org.bukkit.Particle,org.bukkit.Location,int,double,double,double,T)",
            "children": [
              {
                "kind": "TYPE_PARAMETER",
                "name": "T"
              },
              {
                "kind": "PARAMETER",
                "name": "count"
              },
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "location"
              },
              {
                "kind": "PARAMETER",
                "name": "offsetX"
              },
              {
                "kind": "PARAMETER",
                "name": "offsetY"
              },
              {
                "kind": "PARAMETER",
                "name": "offsetZ"
              },
              {
                "kind": "PARAMETER",
                "name": "particle"
              }
            ],
            "comment": {
              "body": "Spawns the particle (the number of times specified by count)\n at the target location. The position of each particle will be\n randomized positively and negatively by the offset parameters\n on each axis.",
              "plain": "Spawns the particle (the number of times specified by count)\n at the target location. The position of each particle will be\n randomized positively and negatively by the offset parameters\n on each axis.\n@param particle the particle to spawn\n@param location the location to spawn at\n@param count the number of particles\n@param offsetX the maximum random offset on the X axis\n@param offsetY the maximum random offset on the Y axis\n@param offsetZ the maximum random offset on the Z axis\n@param data the data to use for the particle or null,\n             the type of this depends on {@link Particle#getDataType()}\n@param \u003cT\u003e Type"
            }
          },
          {
            "kind": "METHOD",
            "name": "\u003cT\u003espawnParticle(org.bukkit.Particle,org.bukkit.Location,int,double,double,double,double,T)",
            "children": [
              {
                "kind": "TYPE_PARAMETER",
                "name": "T"
              },
              {
                "kind": "PARAMETER",
                "name": "count"
              },
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "extra"
              },
              {
                "kind": "PARAMETER",
                "name": "location"
              },
              {
                "kind": "PARAMETER",
                "name": "offsetX"
              },
              {
                "kind": "PARAMETER",
                "name": "offsetY"
              },
              {
                "kind": "PARAMETER",
                "name": "offsetZ"
              },
              {
                "kind": "PARAMETER",
                "name": "particle"
              }
            ],
            "comment": {
              "body": "Spawns the particle (the number of times specified by count)\n at the target location. The position of each particle will be\n randomized positively and negatively by the offset parameters\n on each axis.",
              "plain": "Spawns the particle (the number of times specified by count)\n at the target location. The position of each particle will be\n randomized positively and negatively by the offset parameters\n on each axis.\n@param particle the particle to spawn\n@param location the location to spawn at\n@param count the number of particles\n@param offsetX the maximum random offset on the X axis\n@param offsetY the maximum random offset on the Y axis\n@param offsetZ the maximum random offset on the Z axis\n@param extra the extra data for this particle, depends on the\n              particle used (normally speed)\n@param data the data to use for the particle or null,\n             the type of this depends on {@link Particle#getDataType()}\n@param \u003cT\u003e Type"
            }
          },
          {
            "kind": "METHOD",
            "name": "canGenerateStructures()",
            "comment": {
              "body": "Gets whether or not structures are being generated.",
              "tags": "Returns True if structures are being generated..",
              "plain": "Gets whether or not structures are being generated.\n@return True if structures are being generated."
            }
          },
          {
            "kind": "METHOD",
            "name": "createExplosion(double,double,double,float)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "power"
              },
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "y"
              },
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ],
            "comment": {
              "body": "Creates explosion at given coordinates with given power",
              "tags": "Returns false if explosion was canceled, otherwise true.",
              "plain": "Creates explosion at given coordinates with given power\n@param x X coordinate\n@param y Y coordinate\n@param z Z coordinate\n@param power The power of explosion, where 4F is TNT\n@return false if explosion was canceled, otherwise true"
            }
          },
          {
            "kind": "METHOD",
            "name": "createExplosion(double,double,double,float,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "power"
              },
              {
                "kind": "PARAMETER",
                "name": "setFire"
              },
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "y"
              },
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ],
            "comment": {
              "body": "Creates explosion at given coordinates with given power and optionally\n setting blocks on fire.",
              "tags": "Returns false if explosion was canceled, otherwise true.",
              "plain": "Creates explosion at given coordinates with given power and optionally\n setting blocks on fire.\n@param x X coordinate\n@param y Y coordinate\n@param z Z coordinate\n@param power The power of explosion, where 4F is TNT\n@param setFire Whether or not to set blocks on fire\n@return false if explosion was canceled, otherwise true"
            }
          },
          {
            "kind": "METHOD",
            "name": "createExplosion(double,double,double,float,boolean,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "breakBlocks"
              },
              {
                "kind": "PARAMETER",
                "name": "power"
              },
              {
                "kind": "PARAMETER",
                "name": "setFire"
              },
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "y"
              },
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ],
            "comment": {
              "body": "Creates explosion at given coordinates with given power and optionally\n setting blocks on fire or breaking blocks.",
              "tags": "Returns false if explosion was canceled, otherwise true.",
              "plain": "Creates explosion at given coordinates with given power and optionally\n setting blocks on fire or breaking blocks.\n@param x X coordinate\n@param y Y coordinate\n@param z Z coordinate\n@param power The power of explosion, where 4F is TNT\n@param setFire Whether or not to set blocks on fire\n@param breakBlocks Whether or not to have blocks be destroyed\n@return false if explosion was canceled, otherwise true"
            }
          },
          {
            "kind": "METHOD",
            "name": "createExplosion(org.bukkit.Location,float)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "loc"
              },
              {
                "kind": "PARAMETER",
                "name": "power"
              }
            ],
            "comment": {
              "body": "Creates explosion at given coordinates with given power",
              "tags": "Returns false if explosion was canceled, otherwise true.",
              "plain": "Creates explosion at given coordinates with given power\n@param loc Location to blow up\n@param power The power of explosion, where 4F is TNT\n@return false if explosion was canceled, otherwise true"
            }
          },
          {
            "kind": "METHOD",
            "name": "createExplosion(org.bukkit.Location,float,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "loc"
              },
              {
                "kind": "PARAMETER",
                "name": "power"
              },
              {
                "kind": "PARAMETER",
                "name": "setFire"
              }
            ],
            "comment": {
              "body": "Creates explosion at given coordinates with given power and optionally\n setting blocks on fire.",
              "tags": "Returns false if explosion was canceled, otherwise true.",
              "plain": "Creates explosion at given coordinates with given power and optionally\n setting blocks on fire.\n@param loc Location to blow up\n@param power The power of explosion, where 4F is TNT\n@param setFire Whether or not to set blocks on fire\n@return false if explosion was canceled, otherwise true"
            }
          },
          {
            "kind": "METHOD",
            "name": "createExplosion(org.bukkit.Location,float,boolean,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "breakBlocks"
              },
              {
                "kind": "PARAMETER",
                "name": "loc"
              },
              {
                "kind": "PARAMETER",
                "name": "power"
              },
              {
                "kind": "PARAMETER",
                "name": "setFire"
              }
            ],
            "comment": {
              "body": "Creates explosion at given location with given power and optionally\n setting blocks on fire or breaking blocks.",
              "tags": "Returns false if explosion was canceled, otherwise true.",
              "plain": "Creates explosion at given location with given power and optionally\n setting blocks on fire or breaking blocks.\n@param loc Location to blow up\n@param power The power of explosion, where 4F is TNT\n@param setFire Whether or not to set blocks on fire\n@param breakBlocks Whether or not to have blocks be destroyed\n@return false if explosion was canceled, otherwise true"
            }
          },
          {
            "kind": "METHOD",
            "name": "createExplosion(org.bukkit.entity.Entity,float)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "power"
              },
              {
                "kind": "PARAMETER",
                "name": "source"
              }
            ],
            "comment": {
              "body": "Creates explosion at given entities location with given power and optionally\n setting blocks on fire, with the specified entity as the source.",
              "tags": "Returns false if explosion was canceled, otherwise true.",
              "plain": "Creates explosion at given entities location with given power and optionally\n setting blocks on fire, with the specified entity as the source.\n@param source The source entity of the explosion\n@param power The power of explosion, where 4F is TNT\n@return false if explosion was canceled, otherwise true"
            }
          },
          {
            "kind": "METHOD",
            "name": "createExplosion(org.bukkit.entity.Entity,float,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "power"
              },
              {
                "kind": "PARAMETER",
                "name": "setFire"
              },
              {
                "kind": "PARAMETER",
                "name": "source"
              }
            ],
            "comment": {
              "body": "Creates explosion at given entities location with given power and optionally\n setting blocks on fire, with the specified entity as the source.\n\n Will destroy blocks.",
              "tags": "Returns false if explosion was canceled, otherwise true.",
              "plain": "Creates explosion at given entities location with given power and optionally\n setting blocks on fire, with the specified entity as the source.\n\n Will destroy blocks.\n@param source The source entity of the explosion\n@param power The power of explosion, where 4F is TNT\n@param setFire Whether or not to set blocks on fire\n@return false if explosion was canceled, otherwise true"
            }
          },
          {
            "kind": "METHOD",
            "name": "createExplosion(org.bukkit.entity.Entity,float,boolean,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "breakBlocks"
              },
              {
                "kind": "PARAMETER",
                "name": "power"
              },
              {
                "kind": "PARAMETER",
                "name": "setFire"
              },
              {
                "kind": "PARAMETER",
                "name": "source"
              }
            ],
            "comment": {
              "body": "Creates explosion at given entities location with given power and optionally\n setting blocks on fire, with the specified entity as the source.",
              "tags": "Returns false if explosion was canceled, otherwise true.",
              "plain": "Creates explosion at given entities location with given power and optionally\n setting blocks on fire, with the specified entity as the source.\n@param source The source entity of the explosion\n@param power The power of explosion, where 4F is TNT\n@param setFire Whether or not to set blocks on fire\n@param breakBlocks Whether or not to have blocks be destroyed\n@return false if explosion was canceled, otherwise true"
            }
          },
          {
            "kind": "METHOD",
            "name": "createExplosion(org.bukkit.entity.Entity,org.bukkit.Location,float)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "loc"
              },
              {
                "kind": "PARAMETER",
                "name": "power"
              },
              {
                "kind": "PARAMETER",
                "name": "source"
              }
            ],
            "comment": {
              "body": "Creates explosion at given location with given power, with the specified entity as the source.\n Will set blocks on fire and destroy blocks.",
              "tags": "Returns false if explosion was canceled, otherwise true.",
              "plain": "Creates explosion at given location with given power, with the specified entity as the source.\n Will set blocks on fire and destroy blocks.\n@param source The source entity of the explosion\n@param loc Location to blow up\n@param power The power of explosion, where 4F is TNT\n@return false if explosion was canceled, otherwise true"
            }
          },
          {
            "kind": "METHOD",
            "name": "createExplosion(org.bukkit.entity.Entity,org.bukkit.Location,float,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "loc"
              },
              {
                "kind": "PARAMETER",
                "name": "power"
              },
              {
                "kind": "PARAMETER",
                "name": "setFire"
              },
              {
                "kind": "PARAMETER",
                "name": "source"
              }
            ],
            "comment": {
              "body": "Creates explosion at given location with given power and optionally\n setting blocks on fire, with the specified entity as the source.\n\n Will destroy other blocks",
              "tags": "Returns false if explosion was canceled, otherwise true.",
              "plain": "Creates explosion at given location with given power and optionally\n setting blocks on fire, with the specified entity as the source.\n\n Will destroy other blocks\n@param source The source entity of the explosion\n@param loc Location to blow up\n@param power The power of explosion, where 4F is TNT\n@param setFire Whether or not to set blocks on fire\n@return false if explosion was canceled, otherwise true"
            }
          },
          {
            "kind": "METHOD",
            "name": "createExplosion(org.bukkit.entity.Entity,org.bukkit.Location,float,boolean,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "breakBlocks"
              },
              {
                "kind": "PARAMETER",
                "name": "loc"
              },
              {
                "kind": "PARAMETER",
                "name": "power"
              },
              {
                "kind": "PARAMETER",
                "name": "setFire"
              },
              {
                "kind": "PARAMETER",
                "name": "source"
              }
            ],
            "comment": {
              "body": "Creates explosion at given location with given power and optionally\n setting blocks on fire, with the specified entity as the source.",
              "tags": "Returns false if explosion was canceled, otherwise true.",
              "plain": "Creates explosion at given location with given power and optionally\n setting blocks on fire, with the specified entity as the source.\n@param source The source entity of the explosion\n@param loc Location to blow up\n@param power The power of explosion, where 4F is TNT\n@param setFire Whether or not to set blocks on fire\n@param breakBlocks Whether or not to have blocks be destroyed\n@return false if explosion was canceled, otherwise true"
            }
          },
          {
            "kind": "METHOD",
            "name": "dropItem(org.bukkit.Location,org.bukkit.inventory.ItemStack)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "item"
              },
              {
                "kind": "PARAMETER",
                "name": "location"
              }
            ],
            "comment": {
              "body": "Drops an item at the specified \u003ca href\u003d\"org/bukkit/Location.html\" title\u003d\"class in org.bukkit\"\u003e\u003ccode\u003eLocation\u003c/code\u003e\u003c/a\u003e",
              "tags": "Returns ItemDrop entity created as a result of this method.",
              "plain": "Drops an item at the specified {@link Location}\n@param location Location to drop the item\n@param item ItemStack to drop\n@return ItemDrop entity created as a result of this method"
            }
          },
          {
            "kind": "METHOD",
            "name": "dropItemNaturally(org.bukkit.Location,org.bukkit.inventory.ItemStack)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "item"
              },
              {
                "kind": "PARAMETER",
                "name": "location"
              }
            ],
            "comment": {
              "body": "Drops an item at the specified \u003ca href\u003d\"org/bukkit/Location.html\" title\u003d\"class in org.bukkit\"\u003e\u003ccode\u003eLocation\u003c/code\u003e\u003c/a\u003e with a random offset",
              "tags": "Returns ItemDrop entity created as a result of this method.",
              "plain": "Drops an item at the specified {@link Location} with a random offset\n@param location Location to drop the item\n@param item ItemStack to drop\n@return ItemDrop entity created as a result of this method"
            }
          },
          {
            "kind": "METHOD",
            "name": "generateTree(org.bukkit.Location,org.bukkit.TreeType)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "location"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "comment": {
              "body": "Creates a tree at the given \u003ca href\u003d\"org/bukkit/Location.html\" title\u003d\"class in org.bukkit\"\u003e\u003ccode\u003eLocation\u003c/code\u003e\u003c/a\u003e",
              "tags": "Returns true if the tree was created successfully, otherwise false.",
              "plain": "Creates a tree at the given {@link Location}\n@param location Location to spawn the tree\n@param type Type of the tree to create\n@return true if the tree was created successfully, otherwise false"
            }
          },
          {
            "kind": "METHOD",
            "name": "generateTree(org.bukkit.Location,org.bukkit.TreeType,org.bukkit.BlockChangeDelegate)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "delegate"
              },
              {
                "kind": "PARAMETER",
                "name": "loc"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Creates a tree at the given \u003ca href\u003d\"org/bukkit/Location.html\" title\u003d\"class in org.bukkit\"\u003e\u003ccode\u003eLocation\u003c/code\u003e\u003c/a\u003e",
              "tags": "Returns true if the tree was created successfully, otherwise false.",
              "plain": "Creates a tree at the given {@link Location}\n@param loc Location to spawn the tree\n@param type Type of the tree to create\n@param delegate A class to call for each block changed as a result of\n     this method\n@return true if the tree was created successfully, otherwise false\n@deprecated rarely used API that was largely for implementation purposes"
            }
          },
          {
            "kind": "METHOD",
            "name": "getAllowAnimals()",
            "comment": {
              "body": "Gets whether animals can spawn in this world.",
              "tags": "Returns whether animals can spawn in this world..",
              "plain": "Gets whether animals can spawn in this world.\n@return whether animals can spawn in this world."
            }
          },
          {
            "kind": "METHOD",
            "name": "getAllowMonsters()",
            "comment": {
              "body": "Gets whether monsters can spawn in this world.",
              "tags": "Returns whether monsters can spawn in this world..",
              "plain": "Gets whether monsters can spawn in this world.\n@return whether monsters can spawn in this world."
            }
          },
          {
            "kind": "METHOD",
            "name": "getAmbientSpawnLimit()",
            "comment": {
              "body": "Gets the limit for number of ambient mobs that can spawn in a chunk in\n this world",
              "tags": "Returns The ambient spawn limit.",
              "plain": "Gets the limit for number of ambient mobs that can spawn in a chunk in\n this world\n@return The ambient spawn limit"
            }
          },
          {
            "kind": "METHOD",
            "name": "getAnimalSpawnLimit()",
            "comment": {
              "body": "Gets the limit for number of animals that can spawn in a chunk in this\n world",
              "tags": "Returns The animal spawn limit.",
              "plain": "Gets the limit for number of animals that can spawn in a chunk in this\n world\n@return The animal spawn limit"
            }
          },
          {
            "kind": "METHOD",
            "name": "getBiome(int,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ],
            "comment": {
              "body": "Gets the biome for the given block coordinates.",
              "tags": "Returns Biome of the requested block.",
              "plain": "Gets the biome for the given block coordinates.\n@param x X coordinate of the block\n@param z Z coordinate of the block\n@return Biome of the requested block"
            }
          },
          {
            "kind": "METHOD",
            "name": "getBlockAt(int,int,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "y"
              },
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ],
            "comment": {
              "body": "Gets the \u003ca href\u003d\"org/bukkit/block/Block.html\" title\u003d\"interface in org.bukkit.block\"\u003e\u003ccode\u003eBlock\u003c/code\u003e\u003c/a\u003e at the given coordinates",
              "tags": "Returns Block at the given coordinates.",
              "plain": "Gets the {@link Block} at the given coordinates\n@param x X-coordinate of the block\n@param y Y-coordinate of the block\n@param z Z-coordinate of the block\n@return Block at the given coordinates\n@see #getBlockTypeIdAt(int, int, int) Returns the current type ID of\n     the block"
            }
          },
          {
            "kind": "METHOD",
            "name": "getBlockAt(org.bukkit.Location)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "location"
              }
            ],
            "comment": {
              "body": "Gets the \u003ca href\u003d\"org/bukkit/block/Block.html\" title\u003d\"interface in org.bukkit.block\"\u003e\u003ccode\u003eBlock\u003c/code\u003e\u003c/a\u003e at the given \u003ca href\u003d\"org/bukkit/Location.html\" title\u003d\"class in org.bukkit\"\u003e\u003ccode\u003eLocation\u003c/code\u003e\u003c/a\u003e",
              "tags": "Returns Block at the given location.",
              "plain": "Gets the {@link Block} at the given {@link Location}\n@param location Location of the block\n@return Block at the given location\n@see #getBlockTypeIdAt(org.bukkit.Location) Returns the current type ID\n     of the block"
            }
          },
          {
            "kind": "METHOD",
            "name": "getBlockAtKey(long)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "key"
              }
            ],
            "comment": {
              "body": "Gets the \u003ca href\u003d\"org/bukkit/block/Block.html\" title\u003d\"interface in org.bukkit.block\"\u003e\u003ccode\u003eBlock\u003c/code\u003e\u003c/a\u003e at the given block key",
              "tags": "Returns Block at the key.",
              "plain": "Gets the {@link Block} at the given block key\n@param key The block key. See {@link Block#getBlockKey()}\n@return Block at the key\n@see Location#toBlockKey()\n@see Block#getBlockKey()"
            }
          },
          {
            "kind": "METHOD",
            "name": "getBlockTypeIdAt(int,int,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "y"
              },
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Gets the block type ID at the given coordinates",
              "tags": "Returns Type ID of the block at the given coordinates.",
              "plain": "Gets the block type ID at the given coordinates\n@param x X-coordinate of the block\n@param y Y-coordinate of the block\n@param z Z-coordinate of the block\n@return Type ID of the block at the given coordinates\n@see #getBlockAt(int, int, int) Returns a live Block object at the\n     given location\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "getBlockTypeIdAt(org.bukkit.Location)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "location"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Gets the block type ID at the given \u003ca href\u003d\"org/bukkit/Location.html\" title\u003d\"class in org.bukkit\"\u003e\u003ccode\u003eLocation\u003c/code\u003e\u003c/a\u003e",
              "tags": "Returns Type ID of the block at the given location.",
              "plain": "Gets the block type ID at the given {@link Location}\n@param location Location of the block\n@return Type ID of the block at the given location\n@see #getBlockAt(org.bukkit.Location) Returns a live Block object at\n     the given location\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "getChunkAt(int,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ],
            "comment": {
              "body": "Gets the \u003ca href\u003d\"org/bukkit/Chunk.html\" title\u003d\"interface in org.bukkit\"\u003e\u003ccode\u003eChunk\u003c/code\u003e\u003c/a\u003e at the given coordinates",
              "tags": "Returns Chunk at the given coordinates.",
              "plain": "Gets the {@link Chunk} at the given coordinates\n@param x X-coordinate of the chunk\n@param z Z-coordinate of the chunk\n@return Chunk at the given coordinates"
            }
          },
          {
            "kind": "METHOD",
            "name": "getChunkAt(long)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "chunkKey"
              }
            ],
            "comment": {
              "body": "Gets the chunk at the specified chunk key, which is the X and Z packed into a long.\n\n See \u003ca href\u003d\"org/bukkit/Chunk.html#getChunkKey()\"\u003e\u003ccode\u003eChunk.getChunkKey()\u003c/code\u003e\u003c/a\u003e for easy access to the key, or you may calculate it as:\n long chunkKey \u003d (long) chunkX \u0026amp; 0xffffffffL | ((long) chunkZ \u0026amp; 0xffffffffL) \u0026gt;\u0026gt; 32;",
              "tags": "Returns The chunk at the specified key.",
              "plain": "Gets the chunk at the specified chunk key, which is the X and Z packed into a long.\n\n See {@link Chunk#getChunkKey()} for easy access to the key, or you may calculate it as:\n long chunkKey \u003d (long) chunkX \u0026amp; 0xffffffffL | ((long) chunkZ \u0026amp; 0xffffffffL) \u0026gt;\u0026gt; 32;\n@param chunkKey The Chunk Key to look up the chunk by\n@return The chunk at the specified key"
            }
          },
          {
            "kind": "METHOD",
            "name": "getChunkAt(org.bukkit.Location)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "location"
              }
            ],
            "comment": {
              "body": "Gets the \u003ca href\u003d\"org/bukkit/Chunk.html\" title\u003d\"interface in org.bukkit\"\u003e\u003ccode\u003eChunk\u003c/code\u003e\u003c/a\u003e at the given \u003ca href\u003d\"org/bukkit/Location.html\" title\u003d\"class in org.bukkit\"\u003e\u003ccode\u003eLocation\u003c/code\u003e\u003c/a\u003e",
              "tags": "Returns Chunk at the given location.",
              "plain": "Gets the {@link Chunk} at the given {@link Location}\n@param location Location of the chunk\n@return Chunk at the given location"
            }
          },
          {
            "kind": "METHOD",
            "name": "getChunkAt(org.bukkit.block.Block)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "block"
              }
            ],
            "comment": {
              "body": "Gets the \u003ca href\u003d\"org/bukkit/Chunk.html\" title\u003d\"interface in org.bukkit\"\u003e\u003ccode\u003eChunk\u003c/code\u003e\u003c/a\u003e that contains the given \u003ca href\u003d\"org/bukkit/block/Block.html\" title\u003d\"interface in org.bukkit.block\"\u003e\u003ccode\u003eBlock\u003c/code\u003e\u003c/a\u003e",
              "tags": "Returns The chunk that contains the given block.",
              "plain": "Gets the {@link Chunk} that contains the given {@link Block}\n@param block Block to get the containing chunk from\n@return The chunk that contains the given block"
            }
          },
          {
            "kind": "METHOD",
            "name": "getChunkAtAsync(int,int,org.bukkit.World.ChunkLoadCallback)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cb"
              },
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ],
            "comment": {
              "body": "Requests a \u003ca href\u003d\"org/bukkit/Chunk.html\" title\u003d\"interface in org.bukkit\"\u003e\u003ccode\u003eChunk\u003c/code\u003e\u003c/a\u003e to be loaded at the given coordinates\n\n This method makes no guarantee on how fast the chunk will load,\n and will return the chunk to the callback at a later time.\n\n You should use this method if you need a chunk but do not need it\n immediately, and you wish to let the server control the speed\n of chunk loads, keeping performance in mind.\n\n The \u003ca href\u003d\"org/bukkit/World.ChunkLoadCallback.html\" title\u003d\"interface in org.bukkit\"\u003e\u003ccode\u003eWorld.ChunkLoadCallback\u003c/code\u003e\u003c/a\u003e will always be executed synchronously\n on the main Server Thread.",
              "plain": "Requests a {@link Chunk} to be loaded at the given coordinates\n\n This method makes no guarantee on how fast the chunk will load,\n and will return the chunk to the callback at a later time.\n\n You should use this method if you need a chunk but do not need it\n immediately, and you wish to let the server control the speed\n of chunk loads, keeping performance in mind.\n\n The {@link ChunkLoadCallback} will always be executed synchronously\n on the main Server Thread.\n@param x Chunk X-coordinate of the chunk - (world coordinate / 16)\n@param z Chunk Z-coordinate of the chunk - (world coordinate / 16)\n@param cb Callback to receive the chunk when it is loaded.\n           will be executed synchronously"
            }
          },
          {
            "kind": "METHOD",
            "name": "getChunkAtAsync(org.bukkit.Location,org.bukkit.World.ChunkLoadCallback)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cb"
              },
              {
                "kind": "PARAMETER",
                "name": "location"
              }
            ],
            "comment": {
              "body": "Requests a \u003ca href\u003d\"org/bukkit/Chunk.html\" title\u003d\"interface in org.bukkit\"\u003e\u003ccode\u003eChunk\u003c/code\u003e\u003c/a\u003e to be loaded at the given \u003ca href\u003d\"org/bukkit/Location.html\" title\u003d\"class in org.bukkit\"\u003e\u003ccode\u003eLocation\u003c/code\u003e\u003c/a\u003e\n\n This method makes no guarantee on how fast the chunk will load,\n and will return the chunk to the callback at a later time.\n\n You should use this method if you need a chunk but do not need it\n immediately, and you wish to let the server control the speed\n of chunk loads, keeping performance in mind.\n\n The \u003ca href\u003d\"org/bukkit/World.ChunkLoadCallback.html\" title\u003d\"interface in org.bukkit\"\u003e\u003ccode\u003eWorld.ChunkLoadCallback\u003c/code\u003e\u003c/a\u003e will always be executed synchronously\n on the main Server Thread.",
              "plain": "Requests a {@link Chunk} to be loaded at the given {@link Location}\n\n This method makes no guarantee on how fast the chunk will load,\n and will return the chunk to the callback at a later time.\n\n You should use this method if you need a chunk but do not need it\n immediately, and you wish to let the server control the speed\n of chunk loads, keeping performance in mind.\n\n The {@link ChunkLoadCallback} will always be executed synchronously\n on the main Server Thread.\n@param location Location of the chunk\n@param cb Callback to receive the chunk when it is loaded.\n           will be executed synchronously"
            }
          },
          {
            "kind": "METHOD",
            "name": "getChunkAtAsync(org.bukkit.block.Block,org.bukkit.World.ChunkLoadCallback)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "block"
              },
              {
                "kind": "PARAMETER",
                "name": "cb"
              }
            ],
            "comment": {
              "body": "Requests \u003ca href\u003d\"org/bukkit/Chunk.html\" title\u003d\"interface in org.bukkit\"\u003e\u003ccode\u003eChunk\u003c/code\u003e\u003c/a\u003e to be loaded that contains the given \u003ca href\u003d\"org/bukkit/block/Block.html\" title\u003d\"interface in org.bukkit.block\"\u003e\u003ccode\u003eBlock\u003c/code\u003e\u003c/a\u003e\n\n This method makes no guarantee on how fast the chunk will load,\n and will return the chunk to the callback at a later time.\n\n You should use this method if you need a chunk but do not need it\n immediately, and you wish to let the server control the speed\n of chunk loads, keeping performance in mind.\n\n The \u003ca href\u003d\"org/bukkit/World.ChunkLoadCallback.html\" title\u003d\"interface in org.bukkit\"\u003e\u003ccode\u003eWorld.ChunkLoadCallback\u003c/code\u003e\u003c/a\u003e will always be executed synchronously\n on the main Server Thread.",
              "plain": "Requests {@link Chunk} to be loaded that contains the given {@link Block}\n\n This method makes no guarantee on how fast the chunk will load,\n and will return the chunk to the callback at a later time.\n\n You should use this method if you need a chunk but do not need it\n immediately, and you wish to let the server control the speed\n of chunk loads, keeping performance in mind.\n\n The {@link ChunkLoadCallback} will always be executed synchronously\n on the main Server Thread.\n@param block Block to get the containing chunk from\n@param cb Callback to receive the chunk when it is loaded.\n           will be executed synchronously"
            }
          },
          {
            "kind": "METHOD",
            "name": "getChunkCount()",
            "comment": {
              "tags": "Returns The amount of Chunks in this world.",
              "plain": "@return The amount of Chunks in this world"
            }
          },
          {
            "kind": "METHOD",
            "name": "getDifficulty()",
            "comment": {
              "body": "Gets the Difficulty of the world.",
              "tags": "Returns The difficulty of the world..",
              "plain": "Gets the Difficulty of the world.\n@return The difficulty of the world."
            }
          },
          {
            "kind": "METHOD",
            "name": "getEmptyChunkSnapshot(int,int,boolean,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "includeBiome"
              },
              {
                "kind": "PARAMETER",
                "name": "includeBiomeTempRain"
              },
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ],
            "comment": {
              "body": "Get empty chunk snapshot (equivalent to all air blocks), optionally\n including valid biome data. Used for representing an ungenerated chunk,\n or for fetching only biome data without loading a chunk.",
              "tags": "Returns The empty snapshot..",
              "plain": "Get empty chunk snapshot (equivalent to all air blocks), optionally\n including valid biome data. Used for representing an ungenerated chunk,\n or for fetching only biome data without loading a chunk.\n@param x - chunk x coordinate\n@param z - chunk z coordinate\n@param includeBiome - if true, snapshot includes per-coordinate biome\n     type\n@param includeBiomeTempRain - if true, snapshot includes per-coordinate\n     raw biome temperature and rainfall\n@return The empty snapshot."
            }
          },
          {
            "kind": "METHOD",
            "name": "getEntities()",
            "comment": {
              "body": "Get a list of all entities in this World",
              "tags": "Returns A List of all Entities currently residing in this world.",
              "plain": "Get a list of all entities in this World\n@return A List of all Entities currently residing in this world"
            }
          },
          {
            "kind": "METHOD",
            "name": "getEntitiesByClasses(java.lang.Class\u003c?\u003e...)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "classes"
              }
            ],
            "comment": {
              "body": "Get a collection of all entities in this World matching any of the\n given classes/interfaces",
              "tags": "Returns A List of all Entities currently residing in this world that\n     match one or more of the given classes/interfaces.",
              "plain": "Get a collection of all entities in this World matching any of the\n given classes/interfaces\n@param classes The classes representing the types of entity to match\n@return A List of all Entities currently residing in this world that\n     match one or more of the given classes/interfaces"
            }
          },
          {
            "kind": "METHOD",
            "name": "getEntity(java.util.UUID)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "uuid"
              }
            ],
            "comment": {
              "body": "Gets an entity in this world by its UUID",
              "tags": "Returns the entity with the given UUID, or null if it isn\u0027t found.",
              "plain": "Gets an entity in this world by its UUID\n@param uuid the UUID of the entity\n@return the entity with the given UUID, or null if it isn\u0027t found"
            }
          },
          {
            "kind": "METHOD",
            "name": "getEntityCount()",
            "comment": {
              "tags": "Returns The amount of Entities in this world.",
              "plain": "@return The amount of Entities in this world"
            }
          },
          {
            "kind": "METHOD",
            "name": "getEnvironment()",
            "comment": {
              "body": "Gets the \u003ca href\u003d\"org/bukkit/World.Environment.html\" title\u003d\"enum in org.bukkit\"\u003e\u003ccode\u003eWorld.Environment\u003c/code\u003e\u003c/a\u003e type of this world",
              "tags": "Returns This worlds Environment type.",
              "plain": "Gets the {@link Environment} type of this world\n@return This worlds Environment type"
            }
          },
          {
            "kind": "METHOD",
            "name": "getFullTime()",
            "comment": {
              "body": "Gets the full in-game time on this world",
              "tags": "Returns The current absolute time.",
              "plain": "Gets the full in-game time on this world\n@return The current absolute time\n@see #getTime() Returns a relative time of this world"
            }
          },
          {
            "kind": "METHOD",
            "name": "getGameRuleValue(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "rule"
              }
            ],
            "comment": {
              "body": "Gets the current state of the specified rule\n \u003cp\u003e\n Will return null if rule passed is null",
              "tags": "Returns String value of rule.",
              "plain": "Gets the current state of the specified rule\n \u003cp\u003e\n Will return null if rule passed is null\n@param rule Rule to look up value of\n@return String value of rule"
            }
          },
          {
            "kind": "METHOD",
            "name": "getGameRules()",
            "comment": {
              "body": "Get existing rules",
              "tags": "Returns An array of rules.",
              "plain": "Get existing rules\n@return An array of rules"
            }
          },
          {
            "kind": "METHOD",
            "name": "getGenerator()",
            "comment": {
              "body": "Gets the chunk generator for this world",
              "tags": "Returns ChunkGenerator associated with this world.",
              "plain": "Gets the chunk generator for this world\n@return ChunkGenerator associated with this world"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHighestBlockAt(int,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ],
            "comment": {
              "body": "Gets the lowest block at the given coordinates such that the block and\n all blocks above it are transparent for lighting purposes.",
              "tags": "Returns Highest non-empty block.",
              "plain": "Gets the lowest block at the given coordinates such that the block and\n all blocks above it are transparent for lighting purposes.\n@param x X-coordinate of the block\n@param z Z-coordinate of the block\n@return Highest non-empty block"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHighestBlockAt(org.bukkit.Location)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "location"
              }
            ],
            "comment": {
              "body": "Gets the lowest block at the given \u003ca href\u003d\"org/bukkit/Location.html\" title\u003d\"class in org.bukkit\"\u003e\u003ccode\u003eLocation\u003c/code\u003e\u003c/a\u003e such that the block\n and all blocks above it are transparent for lighting purposes.",
              "tags": "Returns Highest non-empty block.",
              "plain": "Gets the lowest block at the given {@link Location} such that the block\n and all blocks above it are transparent for lighting purposes.\n@param location Coordinates to get the highest block\n@return Highest non-empty block"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHighestBlockYAt(int,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ],
            "comment": {
              "body": "Gets the y coordinate of the lowest block at this position such that the\n block and all blocks above it are transparent for lighting purposes.",
              "tags": "Returns Y-coordinate of the described block.",
              "plain": "Gets the y coordinate of the lowest block at this position such that the\n block and all blocks above it are transparent for lighting purposes.\n@param x X-coordinate of the blocks\n@param z Z-coordinate of the blocks\n@return Y-coordinate of the described block"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHighestBlockYAt(org.bukkit.Location)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "location"
              }
            ],
            "comment": {
              "body": "Gets the y coordinate of the lowest block at the given \u003ca href\u003d\"org/bukkit/Location.html\" title\u003d\"class in org.bukkit\"\u003e\u003ccode\u003eLocation\u003c/code\u003e\u003c/a\u003e\n such that the block and all blocks above it are transparent for lighting\n purposes.",
              "tags": "Returns Y-coordinate of the highest non-air block.",
              "plain": "Gets the y coordinate of the lowest block at the given {@link Location}\n such that the block and all blocks above it are transparent for lighting\n purposes.\n@param location Location of the blocks\n@return Y-coordinate of the highest non-air block"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHumidity(int,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ],
            "comment": {
              "body": "Gets the humidity for the given block coordinates.\n \u003cp\u003e\n It is safe to run this method when the block does not exist, it will\n not create the block.",
              "tags": "Returns Humidity of the requested block.",
              "plain": "Gets the humidity for the given block coordinates.\n \u003cp\u003e\n It is safe to run this method when the block does not exist, it will\n not create the block.\n@param x X coordinate of the block\n@param z Z coordinate of the block\n@return Humidity of the requested block"
            }
          },
          {
            "kind": "METHOD",
            "name": "getKeepSpawnInMemory()",
            "comment": {
              "body": "Gets whether the world\u0027s spawn area should be kept loaded into memory\n or not.",
              "tags": "Returns true if the world\u0027s spawn area will be kept loaded into memory..",
              "plain": "Gets whether the world\u0027s spawn area should be kept loaded into memory\n or not.\n@return true if the world\u0027s spawn area will be kept loaded into memory."
            }
          },
          {
            "kind": "METHOD",
            "name": "getLivingEntities()",
            "comment": {
              "body": "Get a list of all living entities in this World",
              "tags": "Returns A List of all LivingEntities currently residing in this world.",
              "plain": "Get a list of all living entities in this World\n@return A List of all LivingEntities currently residing in this world"
            }
          },
          {
            "kind": "METHOD",
            "name": "getLoadedChunks()",
            "comment": {
              "body": "Gets an array of all loaded \u003ca href\u003d\"org/bukkit/Chunk.html\" title\u003d\"interface in org.bukkit\"\u003e\u003ccode\u003eChunk\u003c/code\u003e\u003c/a\u003es",
              "tags": "Returns Chunk[] containing all loaded chunks.",
              "plain": "Gets an array of all loaded {@link Chunk}s\n@return Chunk[] containing all loaded chunks"
            }
          },
          {
            "kind": "METHOD",
            "name": "getLocationAtKey(long)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "key"
              }
            ],
            "comment": {
              "body": "Gets the \u003ca href\u003d\"org/bukkit/Location.html\" title\u003d\"class in org.bukkit\"\u003e\u003ccode\u003eLocation\u003c/code\u003e\u003c/a\u003e at the given block key",
              "tags": "Returns Location at the key.",
              "plain": "Gets the {@link Location} at the given block key\n@param key The block key. See {@link Location#toBlockKey()}\n@return Location at the key\n@see Location#toBlockKey()\n@see Block#getBlockKey()"
            }
          },
          {
            "kind": "METHOD",
            "name": "getMaxHeight()",
            "comment": {
              "body": "Gets the maximum height of this world.\n \u003cp\u003e\n If the max height is 100, there are only blocks from y\u003d0 to y\u003d99.",
              "tags": "Returns Maximum height of the world.",
              "plain": "Gets the maximum height of this world.\n \u003cp\u003e\n If the max height is 100, there are only blocks from y\u003d0 to y\u003d99.\n@return Maximum height of the world"
            }
          },
          {
            "kind": "METHOD",
            "name": "getMonsterSpawnLimit()",
            "comment": {
              "body": "Gets limit for number of monsters that can spawn in a chunk in this\n world",
              "tags": "Returns The monster spawn limit.",
              "plain": "Gets limit for number of monsters that can spawn in a chunk in this\n world\n@return The monster spawn limit"
            }
          },
          {
            "kind": "METHOD",
            "name": "getName()",
            "comment": {
              "body": "Gets the unique name of this world",
              "tags": "Returns Name of this world.",
              "plain": "Gets the unique name of this world\n@return Name of this world"
            }
          },
          {
            "kind": "METHOD",
            "name": "getNearbyEntities(org.bukkit.Location,double,double,double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "location"
              },
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "y"
              },
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ],
            "comment": {
              "body": "Returns a list of entities within a bounding box centered around a Location.\n\n Some implementations may impose artificial restrictions on the size of the search bounding box.",
              "tags": "Returns the collection of entities near location. This will always be a non-null collection..",
              "plain": "Returns a list of entities within a bounding box centered around a Location.\n\n Some implementations may impose artificial restrictions on the size of the search bounding box.\n@param location The center of the bounding box\n@param x 1/2 the size of the box along x axis\n@param y 1/2 the size of the box along y axis\n@param z 1/2 the size of the box along z axis\n@return the collection of entities near location. This will always be a non-null collection."
            }
          },
          {
            "kind": "METHOD",
            "name": "getNearbyLivingEntities(org.bukkit.Location,double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "loc"
              },
              {
                "kind": "PARAMETER",
                "name": "radius"
              }
            ],
            "comment": {
              "body": "Gets nearby players within the specified radius (bounding box)",
              "tags": "Returns the collection of entities near location. This will always be a non-null collection..",
              "plain": "Gets nearby players within the specified radius (bounding box)\n@param loc Center location\n@param radius Radius\n@return the collection of entities near location. This will always be a non-null collection."
            }
          },
          {
            "kind": "METHOD",
            "name": "getNearbyLivingEntities(org.bukkit.Location,double,double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "loc"
              },
              {
                "kind": "PARAMETER",
                "name": "xzRadius"
              },
              {
                "kind": "PARAMETER",
                "name": "yRadius"
              }
            ],
            "comment": {
              "body": "Gets nearby players within the specified radius (bounding box)",
              "tags": "Returns the collection of entities near location. This will always be a non-null collection..",
              "plain": "Gets nearby players within the specified radius (bounding box)\n@param loc Center location\n@param xzRadius X/Z Radius\n@param yRadius Y Radius\n@return the collection of entities near location. This will always be a non-null collection."
            }
          },
          {
            "kind": "METHOD",
            "name": "getNearbyLivingEntities(org.bukkit.Location,double,double,double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "loc"
              },
              {
                "kind": "PARAMETER",
                "name": "xRadius"
              },
              {
                "kind": "PARAMETER",
                "name": "yRadius"
              },
              {
                "kind": "PARAMETER",
                "name": "zRadius"
              }
            ],
            "comment": {
              "body": "Gets nearby players within the specified radius (bounding box)",
              "tags": "Returns the collection of entities near location. This will always be a non-null collection..",
              "plain": "Gets nearby players within the specified radius (bounding box)\n@param loc Center location\n@param xRadius X Radius\n@param yRadius Y Radius\n@param zRadius Z radius\n@return the collection of entities near location. This will always be a non-null collection."
            }
          },
          {
            "kind": "METHOD",
            "name": "getNearbyLivingEntities(org.bukkit.Location,double,double,double,java.util.function.Predicate\u003corg.bukkit.entity.LivingEntity\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "loc"
              },
              {
                "kind": "PARAMETER",
                "name": "predicate"
              },
              {
                "kind": "PARAMETER",
                "name": "xRadius"
              },
              {
                "kind": "PARAMETER",
                "name": "yRadius"
              },
              {
                "kind": "PARAMETER",
                "name": "zRadius"
              }
            ],
            "comment": {
              "body": "Gets nearby players within the specified radius (bounding box)",
              "tags": "Returns the collection of living entities near location. This will always be a non-null collection..",
              "plain": "Gets nearby players within the specified radius (bounding box)\n@param loc Center location\n@param xRadius X Radius\n@param yRadius Y Radius\n@param zRadius Z radius\n@param predicate a predicate used to filter results\n@return the collection of living entities near location. This will always be a non-null collection."
            }
          },
          {
            "kind": "METHOD",
            "name": "getNearbyLivingEntities(org.bukkit.Location,double,double,java.util.function.Predicate\u003corg.bukkit.entity.LivingEntity\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "loc"
              },
              {
                "kind": "PARAMETER",
                "name": "predicate"
              },
              {
                "kind": "PARAMETER",
                "name": "xzRadius"
              },
              {
                "kind": "PARAMETER",
                "name": "yRadius"
              }
            ],
            "comment": {
              "body": "Gets nearby players within the specified radius (bounding box)",
              "tags": "Returns the collection of living entities near location. This will always be a non-null collection.",
              "plain": "Gets nearby players within the specified radius (bounding box)\n@param loc Center location\n@param xzRadius X/Z Radius\n@param yRadius Y Radius\n@param predicate a predicate used to filter results\n@return the collection of living entities near location. This will always be a non-null collection"
            }
          },
          {
            "kind": "METHOD",
            "name": "getNearbyLivingEntities(org.bukkit.Location,double,java.util.function.Predicate\u003corg.bukkit.entity.LivingEntity\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "loc"
              },
              {
                "kind": "PARAMETER",
                "name": "predicate"
              },
              {
                "kind": "PARAMETER",
                "name": "radius"
              }
            ],
            "comment": {
              "body": "Gets nearby players within the specified radius (bounding box)",
              "tags": "Returns the collection of living entities near location. This will always be a non-null collection.",
              "plain": "Gets nearby players within the specified radius (bounding box)\n@param loc Center location\n@param radius X Radius\n@param predicate a predicate used to filter results\n@return the collection of living entities near location. This will always be a non-null collection"
            }
          },
          {
            "kind": "METHOD",
            "name": "getNearbyPlayers(org.bukkit.Location,double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "loc"
              },
              {
                "kind": "PARAMETER",
                "name": "radius"
              }
            ],
            "comment": {
              "body": "Gets nearby players within the specified radius (bounding box)",
              "tags": "Returns the collection of living entities near location. This will always be a non-null collection..",
              "plain": "Gets nearby players within the specified radius (bounding box)\n@param loc Center location\n@param radius X/Y/Z Radius\n@return the collection of living entities near location. This will always be a non-null collection."
            }
          },
          {
            "kind": "METHOD",
            "name": "getNearbyPlayers(org.bukkit.Location,double,double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "loc"
              },
              {
                "kind": "PARAMETER",
                "name": "xzRadius"
              },
              {
                "kind": "PARAMETER",
                "name": "yRadius"
              }
            ],
            "comment": {
              "body": "Gets nearby players within the specified radius (bounding box)",
              "tags": "Returns the collection of living entities near location. This will always be a non-null collection..",
              "plain": "Gets nearby players within the specified radius (bounding box)\n@param loc Center location\n@param xzRadius X/Z Radius\n@param yRadius Y Radius\n@return the collection of living entities near location. This will always be a non-null collection."
            }
          },
          {
            "kind": "METHOD",
            "name": "getNearbyPlayers(org.bukkit.Location,double,double,double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "loc"
              },
              {
                "kind": "PARAMETER",
                "name": "xRadius"
              },
              {
                "kind": "PARAMETER",
                "name": "yRadius"
              },
              {
                "kind": "PARAMETER",
                "name": "zRadius"
              }
            ],
            "comment": {
              "body": "Gets nearby players within the specified radius (bounding box)",
              "tags": "Returns the collection of players near location. This will always be a non-null collection..",
              "plain": "Gets nearby players within the specified radius (bounding box)\n@param loc Center location\n@param xRadius X Radius\n@param yRadius Y Radius\n@param zRadius Z Radius\n@return the collection of players near location. This will always be a non-null collection."
            }
          },
          {
            "kind": "METHOD",
            "name": "getNearbyPlayers(org.bukkit.Location,double,double,double,java.util.function.Predicate\u003corg.bukkit.entity.Player\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "loc"
              },
              {
                "kind": "PARAMETER",
                "name": "predicate"
              },
              {
                "kind": "PARAMETER",
                "name": "xRadius"
              },
              {
                "kind": "PARAMETER",
                "name": "yRadius"
              },
              {
                "kind": "PARAMETER",
                "name": "zRadius"
              }
            ],
            "comment": {
              "body": "Gets nearby players within the specified radius (bounding box)",
              "tags": "Returns the collection of players near location. This will always be a non-null collection..",
              "plain": "Gets nearby players within the specified radius (bounding box)\n@param loc Center location\n@param xRadius X Radius\n@param yRadius Y Radius\n@param zRadius Z Radius\n@param predicate a predicate used to filter results\n@return the collection of players near location. This will always be a non-null collection."
            }
          },
          {
            "kind": "METHOD",
            "name": "getNearbyPlayers(org.bukkit.Location,double,double,java.util.function.Predicate\u003corg.bukkit.entity.Player\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "loc"
              },
              {
                "kind": "PARAMETER",
                "name": "predicate"
              },
              {
                "kind": "PARAMETER",
                "name": "xzRadius"
              },
              {
                "kind": "PARAMETER",
                "name": "yRadius"
              }
            ],
            "comment": {
              "body": "Gets nearby players within the specified radius (bounding box)",
              "tags": "Returns the collection of players near location. This will always be a non-null collection..",
              "plain": "Gets nearby players within the specified radius (bounding box)\n@param loc Center location\n@param xzRadius X/Z Radius\n@param yRadius Y Radius\n@param predicate a predicate used to filter results\n@return the collection of players near location. This will always be a non-null collection."
            }
          },
          {
            "kind": "METHOD",
            "name": "getNearbyPlayers(org.bukkit.Location,double,java.util.function.Predicate\u003corg.bukkit.entity.Player\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "loc"
              },
              {
                "kind": "PARAMETER",
                "name": "predicate"
              },
              {
                "kind": "PARAMETER",
                "name": "radius"
              }
            ],
            "comment": {
              "body": "Gets nearby players within the specified radius (bounding box)",
              "tags": "Returns the collection of players near location. This will always be a non-null collection..",
              "plain": "Gets nearby players within the specified radius (bounding box)\n@param loc Center location\n@param radius X/Y/Z Radius\n@param predicate a predicate used to filter results\n@return the collection of players near location. This will always be a non-null collection."
            }
          },
          {
            "kind": "METHOD",
            "name": "getPVP()",
            "comment": {
              "body": "Gets the current PVP setting for this world.",
              "tags": "Returns True if PVP is enabled.",
              "plain": "Gets the current PVP setting for this world.\n@return True if PVP is enabled"
            }
          },
          {
            "kind": "METHOD",
            "name": "getPlayerCount()",
            "comment": {
              "tags": "Returns The amount of Players in this world.",
              "plain": "@return The amount of Players in this world"
            }
          },
          {
            "kind": "METHOD",
            "name": "getPlayers()",
            "comment": {
              "body": "Get a list of all players in this World",
              "tags": "Returns A list of all Players currently residing in this world.",
              "plain": "Get a list of all players in this World\n@return A list of all Players currently residing in this world"
            }
          },
          {
            "kind": "METHOD",
            "name": "getPopulators()",
            "comment": {
              "body": "Gets a list of all applied \u003ca href\u003d\"org/bukkit/generator/BlockPopulator.html\" title\u003d\"class in org.bukkit.generator\"\u003e\u003ccode\u003eBlockPopulator\u003c/code\u003e\u003c/a\u003es for this World",
              "tags": "Returns List containing any or none BlockPopulators.",
              "plain": "Gets a list of all applied {@link BlockPopulator}s for this World\n@return List containing any or none BlockPopulators"
            }
          },
          {
            "kind": "METHOD",
            "name": "getSeaLevel()",
            "comment": {
              "body": "Gets the sea level for this world.\n \u003cp\u003e\n This is often half of \u003ca href\u003d\"org/bukkit/World.html#getMaxHeight()\"\u003e\u003ccode\u003eWorld.getMaxHeight()\u003c/code\u003e\u003c/a\u003e",
              "tags": "Returns Sea level.",
              "plain": "Gets the sea level for this world.\n \u003cp\u003e\n This is often half of {@link #getMaxHeight()}\n@return Sea level"
            }
          },
          {
            "kind": "METHOD",
            "name": "getSeed()",
            "comment": {
              "body": "Gets the Seed for this world.",
              "tags": "Returns This worlds Seed.",
              "plain": "Gets the Seed for this world.\n@return This worlds Seed"
            }
          },
          {
            "kind": "METHOD",
            "name": "getSpawnLocation()",
            "comment": {
              "body": "Gets the default spawn \u003ca href\u003d\"org/bukkit/Location.html\" title\u003d\"class in org.bukkit\"\u003e\u003ccode\u003eLocation\u003c/code\u003e\u003c/a\u003e of this world",
              "tags": "Returns The spawn location of this world.",
              "plain": "Gets the default spawn {@link Location} of this world\n@return The spawn location of this world"
            }
          },
          {
            "kind": "METHOD",
            "name": "getTemperature(int,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ],
            "comment": {
              "body": "Gets the temperature for the given block coordinates.\n \u003cp\u003e\n It is safe to run this method when the block does not exist, it will\n not create the block.",
              "tags": "Returns Temperature of the requested block.",
              "plain": "Gets the temperature for the given block coordinates.\n \u003cp\u003e\n It is safe to run this method when the block does not exist, it will\n not create the block.\n@param x X coordinate of the block\n@param z Z coordinate of the block\n@return Temperature of the requested block"
            }
          },
          {
            "kind": "METHOD",
            "name": "getThunderDuration()",
            "comment": {
              "body": "Get the thundering duration.",
              "tags": "Returns Duration in ticks.",
              "plain": "Get the thundering duration.\n@return Duration in ticks"
            }
          },
          {
            "kind": "METHOD",
            "name": "getTickableTileEntityCount()",
            "comment": {
              "tags": "Returns The amount of Tickable Tile Entities in this world.",
              "plain": "@return The amount of Tickable Tile Entities in this world"
            }
          },
          {
            "kind": "METHOD",
            "name": "getTicksPerAnimalSpawns()",
            "comment": {
              "body": "Gets the world\u0027s ticks per animal spawns value\n \u003cp\u003e\n This value determines how many ticks there are between attempts to\n spawn animals.\n \u003cp\u003e\n \u003cb\u003eExample Usage:\u003c/b\u003e\n \u003cul\u003e\n \u003cli\u003eA value of 1 will mean the server will attempt to spawn animals in\n     this world every tick.\n \u003cli\u003eA value of 400 will mean the server will attempt to spawn animals\n     in this world every 400th tick.\n \u003cli\u003eA value below 0 will be reset back to Minecraft\u0027s default.\n \u003c/ul\u003e\n \u003cp\u003e\n \u003cb\u003eNote:\u003c/b\u003e\n If set to 0, animal spawning will be disabled for this world. We\n recommend using \u003ca href\u003d\"org/bukkit/World.html#setSpawnFlags(boolean,boolean)\"\u003e\u003ccode\u003eWorld.setSpawnFlags(boolean, boolean)\u003c/code\u003e\u003c/a\u003e to control\n this instead.\n \u003cp\u003e\n Minecraft default: 400.",
              "tags": "Returns The world\u0027s ticks per animal spawns value.",
              "plain": "Gets the world\u0027s ticks per animal spawns value\n \u003cp\u003e\n This value determines how many ticks there are between attempts to\n spawn animals.\n \u003cp\u003e\n \u003cb\u003eExample Usage:\u003c/b\u003e\n \u003cul\u003e\n \u003cli\u003eA value of 1 will mean the server will attempt to spawn animals in\n     this world every tick.\n \u003cli\u003eA value of 400 will mean the server will attempt to spawn animals\n     in this world every 400th tick.\n \u003cli\u003eA value below 0 will be reset back to Minecraft\u0027s default.\n \u003c/ul\u003e\n \u003cp\u003e\n \u003cb\u003eNote:\u003c/b\u003e\n If set to 0, animal spawning will be disabled for this world. We\n recommend using {@link #setSpawnFlags(boolean, boolean)} to control\n this instead.\n \u003cp\u003e\n Minecraft default: 400.\n@return The world\u0027s ticks per animal spawns value"
            }
          },
          {
            "kind": "METHOD",
            "name": "getTicksPerMonsterSpawns()",
            "comment": {
              "body": "Gets the world\u0027s ticks per monster spawns value\n \u003cp\u003e\n This value determines how many ticks there are between attempts to\n spawn monsters.\n \u003cp\u003e\n \u003cb\u003eExample Usage:\u003c/b\u003e\n \u003cul\u003e\n \u003cli\u003eA value of 1 will mean the server will attempt to spawn monsters in\n     this world every tick.\n \u003cli\u003eA value of 400 will mean the server will attempt to spawn monsters\n     in this world every 400th tick.\n \u003cli\u003eA value below 0 will be reset back to Minecraft\u0027s default.\n \u003c/ul\u003e\n \u003cp\u003e\n \u003cb\u003eNote:\u003c/b\u003e\n If set to 0, monsters spawning will be disabled for this world. We\n recommend using \u003ca href\u003d\"org/bukkit/World.html#setSpawnFlags(boolean,boolean)\"\u003e\u003ccode\u003eWorld.setSpawnFlags(boolean, boolean)\u003c/code\u003e\u003c/a\u003e to control\n this instead.\n \u003cp\u003e\n Minecraft default: 1.",
              "tags": "Returns The world\u0027s ticks per monster spawns value.",
              "plain": "Gets the world\u0027s ticks per monster spawns value\n \u003cp\u003e\n This value determines how many ticks there are between attempts to\n spawn monsters.\n \u003cp\u003e\n \u003cb\u003eExample Usage:\u003c/b\u003e\n \u003cul\u003e\n \u003cli\u003eA value of 1 will mean the server will attempt to spawn monsters in\n     this world every tick.\n \u003cli\u003eA value of 400 will mean the server will attempt to spawn monsters\n     in this world every 400th tick.\n \u003cli\u003eA value below 0 will be reset back to Minecraft\u0027s default.\n \u003c/ul\u003e\n \u003cp\u003e\n \u003cb\u003eNote:\u003c/b\u003e\n If set to 0, monsters spawning will be disabled for this world. We\n recommend using {@link #setSpawnFlags(boolean, boolean)} to control\n this instead.\n \u003cp\u003e\n Minecraft default: 1.\n@return The world\u0027s ticks per monster spawns value"
            }
          },
          {
            "kind": "METHOD",
            "name": "getTileEntityCount()",
            "comment": {
              "tags": "Returns The amount of Tile Entities in this world.",
              "plain": "@return The amount of Tile Entities in this world"
            }
          },
          {
            "kind": "METHOD",
            "name": "getTime()",
            "comment": {
              "body": "Gets the relative in-game time of this world.\n \u003cp\u003e\n The relative time is analogous to hours * 1000",
              "tags": "Returns The current relative time.",
              "plain": "Gets the relative in-game time of this world.\n \u003cp\u003e\n The relative time is analogous to hours * 1000\n@return The current relative time\n@see #getFullTime() Returns an absolute time of this world"
            }
          },
          {
            "kind": "METHOD",
            "name": "getUID()",
            "comment": {
              "body": "Gets the Unique ID of this world",
              "tags": "Returns Unique ID of this world..",
              "plain": "Gets the Unique ID of this world\n@return Unique ID of this world."
            }
          },
          {
            "kind": "METHOD",
            "name": "getWaterAnimalSpawnLimit()",
            "comment": {
              "body": "Gets the limit for number of water animals that can spawn in a chunk in\n this world",
              "tags": "Returns The water animal spawn limit.",
              "plain": "Gets the limit for number of water animals that can spawn in a chunk in\n this world\n@return The water animal spawn limit"
            }
          },
          {
            "kind": "METHOD",
            "name": "getWeatherDuration()",
            "comment": {
              "body": "Get the remaining time in ticks of the current conditions.",
              "tags": "Returns Time in ticks.",
              "plain": "Get the remaining time in ticks of the current conditions.\n@return Time in ticks"
            }
          },
          {
            "kind": "METHOD",
            "name": "getWorldBorder()",
            "comment": {
              "body": "Gets the world border for this world.",
              "tags": "Returns The world border for this world..",
              "plain": "Gets the world border for this world.\n@return The world border for this world."
            }
          },
          {
            "kind": "METHOD",
            "name": "getWorldFolder()",
            "comment": {
              "body": "Gets the folder of this world on disk.",
              "tags": "Returns The folder of this world..",
              "plain": "Gets the folder of this world on disk.\n@return The folder of this world."
            }
          },
          {
            "kind": "METHOD",
            "name": "getWorldType()",
            "comment": {
              "body": "Gets the type of this world.",
              "tags": "Returns Type of this world..",
              "plain": "Gets the type of this world.\n@return Type of this world."
            }
          },
          {
            "kind": "METHOD",
            "name": "hasStorm()",
            "comment": {
              "body": "Returns whether the world has an ongoing storm.",
              "tags": "Returns Whether there is an ongoing storm.",
              "plain": "Returns whether the world has an ongoing storm.\n@return Whether there is an ongoing storm"
            }
          },
          {
            "kind": "METHOD",
            "name": "isAutoSave()",
            "comment": {
              "body": "Gets whether or not the world will automatically save",
              "tags": "Returns true if the world will automatically save, otherwise false.",
              "plain": "Gets whether or not the world will automatically save\n@return true if the world will automatically save, otherwise false"
            }
          },
          {
            "kind": "METHOD",
            "name": "isChunkGenerated(int,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ],
            "comment": {
              "body": "Checks if a \u003ca href\u003d\"org/bukkit/Chunk.html\" title\u003d\"interface in org.bukkit\"\u003e\u003ccode\u003eChunk\u003c/code\u003e\u003c/a\u003e has been generated at the given coordinates.",
              "tags": "Returns true if the chunk has been generated, otherwise false.",
              "plain": "Checks if a {@link Chunk} has been generated at the given coordinates.\n@param x X-coordinate of the chunk\n@param z Z-coordinate of the chunk\n@return true if the chunk has been generated, otherwise false"
            }
          },
          {
            "kind": "METHOD",
            "name": "isChunkGenerated(long)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "chunkKey"
              }
            ],
            "comment": {
              "body": "Checks if a \u003ca href\u003d\"org/bukkit/Chunk.html\" title\u003d\"interface in org.bukkit\"\u003e\u003ccode\u003eChunk\u003c/code\u003e\u003c/a\u003e has been generated at the specified chunk key,\n which is the X and Z packed into a long.",
              "tags": "Returns true if the chunk has been generated, otherwise false.",
              "plain": "Checks if a {@link Chunk} has been generated at the specified chunk key,\n which is the X and Z packed into a long.\n@param chunkKey The Chunk Key to look up the chunk by\n@return true if the chunk has been generated, otherwise false"
            }
          },
          {
            "kind": "METHOD",
            "name": "isChunkInUse(int,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ],
            "comment": {
              "body": "Checks if the \u003ca href\u003d\"org/bukkit/Chunk.html\" title\u003d\"interface in org.bukkit\"\u003e\u003ccode\u003eChunk\u003c/code\u003e\u003c/a\u003e at the specified coordinates is loaded and\n in use by one or more players",
              "tags": "Returns true if the chunk is loaded and in use by one or more players,\n     otherwise false.",
              "plain": "Checks if the {@link Chunk} at the specified coordinates is loaded and\n in use by one or more players\n@param x X-coordinate of the chunk\n@param z Z-coordinate of the chunk\n@return true if the chunk is loaded and in use by one or more players,\n     otherwise false"
            }
          },
          {
            "kind": "METHOD",
            "name": "isChunkLoaded(int,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ],
            "comment": {
              "body": "Checks if the \u003ca href\u003d\"org/bukkit/Chunk.html\" title\u003d\"interface in org.bukkit\"\u003e\u003ccode\u003eChunk\u003c/code\u003e\u003c/a\u003e at the specified coordinates is loaded",
              "tags": "Returns true if the chunk is loaded, otherwise false.",
              "plain": "Checks if the {@link Chunk} at the specified coordinates is loaded\n@param x X-coordinate of the chunk\n@param z Z-coordinate of the chunk\n@return true if the chunk is loaded, otherwise false"
            }
          },
          {
            "kind": "METHOD",
            "name": "isChunkLoaded(org.bukkit.Chunk)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "chunk"
              }
            ],
            "comment": {
              "body": "Checks if the specified \u003ca href\u003d\"org/bukkit/Chunk.html\" title\u003d\"interface in org.bukkit\"\u003e\u003ccode\u003eChunk\u003c/code\u003e\u003c/a\u003e is loaded",
              "tags": "Returns true if the chunk is loaded, otherwise false.",
              "plain": "Checks if the specified {@link Chunk} is loaded\n@param chunk The chunk to check\n@return true if the chunk is loaded, otherwise false"
            }
          },
          {
            "kind": "METHOD",
            "name": "isGameRule(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "rule"
              }
            ],
            "comment": {
              "body": "Checks if string is a valid game rule",
              "tags": "Returns True if rule exists.",
              "plain": "Checks if string is a valid game rule\n@param rule Rule to check\n@return True if rule exists"
            }
          },
          {
            "kind": "METHOD",
            "name": "isThundering()",
            "comment": {
              "body": "Returns whether there is thunder.",
              "tags": "Returns Whether there is thunder.",
              "plain": "Returns whether there is thunder.\n@return Whether there is thunder"
            }
          },
          {
            "kind": "METHOD",
            "name": "loadChunk(int,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ],
            "comment": {
              "body": "Loads the \u003ca href\u003d\"org/bukkit/Chunk.html\" title\u003d\"interface in org.bukkit\"\u003e\u003ccode\u003eChunk\u003c/code\u003e\u003c/a\u003e at the specified coordinates\n \u003cp\u003e\n If the chunk does not exist, it will be generated.\n \u003cp\u003e\n This method is analogous to \u003ca href\u003d\"org/bukkit/World.html#loadChunk(int,int,boolean)\"\u003e\u003ccode\u003eWorld.loadChunk(int, int, boolean)\u003c/code\u003e\u003c/a\u003e where\n generate is true.",
              "plain": "Loads the {@link Chunk} at the specified coordinates\n \u003cp\u003e\n If the chunk does not exist, it will be generated.\n \u003cp\u003e\n This method is analogous to {@link #loadChunk(int, int, boolean)} where\n generate is true.\n@param x X-coordinate of the chunk\n@param z Z-coordinate of the chunk"
            }
          },
          {
            "kind": "METHOD",
            "name": "loadChunk(int,int,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "generate"
              },
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ],
            "comment": {
              "body": "Loads the \u003ca href\u003d\"org/bukkit/Chunk.html\" title\u003d\"interface in org.bukkit\"\u003e\u003ccode\u003eChunk\u003c/code\u003e\u003c/a\u003e at the specified coordinates",
              "tags": "Returns true if the chunk has loaded successfully, otherwise false.",
              "plain": "Loads the {@link Chunk} at the specified coordinates\n@param x X-coordinate of the chunk\n@param z Z-coordinate of the chunk\n@param generate Whether or not to generate a chunk if it doesn\u0027t\n     already exist\n@return true if the chunk has loaded successfully, otherwise false"
            }
          },
          {
            "kind": "METHOD",
            "name": "loadChunk(org.bukkit.Chunk)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "chunk"
              }
            ],
            "comment": {
              "body": "Loads the specified \u003ca href\u003d\"org/bukkit/Chunk.html\" title\u003d\"interface in org.bukkit\"\u003e\u003ccode\u003eChunk\u003c/code\u003e\u003c/a\u003e",
              "plain": "Loads the specified {@link Chunk}\n@param chunk The chunk to load"
            }
          },
          {
            "kind": "INTERFACE",
            "name": "org.bukkit.World.ChunkLoadCallback",
            "children": [
              {
                "kind": "METHOD",
                "name": "onLoad(org.bukkit.Chunk)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "chunk"
                  }
                ]
              }
            ],
            "comment": {
              "body": "Used by \u003ca href\u003d\"org/bukkit/World.html#getChunkAtAsync(org.bukkit.Location,org.bukkit.World.ChunkLoadCallback)\"\u003e\u003ccode\u003eWorld.getChunkAtAsync(Location,ChunkLoadCallback)\u003c/code\u003e\u003c/a\u003e methods\n to request a \u003ca href\u003d\"org/bukkit/Chunk.html\" title\u003d\"interface in org.bukkit\"\u003e\u003ccode\u003eChunk\u003c/code\u003e\u003c/a\u003e to be loaded, with this callback receiving\n the chunk when it is finished.\n\n This callback will be executed on synchronously on the main thread.\n\n Timing and order this callback is fired is intentionally not defined and\n and subject to change.",
              "plain": "Used by {@link World#getChunkAtAsync(Location,ChunkLoadCallback)} methods\n to request a {@link Chunk} to be loaded, with this callback receiving\n the chunk when it is finished.\n\n This callback will be executed on synchronously on the main thread.\n\n Timing and order this callback is fired is intentionally not defined and\n and subject to change."
            }
          },
          {
            "kind": "ENUM",
            "name": "org.bukkit.World.Environment",
            "children": [
              {
                "kind": "CONSTRUCTOR",
                "name": "Environment(int)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "id"
                  }
                ]
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "NETHER",
                "comment": {
                  "body": "Represents a nether based map (\"hell\")",
                  "plain": "Represents a nether based map (\"hell\")"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "NORMAL",
                "comment": {
                  "body": "Represents the \"normal\"/\"surface world\" map",
                  "plain": "Represents the \"normal\"/\"surface world\" map"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "THE_END",
                "comment": {
                  "body": "Represents the \"end\" map",
                  "plain": "Represents the \"end\" map"
                }
              },
              {
                "kind": "METHOD",
                "name": "getEnvironment(int)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "id"
                  }
                ],
                "deprecated": {
                  "deprecated": "true"
                },
                "comment": {
                  "body": "Get an environment by ID",
                  "tags": "Returns The environment.",
                  "plain": "Get an environment by ID\n@param id The ID of the environment\n@return The environment\n@deprecated Magic value"
                }
              },
              {
                "kind": "METHOD",
                "name": "getId()",
                "deprecated": {
                  "deprecated": "true"
                },
                "comment": {
                  "body": "Gets the dimension ID of this environment",
                  "tags": "Returns dimension ID.",
                  "plain": "Gets the dimension ID of this environment\n@return dimension ID\n@deprecated Magic value"
                }
              },
              {
                "kind": "FIELD",
                "name": "id"
              },
              {
                "kind": "FIELD",
                "name": "lookup"
              },
              {
                "kind": "METHOD",
                "name": "valueOf(java.lang.String)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "name"
                  }
                ]
              },
              {
                "kind": "METHOD",
                "name": "values()"
              }
            ],
            "comment": {
              "body": "Represents various map environment types that a world may be",
              "plain": "Represents various map environment types that a world may be"
            }
          },
          {
            "kind": "CLASS",
            "name": "org.bukkit.World.Spigot",
            "children": [
              {
                "kind": "CONSTRUCTOR",
                "name": "Spigot()"
              },
              {
                "kind": "METHOD",
                "name": "playEffect(org.bukkit.Location,org.bukkit.Effect)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "effect"
                  },
                  {
                    "kind": "PARAMETER",
                    "name": "location"
                  }
                ],
                "deprecated": {
                  "deprecated": "true"
                },
                "comment": {
                  "body": "Plays an effect to all players within a default radius around a given\n location.",
                  "plain": "Plays an effect to all players within a default radius around a given\n location.\n@param location the {@link Location} around which players must be to\n see the effect\n@param effect the {@link Effect}\n@throws IllegalArgumentException if the location or effect is null.\n It also throws when the effect requires a material or a material data\n@deprecated Spigot specific API, use {@link Particle}."
                }
              },
              {
                "kind": "METHOD",
                "name": "playEffect(org.bukkit.Location,org.bukkit.Effect,int,int,float,float,float,float,int,int)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "data"
                  },
                  {
                    "kind": "PARAMETER",
                    "name": "effect"
                  },
                  {
                    "kind": "PARAMETER",
                    "name": "id"
                  },
                  {
                    "kind": "PARAMETER",
                    "name": "location"
                  },
                  {
                    "kind": "PARAMETER",
                    "name": "offsetX"
                  },
                  {
                    "kind": "PARAMETER",
                    "name": "offsetY"
                  },
                  {
                    "kind": "PARAMETER",
                    "name": "offsetZ"
                  },
                  {
                    "kind": "PARAMETER",
                    "name": "particleCount"
                  },
                  {
                    "kind": "PARAMETER",
                    "name": "radius"
                  },
                  {
                    "kind": "PARAMETER",
                    "name": "speed"
                  }
                ],
                "deprecated": {
                  "deprecated": "true"
                },
                "comment": {
                  "body": "Plays an effect to all players within a default radius around a given\n location. The effect will use the provided material (and material\n data if required). The particle\u0027s position on the client will be the\n given location, adjusted on each axis by a normal distribution with\n mean 0 and standard deviation given in the offset parameters, each\n particle has independently calculated offsets. The effect will have\n the given speed and particle count if the effect is a particle. Some\n effect will create multiple particles.",
                  "plain": "Plays an effect to all players within a default radius around a given\n location. The effect will use the provided material (and material\n data if required). The particle\u0027s position on the client will be the\n given location, adjusted on each axis by a normal distribution with\n mean 0 and standard deviation given in the offset parameters, each\n particle has independently calculated offsets. The effect will have\n the given speed and particle count if the effect is a particle. Some\n effect will create multiple particles.\n@param location the {@link Location} around which players must be to\n see the effect\n@param effect effect the {@link Effect}\n@param id the item/block/data id for the effect\n@param data the data value of the block/item for the effect\n@param offsetX the amount to be randomly offset by in the X axis\n@param offsetY the amount to be randomly offset by in the Y axis\n@param offsetZ the amount to be randomly offset by in the Z axis\n@param speed the speed of the particles\n@param particleCount the number of particles\n@param radius the radius around the location\n@deprecated Spigot specific API, use {@link Particle}."
                }
              },
              {
                "kind": "METHOD",
                "name": "strikeLightning(org.bukkit.Location,boolean)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "isSilent"
                  },
                  {
                    "kind": "PARAMETER",
                    "name": "loc"
                  }
                ],
                "comment": {
                  "body": "Strikes lightning at the given \u003ca href\u003d\"org/bukkit/Location.html\" title\u003d\"class in org.bukkit\"\u003e\u003ccode\u003eLocation\u003c/code\u003e\u003c/a\u003e and possibly without sound",
                  "tags": "Returns The lightning entity..",
                  "plain": "Strikes lightning at the given {@link Location} and possibly without sound\n@param loc The location to strike lightning\n@param isSilent Whether this strike makes no sound\n@return The lightning entity."
                }
              },
              {
                "kind": "METHOD",
                "name": "strikeLightningEffect(org.bukkit.Location,boolean)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "isSilent"
                  },
                  {
                    "kind": "PARAMETER",
                    "name": "loc"
                  }
                ],
                "comment": {
                  "body": "Strikes lightning at the given \u003ca href\u003d\"org/bukkit/Location.html\" title\u003d\"class in org.bukkit\"\u003e\u003ccode\u003eLocation\u003c/code\u003e\u003c/a\u003e without doing damage and possibly without sound",
                  "tags": "Returns The lightning entity..",
                  "plain": "Strikes lightning at the given {@link Location} without doing damage and possibly without sound\n@param loc The location to strike lightning\n@param isSilent Whether this strike makes no sound\n@return The lightning entity."
                }
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "playEffect(org.bukkit.Location,org.bukkit.Effect,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "effect"
              },
              {
                "kind": "PARAMETER",
                "name": "location"
              }
            ],
            "comment": {
              "body": "Plays an effect to all players within a default radius around a given\n location.",
              "plain": "Plays an effect to all players within a default radius around a given\n location.\n@param location the {@link Location} around which players must be to\n     hear the sound\n@param effect the {@link Effect}\n@param data a data bit needed for some effects"
            }
          },
          {
            "kind": "METHOD",
            "name": "playEffect(org.bukkit.Location,org.bukkit.Effect,int,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "effect"
              },
              {
                "kind": "PARAMETER",
                "name": "location"
              },
              {
                "kind": "PARAMETER",
                "name": "radius"
              }
            ],
            "comment": {
              "body": "Plays an effect to all players within a given radius around a location.",
              "plain": "Plays an effect to all players within a given radius around a location.\n@param location the {@link Location} around which players must be to\n     hear the effect\n@param effect the {@link Effect}\n@param data a data bit needed for some effects\n@param radius the radius around the location"
            }
          },
          {
            "kind": "METHOD",
            "name": "playSound(org.bukkit.Location,java.lang.String,float,float)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "location"
              },
              {
                "kind": "PARAMETER",
                "name": "pitch"
              },
              {
                "kind": "PARAMETER",
                "name": "sound"
              },
              {
                "kind": "PARAMETER",
                "name": "volume"
              }
            ],
            "comment": {
              "body": "Play a Sound at the provided Location in the World.\n \u003cp\u003e\n This function will fail silently if Location or Sound are null. No\n sound will be heard by the players if their clients do not have the\n respective sound for the value passed.",
              "plain": "Play a Sound at the provided Location in the World.\n \u003cp\u003e\n This function will fail silently if Location or Sound are null. No\n sound will be heard by the players if their clients do not have the\n respective sound for the value passed.\n@param location the location to play the sound\n@param sound the internal sound name to play\n@param volume the volume of the sound\n@param pitch the pitch of the sound"
            }
          },
          {
            "kind": "METHOD",
            "name": "playSound(org.bukkit.Location,java.lang.String,org.bukkit.SoundCategory,float,float)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "category"
              },
              {
                "kind": "PARAMETER",
                "name": "location"
              },
              {
                "kind": "PARAMETER",
                "name": "pitch"
              },
              {
                "kind": "PARAMETER",
                "name": "sound"
              },
              {
                "kind": "PARAMETER",
                "name": "volume"
              }
            ],
            "comment": {
              "body": "Play a Sound at the provided Location in the World.\n \u003cp\u003e\n This function will fail silently if Location or Sound are null. No sound\n will be heard by the players if their clients do not have the respective\n sound for the value passed.",
              "plain": "Play a Sound at the provided Location in the World.\n \u003cp\u003e\n This function will fail silently if Location or Sound are null. No sound\n will be heard by the players if their clients do not have the respective\n sound for the value passed.\n@param location the location to play the sound\n@param sound the internal sound name to play\n@param category the category of the sound\n@param volume the volume of the sound\n@param pitch the pitch of the sound"
            }
          },
          {
            "kind": "METHOD",
            "name": "playSound(org.bukkit.Location,org.bukkit.Sound,float,float)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "location"
              },
              {
                "kind": "PARAMETER",
                "name": "pitch"
              },
              {
                "kind": "PARAMETER",
                "name": "sound"
              },
              {
                "kind": "PARAMETER",
                "name": "volume"
              }
            ],
            "comment": {
              "body": "Play a Sound at the provided Location in the World\n \u003cp\u003e\n This function will fail silently if Location or Sound are null.",
              "plain": "Play a Sound at the provided Location in the World\n \u003cp\u003e\n This function will fail silently if Location or Sound are null.\n@param location The location to play the sound\n@param sound The sound to play\n@param volume The volume of the sound\n@param pitch The pitch of the sound"
            }
          },
          {
            "kind": "METHOD",
            "name": "playSound(org.bukkit.Location,org.bukkit.Sound,org.bukkit.SoundCategory,float,float)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "category"
              },
              {
                "kind": "PARAMETER",
                "name": "location"
              },
              {
                "kind": "PARAMETER",
                "name": "pitch"
              },
              {
                "kind": "PARAMETER",
                "name": "sound"
              },
              {
                "kind": "PARAMETER",
                "name": "volume"
              }
            ],
            "comment": {
              "body": "Play a Sound at the provided Location in the World.\n \u003cp\u003e\n This function will fail silently if Location or Sound are null.",
              "plain": "Play a Sound at the provided Location in the World.\n \u003cp\u003e\n This function will fail silently if Location or Sound are null.\n@param location The location to play the sound\n@param sound The sound to play\n@param category the category of the sound\n@param volume The volume of the sound\n@param pitch The pitch of the sound"
            }
          },
          {
            "kind": "METHOD",
            "name": "refreshChunk(int,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Resends the \u003ca href\u003d\"org/bukkit/Chunk.html\" title\u003d\"interface in org.bukkit\"\u003e\u003ccode\u003eChunk\u003c/code\u003e\u003c/a\u003e to all clients",
              "tags": "Returns Whether the chunk was actually refreshed.",
              "plain": "Resends the {@link Chunk} to all clients\n@param x X-coordinate of the chunk\n@param z Z-coordinate of the chunk\n@return Whether the chunk was actually refreshed\n@deprecated This method is not guaranteed to work suitably across all client implementations."
            }
          },
          {
            "kind": "METHOD",
            "name": "regenerateChunk(int,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ],
            "comment": {
              "body": "Regenerates the \u003ca href\u003d\"org/bukkit/Chunk.html\" title\u003d\"interface in org.bukkit\"\u003e\u003ccode\u003eChunk\u003c/code\u003e\u003c/a\u003e at the specified coordinates",
              "tags": "Returns Whether the chunk was actually regenerated.",
              "plain": "Regenerates the {@link Chunk} at the specified coordinates\n@param x X-coordinate of the chunk\n@param z Z-coordinate of the chunk\n@return Whether the chunk was actually regenerated"
            }
          },
          {
            "kind": "METHOD",
            "name": "save()",
            "comment": {
              "body": "Saves world to disk",
              "plain": "Saves world to disk"
            }
          },
          {
            "kind": "METHOD",
            "name": "setAmbientSpawnLimit(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "limit"
              }
            ],
            "comment": {
              "body": "Sets the limit for number of ambient mobs that can spawn in a chunk in\n this world\n \u003cp\u003e\n \u003cb\u003eNote:\u003c/b\u003e If set to a negative number the world will use the\n server-wide spawn limit instead.",
              "plain": "Sets the limit for number of ambient mobs that can spawn in a chunk in\n this world\n \u003cp\u003e\n \u003cb\u003eNote:\u003c/b\u003e If set to a negative number the world will use the\n server-wide spawn limit instead.\n@param limit the new mob limit"
            }
          },
          {
            "kind": "METHOD",
            "name": "setAnimalSpawnLimit(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "limit"
              }
            ],
            "comment": {
              "body": "Sets the limit for number of animals that can spawn in a chunk in this\n world\n \u003cp\u003e\n \u003cb\u003eNote:\u003c/b\u003e If set to a negative number the world will use the\n server-wide spawn limit instead.",
              "plain": "Sets the limit for number of animals that can spawn in a chunk in this\n world\n \u003cp\u003e\n \u003cb\u003eNote:\u003c/b\u003e If set to a negative number the world will use the\n server-wide spawn limit instead.\n@param limit the new mob limit"
            }
          },
          {
            "kind": "METHOD",
            "name": "setAutoSave(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "value"
              }
            ],
            "comment": {
              "body": "Sets whether or not the world will automatically save",
              "plain": "Sets whether or not the world will automatically save\n@param value true if the world should automatically save, otherwise\n     false"
            }
          },
          {
            "kind": "METHOD",
            "name": "setBiome(int,int,org.bukkit.block.Biome)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "bio"
              },
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ],
            "comment": {
              "body": "Sets the biome for the given block coordinates",
              "plain": "Sets the biome for the given block coordinates\n@param x X coordinate of the block\n@param z Z coordinate of the block\n@param bio new Biome type for this block"
            }
          },
          {
            "kind": "METHOD",
            "name": "setDifficulty(org.bukkit.Difficulty)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "difficulty"
              }
            ],
            "comment": {
              "body": "Sets the Difficulty of the world.",
              "plain": "Sets the Difficulty of the world.\n@param difficulty the new difficulty you want to set the world to"
            }
          },
          {
            "kind": "METHOD",
            "name": "setFullTime(long)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "time"
              }
            ],
            "comment": {
              "body": "Sets the in-game time on the server\n \u003cp\u003e\n Note that this sets the full time of the world, which may cause adverse\n effects such as breaking redstone clocks and any scheduled events",
              "plain": "Sets the in-game time on the server\n \u003cp\u003e\n Note that this sets the full time of the world, which may cause adverse\n effects such as breaking redstone clocks and any scheduled events\n@param time The new absolute time to set this world to\n@see #setTime(long) Sets the relative time of this world"
            }
          },
          {
            "kind": "METHOD",
            "name": "setGameRuleValue(java.lang.String,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "rule"
              },
              {
                "kind": "PARAMETER",
                "name": "value"
              }
            ],
            "comment": {
              "body": "Set the specified gamerule to specified value.\n \u003cp\u003e\n The rule may attempt to validate the value passed, will return true if\n value was set.\n \u003cp\u003e\n If rule is null, the function will return false.",
              "tags": "Returns True if rule was set.",
              "plain": "Set the specified gamerule to specified value.\n \u003cp\u003e\n The rule may attempt to validate the value passed, will return true if\n value was set.\n \u003cp\u003e\n If rule is null, the function will return false.\n@param rule Rule to set\n@param value Value to set rule to\n@return True if rule was set"
            }
          },
          {
            "kind": "METHOD",
            "name": "setKeepSpawnInMemory(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "keepLoaded"
              }
            ],
            "comment": {
              "body": "Sets whether the world\u0027s spawn area should be kept loaded into memory\n or not.",
              "plain": "Sets whether the world\u0027s spawn area should be kept loaded into memory\n or not.\n@param keepLoaded if true then the world\u0027s spawn area will be kept\n     loaded into memory."
            }
          },
          {
            "kind": "METHOD",
            "name": "setMonsterSpawnLimit(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "limit"
              }
            ],
            "comment": {
              "body": "Sets the limit for number of monsters that can spawn in a chunk in this\n world\n \u003cp\u003e\n \u003cb\u003eNote:\u003c/b\u003e If set to a negative number the world will use the\n server-wide spawn limit instead.",
              "plain": "Sets the limit for number of monsters that can spawn in a chunk in this\n world\n \u003cp\u003e\n \u003cb\u003eNote:\u003c/b\u003e If set to a negative number the world will use the\n server-wide spawn limit instead.\n@param limit the new mob limit"
            }
          },
          {
            "kind": "METHOD",
            "name": "setPVP(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "pvp"
              }
            ],
            "comment": {
              "body": "Sets the PVP setting for this world.",
              "plain": "Sets the PVP setting for this world.\n@param pvp True/False whether PVP should be Enabled."
            }
          },
          {
            "kind": "METHOD",
            "name": "setSpawnFlags(boolean,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "allowAnimals"
              },
              {
                "kind": "PARAMETER",
                "name": "allowMonsters"
              }
            ],
            "comment": {
              "body": "Sets the spawn flags for this.",
              "plain": "Sets the spawn flags for this.\n@param allowMonsters - if true, monsters are allowed to spawn in this\n     world.\n@param allowAnimals - if true, animals are allowed to spawn in this\n     world."
            }
          },
          {
            "kind": "METHOD",
            "name": "setSpawnLocation(int,int,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "y"
              },
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ],
            "comment": {
              "body": "Sets the spawn location of the world",
              "tags": "Returns True if it was successfully set..",
              "plain": "Sets the spawn location of the world\n@param x X coordinate\n@param y Y coordinate\n@param z Z coordinate\n@return True if it was successfully set."
            }
          },
          {
            "kind": "METHOD",
            "name": "setSpawnLocation(org.bukkit.Location)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "location"
              }
            ],
            "comment": {
              "body": "Sets the spawn location of the world.\n \u003cbr\u003e\n The location provided must be equal to this world.",
              "tags": "Returns True if it was successfully set..",
              "plain": "Sets the spawn location of the world.\n \u003cbr\u003e\n The location provided must be equal to this world.\n@param location The {@link Location} to set the spawn for this world at.\n@return True if it was successfully set."
            }
          },
          {
            "kind": "METHOD",
            "name": "setStorm(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "hasStorm"
              }
            ],
            "comment": {
              "body": "Set whether there is a storm. A duration will be set for the new\n current conditions.",
              "plain": "Set whether there is a storm. A duration will be set for the new\n current conditions.\n@param hasStorm Whether there is rain and snow"
            }
          },
          {
            "kind": "METHOD",
            "name": "setThunderDuration(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "duration"
              }
            ],
            "comment": {
              "body": "Set the thundering duration.",
              "plain": "Set the thundering duration.\n@param duration Duration in ticks"
            }
          },
          {
            "kind": "METHOD",
            "name": "setThundering(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "thundering"
              }
            ],
            "comment": {
              "body": "Set whether it is thundering.",
              "plain": "Set whether it is thundering.\n@param thundering Whether it is thundering"
            }
          },
          {
            "kind": "METHOD",
            "name": "setTicksPerAnimalSpawns(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "ticksPerAnimalSpawns"
              }
            ],
            "comment": {
              "body": "Sets the world\u0027s ticks per animal spawns value\n \u003cp\u003e\n This value determines how many ticks there are between attempts to\n spawn animals.\n \u003cp\u003e\n \u003cb\u003eExample Usage:\u003c/b\u003e\n \u003cul\u003e\n \u003cli\u003eA value of 1 will mean the server will attempt to spawn animals in\n     this world every tick.\n \u003cli\u003eA value of 400 will mean the server will attempt to spawn animals\n     in this world every 400th tick.\n \u003cli\u003eA value below 0 will be reset back to Minecraft\u0027s default.\n \u003c/ul\u003e\n \u003cp\u003e\n \u003cb\u003eNote:\u003c/b\u003e\n If set to 0, animal spawning will be disabled for this world. We\n recommend using \u003ca href\u003d\"org/bukkit/World.html#setSpawnFlags(boolean,boolean)\"\u003e\u003ccode\u003eWorld.setSpawnFlags(boolean, boolean)\u003c/code\u003e\u003c/a\u003e to control\n this instead.\n \u003cp\u003e\n Minecraft default: 400.",
              "plain": "Sets the world\u0027s ticks per animal spawns value\n \u003cp\u003e\n This value determines how many ticks there are between attempts to\n spawn animals.\n \u003cp\u003e\n \u003cb\u003eExample Usage:\u003c/b\u003e\n \u003cul\u003e\n \u003cli\u003eA value of 1 will mean the server will attempt to spawn animals in\n     this world every tick.\n \u003cli\u003eA value of 400 will mean the server will attempt to spawn animals\n     in this world every 400th tick.\n \u003cli\u003eA value below 0 will be reset back to Minecraft\u0027s default.\n \u003c/ul\u003e\n \u003cp\u003e\n \u003cb\u003eNote:\u003c/b\u003e\n If set to 0, animal spawning will be disabled for this world. We\n recommend using {@link #setSpawnFlags(boolean, boolean)} to control\n this instead.\n \u003cp\u003e\n Minecraft default: 400.\n@param ticksPerAnimalSpawns the ticks per animal spawns value you want\n     to set the world to"
            }
          },
          {
            "kind": "METHOD",
            "name": "setTicksPerMonsterSpawns(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "ticksPerMonsterSpawns"
              }
            ],
            "comment": {
              "body": "Sets the world\u0027s ticks per monster spawns value\n \u003cp\u003e\n This value determines how many ticks there are between attempts to\n spawn monsters.\n \u003cp\u003e\n \u003cb\u003eExample Usage:\u003c/b\u003e\n \u003cul\u003e\n \u003cli\u003eA value of 1 will mean the server will attempt to spawn monsters in\n     this world on every tick.\n \u003cli\u003eA value of 400 will mean the server will attempt to spawn monsters\n     in this world every 400th tick.\n \u003cli\u003eA value below 0 will be reset back to Minecraft\u0027s default.\n \u003c/ul\u003e\n \u003cp\u003e\n \u003cb\u003eNote:\u003c/b\u003e\n If set to 0, monsters spawning will be disabled for this world. We\n recommend using \u003ca href\u003d\"org/bukkit/World.html#setSpawnFlags(boolean,boolean)\"\u003e\u003ccode\u003eWorld.setSpawnFlags(boolean, boolean)\u003c/code\u003e\u003c/a\u003e to control\n this instead.\n \u003cp\u003e\n Minecraft default: 1.",
              "plain": "Sets the world\u0027s ticks per monster spawns value\n \u003cp\u003e\n This value determines how many ticks there are between attempts to\n spawn monsters.\n \u003cp\u003e\n \u003cb\u003eExample Usage:\u003c/b\u003e\n \u003cul\u003e\n \u003cli\u003eA value of 1 will mean the server will attempt to spawn monsters in\n     this world on every tick.\n \u003cli\u003eA value of 400 will mean the server will attempt to spawn monsters\n     in this world every 400th tick.\n \u003cli\u003eA value below 0 will be reset back to Minecraft\u0027s default.\n \u003c/ul\u003e\n \u003cp\u003e\n \u003cb\u003eNote:\u003c/b\u003e\n If set to 0, monsters spawning will be disabled for this world. We\n recommend using {@link #setSpawnFlags(boolean, boolean)} to control\n this instead.\n \u003cp\u003e\n Minecraft default: 1.\n@param ticksPerMonsterSpawns the ticks per monster spawns value you\n     want to set the world to"
            }
          },
          {
            "kind": "METHOD",
            "name": "setTime(long)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "time"
              }
            ],
            "comment": {
              "body": "Sets the relative in-game time on the server.\n \u003cp\u003e\n The relative time is analogous to hours * 1000\n \u003cp\u003e\n Note that setting the relative time below the current relative time\n will actually move the clock forward a day. If you require to rewind\n time, please see \u003ca href\u003d\"org/bukkit/World.html#setFullTime(long)\"\u003e\u003ccode\u003eWorld.setFullTime(long)\u003c/code\u003e\u003c/a\u003e",
              "plain": "Sets the relative in-game time on the server.\n \u003cp\u003e\n The relative time is analogous to hours * 1000\n \u003cp\u003e\n Note that setting the relative time below the current relative time\n will actually move the clock forward a day. If you require to rewind\n time, please see {@link #setFullTime(long)}\n@param time The new relative time to set the in-game time to (in\n     hours*1000)\n@see #setFullTime(long) Sets the absolute time of this world"
            }
          },
          {
            "kind": "METHOD",
            "name": "setWaterAnimalSpawnLimit(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "limit"
              }
            ],
            "comment": {
              "body": "Sets the limit for number of water animals that can spawn in a chunk in\n this world\n \u003cp\u003e\n \u003cb\u003eNote:\u003c/b\u003e If set to a negative number the world will use the\n server-wide spawn limit instead.",
              "plain": "Sets the limit for number of water animals that can spawn in a chunk in\n this world\n \u003cp\u003e\n \u003cb\u003eNote:\u003c/b\u003e If set to a negative number the world will use the\n server-wide spawn limit instead.\n@param limit the new mob limit"
            }
          },
          {
            "kind": "METHOD",
            "name": "setWeatherDuration(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "duration"
              }
            ],
            "comment": {
              "body": "Set the remaining time in ticks of the current conditions.",
              "plain": "Set the remaining time in ticks of the current conditions.\n@param duration Time in ticks"
            }
          },
          {
            "kind": "METHOD",
            "name": "spawnArrow(org.bukkit.Location,org.bukkit.util.Vector,float,float)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "direction"
              },
              {
                "kind": "PARAMETER",
                "name": "location"
              },
              {
                "kind": "PARAMETER",
                "name": "speed"
              },
              {
                "kind": "PARAMETER",
                "name": "spread"
              }
            ],
            "comment": {
              "body": "Creates an \u003ca href\u003d\"org/bukkit/entity/Arrow.html\" title\u003d\"interface in org.bukkit.entity\"\u003e\u003ccode\u003eArrow\u003c/code\u003e\u003c/a\u003e entity at the given \u003ca href\u003d\"org/bukkit/Location.html\" title\u003d\"class in org.bukkit\"\u003e\u003ccode\u003eLocation\u003c/code\u003e\u003c/a\u003e",
              "tags": "Returns Arrow entity spawned as a result of this method.",
              "plain": "Creates an {@link Arrow} entity at the given {@link Location}\n@param location Location to spawn the arrow\n@param direction Direction to shoot the arrow in\n@param speed Speed of the arrow. A recommend speed is 0.6\n@param spread Spread of the arrow. A recommend spread is 12\n@return Arrow entity spawned as a result of this method"
            }
          },
          {
            "kind": "METHOD",
            "name": "spawnEntity(org.bukkit.Location,org.bukkit.entity.EntityType)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "loc"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "comment": {
              "body": "Creates a entity at the given \u003ca href\u003d\"org/bukkit/Location.html\" title\u003d\"class in org.bukkit\"\u003e\u003ccode\u003eLocation\u003c/code\u003e\u003c/a\u003e",
              "tags": "Returns Resulting Entity of this method, or null if it was unsuccessful.",
              "plain": "Creates a entity at the given {@link Location}\n@param loc The location to spawn the entity\n@param type The entity to spawn\n@return Resulting Entity of this method, or null if it was unsuccessful"
            }
          },
          {
            "kind": "METHOD",
            "name": "spawnFallingBlock(org.bukkit.Location,int,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "blockData"
              },
              {
                "kind": "PARAMETER",
                "name": "blockId"
              },
              {
                "kind": "PARAMETER",
                "name": "location"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Spawn a \u003ca href\u003d\"org/bukkit/entity/FallingBlock.html\" title\u003d\"interface in org.bukkit.entity\"\u003e\u003ccode\u003eFallingBlock\u003c/code\u003e\u003c/a\u003e entity at the given \u003ca href\u003d\"org/bukkit/Location.html\" title\u003d\"class in org.bukkit\"\u003e\u003ccode\u003eLocation\u003c/code\u003e\u003c/a\u003e of\n the specified blockId (converted to \u003ca href\u003d\"org/bukkit/Material.html\" title\u003d\"enum in org.bukkit\"\u003e\u003ccode\u003eMaterial\u003c/code\u003e\u003c/a\u003e)",
              "tags": "Returns The spawned FallingBlock instance.",
              "plain": "Spawn a {@link FallingBlock} entity at the given {@link Location} of\n the specified blockId (converted to {@link Material})\n@param location The {@link Location} to spawn the FallingBlock\n@param blockId The id of the intended material\n@param blockData The block data\n@return The spawned FallingBlock instance\n@throws IllegalArgumentException if location is null, or blockId is\n     invalid\n@see #spawnFallingBlock(org.bukkit.Location, org.bukkit.Material, byte)\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "spawnFallingBlock(org.bukkit.Location,org.bukkit.Material,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "location"
              },
              {
                "kind": "PARAMETER",
                "name": "material"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Spawn a \u003ca href\u003d\"org/bukkit/entity/FallingBlock.html\" title\u003d\"interface in org.bukkit.entity\"\u003e\u003ccode\u003eFallingBlock\u003c/code\u003e\u003c/a\u003e entity at the given \u003ca href\u003d\"org/bukkit/Location.html\" title\u003d\"class in org.bukkit\"\u003e\u003ccode\u003eLocation\u003c/code\u003e\u003c/a\u003e of\n the specified \u003ca href\u003d\"org/bukkit/Material.html\" title\u003d\"enum in org.bukkit\"\u003e\u003ccode\u003eMaterial\u003c/code\u003e\u003c/a\u003e. The material dictates what is falling.\n When the FallingBlock hits the ground, it will place that block.\n \u003cp\u003e\n The Material must be a block type, check with \u003ca href\u003d\"org/bukkit/Material.html#isBlock()\"\u003e\u003ccode\u003ematerial.isBlock()\u003c/code\u003e\u003c/a\u003e. The Material may not be air.",
              "tags": "Returns The spawned \u003ca href\u003d\"org/bukkit/entity/FallingBlock.html\" title\u003d\"interface in org.bukkit.entity\"\u003e\u003ccode\u003eFallingBlock\u003c/code\u003e\u003c/a\u003e instance.",
              "plain": "Spawn a {@link FallingBlock} entity at the given {@link Location} of\n the specified {@link Material}. The material dictates what is falling.\n When the FallingBlock hits the ground, it will place that block.\n \u003cp\u003e\n The Material must be a block type, check with {@link Material#isBlock() material.isBlock()}. The Material may not be air.\n@param location The {@link Location} to spawn the FallingBlock\n@param material The block {@link Material} type\n@param data The block data\n@return The spawned {@link FallingBlock} instance\n@throws IllegalArgumentException if {@link Location} or {@link Material} are null or {@link Material} is not a block\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "spawnFallingBlock(org.bukkit.Location,org.bukkit.material.MaterialData)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "location"
              }
            ],
            "comment": {
              "body": "Spawn a \u003ca href\u003d\"org/bukkit/entity/FallingBlock.html\" title\u003d\"interface in org.bukkit.entity\"\u003e\u003ccode\u003eFallingBlock\u003c/code\u003e\u003c/a\u003e entity at the given \u003ca href\u003d\"org/bukkit/Location.html\" title\u003d\"class in org.bukkit\"\u003e\u003ccode\u003eLocation\u003c/code\u003e\u003c/a\u003e of\n the specified \u003ca href\u003d\"org/bukkit/Material.html\" title\u003d\"enum in org.bukkit\"\u003e\u003ccode\u003eMaterial\u003c/code\u003e\u003c/a\u003e. The material dictates what is falling.\n When the FallingBlock hits the ground, it will place that block.\n \u003cp\u003e\n The Material must be a block type, check with \u003ca href\u003d\"org/bukkit/Material.html#isBlock()\"\u003e\u003ccode\u003ematerial.isBlock()\u003c/code\u003e\u003c/a\u003e. The Material may not be air.",
              "tags": "Returns The spawned \u003ca href\u003d\"org/bukkit/entity/FallingBlock.html\" title\u003d\"interface in org.bukkit.entity\"\u003e\u003ccode\u003eFallingBlock\u003c/code\u003e\u003c/a\u003e instance.",
              "plain": "Spawn a {@link FallingBlock} entity at the given {@link Location} of\n the specified {@link Material}. The material dictates what is falling.\n When the FallingBlock hits the ground, it will place that block.\n \u003cp\u003e\n The Material must be a block type, check with {@link Material#isBlock() material.isBlock()}. The Material may not be air.\n@param location The {@link Location} to spawn the FallingBlock\n@param data The block data\n@return The spawned {@link FallingBlock} instance\n@throws IllegalArgumentException if {@link Location} or {@link MaterialData} are null or {@link Material} of the {@link MaterialData} is not a block"
            }
          },
          {
            "kind": "METHOD",
            "name": "spawnParticle(org.bukkit.Particle,double,double,double,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "count"
              },
              {
                "kind": "PARAMETER",
                "name": "particle"
              },
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "y"
              },
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ],
            "comment": {
              "body": "Spawns the particle (the number of times specified by count)\n at the target location.",
              "plain": "Spawns the particle (the number of times specified by count)\n at the target location.\n@param particle the particle to spawn\n@param x the position on the x axis to spawn at\n@param y the position on the y axis to spawn at\n@param z the position on the z axis to spawn at\n@param count the number of particles"
            }
          },
          {
            "kind": "METHOD",
            "name": "spawnParticle(org.bukkit.Particle,double,double,double,int,double,double,double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "count"
              },
              {
                "kind": "PARAMETER",
                "name": "offsetX"
              },
              {
                "kind": "PARAMETER",
                "name": "offsetY"
              },
              {
                "kind": "PARAMETER",
                "name": "offsetZ"
              },
              {
                "kind": "PARAMETER",
                "name": "particle"
              },
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "y"
              },
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ],
            "comment": {
              "body": "Spawns the particle (the number of times specified by count)\n at the target location. The position of each particle will be\n randomized positively and negatively by the offset parameters\n on each axis.",
              "plain": "Spawns the particle (the number of times specified by count)\n at the target location. The position of each particle will be\n randomized positively and negatively by the offset parameters\n on each axis.\n@param particle the particle to spawn\n@param x the position on the x axis to spawn at\n@param y the position on the y axis to spawn at\n@param z the position on the z axis to spawn at\n@param count the number of particles\n@param offsetX the maximum random offset on the X axis\n@param offsetY the maximum random offset on the Y axis\n@param offsetZ the maximum random offset on the Z axis"
            }
          },
          {
            "kind": "METHOD",
            "name": "spawnParticle(org.bukkit.Particle,double,double,double,int,double,double,double,double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "count"
              },
              {
                "kind": "PARAMETER",
                "name": "extra"
              },
              {
                "kind": "PARAMETER",
                "name": "offsetX"
              },
              {
                "kind": "PARAMETER",
                "name": "offsetY"
              },
              {
                "kind": "PARAMETER",
                "name": "offsetZ"
              },
              {
                "kind": "PARAMETER",
                "name": "particle"
              },
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "y"
              },
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ],
            "comment": {
              "body": "Spawns the particle (the number of times specified by count)\n at the target location. The position of each particle will be\n randomized positively and negatively by the offset parameters\n on each axis.",
              "plain": "Spawns the particle (the number of times specified by count)\n at the target location. The position of each particle will be\n randomized positively and negatively by the offset parameters\n on each axis.\n@param particle the particle to spawn\n@param x the position on the x axis to spawn at\n@param y the position on the y axis to spawn at\n@param z the position on the z axis to spawn at\n@param count the number of particles\n@param offsetX the maximum random offset on the X axis\n@param offsetY the maximum random offset on the Y axis\n@param offsetZ the maximum random offset on the Z axis\n@param extra the extra data for this particle, depends on the\n              particle used (normally speed)"
            }
          },
          {
            "kind": "METHOD",
            "name": "spawnParticle(org.bukkit.Particle,org.bukkit.Location,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "count"
              },
              {
                "kind": "PARAMETER",
                "name": "location"
              },
              {
                "kind": "PARAMETER",
                "name": "particle"
              }
            ],
            "comment": {
              "body": "Spawns the particle (the number of times specified by count)\n at the target location.",
              "plain": "Spawns the particle (the number of times specified by count)\n at the target location.\n@param particle the particle to spawn\n@param location the location to spawn at\n@param count the number of particles"
            }
          },
          {
            "kind": "METHOD",
            "name": "spawnParticle(org.bukkit.Particle,org.bukkit.Location,int,double,double,double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "count"
              },
              {
                "kind": "PARAMETER",
                "name": "location"
              },
              {
                "kind": "PARAMETER",
                "name": "offsetX"
              },
              {
                "kind": "PARAMETER",
                "name": "offsetY"
              },
              {
                "kind": "PARAMETER",
                "name": "offsetZ"
              },
              {
                "kind": "PARAMETER",
                "name": "particle"
              }
            ],
            "comment": {
              "body": "Spawns the particle (the number of times specified by count)\n at the target location. The position of each particle will be\n randomized positively and negatively by the offset parameters\n on each axis.",
              "plain": "Spawns the particle (the number of times specified by count)\n at the target location. The position of each particle will be\n randomized positively and negatively by the offset parameters\n on each axis.\n@param particle the particle to spawn\n@param location the location to spawn at\n@param count the number of particles\n@param offsetX the maximum random offset on the X axis\n@param offsetY the maximum random offset on the Y axis\n@param offsetZ the maximum random offset on the Z axis"
            }
          },
          {
            "kind": "METHOD",
            "name": "spawnParticle(org.bukkit.Particle,org.bukkit.Location,int,double,double,double,double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "count"
              },
              {
                "kind": "PARAMETER",
                "name": "extra"
              },
              {
                "kind": "PARAMETER",
                "name": "location"
              },
              {
                "kind": "PARAMETER",
                "name": "offsetX"
              },
              {
                "kind": "PARAMETER",
                "name": "offsetY"
              },
              {
                "kind": "PARAMETER",
                "name": "offsetZ"
              },
              {
                "kind": "PARAMETER",
                "name": "particle"
              }
            ],
            "comment": {
              "body": "Spawns the particle (the number of times specified by count)\n at the target location. The position of each particle will be\n randomized positively and negatively by the offset parameters\n on each axis.",
              "plain": "Spawns the particle (the number of times specified by count)\n at the target location. The position of each particle will be\n randomized positively and negatively by the offset parameters\n on each axis.\n@param particle the particle to spawn\n@param location the location to spawn at\n@param count the number of particles\n@param offsetX the maximum random offset on the X axis\n@param offsetY the maximum random offset on the Y axis\n@param offsetZ the maximum random offset on the Z axis\n@param extra the extra data for this particle, depends on the\n              particle used (normally speed)"
            }
          },
          {
            "kind": "METHOD",
            "name": "spigot()"
          },
          {
            "kind": "METHOD",
            "name": "strikeLightning(org.bukkit.Location)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "loc"
              }
            ],
            "comment": {
              "body": "Strikes lightning at the given \u003ca href\u003d\"org/bukkit/Location.html\" title\u003d\"class in org.bukkit\"\u003e\u003ccode\u003eLocation\u003c/code\u003e\u003c/a\u003e",
              "tags": "Returns The lightning entity..",
              "plain": "Strikes lightning at the given {@link Location}\n@param loc The location to strike lightning\n@return The lightning entity."
            }
          },
          {
            "kind": "METHOD",
            "name": "strikeLightningEffect(org.bukkit.Location)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "loc"
              }
            ],
            "comment": {
              "body": "Strikes lightning at the given \u003ca href\u003d\"org/bukkit/Location.html\" title\u003d\"class in org.bukkit\"\u003e\u003ccode\u003eLocation\u003c/code\u003e\u003c/a\u003e without doing damage",
              "tags": "Returns The lightning entity..",
              "plain": "Strikes lightning at the given {@link Location} without doing damage\n@param loc The location to strike lightning\n@return The lightning entity."
            }
          },
          {
            "kind": "METHOD",
            "name": "unloadChunk(int,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ],
            "comment": {
              "body": "Safely unloads and saves the \u003ca href\u003d\"org/bukkit/Chunk.html\" title\u003d\"interface in org.bukkit\"\u003e\u003ccode\u003eChunk\u003c/code\u003e\u003c/a\u003e at the specified coordinates\n \u003cp\u003e\n This method is analogous to \u003ca href\u003d\"org/bukkit/World.html#unloadChunk(int,int,boolean,boolean)\"\u003e\u003ccode\u003eWorld.unloadChunk(int, int, boolean, boolean)\u003c/code\u003e\u003c/a\u003e where safe and saveis true",
              "tags": "Returns true if the chunk has unloaded successfully, otherwise false.",
              "plain": "Safely unloads and saves the {@link Chunk} at the specified coordinates\n \u003cp\u003e\n This method is analogous to {@link #unloadChunk(int, int, boolean,\n boolean)} where safe and saveis true\n@param x X-coordinate of the chunk\n@param z Z-coordinate of the chunk\n@return true if the chunk has unloaded successfully, otherwise false"
            }
          },
          {
            "kind": "METHOD",
            "name": "unloadChunk(int,int,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "save"
              },
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ],
            "comment": {
              "body": "Safely unloads and optionally saves the \u003ca href\u003d\"org/bukkit/Chunk.html\" title\u003d\"interface in org.bukkit\"\u003e\u003ccode\u003eChunk\u003c/code\u003e\u003c/a\u003e at the specified\n coordinates\n \u003cp\u003e\n This method is analogous to \u003ca href\u003d\"org/bukkit/World.html#unloadChunk(int,int,boolean,boolean)\"\u003e\u003ccode\u003eWorld.unloadChunk(int, int, boolean, boolean)\u003c/code\u003e\u003c/a\u003e where save is true",
              "tags": "Returns true if the chunk has unloaded successfully, otherwise false.",
              "plain": "Safely unloads and optionally saves the {@link Chunk} at the specified\n coordinates\n \u003cp\u003e\n This method is analogous to {@link #unloadChunk(int, int, boolean,\n boolean)} where save is true\n@param x X-coordinate of the chunk\n@param z Z-coordinate of the chunk\n@param save Whether or not to save the chunk\n@return true if the chunk has unloaded successfully, otherwise false"
            }
          },
          {
            "kind": "METHOD",
            "name": "unloadChunk(int,int,boolean,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "safe"
              },
              {
                "kind": "PARAMETER",
                "name": "save"
              },
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Unloads and optionally saves the \u003ca href\u003d\"org/bukkit/Chunk.html\" title\u003d\"interface in org.bukkit\"\u003e\u003ccode\u003eChunk\u003c/code\u003e\u003c/a\u003e at the specified\n coordinates",
              "tags": "Returns true if the chunk has unloaded successfully, otherwise false.",
              "plain": "Unloads and optionally saves the {@link Chunk} at the specified\n coordinates\n@param x X-coordinate of the chunk\n@param z Z-coordinate of the chunk\n@param save Controls whether the chunk is saved\n@param safe Controls whether to unload the chunk when players are\n     nearby\n@return true if the chunk has unloaded successfully, otherwise false\n@deprecated it is never safe to remove a chunk in use"
            }
          },
          {
            "kind": "METHOD",
            "name": "unloadChunk(org.bukkit.Chunk)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "chunk"
              }
            ],
            "comment": {
              "body": "Safely unloads and saves the \u003ca href\u003d\"org/bukkit/Chunk.html\" title\u003d\"interface in org.bukkit\"\u003e\u003ccode\u003eChunk\u003c/code\u003e\u003c/a\u003e at the specified coordinates\n \u003cp\u003e\n This method is analogous to \u003ca href\u003d\"org/bukkit/World.html#unloadChunk(int,int,boolean,boolean)\"\u003e\u003ccode\u003eWorld.unloadChunk(int, int, boolean, boolean)\u003c/code\u003e\u003c/a\u003e where safe and saveis true",
              "tags": "Returns true if the chunk has unloaded successfully, otherwise false.",
              "plain": "Safely unloads and saves the {@link Chunk} at the specified coordinates\n \u003cp\u003e\n This method is analogous to {@link #unloadChunk(int, int, boolean,\n boolean)} where safe and saveis true\n@param chunk the chunk to unload\n@return true if the chunk has unloaded successfully, otherwise false"
            }
          },
          {
            "kind": "METHOD",
            "name": "unloadChunkRequest(int,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ],
            "comment": {
              "body": "Safely queues the \u003ca href\u003d\"org/bukkit/Chunk.html\" title\u003d\"interface in org.bukkit\"\u003e\u003ccode\u003eChunk\u003c/code\u003e\u003c/a\u003e at the specified coordinates for\n unloading\n \u003cp\u003e\n This method is analogous to \u003ca href\u003d\"org/bukkit/World.html#unloadChunkRequest(int,int,boolean)\"\u003e\u003ccode\u003eWorld.unloadChunkRequest(int, int, boolean)\u003c/code\u003e\u003c/a\u003e where safe is true",
              "tags": "Returns true is the queue attempt was successful, otherwise false.",
              "plain": "Safely queues the {@link Chunk} at the specified coordinates for\n unloading\n \u003cp\u003e\n This method is analogous to {@link #unloadChunkRequest(int, int,\n boolean)} where safe is true\n@param x X-coordinate of the chunk\n@param z Z-coordinate of the chunk\n@return true is the queue attempt was successful, otherwise false"
            }
          },
          {
            "kind": "METHOD",
            "name": "unloadChunkRequest(int,int,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "safe"
              },
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ],
            "comment": {
              "body": "Queues the \u003ca href\u003d\"org/bukkit/Chunk.html\" title\u003d\"interface in org.bukkit\"\u003e\u003ccode\u003eChunk\u003c/code\u003e\u003c/a\u003e at the specified coordinates for unloading",
              "tags": "Returns Whether the chunk was actually queued.",
              "plain": "Queues the {@link Chunk} at the specified coordinates for unloading\n@param x X-coordinate of the chunk\n@param z Z-coordinate of the chunk\n@param safe Controls whether to queue the chunk when players are nearby\n@return Whether the chunk was actually queued"
            }
          }
        ],
        "comment": {
          "body": "Represents a world, which may contain entities, chunks and blocks",
          "plain": "Represents a world, which may contain entities, chunks and blocks"
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.WorldBorder",
        "children": [
          {
            "kind": "METHOD",
            "name": "getCenter()",
            "comment": {
              "body": "Gets the current border center.",
              "tags": "Returns The current border center..",
              "plain": "Gets the current border center.\n@return The current border center."
            }
          },
          {
            "kind": "METHOD",
            "name": "getDamageAmount()",
            "comment": {
              "body": "Gets the current border damage amount.",
              "tags": "Returns The current border damage amount..",
              "plain": "Gets the current border damage amount.\n@return The current border damage amount."
            }
          },
          {
            "kind": "METHOD",
            "name": "getDamageBuffer()",
            "comment": {
              "body": "Gets the current border damage buffer.",
              "tags": "Returns The current border damage buffer..",
              "plain": "Gets the current border damage buffer.\n@return The current border damage buffer."
            }
          },
          {
            "kind": "METHOD",
            "name": "getSize()",
            "comment": {
              "body": "Gets the current side length of the border.",
              "tags": "Returns The current side length of the border..",
              "plain": "Gets the current side length of the border.\n@return The current side length of the border."
            }
          },
          {
            "kind": "METHOD",
            "name": "getWarningDistance()",
            "comment": {
              "body": "Gets the current border warning distance.",
              "tags": "Returns The current border warning distance..",
              "plain": "Gets the current border warning distance.\n@return The current border warning distance."
            }
          },
          {
            "kind": "METHOD",
            "name": "getWarningTime()",
            "comment": {
              "body": "Gets the current border warning time in seconds.",
              "tags": "Returns The current border warning time in seconds..",
              "plain": "Gets the current border warning time in seconds.\n@return The current border warning time in seconds."
            }
          },
          {
            "kind": "METHOD",
            "name": "isInBounds(org.bukkit.Location)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "location"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Checks if the location is within the boundaries of this border.",
              "tags": "Returns true if the location is within the bounds of this border, false otherwise..",
              "plain": "Checks if the location is within the boundaries of this border.\n@param location specific location to check\n@return true if the location is within the bounds of this border, false otherwise.\n@deprecated use {@link #isInside(Location)} for an upstream compatible replacement"
            }
          },
          {
            "kind": "METHOD",
            "name": "isInside(org.bukkit.Location)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "location"
              }
            ],
            "comment": {
              "body": "Check if the specified location is inside this border.",
              "tags": "Returns if this location is inside the border or not.",
              "plain": "Check if the specified location is inside this border.\n@param location the location to check\n@return if this location is inside the border or not"
            }
          },
          {
            "kind": "METHOD",
            "name": "reset()",
            "comment": {
              "body": "Resets the border to default values.",
              "plain": "Resets the border to default values."
            }
          },
          {
            "kind": "METHOD",
            "name": "setCenter(double,double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ],
            "comment": {
              "body": "Sets the new border center.",
              "plain": "Sets the new border center.\n@param x The new center x-coordinate.\n@param z The new center z-coordinate."
            }
          },
          {
            "kind": "METHOD",
            "name": "setCenter(org.bukkit.Location)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "location"
              }
            ],
            "comment": {
              "body": "Sets the new border center.",
              "plain": "Sets the new border center.\n@param location The new location of the border center. (Only x/z used)"
            }
          },
          {
            "kind": "METHOD",
            "name": "setDamageAmount(double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "damage"
              }
            ],
            "comment": {
              "body": "Sets the amount of damage a player takes when outside the border plus the border buffer.",
              "plain": "Sets the amount of damage a player takes when outside the border plus the border buffer.\n@param damage The amount of damage. (The default is 0.2 damage per second per block.)"
            }
          },
          {
            "kind": "METHOD",
            "name": "setDamageBuffer(double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "blocks"
              }
            ],
            "comment": {
              "body": "Sets the amount of blocks a player may safely be outside the border before taking damage.",
              "plain": "Sets the amount of blocks a player may safely be outside the border before taking damage.\n@param blocks The amount of blocks. (The default is 5 blocks.)"
            }
          },
          {
            "kind": "METHOD",
            "name": "setSize(double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "newSize"
              }
            ],
            "comment": {
              "body": "Sets the border to a square region with the specified side length in blocks.",
              "plain": "Sets the border to a square region with the specified side length in blocks.\n@param newSize The new size of the border."
            }
          },
          {
            "kind": "METHOD",
            "name": "setSize(double,long)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "newSize"
              },
              {
                "kind": "PARAMETER",
                "name": "seconds"
              }
            ],
            "comment": {
              "body": "Sets the border to a square region with the specified side length in blocks.",
              "plain": "Sets the border to a square region with the specified side length in blocks.\n@param newSize The new side length of the border.\n@param seconds The time in seconds in which the border grows or shrinks from the previous size to that being set."
            }
          },
          {
            "kind": "METHOD",
            "name": "setWarningDistance(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "distance"
              }
            ],
            "comment": {
              "body": "Sets the warning distance that causes the screen to be tinted red when the player is within the specified number of blocks from the border.",
              "plain": "Sets the warning distance that causes the screen to be tinted red when the player is within the specified number of blocks from the border.\n@param distance The distance in blocks. (The default is 5 blocks.)"
            }
          },
          {
            "kind": "METHOD",
            "name": "setWarningTime(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "seconds"
              }
            ],
            "comment": {
              "body": "Sets the warning time that causes the screen to be tinted red when a contracting border will reach the player within the specified time.",
              "plain": "Sets the warning time that causes the screen to be tinted red when a contracting border will reach the player within the specified time.\n@param seconds The amount of time in seconds. (The default is 15 seconds.)"
            }
          }
        ]
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.WorldCreator",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "WorldCreator(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ],
            "comment": {
              "body": "Creates an empty WorldCreationOptions for the given world name",
              "plain": "Creates an empty WorldCreationOptions for the given world name\n@param name Name of the world that will be created"
            }
          },
          {
            "kind": "METHOD",
            "name": "copy(org.bukkit.World)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "world"
              }
            ],
            "comment": {
              "body": "Copies the options from the specified world",
              "tags": "Returns This object, for chaining.",
              "plain": "Copies the options from the specified world\n@param world World to copy options from\n@return This object, for chaining"
            }
          },
          {
            "kind": "METHOD",
            "name": "copy(org.bukkit.WorldCreator)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "creator"
              }
            ],
            "comment": {
              "body": "Copies the options from the specified \u003ca href\u003d\"org/bukkit/WorldCreator.html\" title\u003d\"class in org.bukkit\"\u003e\u003ccode\u003eWorldCreator\u003c/code\u003e\u003c/a\u003e",
              "tags": "Returns This object, for chaining.",
              "plain": "Copies the options from the specified {@link WorldCreator}\n@param creator World creator to copy options from\n@return This object, for chaining"
            }
          },
          {
            "kind": "METHOD",
            "name": "createWorld()",
            "comment": {
              "body": "Creates a world with the specified options.\n \u003cp\u003e\n If the world already exists, it will be loaded from disk and some\n options may be ignored.",
              "tags": "Returns Newly created or loaded world.",
              "plain": "Creates a world with the specified options.\n \u003cp\u003e\n If the world already exists, it will be loaded from disk and some\n options may be ignored.\n@return Newly created or loaded world"
            }
          },
          {
            "kind": "FIELD",
            "name": "environment"
          },
          {
            "kind": "METHOD",
            "name": "environment()",
            "comment": {
              "body": "Gets the environment that will be used to create or load the world",
              "tags": "Returns World environment.",
              "plain": "Gets the environment that will be used to create or load the world\n@return World environment"
            }
          },
          {
            "kind": "METHOD",
            "name": "environment(org.bukkit.World.Environment)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "env"
              }
            ],
            "comment": {
              "body": "Sets the environment that will be used to create or load the world",
              "tags": "Returns This object, for chaining.",
              "plain": "Sets the environment that will be used to create or load the world\n@param env World environment\n@return This object, for chaining"
            }
          },
          {
            "kind": "FIELD",
            "name": "generateStructures"
          },
          {
            "kind": "METHOD",
            "name": "generateStructures()",
            "comment": {
              "body": "Gets whether or not structures will be generated in the world.",
              "tags": "Returns True if structures will be generated.",
              "plain": "Gets whether or not structures will be generated in the world.\n@return True if structures will be generated"
            }
          },
          {
            "kind": "METHOD",
            "name": "generateStructures(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "generate"
              }
            ],
            "comment": {
              "body": "Sets whether or not worlds created or loaded with this creator will\n have structures.",
              "tags": "Returns This object, for chaining.",
              "plain": "Sets whether or not worlds created or loaded with this creator will\n have structures.\n@param generate Whether to generate structures\n@return This object, for chaining"
            }
          },
          {
            "kind": "FIELD",
            "name": "generator"
          },
          {
            "kind": "METHOD",
            "name": "generator()",
            "comment": {
              "body": "Gets the generator that will be used to create or load the world.\n \u003cp\u003e\n This may be null, in which case the \"natural\" generator for this\n environment will be used.",
              "tags": "Returns Chunk generator.",
              "plain": "Gets the generator that will be used to create or load the world.\n \u003cp\u003e\n This may be null, in which case the \"natural\" generator for this\n environment will be used.\n@return Chunk generator"
            }
          },
          {
            "kind": "METHOD",
            "name": "generator(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "generator"
              }
            ],
            "comment": {
              "body": "Sets the generator that will be used to create or load the world.\n \u003cp\u003e\n This may be null, in which case the \"natural\" generator for this\n environment will be used.\n \u003cp\u003e\n If the generator cannot be found for the given name, the natural\n environment generator will be used instead and a warning will be\n printed to the console.",
              "tags": "Returns This object, for chaining.",
              "plain": "Sets the generator that will be used to create or load the world.\n \u003cp\u003e\n This may be null, in which case the \"natural\" generator for this\n environment will be used.\n \u003cp\u003e\n If the generator cannot be found for the given name, the natural\n environment generator will be used instead and a warning will be\n printed to the console.\n@param generator Name of the generator to use, in \"plugin:id\" notation\n@return This object, for chaining"
            }
          },
          {
            "kind": "METHOD",
            "name": "generator(java.lang.String,org.bukkit.command.CommandSender)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "generator"
              },
              {
                "kind": "PARAMETER",
                "name": "output"
              }
            ],
            "comment": {
              "body": "Sets the generator that will be used to create or load the world.\n \u003cp\u003e\n This may be null, in which case the \"natural\" generator for this\n environment will be used.\n \u003cp\u003e\n If the generator cannot be found for the given name, the natural\n environment generator will be used instead and a warning will be\n printed to the specified output",
              "tags": "Returns This object, for chaining.",
              "plain": "Sets the generator that will be used to create or load the world.\n \u003cp\u003e\n This may be null, in which case the \"natural\" generator for this\n environment will be used.\n \u003cp\u003e\n If the generator cannot be found for the given name, the natural\n environment generator will be used instead and a warning will be\n printed to the specified output\n@param generator Name of the generator to use, in \"plugin:id\" notation\n@param output {@link CommandSender} that will receive any error\n     messages\n@return This object, for chaining"
            }
          },
          {
            "kind": "METHOD",
            "name": "generator(org.bukkit.generator.ChunkGenerator)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "generator"
              }
            ],
            "comment": {
              "body": "Sets the generator that will be used to create or load the world.\n \u003cp\u003e\n This may be null, in which case the \"natural\" generator for this\n environment will be used.",
              "tags": "Returns This object, for chaining.",
              "plain": "Sets the generator that will be used to create or load the world.\n \u003cp\u003e\n This may be null, in which case the \"natural\" generator for this\n environment will be used.\n@param generator Chunk generator\n@return This object, for chaining"
            }
          },
          {
            "kind": "FIELD",
            "name": "generatorSettings"
          },
          {
            "kind": "METHOD",
            "name": "generatorSettings()",
            "comment": {
              "body": "Gets the generator settings of the world that will be created or loaded",
              "tags": "Returns The settings that should be used by the generator.",
              "plain": "Gets the generator settings of the world that will be created or loaded\n@return The settings that should be used by the generator"
            }
          },
          {
            "kind": "METHOD",
            "name": "generatorSettings(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "generatorSettings"
              }
            ],
            "comment": {
              "body": "Sets the generator settings of the world that will be created or loaded",
              "tags": "Returns This object, for chaining.",
              "plain": "Sets the generator settings of the world that will be created or loaded\n@param generatorSettings The settings that should be used by the generator\n@return This object, for chaining"
            }
          },
          {
            "kind": "METHOD",
            "name": "getGeneratorForName(java.lang.String,java.lang.String,org.bukkit.command.CommandSender)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              },
              {
                "kind": "PARAMETER",
                "name": "output"
              },
              {
                "kind": "PARAMETER",
                "name": "world"
              }
            ],
            "comment": {
              "body": "Attempts to get the \u003ca href\u003d\"org/bukkit/generator/ChunkGenerator.html\" title\u003d\"class in org.bukkit.generator\"\u003e\u003ccode\u003eChunkGenerator\u003c/code\u003e\u003c/a\u003e with the given name.\n \u003cp\u003e\n If the generator is not found, null will be returned and a message will\n be printed to the specified \u003ca href\u003d\"org/bukkit/command/CommandSender.html\" title\u003d\"interface in org.bukkit.command\"\u003e\u003ccode\u003eCommandSender\u003c/code\u003e\u003c/a\u003e explaining why.\n \u003cp\u003e\n The name must be in the \"plugin:id\" notation, or optionally just\n \"plugin\", where \"plugin\" is the safe-name of a plugin and \"id\" is an\n optional unique identifier for the generator you wish to request from\n the plugin.",
              "tags": "Returns Resulting generator, or null.",
              "plain": "Attempts to get the {@link ChunkGenerator} with the given name.\n \u003cp\u003e\n If the generator is not found, null will be returned and a message will\n be printed to the specified {@link CommandSender} explaining why.\n \u003cp\u003e\n The name must be in the \"plugin:id\" notation, or optionally just\n \"plugin\", where \"plugin\" is the safe-name of a plugin and \"id\" is an\n optional unique identifier for the generator you wish to request from\n the plugin.\n@param world Name of the world this will be used for\n@param name Name of the generator to retrieve\n@param output Where to output if errors are present\n@return Resulting generator, or null"
            }
          },
          {
            "kind": "FIELD",
            "name": "name"
          },
          {
            "kind": "METHOD",
            "name": "name()",
            "comment": {
              "body": "Gets the name of the world that is to be loaded or created.",
              "tags": "Returns World name.",
              "plain": "Gets the name of the world that is to be loaded or created.\n@return World name"
            }
          },
          {
            "kind": "METHOD",
            "name": "name(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ],
            "comment": {
              "body": "Creates a new \u003ca href\u003d\"org/bukkit/WorldCreator.html\" title\u003d\"class in org.bukkit\"\u003e\u003ccode\u003eWorldCreator\u003c/code\u003e\u003c/a\u003e for the given world name",
              "tags": "Returns Resulting WorldCreator.",
              "plain": "Creates a new {@link WorldCreator} for the given world name\n@param name Name of the world to load or create\n@return Resulting WorldCreator"
            }
          },
          {
            "kind": "FIELD",
            "name": "seed"
          },
          {
            "kind": "METHOD",
            "name": "seed()",
            "comment": {
              "body": "Gets the seed that will be used to create this world",
              "tags": "Returns World seed.",
              "plain": "Gets the seed that will be used to create this world\n@return World seed"
            }
          },
          {
            "kind": "METHOD",
            "name": "seed(long)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "seed"
              }
            ],
            "comment": {
              "body": "Sets the seed that will be used to create this world",
              "tags": "Returns This object, for chaining.",
              "plain": "Sets the seed that will be used to create this world\n@param seed World seed\n@return This object, for chaining"
            }
          },
          {
            "kind": "FIELD",
            "name": "type"
          },
          {
            "kind": "METHOD",
            "name": "type()",
            "comment": {
              "body": "Gets the type of the world that will be created or loaded",
              "tags": "Returns World type.",
              "plain": "Gets the type of the world that will be created or loaded\n@return World type"
            }
          },
          {
            "kind": "METHOD",
            "name": "type(org.bukkit.WorldType)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "comment": {
              "body": "Sets the type of the world that will be created or loaded",
              "tags": "Returns This object, for chaining.",
              "plain": "Sets the type of the world that will be created or loaded\n@param type World type\n@return This object, for chaining"
            }
          }
        ],
        "comment": {
          "body": "Represents various types of options that may be used to create a world.",
          "plain": "Represents various types of options that may be used to create a world."
        }
      },
      {
        "kind": "ENUM",
        "name": "org.bukkit.WorldType",
        "children": [
          {
            "kind": "ENUM_CONSTANT",
            "name": "AMPLIFIED"
          },
          {
            "kind": "FIELD",
            "name": "BY_NAME"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "CUSTOMIZED"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "FLAT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "LARGE_BIOMES"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "NORMAL"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "VERSION_1_1"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "WorldType(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getByName(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ],
            "comment": {
              "body": "Gets a Worldtype by its name",
              "tags": "Returns Requested WorldType, or null if not found.",
              "plain": "Gets a Worldtype by its name\n@param name Name of the WorldType to get\n@return Requested WorldType, or null if not found"
            }
          },
          {
            "kind": "METHOD",
            "name": "getName()",
            "comment": {
              "body": "Gets the name of this WorldType",
              "tags": "Returns Name of this type.",
              "plain": "Gets the name of this WorldType\n@return Name of this type"
            }
          },
          {
            "kind": "FIELD",
            "name": "name"
          },
          {
            "kind": "METHOD",
            "name": "valueOf(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "values()"
          }
        ],
        "comment": {
          "body": "Represents various types of worlds that may exist",
          "plain": "Represents various types of worlds that may exist"
        }
      }
    ]
  },
  {
    "kind": "PACKAGE",
    "name": "org.bukkit.advancement",
    "children": [
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.advancement.Advancement",
        "children": [
          {
            "kind": "METHOD",
            "name": "getCriteria()",
            "comment": {
              "body": "Get all the criteria present in this advancement.",
              "tags": "Returns a unmodifiable copy of all criteria.",
              "plain": "Get all the criteria present in this advancement.\n@return a unmodifiable copy of all criteria"
            }
          }
        ],
        "comment": {
          "body": "Represents an advancement that may be awarded to a player. This class is not\n reference safe as the underlying advancement may be reloaded.",
          "plain": "Represents an advancement that may be awarded to a player. This class is not\n reference safe as the underlying advancement may be reloaded."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.advancement.AdvancementProgress",
        "children": [
          {
            "kind": "METHOD",
            "name": "awardCriteria(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "criteria"
              }
            ],
            "comment": {
              "body": "Mark the specified criteria as awarded at the current time.",
              "tags": "Returns true if awarded, false if criteria does not exist or already\n awarded..",
              "plain": "Mark the specified criteria as awarded at the current time.\n@param criteria the criteria to mark\n@return true if awarded, false if criteria does not exist or already\n awarded."
            }
          },
          {
            "kind": "METHOD",
            "name": "getAdvancement()",
            "comment": {
              "body": "The advancement this progress is concerning.",
              "tags": "Returns the relevant advancement.",
              "plain": "The advancement this progress is concerning.\n@return the relevant advancement"
            }
          },
          {
            "kind": "METHOD",
            "name": "getAwardedCriteria()",
            "comment": {
              "body": "Gets the criteria which have been awarded.",
              "tags": "Returns unmodifiable copy of criteria awarded.",
              "plain": "Gets the criteria which have been awarded.\n@return unmodifiable copy of criteria awarded"
            }
          },
          {
            "kind": "METHOD",
            "name": "getDateAwarded(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "criteria"
              }
            ],
            "comment": {
              "body": "Get the date the specified criteria was awarded.",
              "tags": "Returns date awarded or null if unawarded or criteria does not exist.",
              "plain": "Get the date the specified criteria was awarded.\n@param criteria the criteria to check\n@return date awarded or null if unawarded or criteria does not exist"
            }
          },
          {
            "kind": "METHOD",
            "name": "getRemainingCriteria()",
            "comment": {
              "body": "Get the criteria which have not been awarded.",
              "tags": "Returns unmodifiable copy of criteria remaining.",
              "plain": "Get the criteria which have not been awarded.\n@return unmodifiable copy of criteria remaining"
            }
          },
          {
            "kind": "METHOD",
            "name": "isDone()",
            "comment": {
              "body": "Check if all criteria for this advancement have been met.",
              "tags": "Returns true if this advancement is done.",
              "plain": "Check if all criteria for this advancement have been met.\n@return true if this advancement is done"
            }
          },
          {
            "kind": "METHOD",
            "name": "revokeCriteria(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "criteria"
              }
            ],
            "comment": {
              "body": "Mark the specified criteria as uncompleted.",
              "tags": "Returns true if removed, false if criteria does not exist or not awarded.",
              "plain": "Mark the specified criteria as uncompleted.\n@param criteria the criteria to mark\n@return true if removed, false if criteria does not exist or not awarded"
            }
          }
        ],
        "comment": {
          "body": "The individual status of an advancement for a player. This class is not\n reference safe as the underlying advancement may be reloaded.",
          "plain": "The individual status of an advancement for a player. This class is not\n reference safe as the underlying advancement may be reloaded."
        }
      }
    ]
  },
  {
    "kind": "PACKAGE",
    "name": "org.bukkit.attribute",
    "children": [
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.attribute.Attributable",
        "children": [
          {
            "kind": "METHOD",
            "name": "getAttribute(org.bukkit.attribute.Attribute)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "attribute"
              }
            ],
            "comment": {
              "body": "Gets the specified attribute instance from the object. This instance will\n be backed directly to the object and any changes will be visible at once.",
              "tags": "Returns the attribute instance or null if not applicable to this object.",
              "plain": "Gets the specified attribute instance from the object. This instance will\n be backed directly to the object and any changes will be visible at once.\n@param attribute the attribute to get\n@return the attribute instance or null if not applicable to this object"
            }
          }
        ],
        "comment": {
          "body": "Represents an object which may contain attributes.",
          "plain": "Represents an object which may contain attributes."
        }
      },
      {
        "kind": "ENUM",
        "name": "org.bukkit.attribute.Attribute",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "Attribute()"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "GENERIC_ARMOR",
            "comment": {
              "body": "Armor bonus of an Entity.",
              "plain": "Armor bonus of an Entity."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "GENERIC_ARMOR_TOUGHNESS",
            "comment": {
              "body": "Armor durability bonus of an Entity.",
              "plain": "Armor durability bonus of an Entity."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "GENERIC_ATTACK_DAMAGE",
            "comment": {
              "body": "Attack damage of an Entity.",
              "plain": "Attack damage of an Entity."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "GENERIC_ATTACK_SPEED",
            "comment": {
              "body": "Attack speed of an Entity.",
              "plain": "Attack speed of an Entity."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "GENERIC_FLYING_SPEED",
            "comment": {
              "body": "Flying speed of an Entity.",
              "plain": "Flying speed of an Entity."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "GENERIC_FOLLOW_RANGE",
            "comment": {
              "body": "Range at which an Entity will follow others.",
              "plain": "Range at which an Entity will follow others."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "GENERIC_KNOCKBACK_RESISTANCE",
            "comment": {
              "body": "Resistance of an Entity to knockback.",
              "plain": "Resistance of an Entity to knockback."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "GENERIC_LUCK",
            "comment": {
              "body": "Luck bonus of an Entity.",
              "plain": "Luck bonus of an Entity."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "GENERIC_MAX_HEALTH",
            "comment": {
              "body": "Maximum health of an Entity.",
              "plain": "Maximum health of an Entity."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "GENERIC_MOVEMENT_SPEED",
            "comment": {
              "body": "Movement speed of an Entity.",
              "plain": "Movement speed of an Entity."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "HORSE_JUMP_STRENGTH",
            "comment": {
              "body": "Strength with which a horse will jump.",
              "plain": "Strength with which a horse will jump."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ZOMBIE_SPAWN_REINFORCEMENTS",
            "comment": {
              "body": "Chance of a zombie to spawn reinforcements.",
              "plain": "Chance of a zombie to spawn reinforcements."
            }
          },
          {
            "kind": "METHOD",
            "name": "valueOf(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "values()"
          }
        ],
        "comment": {
          "body": "Types of attributes which may be present on an \u003ca href\u003d\"org/bukkit/attribute/Attributable.html\" title\u003d\"interface in org.bukkit.attribute\"\u003e\u003ccode\u003eAttributable\u003c/code\u003e\u003c/a\u003e.",
          "plain": "Types of attributes which may be present on an {@link Attributable}."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.attribute.AttributeInstance",
        "children": [
          {
            "kind": "METHOD",
            "name": "addModifier(org.bukkit.attribute.AttributeModifier)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "modifier"
              }
            ],
            "comment": {
              "body": "Add a modifier to this instance.",
              "plain": "Add a modifier to this instance.\n@param modifier to add"
            }
          },
          {
            "kind": "METHOD",
            "name": "getAttribute()",
            "comment": {
              "body": "The attribute pertaining to this instance.",
              "tags": "Returns the attribute.",
              "plain": "The attribute pertaining to this instance.\n@return the attribute"
            }
          },
          {
            "kind": "METHOD",
            "name": "getBaseValue()",
            "comment": {
              "body": "Base value of this instance before modifiers are applied.",
              "tags": "Returns base value.",
              "plain": "Base value of this instance before modifiers are applied.\n@return base value"
            }
          },
          {
            "kind": "METHOD",
            "name": "getDefaultValue()",
            "comment": {
              "body": "Gets the default value of the Attribute attached to this instance.",
              "tags": "Returns server default value.",
              "plain": "Gets the default value of the Attribute attached to this instance.\n@return server default value"
            }
          },
          {
            "kind": "METHOD",
            "name": "getModifiers()",
            "comment": {
              "body": "Get all modifiers present on this instance.",
              "tags": "Returns a copied collection of all modifiers.",
              "plain": "Get all modifiers present on this instance.\n@return a copied collection of all modifiers"
            }
          },
          {
            "kind": "METHOD",
            "name": "getValue()",
            "comment": {
              "body": "Get the value of this instance after all associated modifiers have been\n applied.",
              "tags": "Returns the total attribute value.",
              "plain": "Get the value of this instance after all associated modifiers have been\n applied.\n@return the total attribute value"
            }
          },
          {
            "kind": "METHOD",
            "name": "removeModifier(org.bukkit.attribute.AttributeModifier)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "modifier"
              }
            ],
            "comment": {
              "body": "Remove a modifier from this instance.",
              "plain": "Remove a modifier from this instance.\n@param modifier to remove"
            }
          },
          {
            "kind": "METHOD",
            "name": "setBaseValue(double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "value"
              }
            ],
            "comment": {
              "body": "Set the base value of this instance.",
              "plain": "Set the base value of this instance.\n@param value new base value"
            }
          }
        ],
        "comment": {
          "body": "Represents a mutable instance of an attribute and its associated modifiers\n and values.",
          "plain": "Represents a mutable instance of an attribute and its associated modifiers\n and values."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.attribute.AttributeModifier",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "AttributeModifier(java.lang.String,double,org.bukkit.attribute.AttributeModifier.Operation)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "amount"
              },
              {
                "kind": "PARAMETER",
                "name": "name"
              },
              {
                "kind": "PARAMETER",
                "name": "operation"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "AttributeModifier(java.util.UUID,java.lang.String,double,org.bukkit.attribute.AttributeModifier.Operation)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "amount"
              },
              {
                "kind": "PARAMETER",
                "name": "name"
              },
              {
                "kind": "PARAMETER",
                "name": "operation"
              },
              {
                "kind": "PARAMETER",
                "name": "uuid"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "amount"
          },
          {
            "kind": "METHOD",
            "name": "deserialize(java.util.Map\u003cjava.lang.String,java.lang.Object\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "args"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getAmount()",
            "comment": {
              "body": "Get the amount by which this modifier will apply its \u003ca href\u003d\"org/bukkit/attribute/AttributeModifier.Operation.html\" title\u003d\"enum in org.bukkit.attribute\"\u003e\u003ccode\u003eAttributeModifier.Operation\u003c/code\u003e\u003c/a\u003e.",
              "tags": "Returns modification amount.",
              "plain": "Get the amount by which this modifier will apply its {@link Operation}.\n@return modification amount"
            }
          },
          {
            "kind": "METHOD",
            "name": "getName()",
            "comment": {
              "body": "Get the name of this modifier.",
              "tags": "Returns name.",
              "plain": "Get the name of this modifier.\n@return name"
            }
          },
          {
            "kind": "METHOD",
            "name": "getOperation()",
            "comment": {
              "body": "Get the operation this modifier will apply.",
              "tags": "Returns operation.",
              "plain": "Get the operation this modifier will apply.\n@return operation"
            }
          },
          {
            "kind": "METHOD",
            "name": "getUniqueId()",
            "comment": {
              "body": "Get the unique ID for this modifier.",
              "tags": "Returns unique id.",
              "plain": "Get the unique ID for this modifier.\n@return unique id"
            }
          },
          {
            "kind": "FIELD",
            "name": "name"
          },
          {
            "kind": "FIELD",
            "name": "operation"
          },
          {
            "kind": "ENUM",
            "name": "org.bukkit.attribute.AttributeModifier.Operation",
            "children": [
              {
                "kind": "ENUM_CONSTANT",
                "name": "ADD_NUMBER",
                "comment": {
                  "body": "Adds (or subtracts) the specified amount to the base value.",
                  "plain": "Adds (or subtracts) the specified amount to the base value."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "ADD_SCALAR",
                "comment": {
                  "body": "Adds this scalar of amount to the base value.",
                  "plain": "Adds this scalar of amount to the base value."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "MULTIPLY_SCALAR_1",
                "comment": {
                  "body": "Multiply amount by this value, after adding 1 to it.",
                  "plain": "Multiply amount by this value, after adding 1 to it."
                }
              },
              {
                "kind": "CONSTRUCTOR",
                "name": "Operation()"
              },
              {
                "kind": "METHOD",
                "name": "valueOf(java.lang.String)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "name"
                  }
                ]
              },
              {
                "kind": "METHOD",
                "name": "values()"
              }
            ],
            "comment": {
              "body": "Enumerable operation to be applied.",
              "plain": "Enumerable operation to be applied."
            }
          },
          {
            "kind": "METHOD",
            "name": "serialize()"
          },
          {
            "kind": "FIELD",
            "name": "uuid"
          }
        ],
        "comment": {
          "body": "Concrete implementation of an attribute modifier.",
          "plain": "Concrete implementation of an attribute modifier."
        }
      }
    ]
  },
  {
    "kind": "PACKAGE",
    "name": "org.bukkit.block",
    "children": [
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.block.Banner",
        "children": [
          {
            "kind": "METHOD",
            "name": "addPattern(org.bukkit.block.banner.Pattern)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "pattern"
              }
            ],
            "comment": {
              "body": "Adds a new pattern on top of the existing\n patterns",
              "plain": "Adds a new pattern on top of the existing\n patterns\n@param pattern the new pattern to add"
            }
          },
          {
            "kind": "METHOD",
            "name": "getBaseColor()",
            "comment": {
              "body": "Returns the base color for this banner",
              "tags": "Returns the base color.",
              "plain": "Returns the base color for this banner\n@return the base color"
            }
          },
          {
            "kind": "METHOD",
            "name": "getPattern(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "i"
              }
            ],
            "comment": {
              "body": "Returns the pattern at the specified index",
              "tags": "Returns the pattern.",
              "plain": "Returns the pattern at the specified index\n@param i the index\n@return the pattern"
            }
          },
          {
            "kind": "METHOD",
            "name": "getPatterns()",
            "comment": {
              "body": "Returns a list of patterns on this banner",
              "tags": "Returns the patterns.",
              "plain": "Returns a list of patterns on this banner\n@return the patterns"
            }
          },
          {
            "kind": "METHOD",
            "name": "numberOfPatterns()",
            "comment": {
              "body": "Returns the number of patterns on this\n banner",
              "tags": "Returns the number of patterns.",
              "plain": "Returns the number of patterns on this\n banner\n@return the number of patterns"
            }
          },
          {
            "kind": "METHOD",
            "name": "removePattern(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "i"
              }
            ],
            "comment": {
              "body": "Removes the pattern at the specified index",
              "tags": "Returns the removed pattern.",
              "plain": "Removes the pattern at the specified index\n@param i the index\n@return the removed pattern"
            }
          },
          {
            "kind": "METHOD",
            "name": "setBaseColor(org.bukkit.DyeColor)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "color"
              }
            ],
            "comment": {
              "body": "Sets the base color for this banner",
              "plain": "Sets the base color for this banner\n@param color the base color"
            }
          },
          {
            "kind": "METHOD",
            "name": "setPattern(int,org.bukkit.block.banner.Pattern)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "i"
              },
              {
                "kind": "PARAMETER",
                "name": "pattern"
              }
            ],
            "comment": {
              "body": "Sets the pattern at the specified index",
              "plain": "Sets the pattern at the specified index\n@param i the index\n@param pattern the new pattern"
            }
          },
          {
            "kind": "METHOD",
            "name": "setPatterns(java.util.List\u003corg.bukkit.block.banner.Pattern\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "patterns"
              }
            ],
            "comment": {
              "body": "Sets the patterns used on this banner",
              "plain": "Sets the patterns used on this banner\n@param patterns the new list of patterns"
            }
          }
        ],
        "comment": {
          "body": "Represents a captured state of a banner.",
          "plain": "Represents a captured state of a banner."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.block.Beacon",
        "children": [
          {
            "kind": "METHOD",
            "name": "getEntitiesInRange()",
            "comment": {
              "body": "Returns the list of players within the beacon\u0027s range of effect.\n \u003cp\u003e\n This will return an empty list if the block represented by this state is\n no longer a beacon.",
              "tags": "Returns the players in range.",
              "plain": "Returns the list of players within the beacon\u0027s range of effect.\n \u003cp\u003e\n This will return an empty list if the block represented by this state is\n no longer a beacon.\n@return the players in range\n@throws IllegalStateException if this block state is not placed"
            }
          },
          {
            "kind": "METHOD",
            "name": "getInventory()"
          },
          {
            "kind": "METHOD",
            "name": "getPrimaryEffect()",
            "comment": {
              "body": "Returns the primary effect set on the beacon",
              "tags": "Returns the primary effect or null if not set.",
              "plain": "Returns the primary effect set on the beacon\n@return the primary effect or null if not set"
            }
          },
          {
            "kind": "METHOD",
            "name": "getSecondaryEffect()",
            "comment": {
              "body": "Returns the secondary effect set on the beacon.",
              "tags": "Returns the secondary effect or null if no secondary effect.",
              "plain": "Returns the secondary effect set on the beacon.\n@return the secondary effect or null if no secondary effect"
            }
          },
          {
            "kind": "METHOD",
            "name": "getSnapshotInventory()"
          },
          {
            "kind": "METHOD",
            "name": "getTier()",
            "comment": {
              "body": "Returns the tier of the beacon pyramid (0-4). The tier refers to the\n beacon\u0027s power level, based on how many layers of blocks are in the\n pyramid. Tier 1 refers to a beacon with one layer of 9 blocks under it.",
              "tags": "Returns the beacon tier.",
              "plain": "Returns the tier of the beacon pyramid (0-4). The tier refers to the\n beacon\u0027s power level, based on how many layers of blocks are in the\n pyramid. Tier 1 refers to a beacon with one layer of 9 blocks under it.\n@return the beacon tier"
            }
          },
          {
            "kind": "METHOD",
            "name": "setPrimaryEffect(org.bukkit.potion.PotionEffectType)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "effect"
              }
            ],
            "comment": {
              "body": "Set the primary effect on this beacon, or null to clear.",
              "plain": "Set the primary effect on this beacon, or null to clear.\n@param effect new primary effect"
            }
          },
          {
            "kind": "METHOD",
            "name": "setSecondaryEffect(org.bukkit.potion.PotionEffectType)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "effect"
              }
            ],
            "comment": {
              "body": "Set the secondary effect on this beacon, or null to clear. Note that tier\n must be \u0026gt;\u003d 4 for this effect to be active.",
              "plain": "Set the secondary effect on this beacon, or null to clear. Note that tier\n must be \u0026gt;\u003d 4 for this effect to be active.\n@param effect desired secondary effect"
            }
          }
        ],
        "comment": {
          "body": "Represents a captured state of a beacon.",
          "plain": "Represents a captured state of a beacon."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.block.Bed",
        "comment": {
          "body": "Represents a captured state of a bed.",
          "plain": "Represents a captured state of a bed."
        }
      },
      {
        "kind": "ENUM",
        "name": "org.bukkit.block.Biome",
        "children": [
          {
            "kind": "ENUM_CONSTANT",
            "name": "BEACHES"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BIRCH_FOREST"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BIRCH_FOREST_HILLS"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Biome()"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "COLD_BEACH"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "DEEP_OCEAN"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "DESERT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "DESERT_HILLS"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "EXTREME_HILLS"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "EXTREME_HILLS_WITH_TREES"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "FOREST"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "FOREST_HILLS"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "FROZEN_OCEAN"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "FROZEN_RIVER"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "HELL"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ICE_FLATS"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ICE_MOUNTAINS"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "JUNGLE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "JUNGLE_EDGE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "JUNGLE_HILLS"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "MESA"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "MESA_CLEAR_ROCK"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "MESA_ROCK"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "MUSHROOM_ISLAND"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "MUSHROOM_ISLAND_SHORE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "MUTATED_BIRCH_FOREST"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "MUTATED_BIRCH_FOREST_HILLS"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "MUTATED_DESERT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "MUTATED_EXTREME_HILLS"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "MUTATED_EXTREME_HILLS_WITH_TREES"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "MUTATED_FOREST"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "MUTATED_ICE_FLATS"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "MUTATED_JUNGLE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "MUTATED_JUNGLE_EDGE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "MUTATED_MESA"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "MUTATED_MESA_CLEAR_ROCK"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "MUTATED_MESA_ROCK"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "MUTATED_PLAINS"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "MUTATED_REDWOOD_TAIGA"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "MUTATED_REDWOOD_TAIGA_HILLS"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "MUTATED_ROOFED_FOREST"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "MUTATED_SAVANNA"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "MUTATED_SAVANNA_ROCK"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "MUTATED_SWAMPLAND"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "MUTATED_TAIGA"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "MUTATED_TAIGA_COLD"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "OCEAN"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "PLAINS"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "REDWOOD_TAIGA"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "REDWOOD_TAIGA_HILLS"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "RIVER"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ROOFED_FOREST"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SAVANNA"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SAVANNA_ROCK"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SKY"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SMALLER_EXTREME_HILLS"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "STONE_BEACH"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SWAMPLAND"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "TAIGA"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "TAIGA_COLD"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "TAIGA_COLD_HILLS"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "TAIGA_HILLS"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "VOID"
          },
          {
            "kind": "METHOD",
            "name": "valueOf(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "values()"
          }
        ],
        "comment": {
          "body": "Holds all accepted Biomes in the default server",
          "plain": "Holds all accepted Biomes in the default server"
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.block.Block",
        "children": [
          {
            "kind": "METHOD",
            "name": "breakNaturally()",
            "comment": {
              "body": "Breaks the block and spawns items as if a player had digged it",
              "tags": "Returns true if the block was destroyed.",
              "plain": "Breaks the block and spawns items as if a player had digged it\n@return true if the block was destroyed"
            }
          },
          {
            "kind": "METHOD",
            "name": "breakNaturally(org.bukkit.inventory.ItemStack)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "tool"
              }
            ],
            "comment": {
              "body": "Breaks the block and spawns items as if a player had digged it with a\n specific tool",
              "tags": "Returns true if the block was destroyed.",
              "plain": "Breaks the block and spawns items as if a player had digged it with a\n specific tool\n@param tool The tool or item in hand used for digging\n@return true if the block was destroyed"
            }
          },
          {
            "kind": "METHOD",
            "name": "getBiome()",
            "comment": {
              "body": "Returns the biome that this block resides in",
              "tags": "Returns Biome type containing this block.",
              "plain": "Returns the biome that this block resides in\n@return Biome type containing this block"
            }
          },
          {
            "kind": "METHOD",
            "name": "getBlockKey()",
            "comment": {
              "body": "Returns this block\u0027s coordinates packed into a long value\n \u003cp\u003e\u003c/p\u003e\n The return value can be computed as follows:\n \u003cp\u003e\u003c/p\u003e\n \u003ccode\u003elong value \u003d ((long)getX() \u0026amp; 0x7FFFFFF) | (((long)getZ() \u0026amp; 0x7FFFFFF) \u0026lt;\u0026lt; 27) | ((long)getY() \u0026lt;\u0026lt; 54);\u003c/code\u003e\n \u003cp\u003e\u003c/p\u003e\n And may be unpacked as follows:\n \u003cp\u003e\u003c/p\u003e\n \u003ccode\u003eint x \u003d (int) ((packed \u0026lt;\u0026lt; 37) \u0026gt;\u0026gt; 37);\u003c/code\u003e\n \u003cp\u003e\u003c/p\u003e\n \u003ccode\u003eint y \u003d (int) (packed \u0026gt;\u0026gt;\u0026gt; 54);\u003c/code\u003e\n \u003cp\u003e\u003c/p\u003e\n \u003ccode\u003eint z \u003d (int) ((packed \u0026lt;\u0026lt; 10) \u0026gt;\u0026gt; 37);\u003c/code\u003e",
              "tags": "Returns This block\u0027s x, y, and z coordinates packed into a long value.",
              "plain": "Returns this block\u0027s coordinates packed into a long value\n \u003cp\u003e\u003c/p\u003e\n The return value can be computed as follows:\n \u003cp\u003e\u003c/p\u003e\n {@code long value \u003d ((long)getX() \u0026 0x7FFFFFF) | (((long)getZ() \u0026 0x7FFFFFF) \u003c\u003c 27) | ((long)getY() \u003c\u003c 54);}\n \u003cp\u003e\u003c/p\u003e\n And may be unpacked as follows:\n \u003cp\u003e\u003c/p\u003e\n {@code int x \u003d (int) ((packed \u003c\u003c 37) \u003e\u003e 37);}\n \u003cp\u003e\u003c/p\u003e\n {@code int y \u003d (int) (packed \u003e\u003e\u003e 54);}\n \u003cp\u003e\u003c/p\u003e\n {@code int z \u003d (int) ((packed \u003c\u003c 10) \u003e\u003e 37);}\n@return This block\u0027s x, y, and z coordinates packed into a long value"
            }
          },
          {
            "kind": "METHOD",
            "name": "getBlockPower()",
            "comment": {
              "body": "Returns the redstone power being provided to this block",
              "tags": "Returns The power level..",
              "plain": "Returns the redstone power being provided to this block\n@return The power level."
            }
          },
          {
            "kind": "METHOD",
            "name": "getBlockPower(org.bukkit.block.BlockFace)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "face"
              }
            ],
            "comment": {
              "body": "Returns the redstone power being provided to this block face",
              "tags": "Returns The power level..",
              "plain": "Returns the redstone power being provided to this block face\n@param face the face of the block to query or BlockFace.SELF for the\n     block itself\n@return The power level."
            }
          },
          {
            "kind": "METHOD",
            "name": "getChunk()",
            "comment": {
              "body": "Gets the chunk which contains this block",
              "tags": "Returns Containing Chunk.",
              "plain": "Gets the chunk which contains this block\n@return Containing Chunk"
            }
          },
          {
            "kind": "METHOD",
            "name": "getData()",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Gets the metadata for this block",
              "tags": "Returns block specific metadata.",
              "plain": "Gets the metadata for this block\n@return block specific metadata\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "getDrops()",
            "comment": {
              "body": "Returns a list of items which would drop by destroying this block",
              "tags": "Returns a list of dropped items for this type of block.",
              "plain": "Returns a list of items which would drop by destroying this block\n@return a list of dropped items for this type of block"
            }
          },
          {
            "kind": "METHOD",
            "name": "getDrops(org.bukkit.inventory.ItemStack)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "tool"
              }
            ],
            "comment": {
              "body": "Returns a list of items which would drop by destroying this block with\n a specific tool",
              "tags": "Returns a list of dropped items for this type of block.",
              "plain": "Returns a list of items which would drop by destroying this block with\n a specific tool\n@param tool The tool or item in hand used for digging\n@return a list of dropped items for this type of block"
            }
          },
          {
            "kind": "METHOD",
            "name": "getFace(org.bukkit.block.Block)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "block"
              }
            ],
            "comment": {
              "body": "Gets the face relation of this block compared to the given block.\n \u003cp\u003e\n For example: \n \u003cpre\u003e\u003ccode\u003e\n Block current \u003d world.getBlockAt(100, 100, 100);\n Block target \u003d world.getBlockAt(100, 101, 100);\n\n current.getFace(target) \u003d\u003d BlockFace.Up;\n \u003c/code\u003e\u003c/pre\u003e\n \u003cbr\u003e\n If the given block is not connected to this block, null may be returned",
              "tags": "Returns BlockFace of this block which has the requested block, or null.",
              "plain": "Gets the face relation of this block compared to the given block.\n \u003cp\u003e\n For example: \n \u003cpre\u003e{@code\n Block current \u003d world.getBlockAt(100, 100, 100);\n Block target \u003d world.getBlockAt(100, 101, 100);\n\n current.getFace(target) \u003d\u003d BlockFace.Up;\n }\u003c/pre\u003e\n \u003cbr\u003e\n If the given block is not connected to this block, null may be returned\n@param block Block to compare against this block\n@return BlockFace of this block which has the requested block, or null"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHumidity()",
            "comment": {
              "body": "Gets the humidity of the biome of this block",
              "tags": "Returns Humidity of this block.",
              "plain": "Gets the humidity of the biome of this block\n@return Humidity of this block"
            }
          },
          {
            "kind": "METHOD",
            "name": "getLightFromBlocks()",
            "comment": {
              "body": "Get the amount of light at this block from nearby blocks.\n \u003cp\u003e\n Any light given from other sources (such as the sun) will be ignored.",
              "tags": "Returns Block light level.",
              "plain": "Get the amount of light at this block from nearby blocks.\n \u003cp\u003e\n Any light given from other sources (such as the sun) will be ignored.\n@return Block light level"
            }
          },
          {
            "kind": "METHOD",
            "name": "getLightFromSky()",
            "comment": {
              "body": "Get the amount of light at this block from the sky.\n \u003cp\u003e\n Any light given from other sources (such as blocks like torches) will\n be ignored.",
              "tags": "Returns Sky light level.",
              "plain": "Get the amount of light at this block from the sky.\n \u003cp\u003e\n Any light given from other sources (such as blocks like torches) will\n be ignored.\n@return Sky light level"
            }
          },
          {
            "kind": "METHOD",
            "name": "getLightLevel()",
            "comment": {
              "body": "Gets the light level between 0-15",
              "tags": "Returns light level.",
              "plain": "Gets the light level between 0-15\n@return light level"
            }
          },
          {
            "kind": "METHOD",
            "name": "getLocation()",
            "comment": {
              "body": "Gets the Location of the block",
              "tags": "Returns Location of block.",
              "plain": "Gets the Location of the block\n@return Location of block"
            }
          },
          {
            "kind": "METHOD",
            "name": "getLocation(org.bukkit.Location)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "loc"
              }
            ],
            "comment": {
              "body": "Stores the location of the block in the provided Location object.\n \u003cp\u003e\n If the provided Location is null this method does nothing and returns\n null.",
              "tags": "Returns The Location object provided or null.",
              "plain": "Stores the location of the block in the provided Location object.\n \u003cp\u003e\n If the provided Location is null this method does nothing and returns\n null.\n@param loc the location to copy into\n@return The Location object provided or null"
            }
          },
          {
            "kind": "METHOD",
            "name": "getPistonMoveReaction()",
            "comment": {
              "body": "Returns the reaction of the block when moved by a piston",
              "tags": "Returns reaction.",
              "plain": "Returns the reaction of the block when moved by a piston\n@return reaction"
            }
          },
          {
            "kind": "METHOD",
            "name": "getRelative(int,int,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "modX"
              },
              {
                "kind": "PARAMETER",
                "name": "modY"
              },
              {
                "kind": "PARAMETER",
                "name": "modZ"
              }
            ],
            "comment": {
              "body": "Gets the block at the given offsets",
              "tags": "Returns Block at the given offsets.",
              "plain": "Gets the block at the given offsets\n@param modX X-coordinate offset\n@param modY Y-coordinate offset\n@param modZ Z-coordinate offset\n@return Block at the given offsets"
            }
          },
          {
            "kind": "METHOD",
            "name": "getRelative(org.bukkit.block.BlockFace)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "face"
              }
            ],
            "comment": {
              "body": "Gets the block at the given face\n \u003cp\u003e\n This method is equal to getRelative(face, 1)",
              "tags": "Returns Block at the given face.",
              "plain": "Gets the block at the given face\n \u003cp\u003e\n This method is equal to getRelative(face, 1)\n@param face Face of this block to return\n@return Block at the given face\n@see #getRelative(BlockFace, int)"
            }
          },
          {
            "kind": "METHOD",
            "name": "getRelative(org.bukkit.block.BlockFace,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "distance"
              },
              {
                "kind": "PARAMETER",
                "name": "face"
              }
            ],
            "comment": {
              "body": "Gets the block at the given distance of the given face\n \u003cp\u003e\n For example, the following method places water at 100,102,100; two\n blocks above 100,100,100.\n\n \u003cpre\u003e\n Block block \u003d world.getBlockAt(100, 100, 100);\n Block shower \u003d block.getRelative(BlockFace.UP, 2);\n shower.setType(Material.WATER);\n \u003c/pre\u003e",
              "tags": "Returns Block at the given face.",
              "plain": "Gets the block at the given distance of the given face\n \u003cp\u003e\n For example, the following method places water at 100,102,100; two\n blocks above 100,100,100.\n\n \u003cpre\u003e\n Block block \u003d world.getBlockAt(100, 100, 100);\n Block shower \u003d block.getRelative(BlockFace.UP, 2);\n shower.setType(Material.WATER);\n \u003c/pre\u003e\n@param face Face of this block to return\n@param distance Distance to get the block at\n@return Block at the given face"
            }
          },
          {
            "kind": "METHOD",
            "name": "getState()",
            "comment": {
              "body": "Captures the current state of this block. You may then cast that state\n into any accepted type, such as Furnace or Sign.\n \u003cp\u003e\n The returned object will never be updated, and you are not guaranteed\n that (for example) a sign is still a sign after you capture its state.",
              "tags": "Returns BlockState with the current state of this block..",
              "plain": "Captures the current state of this block. You may then cast that state\n into any accepted type, such as Furnace or Sign.\n \u003cp\u003e\n The returned object will never be updated, and you are not guaranteed\n that (for example) a sign is still a sign after you capture its state.\n@return BlockState with the current state of this block."
            }
          },
          {
            "kind": "METHOD",
            "name": "getState(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "useSnapshot"
              }
            ],
            "comment": {
              "tags": "Returns BlockState with the current state of this block.",
              "plain": "@see #getState() optionally disables use of snapshot, to operate on real block data\n@param useSnapshot if this block is a TE, should we create a fully copy of the TileEntity\n@return BlockState with the current state of this block"
            }
          },
          {
            "kind": "METHOD",
            "name": "getTemperature()",
            "comment": {
              "body": "Gets the temperature of the biome of this block",
              "tags": "Returns Temperature of this block.",
              "plain": "Gets the temperature of the biome of this block\n@return Temperature of this block"
            }
          },
          {
            "kind": "METHOD",
            "name": "getType()",
            "comment": {
              "body": "Gets the type of this block",
              "tags": "Returns block type.",
              "plain": "Gets the type of this block\n@return block type"
            }
          },
          {
            "kind": "METHOD",
            "name": "getTypeId()",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Gets the type-id of this block",
              "tags": "Returns block type-id.",
              "plain": "Gets the type-id of this block\n@return block type-id\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "getWorld()",
            "comment": {
              "body": "Gets the world which contains this Block",
              "tags": "Returns World containing this block.",
              "plain": "Gets the world which contains this Block\n@return World containing this block"
            }
          },
          {
            "kind": "METHOD",
            "name": "getX()",
            "comment": {
              "body": "Gets the x-coordinate of this block",
              "tags": "Returns x-coordinate.",
              "plain": "Gets the x-coordinate of this block\n@return x-coordinate"
            }
          },
          {
            "kind": "METHOD",
            "name": "getY()",
            "comment": {
              "body": "Gets the y-coordinate of this block",
              "tags": "Returns y-coordinate.",
              "plain": "Gets the y-coordinate of this block\n@return y-coordinate"
            }
          },
          {
            "kind": "METHOD",
            "name": "getZ()",
            "comment": {
              "body": "Gets the z-coordinate of this block",
              "tags": "Returns z-coordinate.",
              "plain": "Gets the z-coordinate of this block\n@return z-coordinate"
            }
          },
          {
            "kind": "METHOD",
            "name": "isBlockFaceIndirectlyPowered(org.bukkit.block.BlockFace)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "face"
              }
            ],
            "comment": {
              "body": "Returns true if the block face is being indirectly powered by Redstone.",
              "tags": "Returns True if the block face is indirectly powered..",
              "plain": "Returns true if the block face is being indirectly powered by Redstone.\n@param face The block face\n@return True if the block face is indirectly powered."
            }
          },
          {
            "kind": "METHOD",
            "name": "isBlockFacePowered(org.bukkit.block.BlockFace)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "face"
              }
            ],
            "comment": {
              "body": "Returns true if the block face is being powered by Redstone.",
              "tags": "Returns True if the block face is powered..",
              "plain": "Returns true if the block face is being powered by Redstone.\n@param face The block face\n@return True if the block face is powered."
            }
          },
          {
            "kind": "METHOD",
            "name": "isBlockIndirectlyPowered()",
            "comment": {
              "body": "Returns true if the block is being indirectly powered by Redstone.",
              "tags": "Returns True if the block is indirectly powered..",
              "plain": "Returns true if the block is being indirectly powered by Redstone.\n@return True if the block is indirectly powered."
            }
          },
          {
            "kind": "METHOD",
            "name": "isBlockPowered()",
            "comment": {
              "body": "Returns true if the block is being powered by Redstone.",
              "tags": "Returns True if the block is powered..",
              "plain": "Returns true if the block is being powered by Redstone.\n@return True if the block is powered."
            }
          },
          {
            "kind": "METHOD",
            "name": "isEmpty()",
            "comment": {
              "body": "Checks if this block is empty.\n \u003cp\u003e\n A block is considered empty when \u003ca href\u003d\"org/bukkit/block/Block.html#getType()\"\u003e\u003ccode\u003eBlock.getType()\u003c/code\u003e\u003c/a\u003e returns \u003ca href\u003d\"org/bukkit/Material.html#AIR\"\u003e\u003ccode\u003eMaterial.AIR\u003c/code\u003e\u003c/a\u003e.",
              "tags": "Returns true if this block is empty.",
              "plain": "Checks if this block is empty.\n \u003cp\u003e\n A block is considered empty when {@link #getType()} returns {@link Material#AIR}.\n@return true if this block is empty"
            }
          },
          {
            "kind": "METHOD",
            "name": "isLiquid()",
            "comment": {
              "body": "Checks if this block is liquid.\n \u003cp\u003e\n A block is considered liquid when \u003ca href\u003d\"org/bukkit/block/Block.html#getType()\"\u003e\u003ccode\u003eBlock.getType()\u003c/code\u003e\u003c/a\u003e returns \u003ca href\u003d\"org/bukkit/Material.html#WATER\"\u003e\u003ccode\u003eMaterial.WATER\u003c/code\u003e\u003c/a\u003e, \u003ca href\u003d\"org/bukkit/Material.html#STATIONARY_WATER\"\u003e\u003ccode\u003eMaterial.STATIONARY_WATER\u003c/code\u003e\u003c/a\u003e, \u003ca href\u003d\"org/bukkit/Material.html#LAVA\"\u003e\u003ccode\u003eMaterial.LAVA\u003c/code\u003e\u003c/a\u003e or \u003ca href\u003d\"org/bukkit/Material.html#STATIONARY_LAVA\"\u003e\u003ccode\u003eMaterial.STATIONARY_LAVA\u003c/code\u003e\u003c/a\u003e.",
              "tags": "Returns true if this block is liquid.",
              "plain": "Checks if this block is liquid.\n \u003cp\u003e\n A block is considered liquid when {@link #getType()} returns {@link Material#WATER}, {@link Material#STATIONARY_WATER}, {@link Material#LAVA} or {@link Material#STATIONARY_LAVA}.\n@return true if this block is liquid"
            }
          },
          {
            "kind": "METHOD",
            "name": "setBiome(org.bukkit.block.Biome)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "bio"
              }
            ],
            "comment": {
              "body": "Sets the biome that this block resides in",
              "plain": "Sets the biome that this block resides in\n@param bio new Biome type for this block"
            }
          },
          {
            "kind": "METHOD",
            "name": "setData(byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Sets the metadata for this block",
              "plain": "Sets the metadata for this block\n@param data New block specific metadata\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "setData(byte,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "applyPhysics"
              },
              {
                "kind": "PARAMETER",
                "name": "data"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Sets the metadata for this block",
              "plain": "Sets the metadata for this block\n@param data New block specific metadata\n@param applyPhysics False to cancel physics from the changed block.\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "setType(org.bukkit.Material)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "comment": {
              "body": "Sets the type of this block",
              "plain": "Sets the type of this block\n@param type Material to change this block to"
            }
          },
          {
            "kind": "METHOD",
            "name": "setType(org.bukkit.Material,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "applyPhysics"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "comment": {
              "body": "Sets the type of this block",
              "plain": "Sets the type of this block\n@param type Material to change this block to\n@param applyPhysics False to cancel physics on the changed block."
            }
          },
          {
            "kind": "METHOD",
            "name": "setTypeId(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Sets the type-id of this block",
              "tags": "Returns whether the block was changed.",
              "plain": "Sets the type-id of this block\n@param type Type-Id to change this block to\n@return whether the block was changed\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "setTypeId(int,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "applyPhysics"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Sets the type-id of this block",
              "tags": "Returns whether the block was changed.",
              "plain": "Sets the type-id of this block\n@param type Type-Id to change this block to\n@param applyPhysics False to cancel physics on the changed block.\n@return whether the block was changed\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "setTypeIdAndData(int,byte,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "applyPhysics"
              },
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Sets the type-id of this block",
              "tags": "Returns whether the block was changed.",
              "plain": "Sets the type-id of this block\n@param type Type-Id to change this block to\n@param data The data value to change this block to\n@param applyPhysics False to cancel physics on the changed block\n@return whether the block was changed\n@deprecated Magic value"
            }
          }
        ],
        "comment": {
          "body": "Represents a block. This is a live object, and only one Block may exist for\n any given location in a world. The state of the block may change\n concurrently to your own handling of it; use block.getState() to get a\n snapshot state of a block which will not be modified.",
          "plain": "Represents a block. This is a live object, and only one Block may exist for\n any given location in a world. The state of the block may change\n concurrently to your own handling of it; use block.getState() to get a\n snapshot state of a block which will not be modified."
        }
      },
      {
        "kind": "ENUM",
        "name": "org.bukkit.block.BlockFace",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "BlockFace(int,int,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "modX"
              },
              {
                "kind": "PARAMETER",
                "name": "modY"
              },
              {
                "kind": "PARAMETER",
                "name": "modZ"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "BlockFace(org.bukkit.block.BlockFace,org.bukkit.block.BlockFace)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "face1"
              },
              {
                "kind": "PARAMETER",
                "name": "face2"
              }
            ]
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "DOWN"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "EAST"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "EAST_NORTH_EAST"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "EAST_SOUTH_EAST"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "NORTH"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "NORTH_EAST"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "NORTH_NORTH_EAST"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "NORTH_NORTH_WEST"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "NORTH_WEST"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SELF"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SOUTH"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SOUTH_EAST"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SOUTH_SOUTH_EAST"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SOUTH_SOUTH_WEST"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SOUTH_WEST"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "UP"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "WEST"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "WEST_NORTH_WEST"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "WEST_SOUTH_WEST"
          },
          {
            "kind": "METHOD",
            "name": "getModX()",
            "comment": {
              "body": "Get the amount of X-coordinates to modify to get the represented block",
              "tags": "Returns Amount of X-coordinates to modify.",
              "plain": "Get the amount of X-coordinates to modify to get the represented block\n@return Amount of X-coordinates to modify"
            }
          },
          {
            "kind": "METHOD",
            "name": "getModY()",
            "comment": {
              "body": "Get the amount of Y-coordinates to modify to get the represented block",
              "tags": "Returns Amount of Y-coordinates to modify.",
              "plain": "Get the amount of Y-coordinates to modify to get the represented block\n@return Amount of Y-coordinates to modify"
            }
          },
          {
            "kind": "METHOD",
            "name": "getModZ()",
            "comment": {
              "body": "Get the amount of Z-coordinates to modify to get the represented block",
              "tags": "Returns Amount of Z-coordinates to modify.",
              "plain": "Get the amount of Z-coordinates to modify to get the represented block\n@return Amount of Z-coordinates to modify"
            }
          },
          {
            "kind": "METHOD",
            "name": "getOppositeFace()"
          },
          {
            "kind": "FIELD",
            "name": "modX"
          },
          {
            "kind": "FIELD",
            "name": "modY"
          },
          {
            "kind": "FIELD",
            "name": "modZ"
          },
          {
            "kind": "METHOD",
            "name": "valueOf(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "values()"
          }
        ],
        "comment": {
          "body": "Represents the face of a block",
          "plain": "Represents the face of a block"
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.block.BlockState",
        "children": [
          {
            "kind": "METHOD",
            "name": "getBlock()",
            "comment": {
              "body": "Gets the block represented by this block state.",
              "tags": "Returns the block represented by this block state.",
              "plain": "Gets the block represented by this block state.\n@return the block represented by this block state\n@throws IllegalStateException if this block state is not placed"
            }
          },
          {
            "kind": "METHOD",
            "name": "getChunk()",
            "comment": {
              "body": "Gets the chunk which contains the block represented by this block state.",
              "tags": "Returns the containing Chunk.",
              "plain": "Gets the chunk which contains the block represented by this block state.\n@return the containing Chunk\n@throws IllegalStateException if this block state is not placed"
            }
          },
          {
            "kind": "METHOD",
            "name": "getData()",
            "comment": {
              "body": "Gets the metadata for this block state.",
              "tags": "Returns block specific metadata.",
              "plain": "Gets the metadata for this block state.\n@return block specific metadata"
            }
          },
          {
            "kind": "METHOD",
            "name": "getLightLevel()",
            "comment": {
              "body": "Gets the current light level of the block represented by this block state.",
              "tags": "Returns the light level between 0-15.",
              "plain": "Gets the current light level of the block represented by this block state.\n@return the light level between 0-15\n@throws IllegalStateException if this block state is not placed"
            }
          },
          {
            "kind": "METHOD",
            "name": "getLocation()",
            "comment": {
              "body": "Gets the location of this block state.\n \u003cp\u003e\n If this block state is not placed the location\u0027s world will be null!",
              "tags": "Returns the location.",
              "plain": "Gets the location of this block state.\n \u003cp\u003e\n If this block state is not placed the location\u0027s world will be null!\n@return the location"
            }
          },
          {
            "kind": "METHOD",
            "name": "getLocation(org.bukkit.Location)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "loc"
              }
            ],
            "comment": {
              "body": "Stores the location of this block state in the provided Location object.\n \u003cp\u003e\n If the provided Location is null this method does nothing and returns\n null.\n \u003cp\u003e\n If this block state is not placed the location\u0027s world will be null!",
              "tags": "Returns The Location object provided or null.",
              "plain": "Stores the location of this block state in the provided Location object.\n \u003cp\u003e\n If the provided Location is null this method does nothing and returns\n null.\n \u003cp\u003e\n If this block state is not placed the location\u0027s world will be null!\n@param loc the location to copy into\n@return The Location object provided or null"
            }
          },
          {
            "kind": "METHOD",
            "name": "getRawData()",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "tags": "Returns The data as a raw byte..",
              "plain": "@return The data as a raw byte.\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "getType()",
            "comment": {
              "body": "Gets the type of this block state.",
              "tags": "Returns block type.",
              "plain": "Gets the type of this block state.\n@return block type"
            }
          },
          {
            "kind": "METHOD",
            "name": "getTypeId()",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Gets the type-id of this block state.",
              "tags": "Returns block type-id.",
              "plain": "Gets the type-id of this block state.\n@return block type-id\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "getWorld()",
            "comment": {
              "body": "Gets the world which contains the block represented by this block state.",
              "tags": "Returns the world containing the block represented by this block state.",
              "plain": "Gets the world which contains the block represented by this block state.\n@return the world containing the block represented by this block state\n@throws IllegalStateException if this block state is not placed"
            }
          },
          {
            "kind": "METHOD",
            "name": "getX()",
            "comment": {
              "body": "Gets the x-coordinate of this block state.",
              "tags": "Returns x-coordinate.",
              "plain": "Gets the x-coordinate of this block state.\n@return x-coordinate"
            }
          },
          {
            "kind": "METHOD",
            "name": "getY()",
            "comment": {
              "body": "Gets the y-coordinate of this block state.",
              "tags": "Returns y-coordinate.",
              "plain": "Gets the y-coordinate of this block state.\n@return y-coordinate"
            }
          },
          {
            "kind": "METHOD",
            "name": "getZ()",
            "comment": {
              "body": "Gets the z-coordinate of this block state.",
              "tags": "Returns z-coordinate.",
              "plain": "Gets the z-coordinate of this block state.\n@return z-coordinate"
            }
          },
          {
            "kind": "METHOD",
            "name": "isPlaced()",
            "comment": {
              "body": "Returns whether this state is placed in the world.\n \u003cp\u003e\n Some methods will not work if the block state isn\u0027t\n placed in the world.",
              "tags": "Returns whether the state is placed in the world\n         or \u0027virtual\u0027 (e.g. on an itemstack).",
              "plain": "Returns whether this state is placed in the world.\n \u003cp\u003e\n Some methods will not work if the block state isn\u0027t\n placed in the world.\n@return whether the state is placed in the world\n         or \u0027virtual\u0027 (e.g. on an itemstack)"
            }
          },
          {
            "kind": "METHOD",
            "name": "setData(org.bukkit.material.MaterialData)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              }
            ],
            "comment": {
              "body": "Sets the metadata for this block state.",
              "plain": "Sets the metadata for this block state.\n@param data New block specific metadata"
            }
          },
          {
            "kind": "METHOD",
            "name": "setRawData(byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param data The new data value for the block.\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "setType(org.bukkit.Material)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "comment": {
              "body": "Sets the type of this block state.",
              "plain": "Sets the type of this block state.\n@param type Material to change this block state to"
            }
          },
          {
            "kind": "METHOD",
            "name": "setTypeId(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Sets the type-id of this block state.",
              "tags": "Returns Whether it worked?.",
              "plain": "Sets the type-id of this block state.\n@param type Type-Id to change this block state to\n@return Whether it worked?\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "update()",
            "comment": {
              "body": "Attempts to update the block represented by this state, setting it to\n the new values as defined by this state.\n \u003cp\u003e\n This has the same effect as calling update(false). That is to say,\n this will not modify the state of a block if it is no longer the same\n type as it was when this state was taken. It will return false in this\n eventuality.",
              "tags": "Returns true if the update was successful, otherwise false.",
              "plain": "Attempts to update the block represented by this state, setting it to\n the new values as defined by this state.\n \u003cp\u003e\n This has the same effect as calling update(false). That is to say,\n this will not modify the state of a block if it is no longer the same\n type as it was when this state was taken. It will return false in this\n eventuality.\n@return true if the update was successful, otherwise false\n@see #update(boolean)"
            }
          },
          {
            "kind": "METHOD",
            "name": "update(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "force"
              }
            ],
            "comment": {
              "body": "Attempts to update the block represented by this state, setting it to\n the new values as defined by this state.\n \u003cp\u003e\n This has the same effect as calling update(force, true). That is to\n say, this will trigger a physics update to surrounding blocks.",
              "tags": "Returns true if the update was successful, otherwise false.",
              "plain": "Attempts to update the block represented by this state, setting it to\n the new values as defined by this state.\n \u003cp\u003e\n This has the same effect as calling update(force, true). That is to\n say, this will trigger a physics update to surrounding blocks.\n@param force true to forcefully set the state\n@return true if the update was successful, otherwise false"
            }
          },
          {
            "kind": "METHOD",
            "name": "update(boolean,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "applyPhysics"
              },
              {
                "kind": "PARAMETER",
                "name": "force"
              }
            ],
            "comment": {
              "body": "Attempts to update the block represented by this state, setting it to\n the new values as defined by this state.\n \u003cp\u003e\n If this state is not placed, this will have no effect and return true.\n \u003cp\u003e\n Unless force is true, this will not modify the state of a block if it\n is no longer the same type as it was when this state was taken. It will\n return false in this eventuality.\n \u003cp\u003e\n If force is true, it will set the type of the block to match the new\n state, set the state data and then return true.\n \u003cp\u003e\n If applyPhysics is true, it will trigger a physics update on\n surrounding blocks which could cause them to update or disappear.",
              "tags": "Returns true if the update was successful, otherwise false.",
              "plain": "Attempts to update the block represented by this state, setting it to\n the new values as defined by this state.\n \u003cp\u003e\n If this state is not placed, this will have no effect and return true.\n \u003cp\u003e\n Unless force is true, this will not modify the state of a block if it\n is no longer the same type as it was when this state was taken. It will\n return false in this eventuality.\n \u003cp\u003e\n If force is true, it will set the type of the block to match the new\n state, set the state data and then return true.\n \u003cp\u003e\n If applyPhysics is true, it will trigger a physics update on\n surrounding blocks which could cause them to update or disappear.\n@param force true to forcefully set the state\n@param applyPhysics false to cancel updating physics on surrounding\n     blocks\n@return true if the update was successful, otherwise false"
            }
          }
        ],
        "comment": {
          "body": "Represents a captured state of a block, which will not change\n automatically.\n \u003cp\u003e\n Unlike Block, which only one object can exist per coordinate, BlockState\n can exist multiple times for any given Block. Note that another plugin may\n change the state of the block and you will not know, or they may change the\n block to another type entirely, causing your BlockState to become invalid.",
          "plain": "Represents a captured state of a block, which will not change\n automatically.\n \u003cp\u003e\n Unlike Block, which only one object can exist per coordinate, BlockState\n can exist multiple times for any given Block. Note that another plugin may\n change the state of the block and you will not know, or they may change the\n block to another type entirely, causing your BlockState to become invalid."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.block.BrewingStand",
        "children": [
          {
            "kind": "METHOD",
            "name": "getBrewingTime()",
            "comment": {
              "body": "How much time is left in the brewing cycle.",
              "tags": "Returns Brew Time.",
              "plain": "How much time is left in the brewing cycle.\n@return Brew Time"
            }
          },
          {
            "kind": "METHOD",
            "name": "getFuelLevel()",
            "comment": {
              "body": "Get the level of current fuel for brewing.",
              "tags": "Returns The fuel level.",
              "plain": "Get the level of current fuel for brewing.\n@return The fuel level"
            }
          },
          {
            "kind": "METHOD",
            "name": "getInventory()"
          },
          {
            "kind": "METHOD",
            "name": "getSnapshotInventory()"
          },
          {
            "kind": "METHOD",
            "name": "setBrewingTime(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "brewTime"
              }
            ],
            "comment": {
              "body": "Set the time left before brewing completes.",
              "plain": "Set the time left before brewing completes.\n@param brewTime Brewing time"
            }
          },
          {
            "kind": "METHOD",
            "name": "setFuelLevel(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "level"
              }
            ],
            "comment": {
              "body": "Set the level of current fuel for brewing.",
              "plain": "Set the level of current fuel for brewing.\n@param level fuel level"
            }
          }
        ],
        "comment": {
          "body": "Represents a captured state of a brewing stand.",
          "plain": "Represents a captured state of a brewing stand."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.block.Chest",
        "children": [
          {
            "kind": "METHOD",
            "name": "getBlockInventory()",
            "comment": {
              "body": "Gets the inventory of the chest block represented by this block state.\n \u003cp\u003e\n If the chest is a double chest, it returns just the portion of the\n inventory linked to the half of the chest corresponding to this block state.\n \u003cp\u003e\n If the block was changed to a different type in the meantime, the\n returned inventory might no longer be valid.\n \u003cp\u003e\n If this block state is not placed this will return the captured\n inventory snapshot instead.",
              "tags": "Returns the inventory.",
              "plain": "Gets the inventory of the chest block represented by this block state.\n \u003cp\u003e\n If the chest is a double chest, it returns just the portion of the\n inventory linked to the half of the chest corresponding to this block state.\n \u003cp\u003e\n If the block was changed to a different type in the meantime, the\n returned inventory might no longer be valid.\n \u003cp\u003e\n If this block state is not placed this will return the captured\n inventory snapshot instead.\n@return the inventory"
            }
          }
        ],
        "comment": {
          "body": "Represents a captured state of a chest.",
          "plain": "Represents a captured state of a chest."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.block.CommandBlock",
        "children": [
          {
            "kind": "METHOD",
            "name": "getCommand()",
            "comment": {
              "body": "Gets the command that this CommandBlock will run when powered.\n This will never return null.  If the CommandBlock does not have a\n command, an empty String will be returned instead.",
              "tags": "Returns Command that this CommandBlock will run when powered..",
              "plain": "Gets the command that this CommandBlock will run when powered.\n This will never return null.  If the CommandBlock does not have a\n command, an empty String will be returned instead.\n@return Command that this CommandBlock will run when powered."
            }
          },
          {
            "kind": "METHOD",
            "name": "getName()",
            "comment": {
              "body": "Gets the name of this CommandBlock.  The name is used with commands\n that this CommandBlock executes.  This name will never be null, and\n by default is \"@\".",
              "tags": "Returns Name of this CommandBlock..",
              "plain": "Gets the name of this CommandBlock.  The name is used with commands\n that this CommandBlock executes.  This name will never be null, and\n by default is \"@\".\n@return Name of this CommandBlock."
            }
          },
          {
            "kind": "METHOD",
            "name": "setCommand(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "command"
              }
            ],
            "comment": {
              "body": "Sets the command that this CommandBlock will run when powered.\n Setting the command to null is the same as setting it to an empty\n String.",
              "plain": "Sets the command that this CommandBlock will run when powered.\n Setting the command to null is the same as setting it to an empty\n String.\n@param command Command that this CommandBlock will run when powered."
            }
          },
          {
            "kind": "METHOD",
            "name": "setName(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ],
            "comment": {
              "body": "Sets the name of this CommandBlock.  The name is used with commands\n that this CommandBlock executes.  Setting the name to null is the\n same as setting it to \"@\".",
              "plain": "Sets the name of this CommandBlock.  The name is used with commands\n that this CommandBlock executes.  Setting the name to null is the\n same as setting it to \"@\".\n@param name New name for this CommandBlock."
            }
          }
        ],
        "comment": {
          "body": "Represents a captured state of a command block.",
          "plain": "Represents a captured state of a command block."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.block.Comparator",
        "comment": {
          "body": "Represents a captured state of an on / off comparator.",
          "plain": "Represents a captured state of an on / off comparator."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.block.Container",
        "children": [
          {
            "kind": "METHOD",
            "name": "getInventory()",
            "comment": {
              "body": "Gets the inventory of the block represented by this block state.\n \u003cp\u003e\n If the block was changed to a different type in the meantime, the\n returned inventory might no longer be valid.\n \u003cp\u003e\n If this block state is not placed this will return the captured inventory\n snapshot instead.",
              "tags": "Returns the inventory.",
              "plain": "Gets the inventory of the block represented by this block state.\n \u003cp\u003e\n If the block was changed to a different type in the meantime, the\n returned inventory might no longer be valid.\n \u003cp\u003e\n If this block state is not placed this will return the captured inventory\n snapshot instead.\n@return the inventory"
            }
          },
          {
            "kind": "METHOD",
            "name": "getSnapshotInventory()",
            "comment": {
              "body": "Gets the captured inventory snapshot of this container.\n \u003cp\u003e\n The returned inventory is not linked to any block. Any modifications to\n the returned inventory will not be applied to the block represented by\n this block state up until \u003ca href\u003d\"org/bukkit/block/BlockState.html#update(boolean,boolean)\"\u003e\u003ccode\u003eBlockState.update(boolean, boolean)\u003c/code\u003e\u003c/a\u003e has been\n called.",
              "tags": "Returns the captured inventory snapshot.",
              "plain": "Gets the captured inventory snapshot of this container.\n \u003cp\u003e\n The returned inventory is not linked to any block. Any modifications to\n the returned inventory will not be applied to the block represented by\n this block state up until {@link #update(boolean, boolean)} has been\n called.\n@return the captured inventory snapshot"
            }
          }
        ],
        "comment": {
          "body": "Represents a captured state of a container block.",
          "plain": "Represents a captured state of a container block."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.block.CreatureSpawner",
        "children": [
          {
            "kind": "METHOD",
            "name": "getCreatureTypeName()",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Get the spawner\u0027s creature type.",
              "tags": "Returns The creature type\u0027s name..",
              "plain": "Get the spawner\u0027s creature type.\n@return The creature type\u0027s name.\n@deprecated magic value, use {@link #getSpawnedType()}."
            }
          },
          {
            "kind": "METHOD",
            "name": "getDelay()",
            "comment": {
              "body": "Get the spawner\u0027s delay.\n \u003cbr\u003e\n This is the delay, in ticks, until the spawner will spawn its next mob.",
              "tags": "Returns The delay..",
              "plain": "Get the spawner\u0027s delay.\n \u003cbr\u003e\n This is the delay, in ticks, until the spawner will spawn its next mob.\n@return The delay."
            }
          },
          {
            "kind": "METHOD",
            "name": "getMaxNearbyEntities()",
            "comment": {
              "body": "Set the new maximum amount of similar entities that are allowed to be\n within spawning range of this spawner.\n \u003cbr\u003e\n If more than the maximum number of entities are within range, the spawner\n will not spawn and try again with a new \u003ca href\u003d\"org/bukkit/block/CreatureSpawner.html#getDelay()\"\u003e\u003ccode\u003eCreatureSpawner.getDelay()\u003c/code\u003e\u003c/a\u003e.\n \u003cbr\u003e\n Default value is 16.",
              "tags": "Returns the maximum number of nearby, similar, entities.",
              "plain": "Set the new maximum amount of similar entities that are allowed to be\n within spawning range of this spawner.\n \u003cbr\u003e\n If more than the maximum number of entities are within range, the spawner\n will not spawn and try again with a new {@link #getDelay()}.\n \u003cbr\u003e\n Default value is 16.\n@return the maximum number of nearby, similar, entities"
            }
          },
          {
            "kind": "METHOD",
            "name": "getMaxSpawnDelay()",
            "comment": {
              "body": "The maximum spawn delay amount (in ticks).\n \u003cbr\u003e\n This value is used when the spawner resets its delay (for any reason).\n It will choose a random number between \u003ca href\u003d\"org/bukkit/block/CreatureSpawner.html#getMinSpawnDelay()\"\u003e\u003ccode\u003eCreatureSpawner.getMinSpawnDelay()\u003c/code\u003e\u003c/a\u003e\n and \u003ca href\u003d\"org/bukkit/block/CreatureSpawner.html#getMaxSpawnDelay()\"\u003e\u003ccode\u003eCreatureSpawner.getMaxSpawnDelay()\u003c/code\u003e\u003c/a\u003e for its next \u003ca href\u003d\"org/bukkit/block/CreatureSpawner.html#getDelay()\"\u003e\u003ccode\u003eCreatureSpawner.getDelay()\u003c/code\u003e\u003c/a\u003e.\n \u003cbr\u003e\n This value \u003cb\u003emust\u003c/b\u003e be greater than 0 and less than or equal to\n \u003ca href\u003d\"org/bukkit/block/CreatureSpawner.html#getMaxSpawnDelay()\"\u003e\u003ccode\u003eCreatureSpawner.getMaxSpawnDelay()\u003c/code\u003e\u003c/a\u003e.\n\n Default value is 800 ticks.",
              "tags": "Returns the maximum spawn delay amount.",
              "plain": "The maximum spawn delay amount (in ticks).\n \u003cbr\u003e\n This value is used when the spawner resets its delay (for any reason).\n It will choose a random number between {@link #getMinSpawnDelay()}\n and {@link #getMaxSpawnDelay()} for its next {@link #getDelay()}.\n \u003cbr\u003e\n This value \u003cb\u003emust\u003c/b\u003e be greater than 0 and less than or equal to\n {@link #getMaxSpawnDelay()}.\n\n Default value is 800 ticks.\n@return the maximum spawn delay amount"
            }
          },
          {
            "kind": "METHOD",
            "name": "getMinSpawnDelay()",
            "comment": {
              "body": "The minimum spawn delay amount (in ticks).\n \u003cbr\u003e\n This value is used when the spawner resets its delay (for any reason).\n It will choose a random number between \u003ca href\u003d\"org/bukkit/block/CreatureSpawner.html#getMinSpawnDelay()\"\u003e\u003ccode\u003eCreatureSpawner.getMinSpawnDelay()\u003c/code\u003e\u003c/a\u003e\n and \u003ca href\u003d\"org/bukkit/block/CreatureSpawner.html#getMaxSpawnDelay()\"\u003e\u003ccode\u003eCreatureSpawner.getMaxSpawnDelay()\u003c/code\u003e\u003c/a\u003e for its next \u003ca href\u003d\"org/bukkit/block/CreatureSpawner.html#getDelay()\"\u003e\u003ccode\u003eCreatureSpawner.getDelay()\u003c/code\u003e\u003c/a\u003e.\n\n Default value is 200 ticks.",
              "tags": "Returns the minimum spawn delay amount.",
              "plain": "The minimum spawn delay amount (in ticks).\n \u003cbr\u003e\n This value is used when the spawner resets its delay (for any reason).\n It will choose a random number between {@link #getMinSpawnDelay()}\n and {@link #getMaxSpawnDelay()} for its next {@link #getDelay()}.\n\n Default value is 200 ticks.\n@return the minimum spawn delay amount"
            }
          },
          {
            "kind": "METHOD",
            "name": "getRequiredPlayerRange()",
            "comment": {
              "body": "Get the maximum distance(squared) a player can be in order for this\n spawner to be active.\n \u003cbr\u003e\n If this value is less than or equal to 0, this spawner is always active\n (given that there are players online).\n \u003cbr\u003e\n Default value is 16.",
              "tags": "Returns the maximum distance(squared) a player can be in order for this\n spawner to be active..",
              "plain": "Get the maximum distance(squared) a player can be in order for this\n spawner to be active.\n \u003cbr\u003e\n If this value is less than or equal to 0, this spawner is always active\n (given that there are players online).\n \u003cbr\u003e\n Default value is 16.\n@return the maximum distance(squared) a player can be in order for this\n spawner to be active."
            }
          },
          {
            "kind": "METHOD",
            "name": "getSpawnCount()",
            "comment": {
              "body": "Get how many mobs attempt to spawn.\n \u003cbr\u003e\n Default value is 4.",
              "tags": "Returns the current spawn count.",
              "plain": "Get how many mobs attempt to spawn.\n \u003cbr\u003e\n Default value is 4.\n@return the current spawn count"
            }
          },
          {
            "kind": "METHOD",
            "name": "getSpawnRange()",
            "comment": {
              "body": "Get the radius around which the spawner will attempt to spawn mobs in.\n \u003cbr\u003e\n This area is square, includes the block the spawner is in, and is\n centered on the spawner\u0027s x,z coordinates - not the spawner itself.\n \u003cbr\u003e\n It is 2 blocks high, centered on the spawner\u0027s y-coordinate (its bottom);\n thus allowing mobs to spawn as high as its top surface and as low\n as 1 block below its bottom surface.\n \u003cbr\u003e\n Default value is 4.",
              "tags": "Returns the spawn range.",
              "plain": "Get the radius around which the spawner will attempt to spawn mobs in.\n \u003cbr\u003e\n This area is square, includes the block the spawner is in, and is\n centered on the spawner\u0027s x,z coordinates - not the spawner itself.\n \u003cbr\u003e\n It is 2 blocks high, centered on the spawner\u0027s y-coordinate (its bottom);\n thus allowing mobs to spawn as high as its top surface and as low\n as 1 block below its bottom surface.\n \u003cbr\u003e\n Default value is 4.\n@return the spawn range"
            }
          },
          {
            "kind": "METHOD",
            "name": "getSpawnedType()",
            "comment": {
              "body": "Get the spawner\u0027s creature type.",
              "tags": "Returns The creature type..",
              "plain": "Get the spawner\u0027s creature type.\n@return The creature type."
            }
          },
          {
            "kind": "METHOD",
            "name": "setCreatureTypeByName(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "creatureType"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Set the spawner mob type.",
              "plain": "Set the spawner mob type.\n@param creatureType The creature type\u0027s name.\n@deprecated magic value, use\n {@link #setSpawnedType(org.bukkit.entity.EntityType)}."
            }
          },
          {
            "kind": "METHOD",
            "name": "setDelay(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "delay"
              }
            ],
            "comment": {
              "body": "Set the spawner\u0027s delay.\n \u003cbr\u003e\n If set to -1, the spawn delay will be reset to a random value between\n \u003ca href\u003d\"org/bukkit/block/CreatureSpawner.html#getMinSpawnDelay()\"\u003e\u003ccode\u003eCreatureSpawner.getMinSpawnDelay()\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"org/bukkit/block/CreatureSpawner.html#getMaxSpawnDelay()\"\u003e\u003ccode\u003eCreatureSpawner.getMaxSpawnDelay()\u003c/code\u003e\u003c/a\u003e.",
              "plain": "Set the spawner\u0027s delay.\n \u003cbr\u003e\n If set to -1, the spawn delay will be reset to a random value between\n {@link #getMinSpawnDelay} and {@link #getMaxSpawnDelay()}.\n@param delay The delay."
            }
          },
          {
            "kind": "METHOD",
            "name": "setMaxNearbyEntities(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "maxNearbyEntities"
              }
            ],
            "comment": {
              "body": "Set the maximum number of similar entities that are allowed to be within\n spawning range of this spawner.\n \u003cbr\u003e\n Similar entities are entities that are of the same \u003ca href\u003d\"org/bukkit/entity/EntityType.html\" title\u003d\"enum in org.bukkit.entity\"\u003e\u003ccode\u003eEntityType\u003c/code\u003e\u003c/a\u003e",
              "plain": "Set the maximum number of similar entities that are allowed to be within\n spawning range of this spawner.\n \u003cbr\u003e\n Similar entities are entities that are of the same {@link EntityType}\n@param maxNearbyEntities the maximum number of nearby, similar, entities"
            }
          },
          {
            "kind": "METHOD",
            "name": "setMaxSpawnDelay(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "delay"
              }
            ],
            "comment": {
              "body": "Set the maximum spawn delay amount (in ticks).\n \u003cbr\u003e\n This value \u003cb\u003emust\u003c/b\u003e be greater than 0, as well as greater than or\n equal to \u003ca href\u003d\"org/bukkit/block/CreatureSpawner.html#getMinSpawnDelay()\"\u003e\u003ccode\u003eCreatureSpawner.getMinSpawnDelay()\u003c/code\u003e\u003c/a\u003e",
              "plain": "Set the maximum spawn delay amount (in ticks).\n \u003cbr\u003e\n This value \u003cb\u003emust\u003c/b\u003e be greater than 0, as well as greater than or\n equal to {@link #getMinSpawnDelay()}\n@see #getMaxSpawnDelay()\n@param delay the new maximum spawn delay amount"
            }
          },
          {
            "kind": "METHOD",
            "name": "setMinSpawnDelay(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "delay"
              }
            ],
            "comment": {
              "body": "Set the minimum spawn delay amount (in ticks).",
              "plain": "Set the minimum spawn delay amount (in ticks).\n@see #getMinSpawnDelay()\n@param delay the minimum spawn delay amount"
            }
          },
          {
            "kind": "METHOD",
            "name": "setRequiredPlayerRange(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "requiredPlayerRange"
              }
            ],
            "comment": {
              "body": "Set the maximum distance (squared) a player can be in order for this\n spawner to be active.\n \u003cbr\u003e\n Setting this value to less than or equal to 0 will make this spawner\n always active (given that there are players online).",
              "plain": "Set the maximum distance (squared) a player can be in order for this\n spawner to be active.\n \u003cbr\u003e\n Setting this value to less than or equal to 0 will make this spawner\n always active (given that there are players online).\n@param requiredPlayerRange the maximum distance (squared) a player can be\n in order for this spawner to be active."
            }
          },
          {
            "kind": "METHOD",
            "name": "setSpawnCount(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "spawnCount"
              }
            ],
            "comment": {
              "body": "Set how many mobs attempt to spawn.",
              "plain": "Set how many mobs attempt to spawn.\n@param spawnCount the new spawn count"
            }
          },
          {
            "kind": "METHOD",
            "name": "setSpawnRange(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "spawnRange"
              }
            ],
            "comment": {
              "body": "Set the new spawn range.\n \u003cbr\u003e",
              "plain": "Set the new spawn range.\n \u003cbr\u003e\n@see #getSpawnRange()\n@param spawnRange the new spawn range"
            }
          },
          {
            "kind": "METHOD",
            "name": "setSpawnedType(org.bukkit.entity.EntityType)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "creatureType"
              }
            ],
            "comment": {
              "body": "Set the spawner\u0027s creature type.",
              "plain": "Set the spawner\u0027s creature type.\n@param creatureType The creature type."
            }
          }
        ],
        "comment": {
          "body": "Represents a captured state of a creature spawner.",
          "plain": "Represents a captured state of a creature spawner."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.block.DaylightDetector",
        "comment": {
          "body": "Represents a captured state of a (possibly inverted) daylight detector.",
          "plain": "Represents a captured state of a (possibly inverted) daylight detector."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.block.Dispenser",
        "children": [
          {
            "kind": "METHOD",
            "name": "dispense()",
            "comment": {
              "body": "Attempts to dispense the contents of the dispenser.\n \u003cp\u003e\n If the block represented by this state is no longer a dispenser, this\n will return false.",
              "tags": "Returns true if successful, otherwise false.",
              "plain": "Attempts to dispense the contents of the dispenser.\n \u003cp\u003e\n If the block represented by this state is no longer a dispenser, this\n will return false.\n@return true if successful, otherwise false\n@throws IllegalStateException if this block state is not placed"
            }
          },
          {
            "kind": "METHOD",
            "name": "getBlockProjectileSource()",
            "comment": {
              "body": "Gets the BlockProjectileSource object for the dispenser.\n \u003cp\u003e\n If the block represented by this state is no longer a dispenser, this\n will return null.",
              "tags": "Returns a BlockProjectileSource if valid, otherwise null.",
              "plain": "Gets the BlockProjectileSource object for the dispenser.\n \u003cp\u003e\n If the block represented by this state is no longer a dispenser, this\n will return null.\n@return a BlockProjectileSource if valid, otherwise null\n@throws IllegalStateException if this block state is not placed"
            }
          }
        ],
        "comment": {
          "body": "Represents a captured state of a dispenser.",
          "plain": "Represents a captured state of a dispenser."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.block.DoubleChest",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "DoubleChest(org.bukkit.inventory.DoubleChestInventory)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "chest"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getInventory()"
          },
          {
            "kind": "METHOD",
            "name": "getLeftSide()"
          },
          {
            "kind": "METHOD",
            "name": "getLocation()"
          },
          {
            "kind": "METHOD",
            "name": "getRightSide()"
          },
          {
            "kind": "METHOD",
            "name": "getWorld()"
          },
          {
            "kind": "METHOD",
            "name": "getX()"
          },
          {
            "kind": "METHOD",
            "name": "getY()"
          },
          {
            "kind": "METHOD",
            "name": "getZ()"
          },
          {
            "kind": "FIELD",
            "name": "inventory"
          }
        ],
        "comment": {
          "body": "Represents a double chest.",
          "plain": "Represents a double chest."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.block.Dropper",
        "children": [
          {
            "kind": "METHOD",
            "name": "drop()",
            "comment": {
              "body": "Tries to drop a randomly selected item from the dropper\u0027s inventory,\n following the normal behavior of a dropper.\n \u003cp\u003e\n Normal behavior of a dropper is as follows:\n \u003cp\u003e\n If the block that the dropper is facing is an InventoryHolder,\n the randomly selected ItemStack is placed within that \n Inventory in the first slot that\u0027s available, starting with 0 and\n counting up.  If the inventory is full, nothing happens.\n \u003cp\u003e\n If the block that the dropper is facing is not an InventoryHolder,\n the randomly selected ItemStack is dropped on\n the ground in the form of an \u003ca href\u003d\"org/bukkit/entity/Item.html\" title\u003d\"interface in org.bukkit.entity\"\u003e\u003ccode\u003eItem\u003c/code\u003e\u003c/a\u003e.\n \u003cp\u003e\n If the block represented by this state is no longer a dropper, this will\n do nothing.",
              "plain": "Tries to drop a randomly selected item from the dropper\u0027s inventory,\n following the normal behavior of a dropper.\n \u003cp\u003e\n Normal behavior of a dropper is as follows:\n \u003cp\u003e\n If the block that the dropper is facing is an InventoryHolder,\n the randomly selected ItemStack is placed within that \n Inventory in the first slot that\u0027s available, starting with 0 and\n counting up.  If the inventory is full, nothing happens.\n \u003cp\u003e\n If the block that the dropper is facing is not an InventoryHolder,\n the randomly selected ItemStack is dropped on\n the ground in the form of an {@link org.bukkit.entity.Item Item}.\n \u003cp\u003e\n If the block represented by this state is no longer a dropper, this will\n do nothing.\n@throws IllegalStateException if this block state is not placed"
            }
          }
        ],
        "comment": {
          "body": "Represents a captured state of a dropper.",
          "plain": "Represents a captured state of a dropper."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.block.EnchantingTable",
        "comment": {
          "body": "Represents a captured state of an enchanting table.",
          "plain": "Represents a captured state of an enchanting table."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.block.EndGateway",
        "children": [
          {
            "kind": "METHOD",
            "name": "getExitLocation()",
            "comment": {
              "body": "Gets the location that entities are teleported to when \n entering the gateway portal.\n \u003cp\u003e\n If this block state is not placed the location\u0027s world will be null.",
              "tags": "Returns the gateway exit location.",
              "plain": "Gets the location that entities are teleported to when \n entering the gateway portal.\n \u003cp\u003e\n If this block state is not placed the location\u0027s world will be null.\n@return the gateway exit location"
            }
          },
          {
            "kind": "METHOD",
            "name": "isExactTeleport()",
            "comment": {
              "body": "Gets whether this gateway will teleport entities directly to\n the exit location instead of finding a nearby location.",
              "tags": "Returns true if the gateway is teleporting to the exact location.",
              "plain": "Gets whether this gateway will teleport entities directly to\n the exit location instead of finding a nearby location.\n@return true if the gateway is teleporting to the exact location"
            }
          },
          {
            "kind": "METHOD",
            "name": "setExactTeleport(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "exact"
              }
            ],
            "comment": {
              "body": "Sets whether this gateway will teleport entities directly to\n the exit location instead of finding a nearby location.",
              "plain": "Sets whether this gateway will teleport entities directly to\n the exit location instead of finding a nearby location.\n@param exact whether to teleport to the exact location"
            }
          },
          {
            "kind": "METHOD",
            "name": "setExitLocation(org.bukkit.Location)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "location"
              }
            ],
            "comment": {
              "body": "Sets the exit location that entities are teleported to when\n they enter the gateway portal.\n \u003cp\u003e\n If this block state is not placed the location\u0027s world has to be null.",
              "plain": "Sets the exit location that entities are teleported to when\n they enter the gateway portal.\n \u003cp\u003e\n If this block state is not placed the location\u0027s world has to be null.\n@param location the new exit location\n@throws IllegalArgumentException for differing worlds"
            }
          }
        ],
        "comment": {
          "body": "Represents a captured state of an end gateway.",
          "plain": "Represents a captured state of an end gateway."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.block.EnderChest",
        "comment": {
          "body": "Represents a captured state of an ender chest.",
          "plain": "Represents a captured state of an ender chest."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.block.FlowerPot",
        "children": [
          {
            "kind": "METHOD",
            "name": "getContents()",
            "comment": {
              "body": "Gets the item present in this flower pot.",
              "tags": "Returns item present, or null for empty..",
              "plain": "Gets the item present in this flower pot.\n@return item present, or null for empty."
            }
          },
          {
            "kind": "METHOD",
            "name": "setContents(org.bukkit.material.MaterialData)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "item"
              }
            ],
            "comment": {
              "body": "Sets the item present in this flower pot.\n\n NOTE: The Vanilla Minecraft client will currently not refresh this until\n a block update is triggered.",
              "plain": "Sets the item present in this flower pot.\n\n NOTE: The Vanilla Minecraft client will currently not refresh this until\n a block update is triggered.\n@param item new item, or null for empty."
            }
          }
        ],
        "comment": {
          "body": "Represents a captured state of a flower pot.",
          "plain": "Represents a captured state of a flower pot."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.block.Furnace",
        "children": [
          {
            "kind": "METHOD",
            "name": "getBurnTime()",
            "comment": {
              "body": "Get burn time.",
              "tags": "Returns Burn time.",
              "plain": "Get burn time.\n@return Burn time"
            }
          },
          {
            "kind": "METHOD",
            "name": "getCookTime()",
            "comment": {
              "body": "Get cook time.",
              "tags": "Returns Cook time.",
              "plain": "Get cook time.\n@return Cook time"
            }
          },
          {
            "kind": "METHOD",
            "name": "getInventory()"
          },
          {
            "kind": "METHOD",
            "name": "getSnapshotInventory()"
          },
          {
            "kind": "METHOD",
            "name": "setBurnTime(short)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "burnTime"
              }
            ],
            "comment": {
              "body": "Set burn time.",
              "plain": "Set burn time.\n@param burnTime Burn time"
            }
          },
          {
            "kind": "METHOD",
            "name": "setCookTime(short)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cookTime"
              }
            ],
            "comment": {
              "body": "Set cook time.",
              "plain": "Set cook time.\n@param cookTime Cook time"
            }
          }
        ],
        "comment": {
          "body": "Represents a captured state of a furnace.",
          "plain": "Represents a captured state of a furnace."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.block.Hopper",
        "comment": {
          "body": "Represents a captured state of a hopper.",
          "plain": "Represents a captured state of a hopper."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.block.Jukebox",
        "children": [
          {
            "kind": "METHOD",
            "name": "eject()",
            "comment": {
              "body": "Stops the jukebox playing and ejects the current record.\n \u003cp\u003e\n If the block represented by this state is no longer a jukebox, this will\n do nothing and return false.",
              "tags": "Returns True if a record was ejected; false if there was none playing.",
              "plain": "Stops the jukebox playing and ejects the current record.\n \u003cp\u003e\n If the block represented by this state is no longer a jukebox, this will\n do nothing and return false.\n@return True if a record was ejected; false if there was none playing\n@throws IllegalStateException if this block state is not placed"
            }
          },
          {
            "kind": "METHOD",
            "name": "getPlaying()",
            "comment": {
              "body": "Gets the record being played.",
              "tags": "Returns The record Material, or AIR if none is playing.",
              "plain": "Gets the record being played.\n@return The record Material, or AIR if none is playing"
            }
          },
          {
            "kind": "METHOD",
            "name": "isPlaying()",
            "comment": {
              "body": "Checks if the jukebox is playing a record.",
              "tags": "Returns True if there is a record playing.",
              "plain": "Checks if the jukebox is playing a record.\n@return True if there is a record playing"
            }
          },
          {
            "kind": "METHOD",
            "name": "setPlaying(org.bukkit.Material)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "record"
              }
            ],
            "comment": {
              "body": "Sets the record being played.",
              "plain": "Sets the record being played.\n@param record The record Material, or null/AIR to stop playing"
            }
          }
        ],
        "comment": {
          "body": "Represents a captured state of a jukebox.",
          "plain": "Represents a captured state of a jukebox."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.block.Lockable",
        "children": [
          {
            "kind": "METHOD",
            "name": "getLock()",
            "comment": {
              "body": "Gets the key needed to access the container.",
              "tags": "Returns the key needed..",
              "plain": "Gets the key needed to access the container.\n@return the key needed."
            }
          },
          {
            "kind": "METHOD",
            "name": "isLocked()",
            "comment": {
              "body": "Checks if the container has a valid (non empty) key.",
              "tags": "Returns true if the key is valid..",
              "plain": "Checks if the container has a valid (non empty) key.\n@return true if the key is valid."
            }
          },
          {
            "kind": "METHOD",
            "name": "setLock(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "key"
              }
            ],
            "comment": {
              "body": "Sets the key required to access this container. Set to null (or empty\n string) to remove key.",
              "plain": "Sets the key required to access this container. Set to null (or empty\n string) to remove key.\n@param key the key required to access the container."
            }
          }
        ],
        "comment": {
          "body": "Represents a block (usually a container) that may be locked. When a lock is\n active an item with a name corresponding to the key will be required to open\n this block.",
          "plain": "Represents a block (usually a container) that may be locked. When a lock is\n active an item with a name corresponding to the key will be required to open\n this block."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.block.NoteBlock",
        "children": [
          {
            "kind": "METHOD",
            "name": "getNote()",
            "comment": {
              "body": "Gets the note.",
              "tags": "Returns The note..",
              "plain": "Gets the note.\n@return The note."
            }
          },
          {
            "kind": "METHOD",
            "name": "getRawNote()",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Gets the note.",
              "tags": "Returns The note ID..",
              "plain": "Gets the note.\n@return The note ID.\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "play()",
            "comment": {
              "body": "Attempts to play the note at the block.\n \u003cp\u003e\n If the block represented by this block state is no longer a note block,\n this will return false.",
              "tags": "Returns true if successful, otherwise false.",
              "plain": "Attempts to play the note at the block.\n \u003cp\u003e\n If the block represented by this block state is no longer a note block,\n this will return false.\n@return true if successful, otherwise false\n@throws IllegalStateException if this block state is not placed"
            }
          },
          {
            "kind": "METHOD",
            "name": "play(byte,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "instrument"
              },
              {
                "kind": "PARAMETER",
                "name": "note"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Plays an arbitrary note with an arbitrary instrument at the block.\n \u003cp\u003e\n If the block represented by this block state is no longer a note block,\n this will return false.",
              "tags": "Returns true if successful, otherwise false.",
              "plain": "Plays an arbitrary note with an arbitrary instrument at the block.\n \u003cp\u003e\n If the block represented by this block state is no longer a note block,\n this will return false.\n@param instrument Instrument ID\n@param note Note ID\n@return true if successful, otherwise false\n@throws IllegalStateException if this block state is not placed\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "play(org.bukkit.Instrument,org.bukkit.Note)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "instrument"
              },
              {
                "kind": "PARAMETER",
                "name": "note"
              }
            ],
            "comment": {
              "body": "Plays an arbitrary note with an arbitrary instrument at the block.\n \u003cp\u003e\n If the block represented by this block state is no longer a note block,\n this will return false.",
              "tags": "Returns true if successful, otherwise false.",
              "plain": "Plays an arbitrary note with an arbitrary instrument at the block.\n \u003cp\u003e\n If the block represented by this block state is no longer a note block,\n this will return false.\n@param instrument The instrument\n@param note The note\n@return true if successful, otherwise false\n@throws IllegalStateException if this block state is not placed\n@see Instrument Note"
            }
          },
          {
            "kind": "METHOD",
            "name": "setNote(org.bukkit.Note)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "note"
              }
            ],
            "comment": {
              "body": "Set the note.",
              "plain": "Set the note.\n@param note The note."
            }
          },
          {
            "kind": "METHOD",
            "name": "setRawNote(byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "note"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Set the note.",
              "plain": "Set the note.\n@param note The note ID.\n@deprecated Magic value"
            }
          }
        ],
        "comment": {
          "body": "Represents a captured state of a note block.",
          "plain": "Represents a captured state of a note block."
        }
      },
      {
        "kind": "ENUM",
        "name": "org.bukkit.block.PistonMoveReaction",
        "children": [
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLOCK",
            "comment": {
              "body": "Indicates that the block will resist being pushed or pulled.",
              "plain": "Indicates that the block will resist being pushed or pulled."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BREAK",
            "comment": {
              "body": "Indicates the block is fragile and will break if pushed on.",
              "plain": "Indicates the block is fragile and will break if pushed on."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "IGNORE",
            "comment": {
              "body": "Indicates that the entity will ignore any interaction(s) with\n pistons.\n \u003cbr\u003e\n Blocks should use \u003ca href\u003d\"org/bukkit/block/PistonMoveReaction.html#BLOCK\"\u003e\u003ccode\u003ePistonMoveReaction.BLOCK\u003c/code\u003e\u003c/a\u003e.",
              "plain": "Indicates that the entity will ignore any interaction(s) with\n pistons.\n \u003cbr\u003e\n Blocks should use {@link PistonMoveReaction#BLOCK}."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "MOVE",
            "comment": {
              "body": "Indicates that the block can be pushed or pulled.",
              "plain": "Indicates that the block can be pushed or pulled."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "PUSH_ONLY",
            "comment": {
              "body": "Indicates that the block can only be pushed by pistons, not pulled.",
              "plain": "Indicates that the block can only be pushed by pistons, not pulled."
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "PistonMoveReaction(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "id"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "byId"
          },
          {
            "kind": "METHOD",
            "name": "getById(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "id"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "tags": "Returns The move reaction with that ID.",
              "plain": "@param id An ID\n@return The move reaction with that ID\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "getId()",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "tags": "Returns The ID of the move reaction.",
              "plain": "@return The ID of the move reaction\n@deprecated Magic value"
            }
          },
          {
            "kind": "FIELD",
            "name": "id"
          },
          {
            "kind": "METHOD",
            "name": "valueOf(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "values()"
          }
        ],
        "comment": {
          "body": "Represents how a block or entity will react when interacting with a piston\n when it is extending or retracting.",
          "plain": "Represents how a block or entity will react when interacting with a piston\n when it is extending or retracting."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.block.ShulkerBox",
        "children": [
          {
            "kind": "METHOD",
            "name": "getColor()",
            "comment": {
              "body": "Get the \u003ca href\u003d\"org/bukkit/DyeColor.html\" title\u003d\"enum in org.bukkit\"\u003e\u003ccode\u003eDyeColor\u003c/code\u003e\u003c/a\u003e corresponding to this ShulkerBox",
              "tags": "Returns the \u003ca href\u003d\"org/bukkit/DyeColor.html\" title\u003d\"enum in org.bukkit\"\u003e\u003ccode\u003eDyeColor\u003c/code\u003e\u003c/a\u003e of this ShulkerBox.",
              "plain": "Get the {@link DyeColor} corresponding to this ShulkerBox\n@return the {@link DyeColor} of this ShulkerBox"
            }
          }
        ],
        "comment": {
          "body": "Represents a captured state of a ShulkerBox.",
          "plain": "Represents a captured state of a ShulkerBox."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.block.Sign",
        "children": [
          {
            "kind": "METHOD",
            "name": "getLine(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "index"
              }
            ],
            "comment": {
              "body": "Gets the line of text at the specified index.\n \u003cp\u003e\n For example, getLine(0) will return the first line of text.",
              "tags": "Returns Text on the given line.",
              "plain": "Gets the line of text at the specified index.\n \u003cp\u003e\n For example, getLine(0) will return the first line of text.\n@param index Line number to get the text from, starting at 0\n@throws IndexOutOfBoundsException Thrown when the line does not exist\n@return Text on the given line"
            }
          },
          {
            "kind": "METHOD",
            "name": "getLines()",
            "comment": {
              "body": "Gets all the lines of text currently on this sign.",
              "tags": "Returns Array of Strings containing each line of text.",
              "plain": "Gets all the lines of text currently on this sign.\n@return Array of Strings containing each line of text"
            }
          },
          {
            "kind": "METHOD",
            "name": "setLine(int,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "index"
              },
              {
                "kind": "PARAMETER",
                "name": "line"
              }
            ],
            "comment": {
              "body": "Sets the line of text at the specified index.\n \u003cp\u003e\n For example, setLine(0, \"Line One\") will set the first line of text to\n \"Line One\".",
              "plain": "Sets the line of text at the specified index.\n \u003cp\u003e\n For example, setLine(0, \"Line One\") will set the first line of text to\n \"Line One\".\n@param index Line number to set the text at, starting from 0\n@param line New text to set at the specified index\n@throws IndexOutOfBoundsException If the index is out of the range 0..3"
            }
          }
        ],
        "comment": {
          "body": "Represents a captured state of either a SignPost or a WallSign.",
          "plain": "Represents a captured state of either a SignPost or a WallSign."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.block.Skull",
        "children": [
          {
            "kind": "METHOD",
            "name": "getOwner()",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Gets the owner of the skull, if one exists",
              "tags": "Returns the owner of the skull or null if the skull does not have an owner.",
              "plain": "Gets the owner of the skull, if one exists\n@return the owner of the skull or null if the skull does not have an owner\n@deprecated See {@link #getOwningPlayer()}."
            }
          },
          {
            "kind": "METHOD",
            "name": "getOwningPlayer()",
            "comment": {
              "body": "Get the player which owns the skull. This player may appear as the\n texture depending on skull type.",
              "tags": "Returns owning player.",
              "plain": "Get the player which owns the skull. This player may appear as the\n texture depending on skull type.\n@return owning player"
            }
          },
          {
            "kind": "METHOD",
            "name": "getRotation()",
            "comment": {
              "body": "Gets the rotation of the skull in the world",
              "tags": "Returns the rotation of the skull.",
              "plain": "Gets the rotation of the skull in the world\n@return the rotation of the skull"
            }
          },
          {
            "kind": "METHOD",
            "name": "getSkullType()",
            "comment": {
              "body": "Gets the type of skull",
              "tags": "Returns the type of skull.",
              "plain": "Gets the type of skull\n@return the type of skull"
            }
          },
          {
            "kind": "METHOD",
            "name": "hasOwner()",
            "comment": {
              "body": "Checks to see if the skull has an owner",
              "tags": "Returns true if the skull has an owner.",
              "plain": "Checks to see if the skull has an owner\n@return true if the skull has an owner"
            }
          },
          {
            "kind": "METHOD",
            "name": "setOwner(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Sets the owner of the skull\n \u003cp\u003e\n Involves a potentially blocking web request to acquire the profile data for\n the provided name.",
              "tags": "Returns true if the owner was successfully set.",
              "plain": "Sets the owner of the skull\n \u003cp\u003e\n Involves a potentially blocking web request to acquire the profile data for\n the provided name.\n@param name the new owner of the skull\n@return true if the owner was successfully set\n@deprecated see {@link #setOwningPlayer(org.bukkit.OfflinePlayer)}."
            }
          },
          {
            "kind": "METHOD",
            "name": "setOwningPlayer(org.bukkit.OfflinePlayer)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "player"
              }
            ],
            "comment": {
              "body": "Set the player which owns the skull. This player may appear as the\n texture depending on skull type.",
              "plain": "Set the player which owns the skull. This player may appear as the\n texture depending on skull type.\n@param player the owning player"
            }
          },
          {
            "kind": "METHOD",
            "name": "setRotation(org.bukkit.block.BlockFace)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "rotation"
              }
            ],
            "comment": {
              "body": "Sets the rotation of the skull in the world",
              "plain": "Sets the rotation of the skull in the world\n@param rotation the rotation of the skull"
            }
          },
          {
            "kind": "METHOD",
            "name": "setSkullType(org.bukkit.SkullType)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "skullType"
              }
            ],
            "comment": {
              "body": "Sets the type of skull",
              "plain": "Sets the type of skull\n@param skullType the type of skull"
            }
          }
        ],
        "comment": {
          "body": "Represents a captured state of a skull block.",
          "plain": "Represents a captured state of a skull block."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.block.Structure",
        "children": [
          {
            "kind": "METHOD",
            "name": "getAuthor()",
            "comment": {
              "body": "Get the name of who created this structure.",
              "tags": "Returns the name of whoever created this structure..",
              "plain": "Get the name of who created this structure.\n@return the name of whoever created this structure."
            }
          },
          {
            "kind": "METHOD",
            "name": "getIntegrity()",
            "comment": {
              "body": "Get the integrity of this structure.",
              "tags": "Returns the integrity of this structure.",
              "plain": "Get the integrity of this structure.\n@return the integrity of this structure"
            }
          },
          {
            "kind": "METHOD",
            "name": "getMetadata()",
            "comment": {
              "body": "Get the metadata function this structure block will perform when\n activated. Consult the\n \u003ca href\u003d\"https://minecraft.gamepedia.com/Structure_Block#Data\"\u003eMinecraft\n Wiki\u003c/a\u003e for more information.",
              "tags": "Returns the function that will be performed when this block is activated.",
              "plain": "Get the metadata function this structure block will perform when\n activated. Consult the\n \u003ca href\u003d\"https://minecraft.gamepedia.com/Structure_Block#Data\"\u003eMinecraft\n Wiki\u003c/a\u003e for more information.\n@return the function that will be performed when this block is activated"
            }
          },
          {
            "kind": "METHOD",
            "name": "getMirror()",
            "comment": {
              "body": "How this structure is mirrored.",
              "tags": "Returns the current mirroring method.",
              "plain": "How this structure is mirrored.\n@return the current mirroring method"
            }
          },
          {
            "kind": "METHOD",
            "name": "getRelativePosition()",
            "comment": {
              "body": "The relative position of the structure outline based on the position of\n the structure block. Maximum allowed distance is 32 blocks in any\n direction.",
              "tags": "Returns a Location which contains the relative distance this structure is\n from the structure block..",
              "plain": "The relative position of the structure outline based on the position of\n the structure block. Maximum allowed distance is 32 blocks in any\n direction.\n@return a Location which contains the relative distance this structure is\n from the structure block."
            }
          },
          {
            "kind": "METHOD",
            "name": "getRotation()",
            "comment": {
              "body": "Get how this structure is rotated.",
              "tags": "Returns the new rotation.",
              "plain": "Get how this structure is rotated.\n@return the new rotation"
            }
          },
          {
            "kind": "METHOD",
            "name": "getSeed()",
            "comment": {
              "body": "The seed used to determine how many blocks are removed upon loading of\n this structure.",
              "tags": "Returns the seed used.",
              "plain": "The seed used to determine how many blocks are removed upon loading of\n this structure.\n@return the seed used"
            }
          },
          {
            "kind": "METHOD",
            "name": "getStructureName()",
            "comment": {
              "body": "The name of this structure.",
              "tags": "Returns structure name.",
              "plain": "The name of this structure.\n@return structure name"
            }
          },
          {
            "kind": "METHOD",
            "name": "getStructureSize()",
            "comment": {
              "body": "The distance to the opposite corner of this structure. The maximum\n structure size is 32x32x32. When a structure has successfully been\n calculated (i.e. it is within the maximum allowed distance) a white\n border surrounds the structure.",
              "tags": "Returns a \u003ca href\u003d\"org/bukkit/util/BlockVector.html\" title\u003d\"class in org.bukkit.util\"\u003e\u003ccode\u003eBlockVector\u003c/code\u003e\u003c/a\u003e which contains the total size of the\n structure..",
              "plain": "The distance to the opposite corner of this structure. The maximum\n structure size is 32x32x32. When a structure has successfully been\n calculated (i.e. it is within the maximum allowed distance) a white\n border surrounds the structure.\n@return a {@link BlockVector} which contains the total size of the\n structure."
            }
          },
          {
            "kind": "METHOD",
            "name": "getUsageMode()",
            "comment": {
              "body": "Get the \u003ca href\u003d\"org/bukkit/block/structure/UsageMode.html\" title\u003d\"enum in org.bukkit.block.structure\"\u003e\u003ccode\u003eUsageMode\u003c/code\u003e\u003c/a\u003e of this structure block.",
              "tags": "Returns the mode this block is currently in..",
              "plain": "Get the {@link UsageMode} of this structure block.\n@return the mode this block is currently in."
            }
          },
          {
            "kind": "METHOD",
            "name": "isBoundingBoxVisible()",
            "comment": {
              "body": "Get if this structure block is currently showing the bounding box.",
              "tags": "Returns true if the bounding box is shown.",
              "plain": "Get if this structure block is currently showing the bounding box.\n@return true if the bounding box is shown"
            }
          },
          {
            "kind": "METHOD",
            "name": "isIgnoreEntities()",
            "comment": {
              "body": "Get if this structure block should ignore entities.",
              "tags": "Returns true if the appropriate \u003ca href\u003d\"org/bukkit/block/structure/UsageMode.html\" title\u003d\"enum in org.bukkit.block.structure\"\u003e\u003ccode\u003eUsageMode\u003c/code\u003e\u003c/a\u003e should ignore entities..",
              "plain": "Get if this structure block should ignore entities.\n@return true if the appropriate {@link UsageMode} should ignore entities."
            }
          },
          {
            "kind": "METHOD",
            "name": "isShowAir()",
            "comment": {
              "body": "Check if this structure block is currently showing all air blocks",
              "tags": "Returns true if the structure block is showing all air blocks.",
              "plain": "Check if this structure block is currently showing all air blocks\n@return true if the structure block is showing all air blocks"
            }
          },
          {
            "kind": "METHOD",
            "name": "setAuthor(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "author"
              }
            ],
            "comment": {
              "body": "Set the name of whoever created this structure.",
              "plain": "Set the name of whoever created this structure.\n@param author whoever created this structure"
            }
          },
          {
            "kind": "METHOD",
            "name": "setAuthor(org.bukkit.entity.LivingEntity)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "livingEntity"
              }
            ],
            "comment": {
              "body": "Set the name of whoever created this structure using a\n \u003ca href\u003d\"org/bukkit/entity/LivingEntity.html\" title\u003d\"interface in org.bukkit.entity\"\u003e\u003ccode\u003eLivingEntity\u003c/code\u003e\u003c/a\u003e.",
              "plain": "Set the name of whoever created this structure using a\n {@link LivingEntity}.\n@param livingEntity the entity who created this structure"
            }
          },
          {
            "kind": "METHOD",
            "name": "setBoundingBoxVisible(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "showBoundingBox"
              }
            ],
            "comment": {
              "body": "Set if this structure box should show the bounding box.",
              "plain": "Set if this structure box should show the bounding box.\n@param showBoundingBox if the structure box should be shown"
            }
          },
          {
            "kind": "METHOD",
            "name": "setIgnoreEntities(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "ignoreEntities"
              }
            ],
            "comment": {
              "body": "While in \u003ca href\u003d\"org/bukkit/block/structure/UsageMode.html#SAVE\"\u003e\u003ccode\u003eUsageMode.SAVE\u003c/code\u003e\u003c/a\u003e mode, this will ignore any entities when\n saving the structure.\n \u003cbr\u003e\n While in \u003ca href\u003d\"org/bukkit/block/structure/UsageMode.html#LOAD\"\u003e\u003ccode\u003eUsageMode.LOAD\u003c/code\u003e\u003c/a\u003e mode this will ignore any entities that\n were saved to file.",
              "plain": "While in {@link UsageMode#SAVE} mode, this will ignore any entities when\n saving the structure.\n \u003cbr\u003e\n While in {@link UsageMode#LOAD} mode this will ignore any entities that\n were saved to file.\n@param ignoreEntities the flag to set"
            }
          },
          {
            "kind": "METHOD",
            "name": "setIntegrity(float)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "integrity"
              }
            ],
            "comment": {
              "body": "Set the integrity of the structure. Integrity must be between 0.0 and 1.0\n Lower integrity values will result in more blocks being removed when\n loading a structure. Integrity and \u003ca href\u003d\"org/bukkit/block/Structure.html#getSeed()\"\u003e\u003ccode\u003eStructure.getSeed()\u003c/code\u003e\u003c/a\u003e are used together\n to determine which blocks are randomly removed to mimic \"decay.\"",
              "plain": "Set the integrity of the structure. Integrity must be between 0.0 and 1.0\n Lower integrity values will result in more blocks being removed when\n loading a structure. Integrity and {@link #getSeed()} are used together\n to determine which blocks are randomly removed to mimic \"decay.\"\n@param integrity the integrity of this structure"
            }
          },
          {
            "kind": "METHOD",
            "name": "setMetadata(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "metadata"
              }
            ],
            "comment": {
              "body": "Only applicable while in \u003ca href\u003d\"org/bukkit/block/structure/UsageMode.html#DATA\"\u003e\u003ccode\u003eUsageMode.DATA\u003c/code\u003e\u003c/a\u003e. Metadata are specific\n functions that can be applied to the structure location. Consult the\n \u003ca href\u003d\"https://minecraft.gamepedia.com/Structure_Block#Data\"\u003eMinecraft\n wiki\u003c/a\u003e for more information.",
              "plain": "Only applicable while in {@link UsageMode#DATA}. Metadata are specific\n functions that can be applied to the structure location. Consult the\n \u003ca href\u003d\"https://minecraft.gamepedia.com/Structure_Block#Data\"\u003eMinecraft\n wiki\u003c/a\u003e for more information.\n@param metadata the function to perform on the selected location"
            }
          },
          {
            "kind": "METHOD",
            "name": "setMirror(org.bukkit.block.structure.Mirror)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "mirror"
              }
            ],
            "comment": {
              "body": "Sets the mirroring of the structure.",
              "plain": "Sets the mirroring of the structure.\n@param mirror the new mirroring method"
            }
          },
          {
            "kind": "METHOD",
            "name": "setRelativePosition(org.bukkit.util.BlockVector)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "vector"
              }
            ],
            "comment": {
              "body": "Set the relative position from the structure block. Maximum allowed\n distance is 32 blocks in any direction.",
              "plain": "Set the relative position from the structure block. Maximum allowed\n distance is 32 blocks in any direction.\n@param vector the {@link BlockVector} containing the relative origin\n coordinates of this structure."
            }
          },
          {
            "kind": "METHOD",
            "name": "setRotation(org.bukkit.block.structure.StructureRotation)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "rotation"
              }
            ],
            "comment": {
              "body": "Set how this structure is rotated.",
              "plain": "Set how this structure is rotated.\n@param rotation the new rotation"
            }
          },
          {
            "kind": "METHOD",
            "name": "setSeed(long)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "seed"
              }
            ],
            "comment": {
              "body": "The seed used to determine which blocks will be removed upon loading.\n \u003ca href\u003d\"org/bukkit/block/Structure.html#getIntegrity()\"\u003e\u003ccode\u003eStructure.getIntegrity()\u003c/code\u003e\u003c/a\u003e and seed are used together to determine which\n blocks are randomly removed to mimic \"decay.\"",
              "plain": "The seed used to determine which blocks will be removed upon loading.\n {@link #getIntegrity()} and seed are used together to determine which\n blocks are randomly removed to mimic \"decay.\"\n@param seed the seed used to determine how many blocks will be removed"
            }
          },
          {
            "kind": "METHOD",
            "name": "setShowAir(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "showAir"
              }
            ],
            "comment": {
              "body": "Set if the structure outline should show air blocks.",
              "plain": "Set if the structure outline should show air blocks.\n@param showAir if the structure block should show air blocks"
            }
          },
          {
            "kind": "METHOD",
            "name": "setStructureName(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ],
            "comment": {
              "body": "Set the name of this structure. This is case-sensitive. The name of the\n structure in the \u003ca href\u003d\"org/bukkit/block/structure/UsageMode.html#SAVE\"\u003e\u003ccode\u003eUsageMode.SAVE\u003c/code\u003e\u003c/a\u003e structure block MUST match the\n name within the \u003ca href\u003d\"org/bukkit/block/structure/UsageMode.html#CORNER\"\u003e\u003ccode\u003eUsageMode.CORNER\u003c/code\u003e\u003c/a\u003e block or the size calculation\n will fail.",
              "plain": "Set the name of this structure. This is case-sensitive. The name of the\n structure in the {@link UsageMode#SAVE} structure block MUST match the\n name within the {@link UsageMode#CORNER} block or the size calculation\n will fail.\n@param name the case-sensitive name of this structure"
            }
          },
          {
            "kind": "METHOD",
            "name": "setStructureSize(org.bukkit.util.BlockVector)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "vector"
              }
            ],
            "comment": {
              "body": "Set the maximum size of this structure from the origin point. Maximum\n allowed size is 32x32x32.",
              "plain": "Set the maximum size of this structure from the origin point. Maximum\n allowed size is 32x32x32.\n@param vector the {@link BlockVector} containing the size of this\n structure, based off of the origin coordinates."
            }
          },
          {
            "kind": "METHOD",
            "name": "setUsageMode(org.bukkit.block.structure.UsageMode)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "mode"
              }
            ],
            "comment": {
              "body": "Set the \u003ca href\u003d\"org/bukkit/block/structure/UsageMode.html\" title\u003d\"enum in org.bukkit.block.structure\"\u003e\u003ccode\u003eUsageMode\u003c/code\u003e\u003c/a\u003e of this structure block.",
              "plain": "Set the {@link UsageMode} of this structure block.\n@param mode the new mode to set."
            }
          }
        ],
        "comment": {
          "body": "Represents a structure block that can save and load blocks from a file. They\n can only be used by OPs, and are not obtainable in survival.",
          "plain": "Represents a structure block that can save and load blocks from a file. They\n can only be used by OPs, and are not obtainable in survival."
        }
      }
    ]
  },
  {
    "kind": "PACKAGE",
    "name": "org.bukkit.block.banner",
    "children": [
      {
        "kind": "CLASS",
        "name": "org.bukkit.block.banner.Pattern",
        "children": [
          {
            "kind": "FIELD",
            "name": "COLOR"
          },
          {
            "kind": "FIELD",
            "name": "PATTERN"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Pattern(java.util.Map\u003cjava.lang.String,java.lang.Object\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "map"
              }
            ],
            "comment": {
              "body": "Constructor for deserialization.",
              "plain": "Constructor for deserialization.\n@param map the map to deserialize from"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Pattern(org.bukkit.DyeColor,org.bukkit.block.banner.PatternType)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "color"
              },
              {
                "kind": "PARAMETER",
                "name": "pattern"
              }
            ],
            "comment": {
              "body": "Creates a new pattern from the specified color and\n pattern type",
              "plain": "Creates a new pattern from the specified color and\n pattern type\n@param color the pattern color\n@param pattern the pattern type"
            }
          },
          {
            "kind": "FIELD",
            "name": "color"
          },
          {
            "kind": "METHOD",
            "name": "equals(java.lang.Object)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "obj"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getColor()",
            "comment": {
              "body": "Returns the color of the pattern",
              "tags": "Returns the color of the pattern.",
              "plain": "Returns the color of the pattern\n@return the color of the pattern"
            }
          },
          {
            "kind": "METHOD",
            "name": "getPattern()",
            "comment": {
              "body": "Returns the type of pattern",
              "tags": "Returns the pattern type.",
              "plain": "Returns the type of pattern\n@return the pattern type"
            }
          },
          {
            "kind": "METHOD",
            "name": "getString(java.util.Map\u003c?,?\u003e,java.lang.Object)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "key"
              },
              {
                "kind": "PARAMETER",
                "name": "map"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "hashCode()"
          },
          {
            "kind": "FIELD",
            "name": "pattern"
          },
          {
            "kind": "METHOD",
            "name": "serialize()"
          }
        ]
      },
      {
        "kind": "ENUM",
        "name": "org.bukkit.block.banner.PatternType",
        "children": [
          {
            "kind": "ENUM_CONSTANT",
            "name": "BASE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BORDER"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BRICKS"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "CIRCLE_MIDDLE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "CREEPER"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "CROSS"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "CURLY_BORDER"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "DIAGONAL_LEFT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "DIAGONAL_LEFT_MIRROR"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "DIAGONAL_RIGHT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "DIAGONAL_RIGHT_MIRROR"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "FLOWER"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "GRADIENT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "GRADIENT_UP"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "HALF_HORIZONTAL"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "HALF_HORIZONTAL_MIRROR"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "HALF_VERTICAL"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "HALF_VERTICAL_MIRROR"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "MOJANG"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "PatternType(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "key"
              }
            ]
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "RHOMBUS_MIDDLE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SKULL"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SQUARE_BOTTOM_LEFT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SQUARE_BOTTOM_RIGHT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SQUARE_TOP_LEFT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SQUARE_TOP_RIGHT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "STRAIGHT_CROSS"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "STRIPE_BOTTOM"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "STRIPE_CENTER"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "STRIPE_DOWNLEFT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "STRIPE_DOWNRIGHT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "STRIPE_LEFT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "STRIPE_MIDDLE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "STRIPE_RIGHT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "STRIPE_SMALL"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "STRIPE_TOP"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "TRIANGLES_BOTTOM"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "TRIANGLES_TOP"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "TRIANGLE_BOTTOM"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "TRIANGLE_TOP"
          },
          {
            "kind": "FIELD",
            "name": "byString"
          },
          {
            "kind": "METHOD",
            "name": "getByIdentifier(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "identifier"
              }
            ],
            "comment": {
              "body": "Returns the pattern type which matches the passed\n identifier or null if no matches are found",
              "tags": "Returns the matched pattern type or null.",
              "plain": "Returns the pattern type which matches the passed\n identifier or null if no matches are found\n@param identifier the identifier\n@return the matched pattern type or null"
            }
          },
          {
            "kind": "METHOD",
            "name": "getIdentifier()",
            "comment": {
              "body": "Returns the identifier used to represent\n this pattern type",
              "tags": "Returns the pattern\u0027s identifier.",
              "plain": "Returns the identifier used to represent\n this pattern type\n@return the pattern\u0027s identifier"
            }
          },
          {
            "kind": "FIELD",
            "name": "identifier"
          },
          {
            "kind": "METHOD",
            "name": "valueOf(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "values()"
          }
        ]
      }
    ]
  },
  {
    "kind": "PACKAGE",
    "name": "org.bukkit.block.structure",
    "children": [
      {
        "kind": "ENUM",
        "name": "org.bukkit.block.structure.Mirror",
        "children": [
          {
            "kind": "ENUM_CONSTANT",
            "name": "FRONT_BACK",
            "comment": {
              "body": "Structure is mirrored front to back.\n \u003cbr\u003e\n Positive Z to Negative X",
              "plain": "Structure is mirrored front to back.\n \u003cbr\u003e\n Positive Z to Negative X"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "LEFT_RIGHT",
            "comment": {
              "body": "Structure is mirrored left to right.\n \u003cbr\u003e\n Similar to looking in a mirror. Positive X to Negative Z",
              "plain": "Structure is mirrored left to right.\n \u003cbr\u003e\n Similar to looking in a mirror. Positive X to Negative Z"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Mirror()"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "NONE",
            "comment": {
              "body": "No mirroring.\n \u003cbr\u003e\n Positive X to Positive Z",
              "plain": "No mirroring.\n \u003cbr\u003e\n Positive X to Positive Z"
            }
          },
          {
            "kind": "METHOD",
            "name": "valueOf(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "values()"
          }
        ],
        "comment": {
          "body": "Represents how a \u003ca href\u003d\"org/bukkit/block/Structure.html\" title\u003d\"interface in org.bukkit.block\"\u003e\u003ccode\u003eStructure\u003c/code\u003e\u003c/a\u003e can be mirrored upon\n being loaded.",
          "plain": "Represents how a {@link org.bukkit.block.Structure} can be mirrored upon\n being loaded."
        }
      },
      {
        "kind": "ENUM",
        "name": "org.bukkit.block.structure.StructureRotation",
        "children": [
          {
            "kind": "ENUM_CONSTANT",
            "name": "CLOCKWISE_180",
            "comment": {
              "body": "Rotated clockwise 180 degrees.",
              "plain": "Rotated clockwise 180 degrees."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "CLOCKWISE_90",
            "comment": {
              "body": "Rotated clockwise 90 degrees.",
              "plain": "Rotated clockwise 90 degrees."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "COUNTERCLOCKWISE_90",
            "comment": {
              "body": "Rotated counter clockwise 90 degrees.\n \u003cbr\u003e\n Equivalent to rotating clockwise 270 degrees.",
              "plain": "Rotated counter clockwise 90 degrees.\n \u003cbr\u003e\n Equivalent to rotating clockwise 270 degrees."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "NONE",
            "comment": {
              "body": "No rotation.",
              "plain": "No rotation."
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "StructureRotation()"
          },
          {
            "kind": "METHOD",
            "name": "valueOf(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "values()"
          }
        ],
        "comment": {
          "body": "Represents how a \u003ca href\u003d\"org/bukkit/block/Structure.html\" title\u003d\"interface in org.bukkit.block\"\u003e\u003ccode\u003eStructure\u003c/code\u003e\u003c/a\u003e can be rotated.",
          "plain": "Represents how a {@link org.bukkit.block.Structure} can be rotated."
        }
      },
      {
        "kind": "ENUM",
        "name": "org.bukkit.block.structure.UsageMode",
        "children": [
          {
            "kind": "ENUM_CONSTANT",
            "name": "CORNER",
            "comment": {
              "body": "Used when saving a structure for easy size calculation. When using this\n mode, the Structure name MUST match the name in the second Structure\n block that is in \u003ca href\u003d\"org/bukkit/block/structure/UsageMode.html#SAVE\"\u003e\u003ccode\u003eUsageMode.SAVE\u003c/code\u003e\u003c/a\u003e.",
              "plain": "Used when saving a structure for easy size calculation. When using this\n mode, the Structure name MUST match the name in the second Structure\n block that is in {@link UsageMode#SAVE}."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "DATA",
            "comment": {
              "body": "Used to run specific custom functions, which can only be used for certain\n Structures. The structure block is removed after this function completes.\n The data tags (functions) can be found on the\n \u003ca href\u003d\"http://minecraft.gamepedia.com/Structure_Block#Data\"\u003ewiki\u003c/a\u003e.",
              "plain": "Used to run specific custom functions, which can only be used for certain\n Structures. The structure block is removed after this function completes.\n The data tags (functions) can be found on the\n \u003ca href\u003d\"http://minecraft.gamepedia.com/Structure_Block#Data\"\u003ewiki\u003c/a\u003e."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "LOAD",
            "comment": {
              "body": "The mode used when loading a structure.",
              "plain": "The mode used when loading a structure."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SAVE",
            "comment": {
              "body": "The mode used when saving a structure.",
              "plain": "The mode used when saving a structure."
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "UsageMode()"
          },
          {
            "kind": "METHOD",
            "name": "valueOf(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "values()"
          }
        ],
        "comment": {
          "body": "Represents how a \u003ca href\u003d\"org/bukkit/block/Structure.html\" title\u003d\"interface in org.bukkit.block\"\u003e\u003ccode\u003eStructure\u003c/code\u003e\u003c/a\u003e can be used.",
          "plain": "Represents how a {@link org.bukkit.block.Structure} can be used."
        }
      }
    ]
  },
  {
    "kind": "PACKAGE",
    "name": "org.bukkit.boss",
    "children": [
      {
        "kind": "ENUM",
        "name": "org.bukkit.boss.BarColor",
        "children": [
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLUE"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "BarColor()"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "GREEN"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "PINK"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "PURPLE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "RED"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "WHITE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "YELLOW"
          },
          {
            "kind": "METHOD",
            "name": "valueOf(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "values()"
          }
        ]
      },
      {
        "kind": "ENUM",
        "name": "org.bukkit.boss.BarFlag",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "BarFlag()"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "CREATE_FOG",
            "comment": {
              "body": "Creates fog around the world.",
              "plain": "Creates fog around the world."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "DARKEN_SKY",
            "comment": {
              "body": "Darkens the sky like during fighting a wither.",
              "plain": "Darkens the sky like during fighting a wither."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "PLAY_BOSS_MUSIC",
            "comment": {
              "body": "Tells the client to play the Ender Dragon boss music.",
              "plain": "Tells the client to play the Ender Dragon boss music."
            }
          },
          {
            "kind": "METHOD",
            "name": "valueOf(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "values()"
          }
        ]
      },
      {
        "kind": "ENUM",
        "name": "org.bukkit.boss.BarStyle",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "BarStyle()"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SEGMENTED_10",
            "comment": {
              "body": "Splits the boss bar into 10 segments",
              "plain": "Splits the boss bar into 10 segments"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SEGMENTED_12",
            "comment": {
              "body": "Splits the boss bar into 12 segments",
              "plain": "Splits the boss bar into 12 segments"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SEGMENTED_20",
            "comment": {
              "body": "Splits the boss bar into 20 segments",
              "plain": "Splits the boss bar into 20 segments"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SEGMENTED_6",
            "comment": {
              "body": "Splits the boss bar into 6 segments",
              "plain": "Splits the boss bar into 6 segments"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SOLID",
            "comment": {
              "body": "Makes the boss bar solid (no segments)",
              "plain": "Makes the boss bar solid (no segments)"
            }
          },
          {
            "kind": "METHOD",
            "name": "valueOf(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "values()"
          }
        ]
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.boss.BossBar",
        "children": [
          {
            "kind": "METHOD",
            "name": "addFlag(org.bukkit.boss.BarFlag)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "flag"
              }
            ],
            "comment": {
              "body": "Add an optional flag to this boss bar",
              "plain": "Add an optional flag to this boss bar\n@param flag an optional flag to set on the boss bar"
            }
          },
          {
            "kind": "METHOD",
            "name": "addPlayer(org.bukkit.entity.Player)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "player"
              }
            ],
            "comment": {
              "body": "Adds the player to this boss bar causing it to display on their screen.",
              "plain": "Adds the player to this boss bar causing it to display on their screen.\n@param player the player to add"
            }
          },
          {
            "kind": "METHOD",
            "name": "getColor()",
            "comment": {
              "body": "Returns the color of this boss bar",
              "tags": "Returns the color of the bar.",
              "plain": "Returns the color of this boss bar\n@return the color of the bar"
            }
          },
          {
            "kind": "METHOD",
            "name": "getPlayers()",
            "comment": {
              "body": "Returns all players viewing this boss bar",
              "tags": "Returns a immutable list of players.",
              "plain": "Returns all players viewing this boss bar\n@return a immutable list of players"
            }
          },
          {
            "kind": "METHOD",
            "name": "getProgress()",
            "comment": {
              "body": "Returns the progress of the bar between 0.0 and 1.0",
              "tags": "Returns the progress of the bar.",
              "plain": "Returns the progress of the bar between 0.0 and 1.0\n@return the progress of the bar"
            }
          },
          {
            "kind": "METHOD",
            "name": "getStyle()",
            "comment": {
              "body": "Returns the style of this boss bar",
              "tags": "Returns the style of the bar.",
              "plain": "Returns the style of this boss bar\n@return the style of the bar"
            }
          },
          {
            "kind": "METHOD",
            "name": "getTitle()",
            "comment": {
              "body": "Returns the title of this boss bar",
              "tags": "Returns the title of the bar.",
              "plain": "Returns the title of this boss bar\n@return the title of the bar"
            }
          },
          {
            "kind": "METHOD",
            "name": "hasFlag(org.bukkit.boss.BarFlag)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "flag"
              }
            ],
            "comment": {
              "body": "Returns whether this boss bar as the passed flag set",
              "tags": "Returns whether it has the flag.",
              "plain": "Returns whether this boss bar as the passed flag set\n@param flag the flag to check\n@return whether it has the flag"
            }
          },
          {
            "kind": "METHOD",
            "name": "hide()",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Hides this boss bar from all attached players",
              "plain": "Hides this boss bar from all attached players\n@deprecated {@link #setVisible(boolean)}"
            }
          },
          {
            "kind": "METHOD",
            "name": "isVisible()",
            "comment": {
              "body": "Return if the boss bar is displayed to attached players.",
              "tags": "Returns visible status.",
              "plain": "Return if the boss bar is displayed to attached players.\n@return visible status"
            }
          },
          {
            "kind": "METHOD",
            "name": "removeAll()",
            "comment": {
              "body": "Removes all players from this boss bar",
              "plain": "Removes all players from this boss bar\n@see #removePlayer(Player)"
            }
          },
          {
            "kind": "METHOD",
            "name": "removeFlag(org.bukkit.boss.BarFlag)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "flag"
              }
            ],
            "comment": {
              "body": "Remove an existing flag on this boss bar",
              "plain": "Remove an existing flag on this boss bar\n@param flag the existing flag to remove"
            }
          },
          {
            "kind": "METHOD",
            "name": "removePlayer(org.bukkit.entity.Player)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "player"
              }
            ],
            "comment": {
              "body": "Removes the player from this boss bar causing it to be removed from their\n screen.",
              "plain": "Removes the player from this boss bar causing it to be removed from their\n screen.\n@param player the player to remove"
            }
          },
          {
            "kind": "METHOD",
            "name": "setColor(org.bukkit.boss.BarColor)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "color"
              }
            ],
            "comment": {
              "body": "Sets the color of this boss bar.",
              "plain": "Sets the color of this boss bar.\n@param color the color of the bar"
            }
          },
          {
            "kind": "METHOD",
            "name": "setProgress(double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "progress"
              }
            ],
            "comment": {
              "body": "Sets the progress of the bar. Values should be between 0.0 (empty) and\n 1.0 (full)",
              "plain": "Sets the progress of the bar. Values should be between 0.0 (empty) and\n 1.0 (full)\n@param progress the progress of the bar"
            }
          },
          {
            "kind": "METHOD",
            "name": "setStyle(org.bukkit.boss.BarStyle)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "style"
              }
            ],
            "comment": {
              "body": "Sets the bar style of this boss bar",
              "plain": "Sets the bar style of this boss bar\n@param style the style of the bar"
            }
          },
          {
            "kind": "METHOD",
            "name": "setTitle(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "title"
              }
            ],
            "comment": {
              "body": "Sets the title of this boss bar",
              "plain": "Sets the title of this boss bar\n@param title the title of the bar"
            }
          },
          {
            "kind": "METHOD",
            "name": "setVisible(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "visible"
              }
            ],
            "comment": {
              "body": "Set if the boss bar is displayed to attached players.",
              "plain": "Set if the boss bar is displayed to attached players.\n@param visible visible status"
            }
          },
          {
            "kind": "METHOD",
            "name": "show()",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Shows the previously hidden boss bar to all attached players",
              "plain": "Shows the previously hidden boss bar to all attached players\n@deprecated {@link #setVisible(boolean)}"
            }
          }
        ]
      }
    ]
  },
  {
    "kind": "PACKAGE",
    "name": "org.bukkit.command",
    "children": [
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.command.BlockCommandSender",
        "children": [
          {
            "kind": "METHOD",
            "name": "getBlock()",
            "comment": {
              "body": "Returns the block this command sender belongs to",
              "tags": "Returns Block for the command sender.",
              "plain": "Returns the block this command sender belongs to\n@return Block for the command sender"
            }
          }
        ]
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.command.BufferedCommandSender",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "BufferedCommandSender()"
          },
          {
            "kind": "FIELD",
            "name": "buffer"
          },
          {
            "kind": "METHOD",
            "name": "getBuffer()"
          },
          {
            "kind": "METHOD",
            "name": "reset()"
          },
          {
            "kind": "METHOD",
            "name": "sendMessage(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "message"
              }
            ]
          }
        ]
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.command.Command",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "Command(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Command(java.lang.String,java.lang.String,java.lang.String,java.util.List\u003cjava.lang.String\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "aliases"
              },
              {
                "kind": "PARAMETER",
                "name": "description"
              },
              {
                "kind": "PARAMETER",
                "name": "name"
              },
              {
                "kind": "PARAMETER",
                "name": "usageMessage"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "activeAliases"
          },
          {
            "kind": "FIELD",
            "name": "aliases"
          },
          {
            "kind": "METHOD",
            "name": "allowChangesFrom(org.bukkit.command.CommandMap)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "commandMap"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "broadcastCommandMessage(org.bukkit.command.CommandSender,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "message"
              },
              {
                "kind": "PARAMETER",
                "name": "source"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "broadcastCommandMessage(org.bukkit.command.CommandSender,java.lang.String,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "message"
              },
              {
                "kind": "PARAMETER",
                "name": "sendToSource"
              },
              {
                "kind": "PARAMETER",
                "name": "source"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "commandMap"
          },
          {
            "kind": "FIELD",
            "name": "description"
          },
          {
            "kind": "METHOD",
            "name": "execute(org.bukkit.command.CommandSender,java.lang.String,java.lang.String[])",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "args"
              },
              {
                "kind": "PARAMETER",
                "name": "commandLabel"
              },
              {
                "kind": "PARAMETER",
                "name": "sender"
              }
            ],
            "comment": {
              "body": "Executes the command, returning its success",
              "tags": "Returns true if the command was successful, otherwise false.",
              "plain": "Executes the command, returning its success\n@param sender Source object which is executing this command\n@param commandLabel The alias of the command used\n@param args All arguments passed to the command, split via \u0027 \u0027\n@return true if the command was successful, otherwise false"
            }
          },
          {
            "kind": "METHOD",
            "name": "getAliases()",
            "comment": {
              "body": "Returns a list of active aliases of this command",
              "tags": "Returns List of aliases.",
              "plain": "Returns a list of active aliases of this command\n@return List of aliases"
            }
          },
          {
            "kind": "METHOD",
            "name": "getDescription()",
            "comment": {
              "body": "Gets a brief description of this command",
              "tags": "Returns Description of this command.",
              "plain": "Gets a brief description of this command\n@return Description of this command"
            }
          },
          {
            "kind": "METHOD",
            "name": "getLabel()",
            "comment": {
              "body": "Returns the label for this command",
              "tags": "Returns Label of this command.",
              "plain": "Returns the label for this command\n@return Label of this command"
            }
          },
          {
            "kind": "METHOD",
            "name": "getName()",
            "comment": {
              "body": "Returns the name of this command",
              "tags": "Returns Name of this command.",
              "plain": "Returns the name of this command\n@return Name of this command"
            }
          },
          {
            "kind": "METHOD",
            "name": "getPermission()",
            "comment": {
              "body": "Gets the permission required by users to be able to perform this\n command",
              "tags": "Returns Permission name, or null if none.",
              "plain": "Gets the permission required by users to be able to perform this\n command\n@return Permission name, or null if none"
            }
          },
          {
            "kind": "METHOD",
            "name": "getPermissionMessage()",
            "comment": {
              "body": "Returns a message to be displayed on a failed permission check for this\n command",
              "tags": "Returns Permission check failed message.",
              "plain": "Returns a message to be displayed on a failed permission check for this\n command\n@return Permission check failed message"
            }
          },
          {
            "kind": "METHOD",
            "name": "getTimingName()"
          },
          {
            "kind": "METHOD",
            "name": "getUsage()",
            "comment": {
              "body": "Gets an example usage of this command",
              "tags": "Returns One or more example usages.",
              "plain": "Gets an example usage of this command\n@return One or more example usages"
            }
          },
          {
            "kind": "METHOD",
            "name": "isRegistered()",
            "comment": {
              "body": "Returns the current registered state of this command",
              "tags": "Returns true if this command is currently registered false otherwise.",
              "plain": "Returns the current registered state of this command\n@return true if this command is currently registered false otherwise"
            }
          },
          {
            "kind": "FIELD",
            "name": "label"
          },
          {
            "kind": "FIELD",
            "name": "name"
          },
          {
            "kind": "FIELD",
            "name": "nextLabel"
          },
          {
            "kind": "FIELD",
            "name": "permission"
          },
          {
            "kind": "FIELD",
            "name": "permissionMessage"
          },
          {
            "kind": "METHOD",
            "name": "register(org.bukkit.command.CommandMap)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "commandMap"
              }
            ],
            "comment": {
              "body": "Registers this command to a CommandMap.\n Once called it only allows changes the registered CommandMap",
              "tags": "Returns true if the registration was successful (the current registered\n     CommandMap was the passed CommandMap or null) false otherwise.",
              "plain": "Registers this command to a CommandMap.\n Once called it only allows changes the registered CommandMap\n@param commandMap the CommandMap to register this command to\n@return true if the registration was successful (the current registered\n     CommandMap was the passed CommandMap or null) false otherwise"
            }
          },
          {
            "kind": "METHOD",
            "name": "setAliases(java.util.List\u003cjava.lang.String\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "aliases"
              }
            ],
            "comment": {
              "body": "Sets the list of aliases to request on registration for this command.\n This is not effective outside of defining aliases in the \u003ca href\u003d\"org/bukkit/plugin/PluginDescriptionFile.html#getCommands()\"\u003e\u003ccode\u003ePluginDescriptionFile.getCommands()\u003c/code\u003e\u003c/a\u003e (under the\n `\u003ccode\u003ealiases\u003c/code\u003e\u0027 node) is equivalent to this method.",
              "tags": "Returns this command object, for chaining.",
              "plain": "Sets the list of aliases to request on registration for this command.\n This is not effective outside of defining aliases in the {@link PluginDescriptionFile#getCommands()} (under the\n `\u003ccode\u003ealiases\u003c/code\u003e\u0027 node) is equivalent to this method.\n@param aliases aliases to register to this command\n@return this command object, for chaining"
            }
          },
          {
            "kind": "METHOD",
            "name": "setDescription(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "description"
              }
            ],
            "comment": {
              "body": "Sets a brief description of this command. Defining a description in the\n \u003ca href\u003d\"org/bukkit/plugin/PluginDescriptionFile.html#getCommands()\"\u003e\u003ccode\u003ePluginDescriptionFile.getCommands()\u003c/code\u003e\u003c/a\u003e (under the\n `\u003ccode\u003edescription\u003c/code\u003e\u0027 node) is equivalent to this method.",
              "tags": "Returns this command object, for chaining.",
              "plain": "Sets a brief description of this command. Defining a description in the\n {@link PluginDescriptionFile#getCommands()} (under the\n `\u003ccode\u003edescription\u003c/code\u003e\u0027 node) is equivalent to this method.\n@param description new command description\n@return this command object, for chaining"
            }
          },
          {
            "kind": "METHOD",
            "name": "setLabel(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ],
            "comment": {
              "body": "Sets the label of this command.\n \u003cp\u003e\n May only be used before registering the command.\n Will return true if the new name is set, and false\n if the command has already been registered.",
              "tags": "Returns returns true if the name change happened instantly or false if\n     the command was already registered.",
              "plain": "Sets the label of this command.\n \u003cp\u003e\n May only be used before registering the command.\n Will return true if the new name is set, and false\n if the command has already been registered.\n@param name The command\u0027s name\n@return returns true if the name change happened instantly or false if\n     the command was already registered"
            }
          },
          {
            "kind": "METHOD",
            "name": "setName(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ],
            "comment": {
              "body": "Sets the name of this command.\n \u003cp\u003e\n May only be used before registering the command.\n Will return true if the new name is set, and false\n if the command has already been registered.",
              "tags": "Returns returns true if the name change happened instantly or false if\n     the command was already registered.",
              "plain": "Sets the name of this command.\n \u003cp\u003e\n May only be used before registering the command.\n Will return true if the new name is set, and false\n if the command has already been registered.\n@param name New command name\n@return returns true if the name change happened instantly or false if\n     the command was already registered"
            }
          },
          {
            "kind": "METHOD",
            "name": "setPermission(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "permission"
              }
            ],
            "comment": {
              "body": "Sets the permission required by users to be able to perform this\n command",
              "plain": "Sets the permission required by users to be able to perform this\n command\n@param permission Permission name or null"
            }
          },
          {
            "kind": "METHOD",
            "name": "setPermissionMessage(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "permissionMessage"
              }
            ],
            "comment": {
              "body": "Sets the message sent when a permission check fails",
              "tags": "Returns this command object, for chaining.",
              "plain": "Sets the message sent when a permission check fails\n@param permissionMessage new permission message, null to indicate\n     default message, or an empty string to indicate no message\n@return this command object, for chaining"
            }
          },
          {
            "kind": "METHOD",
            "name": "setUsage(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "usage"
              }
            ],
            "comment": {
              "body": "Sets the example usage of this command",
              "tags": "Returns this command object, for chaining.",
              "plain": "Sets the example usage of this command\n@param usage new example usage\n@return this command object, for chaining"
            }
          },
          {
            "kind": "METHOD",
            "name": "tabComplete(org.bukkit.command.CommandSender,java.lang.String,java.lang.String[])",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "alias"
              },
              {
                "kind": "PARAMETER",
                "name": "args"
              },
              {
                "kind": "PARAMETER",
                "name": "sender"
              }
            ],
            "comment": {
              "body": "Executed on tab completion for this command, returning a list of\n options the player can tab through.",
              "tags": "Returns a list of tab-completions for the specified arguments. This\n     will never be null. List may be immutable..",
              "plain": "Executed on tab completion for this command, returning a list of\n options the player can tab through.\n@param sender Source object which is executing this command\n@param alias the alias being used\n@param args All arguments passed to the command, split via \u0027 \u0027\n@return a list of tab-completions for the specified arguments. This\n     will never be null. List may be immutable.\n@throws IllegalArgumentException if sender, alias, or args is null"
            }
          },
          {
            "kind": "METHOD",
            "name": "tabComplete(org.bukkit.command.CommandSender,java.lang.String,java.lang.String[],org.bukkit.Location)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "alias"
              },
              {
                "kind": "PARAMETER",
                "name": "args"
              },
              {
                "kind": "PARAMETER",
                "name": "location"
              },
              {
                "kind": "PARAMETER",
                "name": "sender"
              }
            ],
            "comment": {
              "body": "Executed on tab completion for this command, returning a list of\n options the player can tab through.",
              "tags": "Returns a list of tab-completions for the specified arguments. This\n     will never be null. List may be immutable..",
              "plain": "Executed on tab completion for this command, returning a list of\n options the player can tab through.\n@param sender Source object which is executing this command\n@param alias the alias being used\n@param args All arguments passed to the command, split via \u0027 \u0027\n@param location The position looked at by the sender, or null if none\n@return a list of tab-completions for the specified arguments. This\n     will never be null. List may be immutable.\n@throws IllegalArgumentException if sender, alias, or args is null"
            }
          },
          {
            "kind": "METHOD",
            "name": "tabComplete0(org.bukkit.command.CommandSender,java.lang.String,java.lang.String[],org.bukkit.Location)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "alias"
              },
              {
                "kind": "PARAMETER",
                "name": "args"
              },
              {
                "kind": "PARAMETER",
                "name": "location"
              },
              {
                "kind": "PARAMETER",
                "name": "sender"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "testPermission(org.bukkit.command.CommandSender)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "target"
              }
            ],
            "comment": {
              "body": "Tests the given \u003ca href\u003d\"org/bukkit/command/CommandSender.html\" title\u003d\"interface in org.bukkit.command\"\u003e\u003ccode\u003eCommandSender\u003c/code\u003e\u003c/a\u003e to see if they can perform this\n command.\n \u003cp\u003e\n If they do not have permission, they will be informed that they cannot\n do this.",
              "tags": "Returns true if they can use it, otherwise false.",
              "plain": "Tests the given {@link CommandSender} to see if they can perform this\n command.\n \u003cp\u003e\n If they do not have permission, they will be informed that they cannot\n do this.\n@param target User to test\n@return true if they can use it, otherwise false"
            }
          },
          {
            "kind": "METHOD",
            "name": "testPermissionSilent(org.bukkit.command.CommandSender)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "target"
              }
            ],
            "comment": {
              "body": "Tests the given \u003ca href\u003d\"org/bukkit/command/CommandSender.html\" title\u003d\"interface in org.bukkit.command\"\u003e\u003ccode\u003eCommandSender\u003c/code\u003e\u003c/a\u003e to see if they can perform this\n command.\n \u003cp\u003e\n No error is sent to the sender.",
              "tags": "Returns true if they can use it, otherwise false.",
              "plain": "Tests the given {@link CommandSender} to see if they can perform this\n command.\n \u003cp\u003e\n No error is sent to the sender.\n@param target User to test\n@return true if they can use it, otherwise false"
            }
          },
          {
            "kind": "FIELD",
            "name": "timings"
          },
          {
            "kind": "METHOD",
            "name": "toString()"
          },
          {
            "kind": "METHOD",
            "name": "unregister(org.bukkit.command.CommandMap)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "commandMap"
              }
            ],
            "comment": {
              "body": "Unregisters this command from the passed CommandMap applying any\n outstanding changes",
              "tags": "Returns true if the unregistration was successful (the current\n     registered CommandMap was the passed CommandMap or null) false\n     otherwise.",
              "plain": "Unregisters this command from the passed CommandMap applying any\n outstanding changes\n@param commandMap the CommandMap to unregister\n@return true if the unregistration was successful (the current\n     registered CommandMap was the passed CommandMap or null) false\n     otherwise"
            }
          },
          {
            "kind": "FIELD",
            "name": "usageMessage"
          }
        ],
        "comment": {
          "body": "Represents a Command, which executes various tasks upon user input",
          "plain": "Represents a Command, which executes various tasks upon user input"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.command.CommandException",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "CommandException()",
            "comment": {
              "body": "Creates a new instance of \u003ccode\u003eCommandException\u003c/code\u003e without detail\n message.",
              "plain": "Creates a new instance of \u003ccode\u003eCommandException\u003c/code\u003e without detail\n message."
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "CommandException(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "msg"
              }
            ],
            "comment": {
              "body": "Constructs an instance of \u003ccode\u003eCommandException\u003c/code\u003e with the\n specified detail message.",
              "plain": "Constructs an instance of \u003ccode\u003eCommandException\u003c/code\u003e with the\n specified detail message.\n@param msg the detail message."
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "CommandException(java.lang.String,java.lang.Throwable)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cause"
              },
              {
                "kind": "PARAMETER",
                "name": "msg"
              }
            ]
          }
        ],
        "comment": {
          "body": "Thrown when an unhandled exception occurs during the execution of a Command",
          "plain": "Thrown when an unhandled exception occurs during the execution of a Command"
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.command.CommandExecutor",
        "children": [
          {
            "kind": "METHOD",
            "name": "onCommand(org.bukkit.command.CommandSender,org.bukkit.command.Command,java.lang.String,java.lang.String[])",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "args"
              },
              {
                "kind": "PARAMETER",
                "name": "command"
              },
              {
                "kind": "PARAMETER",
                "name": "label"
              },
              {
                "kind": "PARAMETER",
                "name": "sender"
              }
            ],
            "comment": {
              "body": "Executes the given command, returning its success",
              "tags": "Returns true if a valid command, otherwise false.",
              "plain": "Executes the given command, returning its success\n@param sender Source of the command\n@param command Command which was executed\n@param label Alias of the command which was used\n@param args Passed command arguments\n@return true if a valid command, otherwise false"
            }
          }
        ],
        "comment": {
          "body": "Represents a class which contains a single method for executing commands",
          "plain": "Represents a class which contains a single method for executing commands"
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.command.CommandMap",
        "children": [
          {
            "kind": "METHOD",
            "name": "clearCommands()",
            "comment": {
              "body": "Clears all registered commands.",
              "plain": "Clears all registered commands."
            }
          },
          {
            "kind": "METHOD",
            "name": "dispatch(org.bukkit.command.CommandSender,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cmdLine"
              },
              {
                "kind": "PARAMETER",
                "name": "sender"
              }
            ],
            "comment": {
              "body": "Looks for the requested command and executes it if found.",
              "tags": "Returns returns false if no target is found, true otherwise..",
              "plain": "Looks for the requested command and executes it if found.\n@param sender The command\u0027s sender\n@param cmdLine command + arguments. Example: \"/test abc 123\"\n@return returns false if no target is found, true otherwise.\n@throws CommandException Thrown when the executor for the given command\n     fails with an unhandled exception"
            }
          },
          {
            "kind": "METHOD",
            "name": "getCommand(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ],
            "comment": {
              "body": "Gets the command registered to the specified name",
              "tags": "Returns Command with the specified name or null if a command with that\n     label doesn\u0027t exist.",
              "plain": "Gets the command registered to the specified name\n@param name Name of the command to retrieve\n@return Command with the specified name or null if a command with that\n     label doesn\u0027t exist"
            }
          },
          {
            "kind": "METHOD",
            "name": "getKnownCommands()",
            "comment": {
              "body": "Return a Map of known commands",
              "tags": "Returns known commands.",
              "plain": "Return a Map of known commands\n@return known commands"
            }
          },
          {
            "kind": "METHOD",
            "name": "register(java.lang.String,java.lang.String,org.bukkit.command.Command)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "command"
              },
              {
                "kind": "PARAMETER",
                "name": "fallbackPrefix"
              },
              {
                "kind": "PARAMETER",
                "name": "label"
              }
            ],
            "comment": {
              "body": "Registers a command. Returns true on success; false if name is already\n taken and fallback had to be used.\n \u003cp\u003e\n Caller can use:-\n \u003cul\u003e\n \u003cli\u003ecommand.getName() to determine the label registered for this\n     command\n \u003cli\u003ecommand.getAliases() to determine the aliases which where\n     registered\n \u003c/ul\u003e",
              "tags": "Returns true if command was registered with the passed in label, false\n     otherwise, which indicates the fallbackPrefix was used one or more\n     times.",
              "plain": "Registers a command. Returns true on success; false if name is already\n taken and fallback had to be used.\n \u003cp\u003e\n Caller can use:-\n \u003cul\u003e\n \u003cli\u003ecommand.getName() to determine the label registered for this\n     command\n \u003cli\u003ecommand.getAliases() to determine the aliases which where\n     registered\n \u003c/ul\u003e\n@param label the label of the command, without the \u0027/\u0027-prefix.\n@param fallbackPrefix a prefix which is prepended to the command with a\n     \u0027:\u0027 one or more times to make the command unique\n@param command the command to register\n@return true if command was registered with the passed in label, false\n     otherwise, which indicates the fallbackPrefix was used one or more\n     times"
            }
          },
          {
            "kind": "METHOD",
            "name": "register(java.lang.String,org.bukkit.command.Command)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "command"
              },
              {
                "kind": "PARAMETER",
                "name": "fallbackPrefix"
              }
            ],
            "comment": {
              "body": "Registers a command. Returns true on success; false if name is already\n taken and fallback had to be used.\n \u003cp\u003e\n Caller can use:-\n \u003cul\u003e\n \u003cli\u003ecommand.getName() to determine the label registered for this\n     command\n \u003cli\u003ecommand.getAliases() to determine the aliases which where\n     registered\n \u003c/ul\u003e",
              "tags": "Returns true if command was registered with the passed in label, false\n     otherwise, which indicates the fallbackPrefix was used one or more\n     times.",
              "plain": "Registers a command. Returns true on success; false if name is already\n taken and fallback had to be used.\n \u003cp\u003e\n Caller can use:-\n \u003cul\u003e\n \u003cli\u003ecommand.getName() to determine the label registered for this\n     command\n \u003cli\u003ecommand.getAliases() to determine the aliases which where\n     registered\n \u003c/ul\u003e\n@param fallbackPrefix a prefix which is prepended to the command with a\n     \u0027:\u0027 one or more times to make the command unique\n@param command the command to register, from which label is determined\n     from the command name\n@return true if command was registered with the passed in label, false\n     otherwise, which indicates the fallbackPrefix was used one or more\n     times"
            }
          },
          {
            "kind": "METHOD",
            "name": "registerAll(java.lang.String,java.util.List\u003corg.bukkit.command.Command\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "commands"
              },
              {
                "kind": "PARAMETER",
                "name": "fallbackPrefix"
              }
            ],
            "comment": {
              "body": "Registers all the commands belonging to a certain plugin.\n \u003cp\u003e\n Caller can use:-\n \u003cul\u003e\n \u003cli\u003ecommand.getName() to determine the label registered for this\n     command\n \u003cli\u003ecommand.getAliases() to determine the aliases which where\n     registered\n \u003c/ul\u003e",
              "plain": "Registers all the commands belonging to a certain plugin.\n \u003cp\u003e\n Caller can use:-\n \u003cul\u003e\n \u003cli\u003ecommand.getName() to determine the label registered for this\n     command\n \u003cli\u003ecommand.getAliases() to determine the aliases which where\n     registered\n \u003c/ul\u003e\n@param fallbackPrefix a prefix which is prepended to each command with\n     a \u0027:\u0027 one or more times to make the command unique\n@param commands a list of commands to register"
            }
          },
          {
            "kind": "METHOD",
            "name": "tabComplete(org.bukkit.command.CommandSender,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cmdLine"
              },
              {
                "kind": "PARAMETER",
                "name": "sender"
              }
            ],
            "comment": {
              "body": "Looks for the requested command and executes an appropriate\n tab-completer if found. This method will also tab-complete partial\n commands.",
              "tags": "Returns a list of possible tab-completions. This list may be immutable.\n     Will be null if no matching command of which sender has permission..",
              "plain": "Looks for the requested command and executes an appropriate\n tab-completer if found. This method will also tab-complete partial\n commands.\n@param sender The command\u0027s sender.\n@param cmdLine The entire command string to tab-complete, excluding\n     initial slash.\n@return a list of possible tab-completions. This list may be immutable.\n     Will be null if no matching command of which sender has permission.\n@throws CommandException Thrown when the tab-completer for the given\n     command fails with an unhandled exception\n@throws IllegalArgumentException if either sender or cmdLine are null"
            }
          },
          {
            "kind": "METHOD",
            "name": "tabComplete(org.bukkit.command.CommandSender,java.lang.String,org.bukkit.Location)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cmdLine"
              },
              {
                "kind": "PARAMETER",
                "name": "location"
              },
              {
                "kind": "PARAMETER",
                "name": "sender"
              }
            ],
            "comment": {
              "body": "Looks for the requested command and executes an appropriate\n tab-completer if found. This method will also tab-complete partial\n commands.",
              "tags": "Returns a list of possible tab-completions. This list may be immutable.\n     Will be null if no matching command of which sender has permission..",
              "plain": "Looks for the requested command and executes an appropriate\n tab-completer if found. This method will also tab-complete partial\n commands.\n@param sender The command\u0027s sender.\n@param cmdLine The entire command string to tab-complete, excluding\n     initial slash.\n@param location The position looked at by the sender, or null if none\n@return a list of possible tab-completions. This list may be immutable.\n     Will be null if no matching command of which sender has permission.\n@throws CommandException Thrown when the tab-completer for the given\n     command fails with an unhandled exception\n@throws IllegalArgumentException if either sender or cmdLine are null"
            }
          }
        ]
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.command.CommandSender",
        "children": [
          {
            "kind": "METHOD",
            "name": "getName()",
            "comment": {
              "body": "Gets the name of this command sender",
              "tags": "Returns Name of the sender.",
              "plain": "Gets the name of this command sender\n@return Name of the sender"
            }
          },
          {
            "kind": "METHOD",
            "name": "getServer()",
            "comment": {
              "body": "Returns the server instance that this command is running on",
              "tags": "Returns Server instance.",
              "plain": "Returns the server instance that this command is running on\n@return Server instance"
            }
          },
          {
            "kind": "CLASS",
            "name": "org.bukkit.command.CommandSender.Spigot",
            "children": [
              {
                "kind": "CONSTRUCTOR",
                "name": "Spigot()"
              },
              {
                "kind": "METHOD",
                "name": "sendMessage(net.md_5.bungee.api.chat.BaseComponent)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "component"
                  }
                ],
                "comment": {
                  "body": "Sends this sender a chat component.",
                  "plain": "Sends this sender a chat component.\n@param component the components to send"
                }
              },
              {
                "kind": "METHOD",
                "name": "sendMessage(net.md_5.bungee.api.chat.BaseComponent...)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "components"
                  }
                ],
                "comment": {
                  "body": "Sends an array of components as a single message to the sender.",
                  "plain": "Sends an array of components as a single message to the sender.\n@param components the components to send"
                }
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "sendMessage(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "message"
              }
            ],
            "comment": {
              "body": "Sends this sender a message",
              "plain": "Sends this sender a message\n@param message Message to be displayed"
            }
          },
          {
            "kind": "METHOD",
            "name": "sendMessage(java.lang.String[])",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "messages"
              }
            ],
            "comment": {
              "body": "Sends this sender multiple messages",
              "plain": "Sends this sender multiple messages\n@param messages An array of messages to be displayed"
            }
          },
          {
            "kind": "METHOD",
            "name": "sendMessage(net.md_5.bungee.api.chat.BaseComponent)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "component"
              }
            ],
            "comment": {
              "body": "Sends the component to the sender\n\n \u003cp\u003eIf this sender does not support sending full components then\n the component will be sent as legacy text.\u003c/p\u003e",
              "plain": "Sends the component to the sender\n\n \u003cp\u003eIf this sender does not support sending full components then\n the component will be sent as legacy text.\u003c/p\u003e\n@param component the component to send"
            }
          },
          {
            "kind": "METHOD",
            "name": "sendMessage(net.md_5.bungee.api.chat.BaseComponent...)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "components"
              }
            ],
            "comment": {
              "body": "Sends an array of components as a single message to the sender\n\n \u003cp\u003eIf this sender does not support sending full components then\n the components will be sent as legacy text.\u003c/p\u003e",
              "plain": "Sends an array of components as a single message to the sender\n\n \u003cp\u003eIf this sender does not support sending full components then\n the components will be sent as legacy text.\u003c/p\u003e\n@param components the components to send"
            }
          },
          {
            "kind": "METHOD",
            "name": "spigot()"
          }
        ]
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.command.ConsoleCommandSender"
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.command.FormattedCommandAlias",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "FormattedCommandAlias(java.lang.String,java.lang.String[])",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "alias"
              },
              {
                "kind": "PARAMETER",
                "name": "formatStrings"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "buildCommand(org.bukkit.command.CommandSender,java.lang.String,java.lang.String[])",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "args"
              },
              {
                "kind": "PARAMETER",
                "name": "formatString"
              },
              {
                "kind": "PARAMETER",
                "name": "sender"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "execute(org.bukkit.command.CommandSender,java.lang.String,java.lang.String[])",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "args"
              },
              {
                "kind": "PARAMETER",
                "name": "commandLabel"
              },
              {
                "kind": "PARAMETER",
                "name": "sender"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "formatStrings"
          },
          {
            "kind": "METHOD",
            "name": "getTimingName()"
          },
          {
            "kind": "METHOD",
            "name": "inRange(int,int,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "i"
              },
              {
                "kind": "PARAMETER",
                "name": "j"
              },
              {
                "kind": "PARAMETER",
                "name": "k"
              }
            ]
          }
        ]
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.command.MessageCommandSender",
        "children": [
          {
            "kind": "METHOD",
            "name": "addAttachment(org.bukkit.plugin.Plugin)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "plugin"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "addAttachment(org.bukkit.plugin.Plugin,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "plugin"
              },
              {
                "kind": "PARAMETER",
                "name": "ticks"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "addAttachment(org.bukkit.plugin.Plugin,java.lang.String,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              },
              {
                "kind": "PARAMETER",
                "name": "plugin"
              },
              {
                "kind": "PARAMETER",
                "name": "value"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "addAttachment(org.bukkit.plugin.Plugin,java.lang.String,boolean,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              },
              {
                "kind": "PARAMETER",
                "name": "plugin"
              },
              {
                "kind": "PARAMETER",
                "name": "ticks"
              },
              {
                "kind": "PARAMETER",
                "name": "value"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getEffectivePermissions()"
          },
          {
            "kind": "METHOD",
            "name": "getName()"
          },
          {
            "kind": "METHOD",
            "name": "getServer()"
          },
          {
            "kind": "METHOD",
            "name": "hasPermission(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "hasPermission(org.bukkit.permissions.Permission)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "perm"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "isOp()"
          },
          {
            "kind": "METHOD",
            "name": "isPermissionSet(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "isPermissionSet(org.bukkit.permissions.Permission)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "perm"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "recalculatePermissions()"
          },
          {
            "kind": "METHOD",
            "name": "removeAttachment(org.bukkit.permissions.PermissionAttachment)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "attachment"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "sendMessage(java.lang.String[])",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "messages"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "setOp(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "value"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "spigot()"
          }
        ],
        "comment": {
          "body": "For when all you care about is just messaging",
          "plain": "For when all you care about is just messaging"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.command.MultipleCommandAlias",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "MultipleCommandAlias(java.lang.String,org.bukkit.command.Command[])",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "commands"
              },
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "commands"
          },
          {
            "kind": "METHOD",
            "name": "execute(org.bukkit.command.CommandSender,java.lang.String,java.lang.String[])",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "args"
              },
              {
                "kind": "PARAMETER",
                "name": "commandLabel"
              },
              {
                "kind": "PARAMETER",
                "name": "sender"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getCommands()",
            "comment": {
              "body": "Gets the commands associated with the multi-command alias.",
              "tags": "Returns commands associated with alias.",
              "plain": "Gets the commands associated with the multi-command alias.\n@return commands associated with alias"
            }
          }
        ],
        "comment": {
          "body": "Represents a command that delegates to one or more other commands",
          "plain": "Represents a command that delegates to one or more other commands"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.command.PluginCommand",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PluginCommand(java.lang.String,org.bukkit.plugin.Plugin)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              },
              {
                "kind": "PARAMETER",
                "name": "owner"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "completer"
          },
          {
            "kind": "METHOD",
            "name": "execute(org.bukkit.command.CommandSender,java.lang.String,java.lang.String[])",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "args"
              },
              {
                "kind": "PARAMETER",
                "name": "commandLabel"
              },
              {
                "kind": "PARAMETER",
                "name": "sender"
              }
            ],
            "comment": {
              "body": "Executes the command, returning its success",
              "tags": "Returns true if the command was successful, otherwise false.",
              "plain": "Executes the command, returning its success\n@param sender Source object which is executing this command\n@param commandLabel The alias of the command used\n@param args All arguments passed to the command, split via \u0027 \u0027\n@return true if the command was successful, otherwise false"
            }
          },
          {
            "kind": "FIELD",
            "name": "executor"
          },
          {
            "kind": "METHOD",
            "name": "getExecutor()",
            "comment": {
              "body": "Gets the \u003ca href\u003d\"org/bukkit/command/CommandExecutor.html\" title\u003d\"interface in org.bukkit.command\"\u003e\u003ccode\u003eCommandExecutor\u003c/code\u003e\u003c/a\u003e associated with this command",
              "tags": "Returns CommandExecutor object linked to this command.",
              "plain": "Gets the {@link CommandExecutor} associated with this command\n@return CommandExecutor object linked to this command"
            }
          },
          {
            "kind": "METHOD",
            "name": "getPlugin()",
            "comment": {
              "body": "Gets the owner of this PluginCommand",
              "tags": "Returns Plugin that owns this command.",
              "plain": "Gets the owner of this PluginCommand\n@return Plugin that owns this command"
            }
          },
          {
            "kind": "METHOD",
            "name": "getTabCompleter()",
            "comment": {
              "body": "Gets the \u003ca href\u003d\"org/bukkit/command/TabCompleter.html\" title\u003d\"interface in org.bukkit.command\"\u003e\u003ccode\u003eTabCompleter\u003c/code\u003e\u003c/a\u003e associated with this command.",
              "tags": "Returns TabCompleter object linked to this command.",
              "plain": "Gets the {@link TabCompleter} associated with this command.\n@return TabCompleter object linked to this command"
            }
          },
          {
            "kind": "FIELD",
            "name": "owningPlugin"
          },
          {
            "kind": "METHOD",
            "name": "setExecutor(org.bukkit.command.CommandExecutor)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "executor"
              }
            ],
            "comment": {
              "body": "Sets the \u003ca href\u003d\"org/bukkit/command/CommandExecutor.html\" title\u003d\"interface in org.bukkit.command\"\u003e\u003ccode\u003eCommandExecutor\u003c/code\u003e\u003c/a\u003e to run when parsing this command",
              "plain": "Sets the {@link CommandExecutor} to run when parsing this command\n@param executor New executor to run"
            }
          },
          {
            "kind": "METHOD",
            "name": "setTabCompleter(org.bukkit.command.TabCompleter)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "completer"
              }
            ],
            "comment": {
              "body": "Sets the \u003ca href\u003d\"org/bukkit/command/TabCompleter.html\" title\u003d\"interface in org.bukkit.command\"\u003e\u003ccode\u003eTabCompleter\u003c/code\u003e\u003c/a\u003e to run when tab-completing this command.\n \u003cp\u003e\n If no TabCompleter is specified, and the command\u0027s executor implements\n TabCompleter, then the executor will be used for tab completion.",
              "plain": "Sets the {@link TabCompleter} to run when tab-completing this command.\n \u003cp\u003e\n If no TabCompleter is specified, and the command\u0027s executor implements\n TabCompleter, then the executor will be used for tab completion.\n@param completer New tab completer"
            }
          },
          {
            "kind": "METHOD",
            "name": "tabComplete(org.bukkit.command.CommandSender,java.lang.String,java.lang.String[])",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "alias"
              },
              {
                "kind": "PARAMETER",
                "name": "args"
              },
              {
                "kind": "PARAMETER",
                "name": "sender"
              }
            ],
            "comment": {
              "body": "Executed on tab completion for this command, returning a list of\n options the player can tab through.\n \u003cp\u003e\n Delegates to the tab completer if present.\n \u003cp\u003e\n If it is not present or returns null, will delegate to the current\n command executor if it implements \u003ca href\u003d\"org/bukkit/command/TabCompleter.html\" title\u003d\"interface in org.bukkit.command\"\u003e\u003ccode\u003eTabCompleter\u003c/code\u003e\u003c/a\u003e. If a non-null\n list has not been found, will default to standard player name\n completion in \u003ca href\u003d\"org/bukkit/command/Command.html#tabComplete(org.bukkit.command.CommandSender,java.lang.String,java.lang.String%5B%5D)\"\u003e\u003ccode\u003eCommand.tabComplete(CommandSender, String, String[])\u003c/code\u003e\u003c/a\u003e.\n \u003cp\u003e\n This method does not consider permissions.",
              "plain": "{@inheritDoc}\n \u003cp\u003e\n Delegates to the tab completer if present.\n \u003cp\u003e\n If it is not present or returns null, will delegate to the current\n command executor if it implements {@link TabCompleter}. If a non-null\n list has not been found, will default to standard player name\n completion in {@link Command#tabComplete(CommandSender, String, String[])}.\n \u003cp\u003e\n This method does not consider permissions.\n@throws CommandException if the completer or executor throw an\n     exception during the process of tab-completing.\n@throws IllegalArgumentException if sender, alias, or args is null"
            }
          },
          {
            "kind": "METHOD",
            "name": "toString()"
          }
        ],
        "comment": {
          "body": "Represents a \u003ca href\u003d\"org/bukkit/command/Command.html\" title\u003d\"class in org.bukkit.command\"\u003e\u003ccode\u003eCommand\u003c/code\u003e\u003c/a\u003e belonging to a plugin",
          "plain": "Represents a {@link Command} belonging to a plugin"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.command.PluginCommandYamlParser",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PluginCommandYamlParser()"
          },
          {
            "kind": "METHOD",
            "name": "parse(org.bukkit.plugin.Plugin)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "plugin"
              }
            ]
          }
        ]
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.command.PluginIdentifiableCommand",
        "children": [
          {
            "kind": "METHOD",
            "name": "getPlugin()",
            "comment": {
              "body": "Gets the owner of this PluginIdentifiableCommand.",
              "tags": "Returns Plugin that owns this PluginIdentifiableCommand..",
              "plain": "Gets the owner of this PluginIdentifiableCommand.\n@return Plugin that owns this PluginIdentifiableCommand."
            }
          }
        ],
        "comment": {
          "body": "This interface is used by the help system to group commands into\n sub-indexes based on the \u003ca href\u003d\"org/bukkit/plugin/Plugin.html\" title\u003d\"interface in org.bukkit.plugin\"\u003e\u003ccode\u003ePlugin\u003c/code\u003e\u003c/a\u003e they are a part of. Custom command\n implementations will need to implement this interface to have a sub-index\n automatically generated on the plugin\u0027s behalf.",
          "plain": "This interface is used by the help system to group commands into\n sub-indexes based on the {@link Plugin} they are a part of. Custom command\n implementations will need to implement this interface to have a sub-index\n automatically generated on the plugin\u0027s behalf."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.command.ProxiedCommandSender",
        "children": [
          {
            "kind": "METHOD",
            "name": "getCallee()",
            "comment": {
              "body": "Returns the CommandSender which is being used to call the command",
              "tags": "Returns the caller which the command is being run as.",
              "plain": "Returns the CommandSender which is being used to call the command\n@return the caller which the command is being run as"
            }
          },
          {
            "kind": "METHOD",
            "name": "getCaller()",
            "comment": {
              "body": "Returns the CommandSender which triggered this proxied command",
              "tags": "Returns the caller which triggered the command.",
              "plain": "Returns the CommandSender which triggered this proxied command\n@return the caller which triggered the command"
            }
          }
        ]
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.command.RemoteConsoleCommandSender"
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.command.SimpleCommandMap",
        "children": [
          {
            "kind": "FIELD",
            "name": "PATTERN_ON_SPACE"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "SimpleCommandMap(org.bukkit.Server)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "server"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "clearCommands()"
          },
          {
            "kind": "METHOD",
            "name": "dispatch(org.bukkit.command.CommandSender,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "commandLine"
              },
              {
                "kind": "PARAMETER",
                "name": "sender"
              }
            ],
            "comment": {
              "body": "Looks for the requested command and executes it if found.",
              "plain": "{@inheritDoc}"
            }
          },
          {
            "kind": "METHOD",
            "name": "getCommand(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getCommands()"
          },
          {
            "kind": "METHOD",
            "name": "getKnownCommands()"
          },
          {
            "kind": "FIELD",
            "name": "knownCommands"
          },
          {
            "kind": "METHOD",
            "name": "register(java.lang.String,java.lang.String,org.bukkit.command.Command)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "command"
              },
              {
                "kind": "PARAMETER",
                "name": "fallbackPrefix"
              },
              {
                "kind": "PARAMETER",
                "name": "label"
              }
            ],
            "comment": {
              "body": "Registers a command. Returns true on success; false if name is already\n taken and fallback had to be used.\n \u003cp\u003e\n Caller can use:-\n \u003cul\u003e\n \u003cli\u003ecommand.getName() to determine the label registered for this\n     command\n \u003cli\u003ecommand.getAliases() to determine the aliases which where\n     registered\n \u003c/ul\u003e",
              "plain": "{@inheritDoc}"
            }
          },
          {
            "kind": "METHOD",
            "name": "register(java.lang.String,org.bukkit.command.Command)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "command"
              },
              {
                "kind": "PARAMETER",
                "name": "fallbackPrefix"
              }
            ],
            "comment": {
              "body": "Registers a command. Returns true on success; false if name is already\n taken and fallback had to be used.\n \u003cp\u003e\n Caller can use:-\n \u003cul\u003e\n \u003cli\u003ecommand.getName() to determine the label registered for this\n     command\n \u003cli\u003ecommand.getAliases() to determine the aliases which where\n     registered\n \u003c/ul\u003e",
              "plain": "{@inheritDoc}"
            }
          },
          {
            "kind": "METHOD",
            "name": "register(java.lang.String,org.bukkit.command.Command,boolean,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "command"
              },
              {
                "kind": "PARAMETER",
                "name": "fallbackPrefix"
              },
              {
                "kind": "PARAMETER",
                "name": "isAlias"
              },
              {
                "kind": "PARAMETER",
                "name": "label"
              }
            ],
            "comment": {
              "body": "Registers a command with the given name is possible. Also uses\n fallbackPrefix to create a unique name.",
              "tags": "Returns true if command was registered, false otherwise..",
              "plain": "Registers a command with the given name is possible. Also uses\n fallbackPrefix to create a unique name.\n@param label the name of the command, without the \u0027/\u0027-prefix.\n@param command the command to register\n@param isAlias whether the command is an alias\n@param fallbackPrefix a prefix which is prepended to the command for a\n     unique address\n@return true if command was registered, false otherwise."
            }
          },
          {
            "kind": "METHOD",
            "name": "registerAll(java.lang.String,java.util.List\u003corg.bukkit.command.Command\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "commands"
              },
              {
                "kind": "PARAMETER",
                "name": "fallbackPrefix"
              }
            ],
            "comment": {
              "body": "Registers all the commands belonging to a certain plugin.\n \u003cp\u003e\n Caller can use:-\n \u003cul\u003e\n \u003cli\u003ecommand.getName() to determine the label registered for this\n     command\n \u003cli\u003ecommand.getAliases() to determine the aliases which where\n     registered\n \u003c/ul\u003e",
              "plain": "{@inheritDoc}"
            }
          },
          {
            "kind": "METHOD",
            "name": "registerServerAliases()"
          },
          {
            "kind": "FIELD",
            "name": "server"
          },
          {
            "kind": "METHOD",
            "name": "setDefaultCommands()"
          },
          {
            "kind": "METHOD",
            "name": "setFallbackCommands()"
          },
          {
            "kind": "METHOD",
            "name": "tabComplete(org.bukkit.command.CommandSender,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cmdLine"
              },
              {
                "kind": "PARAMETER",
                "name": "sender"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "tabComplete(org.bukkit.command.CommandSender,java.lang.String,org.bukkit.Location)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cmdLine"
              },
              {
                "kind": "PARAMETER",
                "name": "location"
              },
              {
                "kind": "PARAMETER",
                "name": "sender"
              }
            ]
          }
        ]
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.command.TabCompleter",
        "children": [
          {
            "kind": "METHOD",
            "name": "onTabComplete(org.bukkit.command.CommandSender,org.bukkit.command.Command,java.lang.String,java.lang.String[])",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "alias"
              },
              {
                "kind": "PARAMETER",
                "name": "args"
              },
              {
                "kind": "PARAMETER",
                "name": "command"
              },
              {
                "kind": "PARAMETER",
                "name": "sender"
              }
            ],
            "comment": {
              "body": "Requests a list of possible completions for a command argument.",
              "tags": "Returns A List of possible completions for the final argument, or null\n     to default to the command executor.",
              "plain": "Requests a list of possible completions for a command argument.\n@param sender Source of the command.  For players tab-completing a\n     command inside of a command block, this will be the player, not\n     the command block.\n@param command Command which was executed\n@param alias The alias used\n@param args The arguments passed to the command, including final\n     partial argument to be completed and command label\n@return A List of possible completions for the final argument, or null\n     to default to the command executor"
            }
          }
        ],
        "comment": {
          "body": "Represents a class which can suggest tab completions for commands.",
          "plain": "Represents a class which can suggest tab completions for commands."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.command.TabExecutor",
        "comment": {
          "body": "This class is provided as a convenience to implement both TabCompleter and\n CommandExecutor.",
          "plain": "This class is provided as a convenience to implement both TabCompleter and\n CommandExecutor."
        }
      }
    ]
  },
  {
    "kind": "PACKAGE",
    "name": "org.bukkit.command.defaults",
    "children": [
      {
        "kind": "CLASS",
        "name": "org.bukkit.command.defaults.BukkitCommand",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "BukkitCommand(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "BukkitCommand(java.lang.String,java.lang.String,java.lang.String,java.util.List\u003cjava.lang.String\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "aliases"
              },
              {
                "kind": "PARAMETER",
                "name": "description"
              },
              {
                "kind": "PARAMETER",
                "name": "name"
              },
              {
                "kind": "PARAMETER",
                "name": "usageMessage"
              }
            ]
          }
        ]
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.command.defaults.HelpCommand",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "HelpCommand()"
          },
          {
            "kind": "METHOD",
            "name": "damerauLevenshteinDistance(java.lang.String,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "s1"
              },
              {
                "kind": "PARAMETER",
                "name": "s2"
              }
            ],
            "comment": {
              "body": "Computes the Dameraur-Levenshtein Distance between two strings. Adapted\n from the algorithm at \u003ca href\u003d\"http://en.wikipedia.org/wiki/Damerau%E2%80%93Levenshtein_distance\"\u003eWikipedia: Damerau–Levenshtein distance\u003c/a\u003e",
              "tags": "Returns The number of substitutions, deletions, insertions, and\n transpositions required to get from s1 to s2..",
              "plain": "Computes the Dameraur-Levenshtein Distance between two strings. Adapted\n from the algorithm at \u003ca href\u003d\"http://en.wikipedia.org/wiki/Damerau%E2%80%93Levenshtein_distance\"\u003eWikipedia: Damerau\\u2013Levenshtein distance\u003c/a\u003e\n@param s1 The first string being compared.\n@param s2 The second string being compared.\n@return The number of substitutions, deletions, insertions, and\n transpositions required to get from s1 to s2."
            }
          },
          {
            "kind": "METHOD",
            "name": "execute(org.bukkit.command.CommandSender,java.lang.String,java.lang.String[])",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "args"
              },
              {
                "kind": "PARAMETER",
                "name": "currentAlias"
              },
              {
                "kind": "PARAMETER",
                "name": "sender"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "findPossibleMatches(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "searchString"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "tabComplete(org.bukkit.command.CommandSender,java.lang.String,java.lang.String[])",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "alias"
              },
              {
                "kind": "PARAMETER",
                "name": "args"
              },
              {
                "kind": "PARAMETER",
                "name": "sender"
              }
            ]
          }
        ]
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.command.defaults.PluginsCommand",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PluginsCommand(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "execute(org.bukkit.command.CommandSender,java.lang.String,java.lang.String[])",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "args"
              },
              {
                "kind": "PARAMETER",
                "name": "currentAlias"
              },
              {
                "kind": "PARAMETER",
                "name": "sender"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getPluginList()"
          },
          {
            "kind": "METHOD",
            "name": "tabComplete(org.bukkit.command.CommandSender,java.lang.String,java.lang.String[])",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "alias"
              },
              {
                "kind": "PARAMETER",
                "name": "args"
              },
              {
                "kind": "PARAMETER",
                "name": "sender"
              }
            ]
          }
        ]
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.command.defaults.ReloadCommand",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "ReloadCommand(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "execute(org.bukkit.command.CommandSender,java.lang.String,java.lang.String[])",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "args"
              },
              {
                "kind": "PARAMETER",
                "name": "currentAlias"
              },
              {
                "kind": "PARAMETER",
                "name": "sender"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "tabComplete(org.bukkit.command.CommandSender,java.lang.String,java.lang.String[])",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "alias"
              },
              {
                "kind": "PARAMETER",
                "name": "args"
              },
              {
                "kind": "PARAMETER",
                "name": "sender"
              }
            ]
          }
        ]
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.command.defaults.VersionCommand",
        "children": [
          {
            "kind": "FIELD",
            "name": "BRANCH"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "VersionCommand(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "describeToSender(org.bukkit.plugin.Plugin,org.bukkit.command.CommandSender)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "plugin"
              },
              {
                "kind": "PARAMETER",
                "name": "sender"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "execute(org.bukkit.command.CommandSender,java.lang.String,java.lang.String[])",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "args"
              },
              {
                "kind": "PARAMETER",
                "name": "currentAlias"
              },
              {
                "kind": "PARAMETER",
                "name": "sender"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getAuthors(org.bukkit.plugin.PluginDescriptionFile)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "desc"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getDistance(java.lang.String,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "repo"
              },
              {
                "kind": "PARAMETER",
                "name": "verInfo"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getFromJenkins(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "currentVer"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getFromRepo(java.lang.String,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "hash"
              },
              {
                "kind": "PARAMETER",
                "name": "repo"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "hasVersion"
          },
          {
            "kind": "FIELD",
            "name": "lastCheck"
          },
          {
            "kind": "METHOD",
            "name": "obtainVersion()"
          },
          {
            "kind": "METHOD",
            "name": "sendVersion(org.bukkit.command.CommandSender)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "sender"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "setVersionMessage(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "msg"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "tabComplete(org.bukkit.command.CommandSender,java.lang.String,java.lang.String[])",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "alias"
              },
              {
                "kind": "PARAMETER",
                "name": "args"
              },
              {
                "kind": "PARAMETER",
                "name": "sender"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "tellHistory(org.bukkit.command.CommandSender)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "sender"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "versionLock"
          },
          {
            "kind": "FIELD",
            "name": "versionMessage"
          },
          {
            "kind": "FIELD",
            "name": "versionTaskStarted"
          },
          {
            "kind": "FIELD",
            "name": "versionWaiters"
          }
        ]
      }
    ]
  },
  {
    "kind": "PACKAGE",
    "name": "org.bukkit.configuration",
    "children": [
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.configuration.Configuration",
        "children": [
          {
            "kind": "METHOD",
            "name": "addDefault(java.lang.String,java.lang.Object)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "path"
              },
              {
                "kind": "PARAMETER",
                "name": "value"
              }
            ],
            "comment": {
              "body": "Sets the default value of the given path as provided.\n \u003cp\u003e\n If no source \u003ca href\u003d\"org/bukkit/configuration/Configuration.html\" title\u003d\"interface in org.bukkit.configuration\"\u003e\u003ccode\u003eConfiguration\u003c/code\u003e\u003c/a\u003e was provided as a default\n collection, then a new \u003ca href\u003d\"org/bukkit/configuration/MemoryConfiguration.html\" title\u003d\"class in org.bukkit.configuration\"\u003e\u003ccode\u003eMemoryConfiguration\u003c/code\u003e\u003c/a\u003e will be created to\n hold the new default value.\n \u003cp\u003e\n If value is null, the value will be removed from the default\n Configuration source.",
              "plain": "Sets the default value of the given path as provided.\n \u003cp\u003e\n If no source {@link Configuration} was provided as a default\n collection, then a new {@link MemoryConfiguration} will be created to\n hold the new default value.\n \u003cp\u003e\n If value is null, the value will be removed from the default\n Configuration source.\n@param path Path of the value to set.\n@param value Value to set the default to.\n@throws IllegalArgumentException Thrown if path is null."
            }
          },
          {
            "kind": "METHOD",
            "name": "addDefaults(java.util.Map\u003cjava.lang.String,java.lang.Object\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "defaults"
              }
            ],
            "comment": {
              "body": "Sets the default values of the given paths as provided.\n \u003cp\u003e\n If no source \u003ca href\u003d\"org/bukkit/configuration/Configuration.html\" title\u003d\"interface in org.bukkit.configuration\"\u003e\u003ccode\u003eConfiguration\u003c/code\u003e\u003c/a\u003e was provided as a default\n collection, then a new \u003ca href\u003d\"org/bukkit/configuration/MemoryConfiguration.html\" title\u003d\"class in org.bukkit.configuration\"\u003e\u003ccode\u003eMemoryConfiguration\u003c/code\u003e\u003c/a\u003e will be created to\n hold the new default values.",
              "plain": "Sets the default values of the given paths as provided.\n \u003cp\u003e\n If no source {@link Configuration} was provided as a default\n collection, then a new {@link MemoryConfiguration} will be created to\n hold the new default values.\n@param defaults A map of Path{@literal -\u003e}Values to add to defaults.\n@throws IllegalArgumentException Thrown if defaults is null."
            }
          },
          {
            "kind": "METHOD",
            "name": "addDefaults(org.bukkit.configuration.Configuration)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "defaults"
              }
            ],
            "comment": {
              "body": "Sets the default values of the given paths as provided.\n \u003cp\u003e\n If no source \u003ca href\u003d\"org/bukkit/configuration/Configuration.html\" title\u003d\"interface in org.bukkit.configuration\"\u003e\u003ccode\u003eConfiguration\u003c/code\u003e\u003c/a\u003e was provided as a default\n collection, then a new \u003ca href\u003d\"org/bukkit/configuration/MemoryConfiguration.html\" title\u003d\"class in org.bukkit.configuration\"\u003e\u003ccode\u003eMemoryConfiguration\u003c/code\u003e\u003c/a\u003e will be created to\n hold the new default value.\n \u003cp\u003e\n This method will not hold a reference to the specified Configuration,\n nor will it automatically update if that Configuration ever changes. If\n you require this, you should set the default source with \u003ca href\u003d\"org/bukkit/configuration/Configuration.html#setDefaults(org.bukkit.configuration.Configuration)\"\u003e\u003ccode\u003eConfiguration.setDefaults(org.bukkit.configuration.Configuration)\u003c/code\u003e\u003c/a\u003e.",
              "plain": "Sets the default values of the given paths as provided.\n \u003cp\u003e\n If no source {@link Configuration} was provided as a default\n collection, then a new {@link MemoryConfiguration} will be created to\n hold the new default value.\n \u003cp\u003e\n This method will not hold a reference to the specified Configuration,\n nor will it automatically update if that Configuration ever changes. If\n you require this, you should set the default source with {@link #setDefaults(org.bukkit.configuration.Configuration)}.\n@param defaults A configuration holding a list of defaults to copy.\n@throws IllegalArgumentException Thrown if defaults is null or this."
            }
          },
          {
            "kind": "METHOD",
            "name": "getDefaults()",
            "comment": {
              "body": "Gets the source \u003ca href\u003d\"org/bukkit/configuration/Configuration.html\" title\u003d\"interface in org.bukkit.configuration\"\u003e\u003ccode\u003eConfiguration\u003c/code\u003e\u003c/a\u003e for this configuration.\n \u003cp\u003e\n If no configuration source was set, but default values were added, then\n a \u003ca href\u003d\"org/bukkit/configuration/MemoryConfiguration.html\" title\u003d\"class in org.bukkit.configuration\"\u003e\u003ccode\u003eMemoryConfiguration\u003c/code\u003e\u003c/a\u003e will be returned. If no source was set\n and no defaults were set, then this method will return null.",
              "tags": "Returns Configuration source for default values, or null if none exist..",
              "plain": "Gets the source {@link Configuration} for this configuration.\n \u003cp\u003e\n If no configuration source was set, but default values were added, then\n a {@link MemoryConfiguration} will be returned. If no source was set\n and no defaults were set, then this method will return null.\n@return Configuration source for default values, or null if none exist."
            }
          },
          {
            "kind": "METHOD",
            "name": "options()",
            "comment": {
              "body": "Gets the \u003ca href\u003d\"org/bukkit/configuration/ConfigurationOptions.html\" title\u003d\"class in org.bukkit.configuration\"\u003e\u003ccode\u003eConfigurationOptions\u003c/code\u003e\u003c/a\u003e for this \u003ca href\u003d\"org/bukkit/configuration/Configuration.html\" title\u003d\"interface in org.bukkit.configuration\"\u003e\u003ccode\u003eConfiguration\u003c/code\u003e\u003c/a\u003e.\n \u003cp\u003e\n All setters through this method are chainable.",
              "tags": "Returns Options for this configuration.",
              "plain": "Gets the {@link ConfigurationOptions} for this {@link Configuration}.\n \u003cp\u003e\n All setters through this method are chainable.\n@return Options for this configuration"
            }
          },
          {
            "kind": "METHOD",
            "name": "setDefaults(org.bukkit.configuration.Configuration)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "defaults"
              }
            ],
            "comment": {
              "body": "Sets the source of all default values for this \u003ca href\u003d\"org/bukkit/configuration/Configuration.html\" title\u003d\"interface in org.bukkit.configuration\"\u003e\u003ccode\u003eConfiguration\u003c/code\u003e\u003c/a\u003e.\n \u003cp\u003e\n If a previous source was set, or previous default values were defined,\n then they will not be copied to the new source.",
              "plain": "Sets the source of all default values for this {@link Configuration}.\n \u003cp\u003e\n If a previous source was set, or previous default values were defined,\n then they will not be copied to the new source.\n@param defaults New source of default values for this configuration.\n@throws IllegalArgumentException Thrown if defaults is null or this."
            }
          }
        ],
        "comment": {
          "body": "Represents a source of configurable options and settings",
          "plain": "Represents a source of configurable options and settings"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.configuration.ConfigurationOptions",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "ConfigurationOptions(org.bukkit.configuration.Configuration)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "configuration"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "configuration"
          },
          {
            "kind": "METHOD",
            "name": "configuration()",
            "comment": {
              "body": "Returns the \u003ca href\u003d\"org/bukkit/configuration/Configuration.html\" title\u003d\"interface in org.bukkit.configuration\"\u003e\u003ccode\u003eConfiguration\u003c/code\u003e\u003c/a\u003e that this object is responsible for.",
              "tags": "Returns Parent configuration.",
              "plain": "Returns the {@link Configuration} that this object is responsible for.\n@return Parent configuration"
            }
          },
          {
            "kind": "FIELD",
            "name": "copyDefaults"
          },
          {
            "kind": "METHOD",
            "name": "copyDefaults()",
            "comment": {
              "body": "Checks if the \u003ca href\u003d\"org/bukkit/configuration/Configuration.html\" title\u003d\"interface in org.bukkit.configuration\"\u003e\u003ccode\u003eConfiguration\u003c/code\u003e\u003c/a\u003e should copy values from its default\n \u003ca href\u003d\"org/bukkit/configuration/Configuration.html\" title\u003d\"interface in org.bukkit.configuration\"\u003e\u003ccode\u003eConfiguration\u003c/code\u003e\u003c/a\u003e directly.\n \u003cp\u003e\n If this is true, all values in the default Configuration will be\n directly copied, making it impossible to distinguish between values\n that were set and values that are provided by default. As a result,\n \u003ca href\u003d\"org/bukkit/configuration/ConfigurationSection.html#contains(java.lang.String)\"\u003e\u003ccode\u003eConfigurationSection.contains(java.lang.String)\u003c/code\u003e\u003c/a\u003e will always\n return the same value as \u003ca href\u003d\"org/bukkit/configuration/ConfigurationSection.html#isSet(java.lang.String)\"\u003e\u003ccode\u003eConfigurationSection.isSet(java.lang.String)\u003c/code\u003e\u003c/a\u003e. The default value is\n false.",
              "tags": "Returns Whether or not defaults are directly copied.",
              "plain": "Checks if the {@link Configuration} should copy values from its default\n {@link Configuration} directly.\n \u003cp\u003e\n If this is true, all values in the default Configuration will be\n directly copied, making it impossible to distinguish between values\n that were set and values that are provided by default. As a result,\n {@link ConfigurationSection#contains(java.lang.String)} will always\n return the same value as {@link ConfigurationSection#isSet(java.lang.String)}. The default value is\n false.\n@return Whether or not defaults are directly copied"
            }
          },
          {
            "kind": "METHOD",
            "name": "copyDefaults(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "value"
              }
            ],
            "comment": {
              "body": "Sets if the \u003ca href\u003d\"org/bukkit/configuration/Configuration.html\" title\u003d\"interface in org.bukkit.configuration\"\u003e\u003ccode\u003eConfiguration\u003c/code\u003e\u003c/a\u003e should copy values from its default\n \u003ca href\u003d\"org/bukkit/configuration/Configuration.html\" title\u003d\"interface in org.bukkit.configuration\"\u003e\u003ccode\u003eConfiguration\u003c/code\u003e\u003c/a\u003e directly.\n \u003cp\u003e\n If this is true, all values in the default Configuration will be\n directly copied, making it impossible to distinguish between values\n that were set and values that are provided by default. As a result,\n \u003ca href\u003d\"org/bukkit/configuration/ConfigurationSection.html#contains(java.lang.String)\"\u003e\u003ccode\u003eConfigurationSection.contains(java.lang.String)\u003c/code\u003e\u003c/a\u003e will always\n return the same value as \u003ca href\u003d\"org/bukkit/configuration/ConfigurationSection.html#isSet(java.lang.String)\"\u003e\u003ccode\u003eConfigurationSection.isSet(java.lang.String)\u003c/code\u003e\u003c/a\u003e. The default value is\n false.",
              "tags": "Returns This object, for chaining.",
              "plain": "Sets if the {@link Configuration} should copy values from its default\n {@link Configuration} directly.\n \u003cp\u003e\n If this is true, all values in the default Configuration will be\n directly copied, making it impossible to distinguish between values\n that were set and values that are provided by default. As a result,\n {@link ConfigurationSection#contains(java.lang.String)} will always\n return the same value as {@link ConfigurationSection#isSet(java.lang.String)}. The default value is\n false.\n@param value Whether or not defaults are directly copied\n@return This object, for chaining"
            }
          },
          {
            "kind": "FIELD",
            "name": "pathSeparator"
          },
          {
            "kind": "METHOD",
            "name": "pathSeparator()",
            "comment": {
              "body": "Gets the char that will be used to separate \u003ca href\u003d\"org/bukkit/configuration/ConfigurationSection.html\" title\u003d\"interface in org.bukkit.configuration\"\u003e\u003ccode\u003eConfigurationSection\u003c/code\u003e\u003c/a\u003es\n \u003cp\u003e\n This value does not affect how the \u003ca href\u003d\"org/bukkit/configuration/Configuration.html\" title\u003d\"interface in org.bukkit.configuration\"\u003e\u003ccode\u003eConfiguration\u003c/code\u003e\u003c/a\u003e is stored,\n only in how you access the data. The default value is \u0027.\u0027.",
              "tags": "Returns Path separator.",
              "plain": "Gets the char that will be used to separate {@link ConfigurationSection}s\n \u003cp\u003e\n This value does not affect how the {@link Configuration} is stored,\n only in how you access the data. The default value is \u0027.\u0027.\n@return Path separator"
            }
          },
          {
            "kind": "METHOD",
            "name": "pathSeparator(char)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "value"
              }
            ],
            "comment": {
              "body": "Sets the char that will be used to separate \u003ca href\u003d\"org/bukkit/configuration/ConfigurationSection.html\" title\u003d\"interface in org.bukkit.configuration\"\u003e\u003ccode\u003eConfigurationSection\u003c/code\u003e\u003c/a\u003es\n \u003cp\u003e\n This value does not affect how the \u003ca href\u003d\"org/bukkit/configuration/Configuration.html\" title\u003d\"interface in org.bukkit.configuration\"\u003e\u003ccode\u003eConfiguration\u003c/code\u003e\u003c/a\u003e is stored,\n only in how you access the data. The default value is \u0027.\u0027.",
              "tags": "Returns This object, for chaining.",
              "plain": "Sets the char that will be used to separate {@link ConfigurationSection}s\n \u003cp\u003e\n This value does not affect how the {@link Configuration} is stored,\n only in how you access the data. The default value is \u0027.\u0027.\n@param value Path separator\n@return This object, for chaining"
            }
          }
        ],
        "comment": {
          "body": "Various settings for controlling the input and output of a \u003ca href\u003d\"org/bukkit/configuration/Configuration.html\" title\u003d\"interface in org.bukkit.configuration\"\u003e\u003ccode\u003eConfiguration\u003c/code\u003e\u003c/a\u003e",
          "plain": "Various settings for controlling the input and output of a {@link Configuration}"
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.configuration.ConfigurationSection",
        "children": [
          {
            "kind": "METHOD",
            "name": "\u003cT\u003egetSerializable(java.lang.String,java.lang.Class\u003cT\u003e)",
            "children": [
              {
                "kind": "TYPE_PARAMETER",
                "name": "T"
              },
              {
                "kind": "PARAMETER",
                "name": "clazz"
              },
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ],
            "comment": {
              "body": "Gets the requested \u003ca href\u003d\"org/bukkit/configuration/serialization/ConfigurationSerializable.html\" title\u003d\"interface in org.bukkit.configuration.serialization\"\u003e\u003ccode\u003eConfigurationSerializable\u003c/code\u003e\u003c/a\u003e object at the given\n path.\n\n If the Object does not exist but a default value has been specified, this\n will return the default value. If the Object does not exist and no\n default value was specified, this will return null.",
              "tags": "Returns Requested \u003ca href\u003d\"org/bukkit/configuration/serialization/ConfigurationSerializable.html\" title\u003d\"interface in org.bukkit.configuration.serialization\"\u003e\u003ccode\u003eConfigurationSerializable\u003c/code\u003e\u003c/a\u003e object.",
              "plain": "Gets the requested {@link ConfigurationSerializable} object at the given\n path.\n\n If the Object does not exist but a default value has been specified, this\n will return the default value. If the Object does not exist and no\n default value was specified, this will return null.\n@param \u003cT\u003e the type of {@link ConfigurationSerializable}\n@param path the path to the object.\n@param clazz the type of {@link ConfigurationSerializable}\n@return Requested {@link ConfigurationSerializable} object"
            }
          },
          {
            "kind": "METHOD",
            "name": "\u003cT\u003egetSerializable(java.lang.String,java.lang.Class\u003cT\u003e,T)",
            "children": [
              {
                "kind": "TYPE_PARAMETER",
                "name": "T"
              },
              {
                "kind": "PARAMETER",
                "name": "clazz"
              },
              {
                "kind": "PARAMETER",
                "name": "def"
              },
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ],
            "comment": {
              "body": "Gets the requested \u003ca href\u003d\"org/bukkit/configuration/serialization/ConfigurationSerializable.html\" title\u003d\"interface in org.bukkit.configuration.serialization\"\u003e\u003ccode\u003eConfigurationSerializable\u003c/code\u003e\u003c/a\u003e object at the given\n path, returning a default value if not found\n\n If the Object does not exist then the specified default value will\n returned regardless of if a default has been identified in the root\n \u003ca href\u003d\"org/bukkit/configuration/Configuration.html\" title\u003d\"interface in org.bukkit.configuration\"\u003e\u003ccode\u003eConfiguration\u003c/code\u003e\u003c/a\u003e.",
              "tags": "Returns Requested \u003ca href\u003d\"org/bukkit/configuration/serialization/ConfigurationSerializable.html\" title\u003d\"interface in org.bukkit.configuration.serialization\"\u003e\u003ccode\u003eConfigurationSerializable\u003c/code\u003e\u003c/a\u003e object.",
              "plain": "Gets the requested {@link ConfigurationSerializable} object at the given\n path, returning a default value if not found\n\n If the Object does not exist then the specified default value will\n returned regardless of if a default has been identified in the root\n {@link Configuration}.\n@param \u003cT\u003e the type of {@link ConfigurationSerializable}\n@param path the path to the object.\n@param clazz the type of {@link ConfigurationSerializable}\n@param def the default object to return if the object is not present at\n the path\n@return Requested {@link ConfigurationSerializable} object"
            }
          },
          {
            "kind": "METHOD",
            "name": "addDefault(java.lang.String,java.lang.Object)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "path"
              },
              {
                "kind": "PARAMETER",
                "name": "value"
              }
            ],
            "comment": {
              "body": "Sets the default value in the root at the given path as provided.\n \u003cp\u003e\n If no source \u003ca href\u003d\"org/bukkit/configuration/Configuration.html\" title\u003d\"interface in org.bukkit.configuration\"\u003e\u003ccode\u003eConfiguration\u003c/code\u003e\u003c/a\u003e was provided as a default\n collection, then a new \u003ca href\u003d\"org/bukkit/configuration/MemoryConfiguration.html\" title\u003d\"class in org.bukkit.configuration\"\u003e\u003ccode\u003eMemoryConfiguration\u003c/code\u003e\u003c/a\u003e will be created to\n hold the new default value.\n \u003cp\u003e\n If value is null, the value will be removed from the default\n Configuration source.\n \u003cp\u003e\n If the value as returned by \u003ca href\u003d\"org/bukkit/configuration/ConfigurationSection.html#getDefaultSection()\"\u003e\u003ccode\u003eConfigurationSection.getDefaultSection()\u003c/code\u003e\u003c/a\u003e is null, then\n this will create a new section at the path, replacing anything that may\n have existed there previously.",
              "plain": "Sets the default value in the root at the given path as provided.\n \u003cp\u003e\n If no source {@link Configuration} was provided as a default\n collection, then a new {@link MemoryConfiguration} will be created to\n hold the new default value.\n \u003cp\u003e\n If value is null, the value will be removed from the default\n Configuration source.\n \u003cp\u003e\n If the value as returned by {@link #getDefaultSection()} is null, then\n this will create a new section at the path, replacing anything that may\n have existed there previously.\n@param path Path of the value to set.\n@param value Value to set the default to.\n@throws IllegalArgumentException Thrown if path is null."
            }
          },
          {
            "kind": "METHOD",
            "name": "contains(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ],
            "comment": {
              "body": "Checks if this \u003ca href\u003d\"org/bukkit/configuration/ConfigurationSection.html\" title\u003d\"interface in org.bukkit.configuration\"\u003e\u003ccode\u003eConfigurationSection\u003c/code\u003e\u003c/a\u003e contains the given path.\n \u003cp\u003e\n If the value for the requested path does not exist but a default value\n has been specified, this will return true.",
              "tags": "Returns True if this section contains the requested path, either via\n     default or being set..",
              "plain": "Checks if this {@link ConfigurationSection} contains the given path.\n \u003cp\u003e\n If the value for the requested path does not exist but a default value\n has been specified, this will return true.\n@param path Path to check for existence.\n@return True if this section contains the requested path, either via\n     default or being set.\n@throws IllegalArgumentException Thrown when path is null."
            }
          },
          {
            "kind": "METHOD",
            "name": "contains(java.lang.String,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "ignoreDefault"
              },
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ],
            "comment": {
              "body": "Checks if this \u003ca href\u003d\"org/bukkit/configuration/ConfigurationSection.html\" title\u003d\"interface in org.bukkit.configuration\"\u003e\u003ccode\u003eConfigurationSection\u003c/code\u003e\u003c/a\u003e contains the given path.\n \u003cp\u003e\n If the value for the requested path does not exist, the boolean parameter\n of true has been specified, a default value for the path exists, this\n will return true.\n \u003cp\u003e\n If a boolean parameter of false has been specified, true will only be\n returned if there is a set value for the specified path.",
              "tags": "Returns True if this section contains the requested path, or if a default\n value exist and the boolean parameter for this method is true..",
              "plain": "Checks if this {@link ConfigurationSection} contains the given path.\n \u003cp\u003e\n If the value for the requested path does not exist, the boolean parameter\n of true has been specified, a default value for the path exists, this\n will return true.\n \u003cp\u003e\n If a boolean parameter of false has been specified, true will only be\n returned if there is a set value for the specified path.\n@param path Path to check for existence.\n@param ignoreDefault Whether or not to ignore if a default value for the\n specified path exists.\n@return True if this section contains the requested path, or if a default\n value exist and the boolean parameter for this method is true.\n@throws IllegalArgumentException Thrown when path is null."
            }
          },
          {
            "kind": "METHOD",
            "name": "createSection(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ],
            "comment": {
              "body": "Creates an empty \u003ca href\u003d\"org/bukkit/configuration/ConfigurationSection.html\" title\u003d\"interface in org.bukkit.configuration\"\u003e\u003ccode\u003eConfigurationSection\u003c/code\u003e\u003c/a\u003e at the specified path.\n \u003cp\u003e\n Any value that was previously set at this path will be overwritten. If\n the previous value was itself a \u003ca href\u003d\"org/bukkit/configuration/ConfigurationSection.html\" title\u003d\"interface in org.bukkit.configuration\"\u003e\u003ccode\u003eConfigurationSection\u003c/code\u003e\u003c/a\u003e, it will\n be orphaned.",
              "tags": "Returns Newly created section.",
              "plain": "Creates an empty {@link ConfigurationSection} at the specified path.\n \u003cp\u003e\n Any value that was previously set at this path will be overwritten. If\n the previous value was itself a {@link ConfigurationSection}, it will\n be orphaned.\n@param path Path to create the section at.\n@return Newly created section"
            }
          },
          {
            "kind": "METHOD",
            "name": "createSection(java.lang.String,java.util.Map\u003c?,?\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "map"
              },
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ],
            "comment": {
              "body": "Creates a \u003ca href\u003d\"org/bukkit/configuration/ConfigurationSection.html\" title\u003d\"interface in org.bukkit.configuration\"\u003e\u003ccode\u003eConfigurationSection\u003c/code\u003e\u003c/a\u003e at the specified path, with\n specified values.\n \u003cp\u003e\n Any value that was previously set at this path will be overwritten. If\n the previous value was itself a \u003ca href\u003d\"org/bukkit/configuration/ConfigurationSection.html\" title\u003d\"interface in org.bukkit.configuration\"\u003e\u003ccode\u003eConfigurationSection\u003c/code\u003e\u003c/a\u003e, it will\n be orphaned.",
              "tags": "Returns Newly created section.",
              "plain": "Creates a {@link ConfigurationSection} at the specified path, with\n specified values.\n \u003cp\u003e\n Any value that was previously set at this path will be overwritten. If\n the previous value was itself a {@link ConfigurationSection}, it will\n be orphaned.\n@param path Path to create the section at.\n@param map The values to used.\n@return Newly created section"
            }
          },
          {
            "kind": "METHOD",
            "name": "get(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ],
            "comment": {
              "body": "Gets the requested Object by path.\n \u003cp\u003e\n If the Object does not exist but a default value has been specified,\n this will return the default value. If the Object does not exist and no\n default value was specified, this will return null.",
              "tags": "Returns Requested Object..",
              "plain": "Gets the requested Object by path.\n \u003cp\u003e\n If the Object does not exist but a default value has been specified,\n this will return the default value. If the Object does not exist and no\n default value was specified, this will return null.\n@param path Path of the Object to get.\n@return Requested Object."
            }
          },
          {
            "kind": "METHOD",
            "name": "get(java.lang.String,java.lang.Object)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "def"
              },
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ],
            "comment": {
              "body": "Gets the requested Object by path, returning a default value if not\n found.\n \u003cp\u003e\n If the Object does not exist then the specified default value will\n returned regardless of if a default has been identified in the root\n \u003ca href\u003d\"org/bukkit/configuration/Configuration.html\" title\u003d\"interface in org.bukkit.configuration\"\u003e\u003ccode\u003eConfiguration\u003c/code\u003e\u003c/a\u003e.",
              "tags": "Returns Requested Object..",
              "plain": "Gets the requested Object by path, returning a default value if not\n found.\n \u003cp\u003e\n If the Object does not exist then the specified default value will\n returned regardless of if a default has been identified in the root\n {@link Configuration}.\n@param path Path of the Object to get.\n@param def The default value to return if the path is not found.\n@return Requested Object."
            }
          },
          {
            "kind": "METHOD",
            "name": "getBoolean(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ],
            "comment": {
              "body": "Gets the requested boolean by path.\n \u003cp\u003e\n If the boolean does not exist but a default value has been specified,\n this will return the default value. If the boolean does not exist and\n no default value was specified, this will return false.",
              "tags": "Returns Requested boolean..",
              "plain": "Gets the requested boolean by path.\n \u003cp\u003e\n If the boolean does not exist but a default value has been specified,\n this will return the default value. If the boolean does not exist and\n no default value was specified, this will return false.\n@param path Path of the boolean to get.\n@return Requested boolean."
            }
          },
          {
            "kind": "METHOD",
            "name": "getBoolean(java.lang.String,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "def"
              },
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ],
            "comment": {
              "body": "Gets the requested boolean by path, returning a default value if not\n found.\n \u003cp\u003e\n If the boolean does not exist then the specified default value will\n returned regardless of if a default has been identified in the root\n \u003ca href\u003d\"org/bukkit/configuration/Configuration.html\" title\u003d\"interface in org.bukkit.configuration\"\u003e\u003ccode\u003eConfiguration\u003c/code\u003e\u003c/a\u003e.",
              "tags": "Returns Requested boolean..",
              "plain": "Gets the requested boolean by path, returning a default value if not\n found.\n \u003cp\u003e\n If the boolean does not exist then the specified default value will\n returned regardless of if a default has been identified in the root\n {@link Configuration}.\n@param path Path of the boolean to get.\n@param def The default value to return if the path is not found or is\n     not a boolean.\n@return Requested boolean."
            }
          },
          {
            "kind": "METHOD",
            "name": "getBooleanList(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ],
            "comment": {
              "body": "Gets the requested List of Boolean by path.\n \u003cp\u003e\n If the List does not exist but a default value has been specified, this\n will return the default value. If the List does not exist and no\n default value was specified, this will return an empty List.\n \u003cp\u003e\n This method will attempt to cast any values into a Boolean if possible,\n but may miss any values out if they are not compatible.",
              "tags": "Returns Requested List of Boolean..",
              "plain": "Gets the requested List of Boolean by path.\n \u003cp\u003e\n If the List does not exist but a default value has been specified, this\n will return the default value. If the List does not exist and no\n default value was specified, this will return an empty List.\n \u003cp\u003e\n This method will attempt to cast any values into a Boolean if possible,\n but may miss any values out if they are not compatible.\n@param path Path of the List to get.\n@return Requested List of Boolean."
            }
          },
          {
            "kind": "METHOD",
            "name": "getByteList(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ],
            "comment": {
              "body": "Gets the requested List of Byte by path.\n \u003cp\u003e\n If the List does not exist but a default value has been specified, this\n will return the default value. If the List does not exist and no\n default value was specified, this will return an empty List.\n \u003cp\u003e\n This method will attempt to cast any values into a Byte if possible,\n but may miss any values out if they are not compatible.",
              "tags": "Returns Requested List of Byte..",
              "plain": "Gets the requested List of Byte by path.\n \u003cp\u003e\n If the List does not exist but a default value has been specified, this\n will return the default value. If the List does not exist and no\n default value was specified, this will return an empty List.\n \u003cp\u003e\n This method will attempt to cast any values into a Byte if possible,\n but may miss any values out if they are not compatible.\n@param path Path of the List to get.\n@return Requested List of Byte."
            }
          },
          {
            "kind": "METHOD",
            "name": "getCharacterList(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ],
            "comment": {
              "body": "Gets the requested List of Character by path.\n \u003cp\u003e\n If the List does not exist but a default value has been specified, this\n will return the default value. If the List does not exist and no\n default value was specified, this will return an empty List.\n \u003cp\u003e\n This method will attempt to cast any values into a Character if\n possible, but may miss any values out if they are not compatible.",
              "tags": "Returns Requested List of Character..",
              "plain": "Gets the requested List of Character by path.\n \u003cp\u003e\n If the List does not exist but a default value has been specified, this\n will return the default value. If the List does not exist and no\n default value was specified, this will return an empty List.\n \u003cp\u003e\n This method will attempt to cast any values into a Character if\n possible, but may miss any values out if they are not compatible.\n@param path Path of the List to get.\n@return Requested List of Character."
            }
          },
          {
            "kind": "METHOD",
            "name": "getColor(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ],
            "comment": {
              "body": "Gets the requested Color by path.\n \u003cp\u003e\n If the Color does not exist but a default value has been specified,\n this will return the default value. If the Color does not exist and no\n default value was specified, this will return null.",
              "tags": "Returns Requested Color..",
              "plain": "Gets the requested Color by path.\n \u003cp\u003e\n If the Color does not exist but a default value has been specified,\n this will return the default value. If the Color does not exist and no\n default value was specified, this will return null.\n@param path Path of the Color to get.\n@return Requested Color."
            }
          },
          {
            "kind": "METHOD",
            "name": "getColor(java.lang.String,org.bukkit.Color)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "def"
              },
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ],
            "comment": {
              "body": "Gets the requested \u003ca href\u003d\"org/bukkit/Color.html\" title\u003d\"class in org.bukkit\"\u003e\u003ccode\u003eColor\u003c/code\u003e\u003c/a\u003e by path, returning a default value if\n not found.\n \u003cp\u003e\n If the Color does not exist then the specified default value will\n returned regardless of if a default has been identified in the root\n \u003ca href\u003d\"org/bukkit/configuration/Configuration.html\" title\u003d\"interface in org.bukkit.configuration\"\u003e\u003ccode\u003eConfiguration\u003c/code\u003e\u003c/a\u003e.",
              "tags": "Returns Requested Color..",
              "plain": "Gets the requested {@link Color} by path, returning a default value if\n not found.\n \u003cp\u003e\n If the Color does not exist then the specified default value will\n returned regardless of if a default has been identified in the root\n {@link Configuration}.\n@param path Path of the Color to get.\n@param def The default value to return if the path is not found or is\n     not a Color.\n@return Requested Color."
            }
          },
          {
            "kind": "METHOD",
            "name": "getConfigurationSection(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ],
            "comment": {
              "body": "Gets the requested ConfigurationSection by path.\n \u003cp\u003e\n If the ConfigurationSection does not exist but a default value has been\n specified, this will return the default value. If the\n ConfigurationSection does not exist and no default value was specified,\n this will return null.",
              "tags": "Returns Requested ConfigurationSection..",
              "plain": "Gets the requested ConfigurationSection by path.\n \u003cp\u003e\n If the ConfigurationSection does not exist but a default value has been\n specified, this will return the default value. If the\n ConfigurationSection does not exist and no default value was specified,\n this will return null.\n@param path Path of the ConfigurationSection to get.\n@return Requested ConfigurationSection."
            }
          },
          {
            "kind": "METHOD",
            "name": "getCurrentPath()",
            "comment": {
              "body": "Gets the path of this \u003ca href\u003d\"org/bukkit/configuration/ConfigurationSection.html\" title\u003d\"interface in org.bukkit.configuration\"\u003e\u003ccode\u003eConfigurationSection\u003c/code\u003e\u003c/a\u003e from its root \u003ca href\u003d\"org/bukkit/configuration/Configuration.html\" title\u003d\"interface in org.bukkit.configuration\"\u003e\u003ccode\u003eConfiguration\u003c/code\u003e\u003c/a\u003e\n \u003cp\u003e\n For any \u003ca href\u003d\"org/bukkit/configuration/Configuration.html\" title\u003d\"interface in org.bukkit.configuration\"\u003e\u003ccode\u003eConfiguration\u003c/code\u003e\u003c/a\u003e themselves, this will return an empty\n string.\n \u003cp\u003e\n If the section is no longer contained within its root for any reason,\n such as being replaced with a different value, this may return null.\n \u003cp\u003e\n To retrieve the single name of this section, that is, the final part of\n the path returned by this method, you may use \u003ca href\u003d\"org/bukkit/configuration/ConfigurationSection.html#getName()\"\u003e\u003ccode\u003eConfigurationSection.getName()\u003c/code\u003e\u003c/a\u003e.",
              "tags": "Returns Path of this section relative to its root.",
              "plain": "Gets the path of this {@link ConfigurationSection} from its root {@link Configuration}\n \u003cp\u003e\n For any {@link Configuration} themselves, this will return an empty\n string.\n \u003cp\u003e\n If the section is no longer contained within its root for any reason,\n such as being replaced with a different value, this may return null.\n \u003cp\u003e\n To retrieve the single name of this section, that is, the final part of\n the path returned by this method, you may use {@link #getName()}.\n@return Path of this section relative to its root"
            }
          },
          {
            "kind": "METHOD",
            "name": "getDefaultSection()",
            "comment": {
              "body": "Gets the equivalent \u003ca href\u003d\"org/bukkit/configuration/ConfigurationSection.html\" title\u003d\"interface in org.bukkit.configuration\"\u003e\u003ccode\u003eConfigurationSection\u003c/code\u003e\u003c/a\u003e from the default\n \u003ca href\u003d\"org/bukkit/configuration/Configuration.html\" title\u003d\"interface in org.bukkit.configuration\"\u003e\u003ccode\u003eConfiguration\u003c/code\u003e\u003c/a\u003e defined in \u003ca href\u003d\"org/bukkit/configuration/ConfigurationSection.html#getRoot()\"\u003e\u003ccode\u003eConfigurationSection.getRoot()\u003c/code\u003e\u003c/a\u003e.\n \u003cp\u003e\n If the root contains no defaults, or the defaults doesn\u0027t contain a\n value for this path, or the value at this path is not a \u003ca href\u003d\"org/bukkit/configuration/ConfigurationSection.html\" title\u003d\"interface in org.bukkit.configuration\"\u003e\u003ccode\u003eConfigurationSection\u003c/code\u003e\u003c/a\u003e then this will return null.",
              "tags": "Returns Equivalent section in root configuration.",
              "plain": "Gets the equivalent {@link ConfigurationSection} from the default\n {@link Configuration} defined in {@link #getRoot()}.\n \u003cp\u003e\n If the root contains no defaults, or the defaults doesn\u0027t contain a\n value for this path, or the value at this path is not a {@link ConfigurationSection} then this will return null.\n@return Equivalent section in root configuration"
            }
          },
          {
            "kind": "METHOD",
            "name": "getDouble(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ],
            "comment": {
              "body": "Gets the requested double by path.\n \u003cp\u003e\n If the double does not exist but a default value has been specified,\n this will return the default value. If the double does not exist and no\n default value was specified, this will return 0.",
              "tags": "Returns Requested double..",
              "plain": "Gets the requested double by path.\n \u003cp\u003e\n If the double does not exist but a default value has been specified,\n this will return the default value. If the double does not exist and no\n default value was specified, this will return 0.\n@param path Path of the double to get.\n@return Requested double."
            }
          },
          {
            "kind": "METHOD",
            "name": "getDouble(java.lang.String,double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "def"
              },
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ],
            "comment": {
              "body": "Gets the requested double by path, returning a default value if not\n found.\n \u003cp\u003e\n If the double does not exist then the specified default value will\n returned regardless of if a default has been identified in the root\n \u003ca href\u003d\"org/bukkit/configuration/Configuration.html\" title\u003d\"interface in org.bukkit.configuration\"\u003e\u003ccode\u003eConfiguration\u003c/code\u003e\u003c/a\u003e.",
              "tags": "Returns Requested double..",
              "plain": "Gets the requested double by path, returning a default value if not\n found.\n \u003cp\u003e\n If the double does not exist then the specified default value will\n returned regardless of if a default has been identified in the root\n {@link Configuration}.\n@param path Path of the double to get.\n@param def The default value to return if the path is not found or is\n     not a double.\n@return Requested double."
            }
          },
          {
            "kind": "METHOD",
            "name": "getDoubleList(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ],
            "comment": {
              "body": "Gets the requested List of Double by path.\n \u003cp\u003e\n If the List does not exist but a default value has been specified, this\n will return the default value. If the List does not exist and no\n default value was specified, this will return an empty List.\n \u003cp\u003e\n This method will attempt to cast any values into a Double if possible,\n but may miss any values out if they are not compatible.",
              "tags": "Returns Requested List of Double..",
              "plain": "Gets the requested List of Double by path.\n \u003cp\u003e\n If the List does not exist but a default value has been specified, this\n will return the default value. If the List does not exist and no\n default value was specified, this will return an empty List.\n \u003cp\u003e\n This method will attempt to cast any values into a Double if possible,\n but may miss any values out if they are not compatible.\n@param path Path of the List to get.\n@return Requested List of Double."
            }
          },
          {
            "kind": "METHOD",
            "name": "getFloatList(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ],
            "comment": {
              "body": "Gets the requested List of Float by path.\n \u003cp\u003e\n If the List does not exist but a default value has been specified, this\n will return the default value. If the List does not exist and no\n default value was specified, this will return an empty List.\n \u003cp\u003e\n This method will attempt to cast any values into a Float if possible,\n but may miss any values out if they are not compatible.",
              "tags": "Returns Requested List of Float..",
              "plain": "Gets the requested List of Float by path.\n \u003cp\u003e\n If the List does not exist but a default value has been specified, this\n will return the default value. If the List does not exist and no\n default value was specified, this will return an empty List.\n \u003cp\u003e\n This method will attempt to cast any values into a Float if possible,\n but may miss any values out if they are not compatible.\n@param path Path of the List to get.\n@return Requested List of Float."
            }
          },
          {
            "kind": "METHOD",
            "name": "getInt(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ],
            "comment": {
              "body": "Gets the requested int by path.\n \u003cp\u003e\n If the int does not exist but a default value has been specified, this\n will return the default value. If the int does not exist and no default\n value was specified, this will return 0.",
              "tags": "Returns Requested int..",
              "plain": "Gets the requested int by path.\n \u003cp\u003e\n If the int does not exist but a default value has been specified, this\n will return the default value. If the int does not exist and no default\n value was specified, this will return 0.\n@param path Path of the int to get.\n@return Requested int."
            }
          },
          {
            "kind": "METHOD",
            "name": "getInt(java.lang.String,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "def"
              },
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ],
            "comment": {
              "body": "Gets the requested int by path, returning a default value if not found.\n \u003cp\u003e\n If the int does not exist then the specified default value will\n returned regardless of if a default has been identified in the root\n \u003ca href\u003d\"org/bukkit/configuration/Configuration.html\" title\u003d\"interface in org.bukkit.configuration\"\u003e\u003ccode\u003eConfiguration\u003c/code\u003e\u003c/a\u003e.",
              "tags": "Returns Requested int..",
              "plain": "Gets the requested int by path, returning a default value if not found.\n \u003cp\u003e\n If the int does not exist then the specified default value will\n returned regardless of if a default has been identified in the root\n {@link Configuration}.\n@param path Path of the int to get.\n@param def The default value to return if the path is not found or is\n     not an int.\n@return Requested int."
            }
          },
          {
            "kind": "METHOD",
            "name": "getIntegerList(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ],
            "comment": {
              "body": "Gets the requested List of Integer by path.\n \u003cp\u003e\n If the List does not exist but a default value has been specified, this\n will return the default value. If the List does not exist and no\n default value was specified, this will return an empty List.\n \u003cp\u003e\n This method will attempt to cast any values into a Integer if possible,\n but may miss any values out if they are not compatible.",
              "tags": "Returns Requested List of Integer..",
              "plain": "Gets the requested List of Integer by path.\n \u003cp\u003e\n If the List does not exist but a default value has been specified, this\n will return the default value. If the List does not exist and no\n default value was specified, this will return an empty List.\n \u003cp\u003e\n This method will attempt to cast any values into a Integer if possible,\n but may miss any values out if they are not compatible.\n@param path Path of the List to get.\n@return Requested List of Integer."
            }
          },
          {
            "kind": "METHOD",
            "name": "getItemStack(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ],
            "comment": {
              "body": "Gets the requested ItemStack by path.\n \u003cp\u003e\n If the ItemStack does not exist but a default value has been specified,\n this will return the default value. If the ItemStack does not exist and\n no default value was specified, this will return null.",
              "tags": "Returns Requested ItemStack..",
              "plain": "Gets the requested ItemStack by path.\n \u003cp\u003e\n If the ItemStack does not exist but a default value has been specified,\n this will return the default value. If the ItemStack does not exist and\n no default value was specified, this will return null.\n@param path Path of the ItemStack to get.\n@return Requested ItemStack."
            }
          },
          {
            "kind": "METHOD",
            "name": "getItemStack(java.lang.String,org.bukkit.inventory.ItemStack)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "def"
              },
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ],
            "comment": {
              "body": "Gets the requested \u003ca href\u003d\"org/bukkit/inventory/ItemStack.html\" title\u003d\"class in org.bukkit.inventory\"\u003e\u003ccode\u003eItemStack\u003c/code\u003e\u003c/a\u003e by path, returning a default value\n if not found.\n \u003cp\u003e\n If the ItemStack does not exist then the specified default value will\n returned regardless of if a default has been identified in the root\n \u003ca href\u003d\"org/bukkit/configuration/Configuration.html\" title\u003d\"interface in org.bukkit.configuration\"\u003e\u003ccode\u003eConfiguration\u003c/code\u003e\u003c/a\u003e.",
              "tags": "Returns Requested ItemStack..",
              "plain": "Gets the requested {@link ItemStack} by path, returning a default value\n if not found.\n \u003cp\u003e\n If the ItemStack does not exist then the specified default value will\n returned regardless of if a default has been identified in the root\n {@link Configuration}.\n@param path Path of the ItemStack to get.\n@param def The default value to return if the path is not found or is\n     not an ItemStack.\n@return Requested ItemStack."
            }
          },
          {
            "kind": "METHOD",
            "name": "getKeys(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "deep"
              }
            ],
            "comment": {
              "body": "Gets a set containing all keys in this section.\n \u003cp\u003e\n If deep is set to true, then this will contain all the keys within any\n child \u003ca href\u003d\"org/bukkit/configuration/ConfigurationSection.html\" title\u003d\"interface in org.bukkit.configuration\"\u003e\u003ccode\u003eConfigurationSection\u003c/code\u003e\u003c/a\u003es (and their children, etc). These\n will be in a valid path notation for you to use.\n \u003cp\u003e\n If deep is set to false, then this will contain only the keys of any\n direct children, and not their own children.",
              "tags": "Returns Set of keys contained within this ConfigurationSection..",
              "plain": "Gets a set containing all keys in this section.\n \u003cp\u003e\n If deep is set to true, then this will contain all the keys within any\n child {@link ConfigurationSection}s (and their children, etc). These\n will be in a valid path notation for you to use.\n \u003cp\u003e\n If deep is set to false, then this will contain only the keys of any\n direct children, and not their own children.\n@param deep Whether or not to get a deep list, as opposed to a shallow\n     list.\n@return Set of keys contained within this ConfigurationSection."
            }
          },
          {
            "kind": "METHOD",
            "name": "getList(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ],
            "comment": {
              "body": "Gets the requested List by path.\n \u003cp\u003e\n If the List does not exist but a default value has been specified, this\n will return the default value. If the List does not exist and no\n default value was specified, this will return null.",
              "tags": "Returns Requested List..",
              "plain": "Gets the requested List by path.\n \u003cp\u003e\n If the List does not exist but a default value has been specified, this\n will return the default value. If the List does not exist and no\n default value was specified, this will return null.\n@param path Path of the List to get.\n@return Requested List."
            }
          },
          {
            "kind": "METHOD",
            "name": "getList(java.lang.String,java.util.List\u003c?\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "def"
              },
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ],
            "comment": {
              "body": "Gets the requested List by path, returning a default value if not\n found.\n \u003cp\u003e\n If the List does not exist then the specified default value will\n returned regardless of if a default has been identified in the root\n \u003ca href\u003d\"org/bukkit/configuration/Configuration.html\" title\u003d\"interface in org.bukkit.configuration\"\u003e\u003ccode\u003eConfiguration\u003c/code\u003e\u003c/a\u003e.",
              "tags": "Returns Requested List..",
              "plain": "Gets the requested List by path, returning a default value if not\n found.\n \u003cp\u003e\n If the List does not exist then the specified default value will\n returned regardless of if a default has been identified in the root\n {@link Configuration}.\n@param path Path of the List to get.\n@param def The default value to return if the path is not found or is\n     not a List.\n@return Requested List."
            }
          },
          {
            "kind": "METHOD",
            "name": "getLong(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ],
            "comment": {
              "body": "Gets the requested long by path.\n \u003cp\u003e\n If the long does not exist but a default value has been specified, this\n will return the default value. If the long does not exist and no\n default value was specified, this will return 0.",
              "tags": "Returns Requested long..",
              "plain": "Gets the requested long by path.\n \u003cp\u003e\n If the long does not exist but a default value has been specified, this\n will return the default value. If the long does not exist and no\n default value was specified, this will return 0.\n@param path Path of the long to get.\n@return Requested long."
            }
          },
          {
            "kind": "METHOD",
            "name": "getLong(java.lang.String,long)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "def"
              },
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ],
            "comment": {
              "body": "Gets the requested long by path, returning a default value if not\n found.\n \u003cp\u003e\n If the long does not exist then the specified default value will\n returned regardless of if a default has been identified in the root\n \u003ca href\u003d\"org/bukkit/configuration/Configuration.html\" title\u003d\"interface in org.bukkit.configuration\"\u003e\u003ccode\u003eConfiguration\u003c/code\u003e\u003c/a\u003e.",
              "tags": "Returns Requested long..",
              "plain": "Gets the requested long by path, returning a default value if not\n found.\n \u003cp\u003e\n If the long does not exist then the specified default value will\n returned regardless of if a default has been identified in the root\n {@link Configuration}.\n@param path Path of the long to get.\n@param def The default value to return if the path is not found or is\n     not a long.\n@return Requested long."
            }
          },
          {
            "kind": "METHOD",
            "name": "getLongList(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ],
            "comment": {
              "body": "Gets the requested List of Long by path.\n \u003cp\u003e\n If the List does not exist but a default value has been specified, this\n will return the default value. If the List does not exist and no\n default value was specified, this will return an empty List.\n \u003cp\u003e\n This method will attempt to cast any values into a Long if possible,\n but may miss any values out if they are not compatible.",
              "tags": "Returns Requested List of Long..",
              "plain": "Gets the requested List of Long by path.\n \u003cp\u003e\n If the List does not exist but a default value has been specified, this\n will return the default value. If the List does not exist and no\n default value was specified, this will return an empty List.\n \u003cp\u003e\n This method will attempt to cast any values into a Long if possible,\n but may miss any values out if they are not compatible.\n@param path Path of the List to get.\n@return Requested List of Long."
            }
          },
          {
            "kind": "METHOD",
            "name": "getMapList(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ],
            "comment": {
              "body": "Gets the requested List of Maps by path.\n \u003cp\u003e\n If the List does not exist but a default value has been specified, this\n will return the default value. If the List does not exist and no\n default value was specified, this will return an empty List.\n \u003cp\u003e\n This method will attempt to cast any values into a Map if possible, but\n may miss any values out if they are not compatible.",
              "tags": "Returns Requested List of Maps..",
              "plain": "Gets the requested List of Maps by path.\n \u003cp\u003e\n If the List does not exist but a default value has been specified, this\n will return the default value. If the List does not exist and no\n default value was specified, this will return an empty List.\n \u003cp\u003e\n This method will attempt to cast any values into a Map if possible, but\n may miss any values out if they are not compatible.\n@param path Path of the List to get.\n@return Requested List of Maps."
            }
          },
          {
            "kind": "METHOD",
            "name": "getName()",
            "comment": {
              "body": "Gets the name of this individual \u003ca href\u003d\"org/bukkit/configuration/ConfigurationSection.html\" title\u003d\"interface in org.bukkit.configuration\"\u003e\u003ccode\u003eConfigurationSection\u003c/code\u003e\u003c/a\u003e, in the\n path.\n \u003cp\u003e\n This will always be the final part of \u003ca href\u003d\"org/bukkit/configuration/ConfigurationSection.html#getCurrentPath()\"\u003e\u003ccode\u003eConfigurationSection.getCurrentPath()\u003c/code\u003e\u003c/a\u003e, unless\n the section is orphaned.",
              "tags": "Returns Name of this section.",
              "plain": "Gets the name of this individual {@link ConfigurationSection}, in the\n path.\n \u003cp\u003e\n This will always be the final part of {@link #getCurrentPath()}, unless\n the section is orphaned.\n@return Name of this section"
            }
          },
          {
            "kind": "METHOD",
            "name": "getOfflinePlayer(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ],
            "comment": {
              "body": "Gets the requested OfflinePlayer by path.\n \u003cp\u003e\n If the OfflinePlayer does not exist but a default value has been\n specified, this will return the default value. If the OfflinePlayer\n does not exist and no default value was specified, this will return\n null.",
              "tags": "Returns Requested OfflinePlayer..",
              "plain": "Gets the requested OfflinePlayer by path.\n \u003cp\u003e\n If the OfflinePlayer does not exist but a default value has been\n specified, this will return the default value. If the OfflinePlayer\n does not exist and no default value was specified, this will return\n null.\n@param path Path of the OfflinePlayer to get.\n@return Requested OfflinePlayer."
            }
          },
          {
            "kind": "METHOD",
            "name": "getOfflinePlayer(java.lang.String,org.bukkit.OfflinePlayer)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "def"
              },
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ],
            "comment": {
              "body": "Gets the requested \u003ca href\u003d\"org/bukkit/OfflinePlayer.html\" title\u003d\"interface in org.bukkit\"\u003e\u003ccode\u003eOfflinePlayer\u003c/code\u003e\u003c/a\u003e by path, returning a default\n value if not found.\n \u003cp\u003e\n If the OfflinePlayer does not exist then the specified default value\n will returned regardless of if a default has been identified in the\n root \u003ca href\u003d\"org/bukkit/configuration/Configuration.html\" title\u003d\"interface in org.bukkit.configuration\"\u003e\u003ccode\u003eConfiguration\u003c/code\u003e\u003c/a\u003e.",
              "tags": "Returns Requested OfflinePlayer..",
              "plain": "Gets the requested {@link OfflinePlayer} by path, returning a default\n value if not found.\n \u003cp\u003e\n If the OfflinePlayer does not exist then the specified default value\n will returned regardless of if a default has been identified in the\n root {@link Configuration}.\n@param path Path of the OfflinePlayer to get.\n@param def The default value to return if the path is not found or is\n     not an OfflinePlayer.\n@return Requested OfflinePlayer."
            }
          },
          {
            "kind": "METHOD",
            "name": "getParent()",
            "comment": {
              "body": "Gets the parent \u003ca href\u003d\"org/bukkit/configuration/ConfigurationSection.html\" title\u003d\"interface in org.bukkit.configuration\"\u003e\u003ccode\u003eConfigurationSection\u003c/code\u003e\u003c/a\u003e that directly contains\n this \u003ca href\u003d\"org/bukkit/configuration/ConfigurationSection.html\" title\u003d\"interface in org.bukkit.configuration\"\u003e\u003ccode\u003eConfigurationSection\u003c/code\u003e\u003c/a\u003e.\n \u003cp\u003e\n For any \u003ca href\u003d\"org/bukkit/configuration/Configuration.html\" title\u003d\"interface in org.bukkit.configuration\"\u003e\u003ccode\u003eConfiguration\u003c/code\u003e\u003c/a\u003e themselves, this will return null.\n \u003cp\u003e\n If the section is no longer contained within its parent for any reason,\n such as being replaced with a different value, this may return null.",
              "tags": "Returns Parent section containing this section..",
              "plain": "Gets the parent {@link ConfigurationSection} that directly contains\n this {@link ConfigurationSection}.\n \u003cp\u003e\n For any {@link Configuration} themselves, this will return null.\n \u003cp\u003e\n If the section is no longer contained within its parent for any reason,\n such as being replaced with a different value, this may return null.\n@return Parent section containing this section."
            }
          },
          {
            "kind": "METHOD",
            "name": "getRoot()",
            "comment": {
              "body": "Gets the root \u003ca href\u003d\"org/bukkit/configuration/Configuration.html\" title\u003d\"interface in org.bukkit.configuration\"\u003e\u003ccode\u003eConfiguration\u003c/code\u003e\u003c/a\u003e that contains this \u003ca href\u003d\"org/bukkit/configuration/ConfigurationSection.html\" title\u003d\"interface in org.bukkit.configuration\"\u003e\u003ccode\u003eConfigurationSection\u003c/code\u003e\u003c/a\u003e\n \u003cp\u003e\n For any \u003ca href\u003d\"org/bukkit/configuration/Configuration.html\" title\u003d\"interface in org.bukkit.configuration\"\u003e\u003ccode\u003eConfiguration\u003c/code\u003e\u003c/a\u003e themselves, this will return its own\n object.\n \u003cp\u003e\n If the section is no longer contained within its root for any reason,\n such as being replaced with a different value, this may return null.",
              "tags": "Returns Root configuration containing this section..",
              "plain": "Gets the root {@link Configuration} that contains this {@link ConfigurationSection}\n \u003cp\u003e\n For any {@link Configuration} themselves, this will return its own\n object.\n \u003cp\u003e\n If the section is no longer contained within its root for any reason,\n such as being replaced with a different value, this may return null.\n@return Root configuration containing this section."
            }
          },
          {
            "kind": "METHOD",
            "name": "getShortList(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ],
            "comment": {
              "body": "Gets the requested List of Short by path.\n \u003cp\u003e\n If the List does not exist but a default value has been specified, this\n will return the default value. If the List does not exist and no\n default value was specified, this will return an empty List.\n \u003cp\u003e\n This method will attempt to cast any values into a Short if possible,\n but may miss any values out if they are not compatible.",
              "tags": "Returns Requested List of Short..",
              "plain": "Gets the requested List of Short by path.\n \u003cp\u003e\n If the List does not exist but a default value has been specified, this\n will return the default value. If the List does not exist and no\n default value was specified, this will return an empty List.\n \u003cp\u003e\n This method will attempt to cast any values into a Short if possible,\n but may miss any values out if they are not compatible.\n@param path Path of the List to get.\n@return Requested List of Short."
            }
          },
          {
            "kind": "METHOD",
            "name": "getString(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ],
            "comment": {
              "body": "Gets the requested String by path.\n \u003cp\u003e\n If the String does not exist but a default value has been specified,\n this will return the default value. If the String does not exist and no\n default value was specified, this will return null.",
              "tags": "Returns Requested String..",
              "plain": "Gets the requested String by path.\n \u003cp\u003e\n If the String does not exist but a default value has been specified,\n this will return the default value. If the String does not exist and no\n default value was specified, this will return null.\n@param path Path of the String to get.\n@return Requested String."
            }
          },
          {
            "kind": "METHOD",
            "name": "getString(java.lang.String,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "def"
              },
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ],
            "comment": {
              "body": "Gets the requested String by path, returning a default value if not\n found.\n \u003cp\u003e\n If the String does not exist then the specified default value will\n returned regardless of if a default has been identified in the root\n \u003ca href\u003d\"org/bukkit/configuration/Configuration.html\" title\u003d\"interface in org.bukkit.configuration\"\u003e\u003ccode\u003eConfiguration\u003c/code\u003e\u003c/a\u003e.",
              "tags": "Returns Requested String..",
              "plain": "Gets the requested String by path, returning a default value if not\n found.\n \u003cp\u003e\n If the String does not exist then the specified default value will\n returned regardless of if a default has been identified in the root\n {@link Configuration}.\n@param path Path of the String to get.\n@param def The default value to return if the path is not found or is\n     not a String.\n@return Requested String."
            }
          },
          {
            "kind": "METHOD",
            "name": "getStringList(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ],
            "comment": {
              "body": "Gets the requested List of String by path.\n \u003cp\u003e\n If the List does not exist but a default value has been specified, this\n will return the default value. If the List does not exist and no\n default value was specified, this will return an empty List.\n \u003cp\u003e\n This method will attempt to cast any values into a String if possible,\n but may miss any values out if they are not compatible.",
              "tags": "Returns Requested List of String..",
              "plain": "Gets the requested List of String by path.\n \u003cp\u003e\n If the List does not exist but a default value has been specified, this\n will return the default value. If the List does not exist and no\n default value was specified, this will return an empty List.\n \u003cp\u003e\n This method will attempt to cast any values into a String if possible,\n but may miss any values out if they are not compatible.\n@param path Path of the List to get.\n@return Requested List of String."
            }
          },
          {
            "kind": "METHOD",
            "name": "getValues(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "deep"
              }
            ],
            "comment": {
              "body": "Gets a Map containing all keys and their values for this section.\n \u003cp\u003e\n If deep is set to true, then this will contain all the keys and values\n within any child \u003ca href\u003d\"org/bukkit/configuration/ConfigurationSection.html\" title\u003d\"interface in org.bukkit.configuration\"\u003e\u003ccode\u003eConfigurationSection\u003c/code\u003e\u003c/a\u003es (and their children,\n etc). These keys will be in a valid path notation for you to use.\n \u003cp\u003e\n If deep is set to false, then this will contain only the keys and\n values of any direct children, and not their own children.",
              "tags": "Returns Map of keys and values of this section..",
              "plain": "Gets a Map containing all keys and their values for this section.\n \u003cp\u003e\n If deep is set to true, then this will contain all the keys and values\n within any child {@link ConfigurationSection}s (and their children,\n etc). These keys will be in a valid path notation for you to use.\n \u003cp\u003e\n If deep is set to false, then this will contain only the keys and\n values of any direct children, and not their own children.\n@param deep Whether or not to get a deep list, as opposed to a shallow\n     list.\n@return Map of keys and values of this section."
            }
          },
          {
            "kind": "METHOD",
            "name": "getVector(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ],
            "comment": {
              "body": "Gets the requested Vector by path.\n \u003cp\u003e\n If the Vector does not exist but a default value has been specified,\n this will return the default value. If the Vector does not exist and no\n default value was specified, this will return null.",
              "tags": "Returns Requested Vector..",
              "plain": "Gets the requested Vector by path.\n \u003cp\u003e\n If the Vector does not exist but a default value has been specified,\n this will return the default value. If the Vector does not exist and no\n default value was specified, this will return null.\n@param path Path of the Vector to get.\n@return Requested Vector."
            }
          },
          {
            "kind": "METHOD",
            "name": "getVector(java.lang.String,org.bukkit.util.Vector)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "def"
              },
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ],
            "comment": {
              "body": "Gets the requested \u003ca href\u003d\"org/bukkit/util/Vector.html\" title\u003d\"class in org.bukkit.util\"\u003e\u003ccode\u003eVector\u003c/code\u003e\u003c/a\u003e by path, returning a default value if\n not found.\n \u003cp\u003e\n If the Vector does not exist then the specified default value will\n returned regardless of if a default has been identified in the root\n \u003ca href\u003d\"org/bukkit/configuration/Configuration.html\" title\u003d\"interface in org.bukkit.configuration\"\u003e\u003ccode\u003eConfiguration\u003c/code\u003e\u003c/a\u003e.",
              "tags": "Returns Requested Vector..",
              "plain": "Gets the requested {@link Vector} by path, returning a default value if\n not found.\n \u003cp\u003e\n If the Vector does not exist then the specified default value will\n returned regardless of if a default has been identified in the root\n {@link Configuration}.\n@param path Path of the Vector to get.\n@param def The default value to return if the path is not found or is\n     not a Vector.\n@return Requested Vector."
            }
          },
          {
            "kind": "METHOD",
            "name": "isBoolean(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ],
            "comment": {
              "body": "Checks if the specified path is a boolean.\n \u003cp\u003e\n If the path exists but is not a boolean, this will return false. If the\n path does not exist, this will return false. If the path does not exist\n but a default value has been specified, this will check if that default\n value is a boolean and return appropriately.",
              "tags": "Returns Whether or not the specified path is a boolean..",
              "plain": "Checks if the specified path is a boolean.\n \u003cp\u003e\n If the path exists but is not a boolean, this will return false. If the\n path does not exist, this will return false. If the path does not exist\n but a default value has been specified, this will check if that default\n value is a boolean and return appropriately.\n@param path Path of the boolean to check.\n@return Whether or not the specified path is a boolean."
            }
          },
          {
            "kind": "METHOD",
            "name": "isColor(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ],
            "comment": {
              "body": "Checks if the specified path is a Color.\n \u003cp\u003e\n If the path exists but is not a Color, this will return false. If the\n path does not exist, this will return false. If the path does not exist\n but a default value has been specified, this will check if that default\n value is a Color and return appropriately.",
              "tags": "Returns Whether or not the specified path is a Color..",
              "plain": "Checks if the specified path is a Color.\n \u003cp\u003e\n If the path exists but is not a Color, this will return false. If the\n path does not exist, this will return false. If the path does not exist\n but a default value has been specified, this will check if that default\n value is a Color and return appropriately.\n@param path Path of the Color to check.\n@return Whether or not the specified path is a Color."
            }
          },
          {
            "kind": "METHOD",
            "name": "isConfigurationSection(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ],
            "comment": {
              "body": "Checks if the specified path is a ConfigurationSection.\n \u003cp\u003e\n If the path exists but is not a ConfigurationSection, this will return\n false. If the path does not exist, this will return false. If the path\n does not exist but a default value has been specified, this will check\n if that default value is a ConfigurationSection and return\n appropriately.",
              "tags": "Returns Whether or not the specified path is a ConfigurationSection..",
              "plain": "Checks if the specified path is a ConfigurationSection.\n \u003cp\u003e\n If the path exists but is not a ConfigurationSection, this will return\n false. If the path does not exist, this will return false. If the path\n does not exist but a default value has been specified, this will check\n if that default value is a ConfigurationSection and return\n appropriately.\n@param path Path of the ConfigurationSection to check.\n@return Whether or not the specified path is a ConfigurationSection."
            }
          },
          {
            "kind": "METHOD",
            "name": "isDouble(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ],
            "comment": {
              "body": "Checks if the specified path is a double.\n \u003cp\u003e\n If the path exists but is not a double, this will return false. If the\n path does not exist, this will return false. If the path does not exist\n but a default value has been specified, this will check if that default\n value is a double and return appropriately.",
              "tags": "Returns Whether or not the specified path is a double..",
              "plain": "Checks if the specified path is a double.\n \u003cp\u003e\n If the path exists but is not a double, this will return false. If the\n path does not exist, this will return false. If the path does not exist\n but a default value has been specified, this will check if that default\n value is a double and return appropriately.\n@param path Path of the double to check.\n@return Whether or not the specified path is a double."
            }
          },
          {
            "kind": "METHOD",
            "name": "isInt(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ],
            "comment": {
              "body": "Checks if the specified path is an int.\n \u003cp\u003e\n If the path exists but is not a int, this will return false. If the\n path does not exist, this will return false. If the path does not exist\n but a default value has been specified, this will check if that default\n value is a int and return appropriately.",
              "tags": "Returns Whether or not the specified path is an int..",
              "plain": "Checks if the specified path is an int.\n \u003cp\u003e\n If the path exists but is not a int, this will return false. If the\n path does not exist, this will return false. If the path does not exist\n but a default value has been specified, this will check if that default\n value is a int and return appropriately.\n@param path Path of the int to check.\n@return Whether or not the specified path is an int."
            }
          },
          {
            "kind": "METHOD",
            "name": "isItemStack(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ],
            "comment": {
              "body": "Checks if the specified path is an ItemStack.\n \u003cp\u003e\n If the path exists but is not a ItemStack, this will return false. If\n the path does not exist, this will return false. If the path does not\n exist but a default value has been specified, this will check if that\n default value is a ItemStack and return appropriately.",
              "tags": "Returns Whether or not the specified path is an ItemStack..",
              "plain": "Checks if the specified path is an ItemStack.\n \u003cp\u003e\n If the path exists but is not a ItemStack, this will return false. If\n the path does not exist, this will return false. If the path does not\n exist but a default value has been specified, this will check if that\n default value is a ItemStack and return appropriately.\n@param path Path of the ItemStack to check.\n@return Whether or not the specified path is an ItemStack."
            }
          },
          {
            "kind": "METHOD",
            "name": "isList(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ],
            "comment": {
              "body": "Checks if the specified path is a List.\n \u003cp\u003e\n If the path exists but is not a List, this will return false. If the\n path does not exist, this will return false. If the path does not exist\n but a default value has been specified, this will check if that default\n value is a List and return appropriately.",
              "tags": "Returns Whether or not the specified path is a List..",
              "plain": "Checks if the specified path is a List.\n \u003cp\u003e\n If the path exists but is not a List, this will return false. If the\n path does not exist, this will return false. If the path does not exist\n but a default value has been specified, this will check if that default\n value is a List and return appropriately.\n@param path Path of the List to check.\n@return Whether or not the specified path is a List."
            }
          },
          {
            "kind": "METHOD",
            "name": "isLong(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ],
            "comment": {
              "body": "Checks if the specified path is a long.\n \u003cp\u003e\n If the path exists but is not a long, this will return false. If the\n path does not exist, this will return false. If the path does not exist\n but a default value has been specified, this will check if that default\n value is a long and return appropriately.",
              "tags": "Returns Whether or not the specified path is a long..",
              "plain": "Checks if the specified path is a long.\n \u003cp\u003e\n If the path exists but is not a long, this will return false. If the\n path does not exist, this will return false. If the path does not exist\n but a default value has been specified, this will check if that default\n value is a long and return appropriately.\n@param path Path of the long to check.\n@return Whether or not the specified path is a long."
            }
          },
          {
            "kind": "METHOD",
            "name": "isOfflinePlayer(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ],
            "comment": {
              "body": "Checks if the specified path is an OfflinePlayer.\n \u003cp\u003e\n If the path exists but is not a OfflinePlayer, this will return false.\n If the path does not exist, this will return false. If the path does\n not exist but a default value has been specified, this will check if\n that default value is a OfflinePlayer and return appropriately.",
              "tags": "Returns Whether or not the specified path is an OfflinePlayer..",
              "plain": "Checks if the specified path is an OfflinePlayer.\n \u003cp\u003e\n If the path exists but is not a OfflinePlayer, this will return false.\n If the path does not exist, this will return false. If the path does\n not exist but a default value has been specified, this will check if\n that default value is a OfflinePlayer and return appropriately.\n@param path Path of the OfflinePlayer to check.\n@return Whether or not the specified path is an OfflinePlayer."
            }
          },
          {
            "kind": "METHOD",
            "name": "isSet(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ],
            "comment": {
              "body": "Checks if this \u003ca href\u003d\"org/bukkit/configuration/ConfigurationSection.html\" title\u003d\"interface in org.bukkit.configuration\"\u003e\u003ccode\u003eConfigurationSection\u003c/code\u003e\u003c/a\u003e has a value set for the\n given path.\n \u003cp\u003e\n If the value for the requested path does not exist but a default value\n has been specified, this will still return false.",
              "tags": "Returns True if this section contains the requested path, regardless of\n     having a default..",
              "plain": "Checks if this {@link ConfigurationSection} has a value set for the\n given path.\n \u003cp\u003e\n If the value for the requested path does not exist but a default value\n has been specified, this will still return false.\n@param path Path to check for existence.\n@return True if this section contains the requested path, regardless of\n     having a default.\n@throws IllegalArgumentException Thrown when path is null."
            }
          },
          {
            "kind": "METHOD",
            "name": "isString(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ],
            "comment": {
              "body": "Checks if the specified path is a String.\n \u003cp\u003e\n If the path exists but is not a String, this will return false. If the\n path does not exist, this will return false. If the path does not exist\n but a default value has been specified, this will check if that default\n value is a String and return appropriately.",
              "tags": "Returns Whether or not the specified path is a String..",
              "plain": "Checks if the specified path is a String.\n \u003cp\u003e\n If the path exists but is not a String, this will return false. If the\n path does not exist, this will return false. If the path does not exist\n but a default value has been specified, this will check if that default\n value is a String and return appropriately.\n@param path Path of the String to check.\n@return Whether or not the specified path is a String."
            }
          },
          {
            "kind": "METHOD",
            "name": "isVector(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ],
            "comment": {
              "body": "Checks if the specified path is a Vector.\n \u003cp\u003e\n If the path exists but is not a Vector, this will return false. If the\n path does not exist, this will return false. If the path does not exist\n but a default value has been specified, this will check if that default\n value is a Vector and return appropriately.",
              "tags": "Returns Whether or not the specified path is a Vector..",
              "plain": "Checks if the specified path is a Vector.\n \u003cp\u003e\n If the path exists but is not a Vector, this will return false. If the\n path does not exist, this will return false. If the path does not exist\n but a default value has been specified, this will check if that default\n value is a Vector and return appropriately.\n@param path Path of the Vector to check.\n@return Whether or not the specified path is a Vector."
            }
          },
          {
            "kind": "METHOD",
            "name": "set(java.lang.String,java.lang.Object)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "path"
              },
              {
                "kind": "PARAMETER",
                "name": "value"
              }
            ],
            "comment": {
              "body": "Sets the specified path to the given value.\n \u003cp\u003e\n If value is null, the entry will be removed. Any existing entry will be\n replaced, regardless of what the new value is.\n \u003cp\u003e\n Some implementations may have limitations on what you may store. See\n their individual javadocs for details. No implementations should allow\n you to store \u003ca href\u003d\"org/bukkit/configuration/Configuration.html\" title\u003d\"interface in org.bukkit.configuration\"\u003e\u003ccode\u003eConfiguration\u003c/code\u003e\u003c/a\u003es or \u003ca href\u003d\"org/bukkit/configuration/ConfigurationSection.html\" title\u003d\"interface in org.bukkit.configuration\"\u003e\u003ccode\u003eConfigurationSection\u003c/code\u003e\u003c/a\u003es,\n please use \u003ca href\u003d\"org/bukkit/configuration/ConfigurationSection.html#createSection(java.lang.String)\"\u003e\u003ccode\u003eConfigurationSection.createSection(java.lang.String)\u003c/code\u003e\u003c/a\u003e for that.",
              "plain": "Sets the specified path to the given value.\n \u003cp\u003e\n If value is null, the entry will be removed. Any existing entry will be\n replaced, regardless of what the new value is.\n \u003cp\u003e\n Some implementations may have limitations on what you may store. See\n their individual javadocs for details. No implementations should allow\n you to store {@link Configuration}s or {@link ConfigurationSection}s,\n please use {@link #createSection(java.lang.String)} for that.\n@param path Path of the object to set.\n@param value New value to set the path to."
            }
          }
        ],
        "comment": {
          "body": "Represents a section of a \u003ca href\u003d\"org/bukkit/configuration/Configuration.html\" title\u003d\"interface in org.bukkit.configuration\"\u003e\u003ccode\u003eConfiguration\u003c/code\u003e\u003c/a\u003e",
          "plain": "Represents a section of a {@link Configuration}"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.configuration.InvalidConfigurationException",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "InvalidConfigurationException()",
            "comment": {
              "body": "Creates a new instance of InvalidConfigurationException without a\n message or cause.",
              "plain": "Creates a new instance of InvalidConfigurationException without a\n message or cause."
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "InvalidConfigurationException(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "msg"
              }
            ],
            "comment": {
              "body": "Constructs an instance of InvalidConfigurationException with the\n specified message.",
              "plain": "Constructs an instance of InvalidConfigurationException with the\n specified message.\n@param msg The details of the exception."
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "InvalidConfigurationException(java.lang.String,java.lang.Throwable)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cause"
              },
              {
                "kind": "PARAMETER",
                "name": "msg"
              }
            ],
            "comment": {
              "body": "Constructs an instance of InvalidConfigurationException with the\n specified message and cause.",
              "plain": "Constructs an instance of InvalidConfigurationException with the\n specified message and cause.\n@param cause The cause of the exception.\n@param msg The details of the exception."
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "InvalidConfigurationException(java.lang.Throwable)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cause"
              }
            ],
            "comment": {
              "body": "Constructs an instance of InvalidConfigurationException with the\n specified cause.",
              "plain": "Constructs an instance of InvalidConfigurationException with the\n specified cause.\n@param cause The cause of the exception."
            }
          }
        ],
        "comment": {
          "body": "Exception thrown when attempting to load an invalid \u003ca href\u003d\"org/bukkit/configuration/Configuration.html\" title\u003d\"interface in org.bukkit.configuration\"\u003e\u003ccode\u003eConfiguration\u003c/code\u003e\u003c/a\u003e",
          "plain": "Exception thrown when attempting to load an invalid {@link Configuration}"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.configuration.MemoryConfiguration",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "MemoryConfiguration()",
            "comment": {
              "body": "Creates an empty \u003ca href\u003d\"org/bukkit/configuration/MemoryConfiguration.html\" title\u003d\"class in org.bukkit.configuration\"\u003e\u003ccode\u003eMemoryConfiguration\u003c/code\u003e\u003c/a\u003e with no default values.",
              "plain": "Creates an empty {@link MemoryConfiguration} with no default values."
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "MemoryConfiguration(org.bukkit.configuration.Configuration)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "defaults"
              }
            ],
            "comment": {
              "body": "Creates an empty \u003ca href\u003d\"org/bukkit/configuration/MemoryConfiguration.html\" title\u003d\"class in org.bukkit.configuration\"\u003e\u003ccode\u003eMemoryConfiguration\u003c/code\u003e\u003c/a\u003e using the specified \u003ca href\u003d\"org/bukkit/configuration/Configuration.html\" title\u003d\"interface in org.bukkit.configuration\"\u003e\u003ccode\u003eConfiguration\u003c/code\u003e\u003c/a\u003e as a source for all default values.",
              "plain": "Creates an empty {@link MemoryConfiguration} using the specified {@link Configuration} as a source for all default values.\n@param defaults Default value provider\n@throws IllegalArgumentException Thrown if defaults is null"
            }
          },
          {
            "kind": "METHOD",
            "name": "addDefault(java.lang.String,java.lang.Object)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "path"
              },
              {
                "kind": "PARAMETER",
                "name": "value"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "addDefaults(java.util.Map\u003cjava.lang.String,java.lang.Object\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "defaults"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "addDefaults(org.bukkit.configuration.Configuration)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "defaults"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "defaults"
          },
          {
            "kind": "METHOD",
            "name": "getDefaults()"
          },
          {
            "kind": "METHOD",
            "name": "getParent()"
          },
          {
            "kind": "FIELD",
            "name": "options"
          },
          {
            "kind": "METHOD",
            "name": "options()"
          },
          {
            "kind": "METHOD",
            "name": "setDefaults(org.bukkit.configuration.Configuration)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "defaults"
              }
            ]
          }
        ],
        "comment": {
          "body": "This is a \u003ca href\u003d\"org/bukkit/configuration/Configuration.html\" title\u003d\"interface in org.bukkit.configuration\"\u003e\u003ccode\u003eConfiguration\u003c/code\u003e\u003c/a\u003e implementation that does not save or load\n from any source, and stores all values in memory only.\n This is useful for temporary Configurations for providing defaults.",
          "plain": "This is a {@link Configuration} implementation that does not save or load\n from any source, and stores all values in memory only.\n This is useful for temporary Configurations for providing defaults."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.configuration.MemoryConfigurationOptions",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "MemoryConfigurationOptions(org.bukkit.configuration.MemoryConfiguration)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "configuration"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "configuration()"
          },
          {
            "kind": "METHOD",
            "name": "copyDefaults(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "value"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "pathSeparator(char)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "value"
              }
            ]
          }
        ],
        "comment": {
          "body": "Various settings for controlling the input and output of a \u003ca href\u003d\"org/bukkit/configuration/MemoryConfiguration.html\" title\u003d\"class in org.bukkit.configuration\"\u003e\u003ccode\u003eMemoryConfiguration\u003c/code\u003e\u003c/a\u003e",
          "plain": "Various settings for controlling the input and output of a {@link MemoryConfiguration}"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.configuration.MemorySection",
        "children": [
          {
            "kind": "METHOD",
            "name": "\u003cT\u003egetSerializable(java.lang.String,java.lang.Class\u003cT\u003e)",
            "children": [
              {
                "kind": "TYPE_PARAMETER",
                "name": "T"
              },
              {
                "kind": "PARAMETER",
                "name": "clazz"
              },
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "\u003cT\u003egetSerializable(java.lang.String,java.lang.Class\u003cT\u003e,T)",
            "children": [
              {
                "kind": "TYPE_PARAMETER",
                "name": "T"
              },
              {
                "kind": "PARAMETER",
                "name": "clazz"
              },
              {
                "kind": "PARAMETER",
                "name": "def"
              },
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "MemorySection()",
            "comment": {
              "body": "Creates an empty MemorySection for use as a root \u003ca href\u003d\"org/bukkit/configuration/Configuration.html\" title\u003d\"interface in org.bukkit.configuration\"\u003e\u003ccode\u003eConfiguration\u003c/code\u003e\u003c/a\u003e\n section.\n \u003cp\u003e\n Note that calling this without being yourself a \u003ca href\u003d\"org/bukkit/configuration/Configuration.html\" title\u003d\"interface in org.bukkit.configuration\"\u003e\u003ccode\u003eConfiguration\u003c/code\u003e\u003c/a\u003e\n will throw an exception!",
              "plain": "Creates an empty MemorySection for use as a root {@link Configuration}\n section.\n \u003cp\u003e\n Note that calling this without being yourself a {@link Configuration}\n will throw an exception!\n@throws IllegalStateException Thrown if this is not a {@link Configuration} root."
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "MemorySection(org.bukkit.configuration.ConfigurationSection,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "parent"
              },
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ],
            "comment": {
              "body": "Creates an empty MemorySection with the specified parent and path.",
              "plain": "Creates an empty MemorySection with the specified parent and path.\n@param parent Parent section that contains this own section.\n@param path Path that you may access this section from via the root\n     {@link Configuration}.\n@throws IllegalArgumentException Thrown is parent or path is null, or\n     if parent contains no root Configuration."
            }
          },
          {
            "kind": "METHOD",
            "name": "addDefault(java.lang.String,java.lang.Object)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "path"
              },
              {
                "kind": "PARAMETER",
                "name": "value"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "contains(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "contains(java.lang.String,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "ignoreDefault"
              },
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "createPath(org.bukkit.configuration.ConfigurationSection,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "key"
              },
              {
                "kind": "PARAMETER",
                "name": "section"
              }
            ],
            "comment": {
              "body": "Creates a full path to the given \u003ca href\u003d\"org/bukkit/configuration/ConfigurationSection.html\" title\u003d\"interface in org.bukkit.configuration\"\u003e\u003ccode\u003eConfigurationSection\u003c/code\u003e\u003c/a\u003e from its\n root \u003ca href\u003d\"org/bukkit/configuration/Configuration.html\" title\u003d\"interface in org.bukkit.configuration\"\u003e\u003ccode\u003eConfiguration\u003c/code\u003e\u003c/a\u003e.\n \u003cp\u003e\n You may use this method for any given \u003ca href\u003d\"org/bukkit/configuration/ConfigurationSection.html\" title\u003d\"interface in org.bukkit.configuration\"\u003e\u003ccode\u003eConfigurationSection\u003c/code\u003e\u003c/a\u003e, not\n only \u003ca href\u003d\"org/bukkit/configuration/MemorySection.html\" title\u003d\"class in org.bukkit.configuration\"\u003e\u003ccode\u003eMemorySection\u003c/code\u003e\u003c/a\u003e.",
              "tags": "Returns Full path of the section from its root..",
              "plain": "Creates a full path to the given {@link ConfigurationSection} from its\n root {@link Configuration}.\n \u003cp\u003e\n You may use this method for any given {@link ConfigurationSection}, not\n only {@link MemorySection}.\n@param section Section to create a path for.\n@param key Name of the specified section.\n@return Full path of the section from its root."
            }
          },
          {
            "kind": "METHOD",
            "name": "createPath(org.bukkit.configuration.ConfigurationSection,java.lang.String,org.bukkit.configuration.ConfigurationSection)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "key"
              },
              {
                "kind": "PARAMETER",
                "name": "relativeTo"
              },
              {
                "kind": "PARAMETER",
                "name": "section"
              }
            ],
            "comment": {
              "body": "Creates a relative path to the given \u003ca href\u003d\"org/bukkit/configuration/ConfigurationSection.html\" title\u003d\"interface in org.bukkit.configuration\"\u003e\u003ccode\u003eConfigurationSection\u003c/code\u003e\u003c/a\u003e from\n the given relative section.\n \u003cp\u003e\n You may use this method for any given \u003ca href\u003d\"org/bukkit/configuration/ConfigurationSection.html\" title\u003d\"interface in org.bukkit.configuration\"\u003e\u003ccode\u003eConfigurationSection\u003c/code\u003e\u003c/a\u003e, not\n only \u003ca href\u003d\"org/bukkit/configuration/MemorySection.html\" title\u003d\"class in org.bukkit.configuration\"\u003e\u003ccode\u003eMemorySection\u003c/code\u003e\u003c/a\u003e.",
              "tags": "Returns Full path of the section from its root..",
              "plain": "Creates a relative path to the given {@link ConfigurationSection} from\n the given relative section.\n \u003cp\u003e\n You may use this method for any given {@link ConfigurationSection}, not\n only {@link MemorySection}.\n@param section Section to create a path for.\n@param key Name of the specified section.\n@param relativeTo Section to create the path relative to.\n@return Full path of the section from its root."
            }
          },
          {
            "kind": "METHOD",
            "name": "createSection(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "createSection(java.lang.String,java.util.Map\u003c?,?\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "map"
              },
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "fullPath"
          },
          {
            "kind": "METHOD",
            "name": "get(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "get(java.lang.String,java.lang.Object)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "def"
              },
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getBoolean(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getBoolean(java.lang.String,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "def"
              },
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getBooleanList(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getByteList(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getCharacterList(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getColor(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getColor(java.lang.String,org.bukkit.Color)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "def"
              },
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getConfigurationSection(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getCurrentPath()"
          },
          {
            "kind": "METHOD",
            "name": "getDefault(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getDefaultSection()"
          },
          {
            "kind": "METHOD",
            "name": "getDouble(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getDouble(java.lang.String,double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "def"
              },
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getDoubleList(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getFloatList(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getInt(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getInt(java.lang.String,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "def"
              },
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getIntegerList(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getItemStack(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getItemStack(java.lang.String,org.bukkit.inventory.ItemStack)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "def"
              },
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getKeys(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "deep"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getList(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getList(java.lang.String,java.util.List\u003c?\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "def"
              },
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getLong(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getLong(java.lang.String,long)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "def"
              },
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getLongList(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getMapList(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getName()"
          },
          {
            "kind": "METHOD",
            "name": "getOfflinePlayer(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getOfflinePlayer(java.lang.String,org.bukkit.OfflinePlayer)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "def"
              },
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getParent()"
          },
          {
            "kind": "METHOD",
            "name": "getRoot()"
          },
          {
            "kind": "METHOD",
            "name": "getShortList(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getString(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getString(java.lang.String,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "def"
              },
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getStringList(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getValues(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "deep"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getVector(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getVector(java.lang.String,org.bukkit.util.Vector)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "def"
              },
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "isBoolean(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "isColor(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "isConfigurationSection(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "isDouble(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "isInt(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "isItemStack(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "isList(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "isLong(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "isOfflinePlayer(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "isPrimitiveWrapper(java.lang.Object)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "input"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "isSet(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "isString(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "isVector(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "path"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "map"
          },
          {
            "kind": "METHOD",
            "name": "mapChildrenKeys(java.util.Set\u003cjava.lang.String\u003e,org.bukkit.configuration.ConfigurationSection,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "deep"
              },
              {
                "kind": "PARAMETER",
                "name": "output"
              },
              {
                "kind": "PARAMETER",
                "name": "section"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "mapChildrenValues(java.util.Map\u003cjava.lang.String,java.lang.Object\u003e,org.bukkit.configuration.ConfigurationSection,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "deep"
              },
              {
                "kind": "PARAMETER",
                "name": "output"
              },
              {
                "kind": "PARAMETER",
                "name": "section"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "parent"
          },
          {
            "kind": "FIELD",
            "name": "path"
          },
          {
            "kind": "FIELD",
            "name": "root"
          },
          {
            "kind": "METHOD",
            "name": "set(java.lang.String,java.lang.Object)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "path"
              },
              {
                "kind": "PARAMETER",
                "name": "value"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "toString()"
          }
        ],
        "comment": {
          "body": "A type of \u003ca href\u003d\"org/bukkit/configuration/ConfigurationSection.html\" title\u003d\"interface in org.bukkit.configuration\"\u003e\u003ccode\u003eConfigurationSection\u003c/code\u003e\u003c/a\u003e that is stored in memory.",
          "plain": "A type of {@link ConfigurationSection} that is stored in memory."
        }
      }
    ]
  },
  {
    "kind": "PACKAGE",
    "name": "org.bukkit.configuration.file",
    "children": [
      {
        "kind": "CLASS",
        "name": "org.bukkit.configuration.file.FileConfiguration",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "FileConfiguration()",
            "comment": {
              "body": "Creates an empty \u003ca href\u003d\"org/bukkit/configuration/file/FileConfiguration.html\" title\u003d\"class in org.bukkit.configuration.file\"\u003e\u003ccode\u003eFileConfiguration\u003c/code\u003e\u003c/a\u003e with no default values.",
              "plain": "Creates an empty {@link FileConfiguration} with no default values."
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "FileConfiguration(org.bukkit.configuration.Configuration)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "defaults"
              }
            ],
            "comment": {
              "body": "Creates an empty \u003ca href\u003d\"org/bukkit/configuration/file/FileConfiguration.html\" title\u003d\"class in org.bukkit.configuration.file\"\u003e\u003ccode\u003eFileConfiguration\u003c/code\u003e\u003c/a\u003e using the specified \u003ca href\u003d\"org/bukkit/configuration/Configuration.html\" title\u003d\"interface in org.bukkit.configuration\"\u003e\u003ccode\u003eConfiguration\u003c/code\u003e\u003c/a\u003e as a source for all default values.",
              "plain": "Creates an empty {@link FileConfiguration} using the specified {@link Configuration} as a source for all default values.\n@param defaults Default value provider"
            }
          },
          {
            "kind": "METHOD",
            "name": "buildHeader()",
            "comment": {
              "body": "Compiles the header for this \u003ca href\u003d\"org/bukkit/configuration/file/FileConfiguration.html\" title\u003d\"class in org.bukkit.configuration.file\"\u003e\u003ccode\u003eFileConfiguration\u003c/code\u003e\u003c/a\u003e and returns the\n result.\n \u003cp\u003e\n This will use the header from \u003ca href\u003d\"org/bukkit/configuration/file/FileConfiguration.html#options()\"\u003e\u003ccode\u003eFileConfiguration.options()\u003c/code\u003e\u003c/a\u003e -\u0026gt; \u003ca href\u003d\"org/bukkit/configuration/file/FileConfigurationOptions.html#header()\"\u003e\u003ccode\u003eFileConfigurationOptions.header()\u003c/code\u003e\u003c/a\u003e, respecting the rules of \u003ca href\u003d\"org/bukkit/configuration/file/FileConfigurationOptions.html#copyHeader()\"\u003e\u003ccode\u003eFileConfigurationOptions.copyHeader()\u003c/code\u003e\u003c/a\u003e if set.",
              "tags": "Returns Compiled header.",
              "plain": "Compiles the header for this {@link FileConfiguration} and returns the\n result.\n \u003cp\u003e\n This will use the header from {@link #options()} -\u0026gt; {@link FileConfigurationOptions#header()}, respecting the rules of {@link FileConfigurationOptions#copyHeader()} if set.\n@return Compiled header"
            }
          },
          {
            "kind": "METHOD",
            "name": "load(java.io.File)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "file"
              }
            ],
            "comment": {
              "body": "Loads this \u003ca href\u003d\"org/bukkit/configuration/file/FileConfiguration.html\" title\u003d\"class in org.bukkit.configuration.file\"\u003e\u003ccode\u003eFileConfiguration\u003c/code\u003e\u003c/a\u003e from the specified location.\n \u003cp\u003e\n All the values contained within this configuration will be removed,\n leaving only settings and defaults, and the new values will be loaded\n from the given file.\n \u003cp\u003e\n If the file cannot be loaded for any reason, an exception will be\n thrown.",
              "plain": "Loads this {@link FileConfiguration} from the specified location.\n \u003cp\u003e\n All the values contained within this configuration will be removed,\n leaving only settings and defaults, and the new values will be loaded\n from the given file.\n \u003cp\u003e\n If the file cannot be loaded for any reason, an exception will be\n thrown.\n@param file File to load from.\n@throws FileNotFoundException Thrown when the given file cannot be\n     opened.\n@throws IOException Thrown when the given file cannot be read.\n@throws InvalidConfigurationException Thrown when the given file is not\n     a valid Configuration.\n@throws IllegalArgumentException Thrown when file is null."
            }
          },
          {
            "kind": "METHOD",
            "name": "load(java.io.Reader)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "reader"
              }
            ],
            "comment": {
              "body": "Loads this \u003ca href\u003d\"org/bukkit/configuration/file/FileConfiguration.html\" title\u003d\"class in org.bukkit.configuration.file\"\u003e\u003ccode\u003eFileConfiguration\u003c/code\u003e\u003c/a\u003e from the specified reader.\n \u003cp\u003e\n All the values contained within this configuration will be removed,\n leaving only settings and defaults, and the new values will be loaded\n from the given stream.",
              "plain": "Loads this {@link FileConfiguration} from the specified reader.\n \u003cp\u003e\n All the values contained within this configuration will be removed,\n leaving only settings and defaults, and the new values will be loaded\n from the given stream.\n@param reader the reader to load from\n@throws IOException thrown when underlying reader throws an IOException\n@throws InvalidConfigurationException thrown when the reader does not\n      represent a valid Configuration\n@throws IllegalArgumentException thrown when reader is null"
            }
          },
          {
            "kind": "METHOD",
            "name": "load(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "file"
              }
            ],
            "comment": {
              "body": "Loads this \u003ca href\u003d\"org/bukkit/configuration/file/FileConfiguration.html\" title\u003d\"class in org.bukkit.configuration.file\"\u003e\u003ccode\u003eFileConfiguration\u003c/code\u003e\u003c/a\u003e from the specified location.\n \u003cp\u003e\n All the values contained within this configuration will be removed,\n leaving only settings and defaults, and the new values will be loaded\n from the given file.\n \u003cp\u003e\n If the file cannot be loaded for any reason, an exception will be\n thrown.",
              "plain": "Loads this {@link FileConfiguration} from the specified location.\n \u003cp\u003e\n All the values contained within this configuration will be removed,\n leaving only settings and defaults, and the new values will be loaded\n from the given file.\n \u003cp\u003e\n If the file cannot be loaded for any reason, an exception will be\n thrown.\n@param file File to load from.\n@throws FileNotFoundException Thrown when the given file cannot be\n     opened.\n@throws IOException Thrown when the given file cannot be read.\n@throws InvalidConfigurationException Thrown when the given file is not\n     a valid Configuration.\n@throws IllegalArgumentException Thrown when file is null."
            }
          },
          {
            "kind": "METHOD",
            "name": "loadFromString(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "contents"
              }
            ],
            "comment": {
              "body": "Loads this \u003ca href\u003d\"org/bukkit/configuration/file/FileConfiguration.html\" title\u003d\"class in org.bukkit.configuration.file\"\u003e\u003ccode\u003eFileConfiguration\u003c/code\u003e\u003c/a\u003e from the specified string, as\n opposed to from file.\n \u003cp\u003e\n All the values contained within this configuration will be removed,\n leaving only settings and defaults, and the new values will be loaded\n from the given string.\n \u003cp\u003e\n If the string is invalid in any way, an exception will be thrown.",
              "plain": "Loads this {@link FileConfiguration} from the specified string, as\n opposed to from file.\n \u003cp\u003e\n All the values contained within this configuration will be removed,\n leaving only settings and defaults, and the new values will be loaded\n from the given string.\n \u003cp\u003e\n If the string is invalid in any way, an exception will be thrown.\n@param contents Contents of a Configuration to load.\n@throws InvalidConfigurationException Thrown if the specified string is\n     invalid.\n@throws IllegalArgumentException Thrown if contents is null."
            }
          },
          {
            "kind": "METHOD",
            "name": "options()"
          },
          {
            "kind": "METHOD",
            "name": "save(java.io.File)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "file"
              }
            ],
            "comment": {
              "body": "Saves this \u003ca href\u003d\"org/bukkit/configuration/file/FileConfiguration.html\" title\u003d\"class in org.bukkit.configuration.file\"\u003e\u003ccode\u003eFileConfiguration\u003c/code\u003e\u003c/a\u003e to the specified location.\n \u003cp\u003e\n If the file does not exist, it will be created. If already exists, it\n will be overwritten. If it cannot be overwritten or created, an\n exception will be thrown.\n \u003cp\u003e\n This method will save using the system default encoding, or possibly\n using UTF8.",
              "plain": "Saves this {@link FileConfiguration} to the specified location.\n \u003cp\u003e\n If the file does not exist, it will be created. If already exists, it\n will be overwritten. If it cannot be overwritten or created, an\n exception will be thrown.\n \u003cp\u003e\n This method will save using the system default encoding, or possibly\n using UTF8.\n@param file File to save to.\n@throws IOException Thrown when the given file cannot be written to for\n     any reason.\n@throws IllegalArgumentException Thrown when file is null."
            }
          },
          {
            "kind": "METHOD",
            "name": "save(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "file"
              }
            ],
            "comment": {
              "body": "Saves this \u003ca href\u003d\"org/bukkit/configuration/file/FileConfiguration.html\" title\u003d\"class in org.bukkit.configuration.file\"\u003e\u003ccode\u003eFileConfiguration\u003c/code\u003e\u003c/a\u003e to the specified location.\n \u003cp\u003e\n If the file does not exist, it will be created. If already exists, it\n will be overwritten. If it cannot be overwritten or created, an\n exception will be thrown.\n \u003cp\u003e\n This method will save using the system default encoding, or possibly\n using UTF8.",
              "plain": "Saves this {@link FileConfiguration} to the specified location.\n \u003cp\u003e\n If the file does not exist, it will be created. If already exists, it\n will be overwritten. If it cannot be overwritten or created, an\n exception will be thrown.\n \u003cp\u003e\n This method will save using the system default encoding, or possibly\n using UTF8.\n@param file File to save to.\n@throws IOException Thrown when the given file cannot be written to for\n     any reason.\n@throws IllegalArgumentException Thrown when file is null."
            }
          },
          {
            "kind": "METHOD",
            "name": "saveToString()",
            "comment": {
              "body": "Saves this \u003ca href\u003d\"org/bukkit/configuration/file/FileConfiguration.html\" title\u003d\"class in org.bukkit.configuration.file\"\u003e\u003ccode\u003eFileConfiguration\u003c/code\u003e\u003c/a\u003e to a string, and returns it.",
              "tags": "Returns String containing this configuration..",
              "plain": "Saves this {@link FileConfiguration} to a string, and returns it.\n@return String containing this configuration."
            }
          }
        ],
        "comment": {
          "body": "This is a base class for all File based implementations of \u003ca href\u003d\"org/bukkit/configuration/Configuration.html\" title\u003d\"interface in org.bukkit.configuration\"\u003e\u003ccode\u003eConfiguration\u003c/code\u003e\u003c/a\u003e",
          "plain": "This is a base class for all File based implementations of {@link Configuration}"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.configuration.file.FileConfigurationOptions",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "FileConfigurationOptions(org.bukkit.configuration.MemoryConfiguration)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "configuration"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "configuration()"
          },
          {
            "kind": "METHOD",
            "name": "copyDefaults(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "value"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "copyHeader"
          },
          {
            "kind": "METHOD",
            "name": "copyHeader()",
            "comment": {
              "body": "Gets whether or not the header should be copied from a default source.\n \u003cp\u003e\n If this is true, if a default \u003ca href\u003d\"org/bukkit/configuration/file/FileConfiguration.html\" title\u003d\"class in org.bukkit.configuration.file\"\u003e\u003ccode\u003eFileConfiguration\u003c/code\u003e\u003c/a\u003e is passed to\n \u003ca href\u003d\"org/bukkit/configuration/MemoryConfiguration.html#setDefaults(org.bukkit.configuration.Configuration)\"\u003e\u003ccode\u003eMemoryConfiguration.setDefaults(org.bukkit.configuration.Configuration)\u003c/code\u003e\u003c/a\u003e\n then upon saving it will use the header from that config, instead of\n the one provided here.\n \u003cp\u003e\n If no default is set on the configuration, or the default is not of\n type FileConfiguration, or that config has no header (\u003ca href\u003d\"org/bukkit/configuration/file/FileConfigurationOptions.html#header()\"\u003e\u003ccode\u003eFileConfigurationOptions.header()\u003c/code\u003e\u003c/a\u003e\n returns null) then the header specified in this configuration will be\n used.\n \u003cp\u003e\n Defaults to true.",
              "tags": "Returns Whether or not to copy the header.",
              "plain": "Gets whether or not the header should be copied from a default source.\n \u003cp\u003e\n If this is true, if a default {@link FileConfiguration} is passed to\n {@link FileConfiguration#setDefaults(org.bukkit.configuration.Configuration)}\n then upon saving it will use the header from that config, instead of\n the one provided here.\n \u003cp\u003e\n If no default is set on the configuration, or the default is not of\n type FileConfiguration, or that config has no header ({@link #header()}\n returns null) then the header specified in this configuration will be\n used.\n \u003cp\u003e\n Defaults to true.\n@return Whether or not to copy the header"
            }
          },
          {
            "kind": "METHOD",
            "name": "copyHeader(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "value"
              }
            ],
            "comment": {
              "body": "Sets whether or not the header should be copied from a default source.\n \u003cp\u003e\n If this is true, if a default \u003ca href\u003d\"org/bukkit/configuration/file/FileConfiguration.html\" title\u003d\"class in org.bukkit.configuration.file\"\u003e\u003ccode\u003eFileConfiguration\u003c/code\u003e\u003c/a\u003e is passed to\n \u003ca href\u003d\"org/bukkit/configuration/MemoryConfiguration.html#setDefaults(org.bukkit.configuration.Configuration)\"\u003e\u003ccode\u003eMemoryConfiguration.setDefaults(org.bukkit.configuration.Configuration)\u003c/code\u003e\u003c/a\u003e\n then upon saving it will use the header from that config, instead of\n the one provided here.\n \u003cp\u003e\n If no default is set on the configuration, or the default is not of\n type FileConfiguration, or that config has no header (\u003ca href\u003d\"org/bukkit/configuration/file/FileConfigurationOptions.html#header()\"\u003e\u003ccode\u003eFileConfigurationOptions.header()\u003c/code\u003e\u003c/a\u003e\n returns null) then the header specified in this configuration will be\n used.\n \u003cp\u003e\n Defaults to true.",
              "tags": "Returns This object, for chaining.",
              "plain": "Sets whether or not the header should be copied from a default source.\n \u003cp\u003e\n If this is true, if a default {@link FileConfiguration} is passed to\n {@link FileConfiguration#setDefaults(org.bukkit.configuration.Configuration)}\n then upon saving it will use the header from that config, instead of\n the one provided here.\n \u003cp\u003e\n If no default is set on the configuration, or the default is not of\n type FileConfiguration, or that config has no header ({@link #header()}\n returns null) then the header specified in this configuration will be\n used.\n \u003cp\u003e\n Defaults to true.\n@param value Whether or not to copy the header\n@return This object, for chaining"
            }
          },
          {
            "kind": "FIELD",
            "name": "header"
          },
          {
            "kind": "METHOD",
            "name": "header()",
            "comment": {
              "body": "Gets the header that will be applied to the top of the saved output.\n \u003cp\u003e\n This header will be commented out and applied directly at the top of\n the generated output of the \u003ca href\u003d\"org/bukkit/configuration/file/FileConfiguration.html\" title\u003d\"class in org.bukkit.configuration.file\"\u003e\u003ccode\u003eFileConfiguration\u003c/code\u003e\u003c/a\u003e. It is not\n required to include a newline at the end of the header as it will\n automatically be applied, but you may include one if you wish for extra\n spacing.\n \u003cp\u003e\n Null is a valid value which will indicate that no header is to be\n applied. The default value is null.",
              "tags": "Returns Header.",
              "plain": "Gets the header that will be applied to the top of the saved output.\n \u003cp\u003e\n This header will be commented out and applied directly at the top of\n the generated output of the {@link FileConfiguration}. It is not\n required to include a newline at the end of the header as it will\n automatically be applied, but you may include one if you wish for extra\n spacing.\n \u003cp\u003e\n Null is a valid value which will indicate that no header is to be\n applied. The default value is null.\n@return Header"
            }
          },
          {
            "kind": "METHOD",
            "name": "header(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "value"
              }
            ],
            "comment": {
              "body": "Sets the header that will be applied to the top of the saved output.\n \u003cp\u003e\n This header will be commented out and applied directly at the top of\n the generated output of the \u003ca href\u003d\"org/bukkit/configuration/file/FileConfiguration.html\" title\u003d\"class in org.bukkit.configuration.file\"\u003e\u003ccode\u003eFileConfiguration\u003c/code\u003e\u003c/a\u003e. It is not\n required to include a newline at the end of the header as it will\n automatically be applied, but you may include one if you wish for extra\n spacing.\n \u003cp\u003e\n Null is a valid value which will indicate that no header is to be\n applied.",
              "tags": "Returns This object, for chaining.",
              "plain": "Sets the header that will be applied to the top of the saved output.\n \u003cp\u003e\n This header will be commented out and applied directly at the top of\n the generated output of the {@link FileConfiguration}. It is not\n required to include a newline at the end of the header as it will\n automatically be applied, but you may include one if you wish for extra\n spacing.\n \u003cp\u003e\n Null is a valid value which will indicate that no header is to be\n applied.\n@param value New header\n@return This object, for chaining"
            }
          },
          {
            "kind": "METHOD",
            "name": "pathSeparator(char)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "value"
              }
            ]
          }
        ],
        "comment": {
          "body": "Various settings for controlling the input and output of a \u003ca href\u003d\"org/bukkit/configuration/file/FileConfiguration.html\" title\u003d\"class in org.bukkit.configuration.file\"\u003e\u003ccode\u003eFileConfiguration\u003c/code\u003e\u003c/a\u003e",
          "plain": "Various settings for controlling the input and output of a {@link FileConfiguration}"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.configuration.file.YamlConfiguration",
        "children": [
          {
            "kind": "FIELD",
            "name": "BLANK_CONFIG"
          },
          {
            "kind": "FIELD",
            "name": "COMMENT_PREFIX"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "YamlConfiguration()"
          },
          {
            "kind": "METHOD",
            "name": "buildHeader()"
          },
          {
            "kind": "METHOD",
            "name": "convertMapsToSections(java.util.Map\u003c?,?\u003e,org.bukkit.configuration.ConfigurationSection)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "input"
              },
              {
                "kind": "PARAMETER",
                "name": "section"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "loadConfiguration(java.io.File)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "file"
              }
            ],
            "comment": {
              "body": "Creates a new \u003ca href\u003d\"org/bukkit/configuration/file/YamlConfiguration.html\" title\u003d\"class in org.bukkit.configuration.file\"\u003e\u003ccode\u003eYamlConfiguration\u003c/code\u003e\u003c/a\u003e, loading from the given file.\n \u003cp\u003e\n Any errors loading the Configuration will be logged and then ignored.\n If the specified input is not a valid config, a blank config will be\n returned.\n \u003cp\u003e\n The encoding used may follow the system dependent default.",
              "tags": "Returns Resulting configuration.",
              "plain": "Creates a new {@link YamlConfiguration}, loading from the given file.\n \u003cp\u003e\n Any errors loading the Configuration will be logged and then ignored.\n If the specified input is not a valid config, a blank config will be\n returned.\n \u003cp\u003e\n The encoding used may follow the system dependent default.\n@param file Input file\n@return Resulting configuration\n@throws IllegalArgumentException Thrown if file is null"
            }
          },
          {
            "kind": "METHOD",
            "name": "loadConfiguration(java.io.Reader)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "reader"
              }
            ],
            "comment": {
              "body": "Creates a new \u003ca href\u003d\"org/bukkit/configuration/file/YamlConfiguration.html\" title\u003d\"class in org.bukkit.configuration.file\"\u003e\u003ccode\u003eYamlConfiguration\u003c/code\u003e\u003c/a\u003e, loading from the given reader.\n \u003cp\u003e\n Any errors loading the Configuration will be logged and then ignored.\n If the specified input is not a valid config, a blank config will be\n returned.",
              "tags": "Returns resulting configuration.",
              "plain": "Creates a new {@link YamlConfiguration}, loading from the given reader.\n \u003cp\u003e\n Any errors loading the Configuration will be logged and then ignored.\n If the specified input is not a valid config, a blank config will be\n returned.\n@param reader input\n@return resulting configuration\n@throws IllegalArgumentException Thrown if stream is null"
            }
          },
          {
            "kind": "METHOD",
            "name": "loadFromString(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "contents"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "options()"
          },
          {
            "kind": "METHOD",
            "name": "parseHeader(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "input"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "saveToString()"
          },
          {
            "kind": "FIELD",
            "name": "yaml"
          },
          {
            "kind": "FIELD",
            "name": "yamlOptions"
          },
          {
            "kind": "FIELD",
            "name": "yamlRepresenter"
          }
        ],
        "comment": {
          "body": "An implementation of \u003ca href\u003d\"org/bukkit/configuration/Configuration.html\" title\u003d\"interface in org.bukkit.configuration\"\u003e\u003ccode\u003eConfiguration\u003c/code\u003e\u003c/a\u003e which saves all files in Yaml.\n Note that this implementation is not synchronized.",
          "plain": "An implementation of {@link Configuration} which saves all files in Yaml.\n Note that this implementation is not synchronized."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.configuration.file.YamlConfigurationOptions",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "YamlConfigurationOptions(org.bukkit.configuration.file.YamlConfiguration)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "configuration"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "configuration()"
          },
          {
            "kind": "METHOD",
            "name": "copyDefaults(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "value"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "copyHeader(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "value"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "header(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "value"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "indent"
          },
          {
            "kind": "METHOD",
            "name": "indent()",
            "comment": {
              "body": "Gets how much spaces should be used to indent each line.\n \u003cp\u003e\n The minimum value this may be is 2, and the maximum is 9.",
              "tags": "Returns How much to indent by.",
              "plain": "Gets how much spaces should be used to indent each line.\n \u003cp\u003e\n The minimum value this may be is 2, and the maximum is 9.\n@return How much to indent by"
            }
          },
          {
            "kind": "METHOD",
            "name": "indent(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "value"
              }
            ],
            "comment": {
              "body": "Sets how much spaces should be used to indent each line.\n \u003cp\u003e\n The minimum value this may be is 2, and the maximum is 9.",
              "tags": "Returns This object, for chaining.",
              "plain": "Sets how much spaces should be used to indent each line.\n \u003cp\u003e\n The minimum value this may be is 2, and the maximum is 9.\n@param value New indent\n@return This object, for chaining"
            }
          },
          {
            "kind": "METHOD",
            "name": "pathSeparator(char)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "value"
              }
            ]
          }
        ],
        "comment": {
          "body": "Various settings for controlling the input and output of a \u003ca href\u003d\"org/bukkit/configuration/file/YamlConfiguration.html\" title\u003d\"class in org.bukkit.configuration.file\"\u003e\u003ccode\u003eYamlConfiguration\u003c/code\u003e\u003c/a\u003e",
          "plain": "Various settings for controlling the input and output of a {@link YamlConfiguration}"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.configuration.file.YamlConstructor",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "YamlConstructor()"
          },
          {
            "kind": "CLASS",
            "name": "org.bukkit.configuration.file.YamlConstructor.ConstructCustomObject",
            "children": [
              {
                "kind": "CONSTRUCTOR",
                "name": "ConstructCustomObject()"
              },
              {
                "kind": "METHOD",
                "name": "construct(org.yaml.snakeyaml.nodes.Node)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "node"
                  }
                ]
              },
              {
                "kind": "METHOD",
                "name": "construct2ndStep(org.yaml.snakeyaml.nodes.Node,java.lang.Object)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "node"
                  },
                  {
                    "kind": "PARAMETER",
                    "name": "object"
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.configuration.file.YamlRepresenter",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "YamlRepresenter()"
          },
          {
            "kind": "CLASS",
            "name": "org.bukkit.configuration.file.YamlRepresenter.RepresentConfigurationSection",
            "children": [
              {
                "kind": "CONSTRUCTOR",
                "name": "RepresentConfigurationSection()"
              },
              {
                "kind": "METHOD",
                "name": "representData(java.lang.Object)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "data"
                  }
                ]
              }
            ]
          },
          {
            "kind": "CLASS",
            "name": "org.bukkit.configuration.file.YamlRepresenter.RepresentConfigurationSerializable",
            "children": [
              {
                "kind": "CONSTRUCTOR",
                "name": "RepresentConfigurationSerializable()"
              },
              {
                "kind": "METHOD",
                "name": "representData(java.lang.Object)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "data"
                  }
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  {
    "kind": "PACKAGE",
    "name": "org.bukkit.configuration.serialization",
    "children": [
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.configuration.serialization.ConfigurationSerializable",
        "children": [
          {
            "kind": "METHOD",
            "name": "serialize()",
            "comment": {
              "body": "Creates a Map representation of this class.\n \u003cp\u003e\n This class must provide a method to restore this class, as defined in\n the \u003ca href\u003d\"org/bukkit/configuration/serialization/ConfigurationSerializable.html\" title\u003d\"interface in org.bukkit.configuration.serialization\"\u003e\u003ccode\u003eConfigurationSerializable\u003c/code\u003e\u003c/a\u003e interface javadocs.",
              "tags": "Returns Map containing the current state of this class.",
              "plain": "Creates a Map representation of this class.\n \u003cp\u003e\n This class must provide a method to restore this class, as defined in\n the {@link ConfigurationSerializable} interface javadocs.\n@return Map containing the current state of this class"
            }
          }
        ],
        "comment": {
          "body": "Represents an object that may be serialized.\n \u003cp\u003e\n These objects MUST implement one of the following, in addition to the\n methods as defined by this interface:\n \u003cul\u003e\n \u003cli\u003eA static method \"deserialize\" that accepts a single \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/util/Map.html\" title\u003d\"class or interface in java.util\" class\u003d\"external-link\"\u003e\u003ccode\u003eMap\u003c/code\u003e\u003c/a\u003e\u0026lt;\n \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/lang/String.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003e\u003ccode\u003eString\u003c/code\u003e\u003c/a\u003e, \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/lang/Object.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003e\u003ccode\u003eObject\u003c/code\u003e\u003c/a\u003e\u0026gt; and returns the class.\u003c/li\u003e\n \u003cli\u003eA static method \"valueOf\" that accepts a single \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/util/Map.html\" title\u003d\"class or interface in java.util\" class\u003d\"external-link\"\u003e\u003ccode\u003eMap\u003c/code\u003e\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/lang/String.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003e\u003ccode\u003eString\u003c/code\u003e\u003c/a\u003e, \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/lang/Object.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003e\u003ccode\u003eObject\u003c/code\u003e\u003c/a\u003e\u0026gt; and returns the class.\u003c/li\u003e\n \u003cli\u003eA constructor that accepts a single \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/util/Map.html\" title\u003d\"class or interface in java.util\" class\u003d\"external-link\"\u003e\u003ccode\u003eMap\u003c/code\u003e\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/lang/String.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003e\u003ccode\u003eString\u003c/code\u003e\u003c/a\u003e,\n \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/lang/Object.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003e\u003ccode\u003eObject\u003c/code\u003e\u003c/a\u003e\u0026gt;.\u003c/li\u003e\n \u003c/ul\u003e\n In addition to implementing this interface, you must register the class\n with \u003ca href\u003d\"org/bukkit/configuration/serialization/ConfigurationSerialization.html#registerClass(java.lang.Class)\"\u003e\u003ccode\u003eConfigurationSerialization.registerClass(Class)\u003c/code\u003e\u003c/a\u003e.",
          "plain": "Represents an object that may be serialized.\n \u003cp\u003e\n These objects MUST implement one of the following, in addition to the\n methods as defined by this interface:\n \u003cul\u003e\n \u003cli\u003eA static method \"deserialize\" that accepts a single {@link Map}\u0026lt;\n {@link String}, {@link Object}\u0026gt; and returns the class.\u003c/li\u003e\n \u003cli\u003eA static method \"valueOf\" that accepts a single {@link Map}\u0026lt;{@link String}, {@link Object}\u0026gt; and returns the class.\u003c/li\u003e\n \u003cli\u003eA constructor that accepts a single {@link Map}\u0026lt;{@link String},\n {@link Object}\u0026gt;.\u003c/li\u003e\n \u003c/ul\u003e\n In addition to implementing this interface, you must register the class\n with {@link ConfigurationSerialization#registerClass(Class)}.\n@see DelegateDeserialization\n@see SerializableAs"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.configuration.serialization.ConfigurationSerialization",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "ConfigurationSerialization(java.lang.Class\u003c? extends org.bukkit.configuration.serialization.ConfigurationSerializable\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "clazz"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "SERIALIZED_TYPE_KEY"
          },
          {
            "kind": "FIELD",
            "name": "aliases"
          },
          {
            "kind": "FIELD",
            "name": "clazz"
          },
          {
            "kind": "METHOD",
            "name": "deserialize(java.util.Map\u003cjava.lang.String,?\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "args"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "deserializeObject(java.util.Map\u003cjava.lang.String,?\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "args"
              }
            ],
            "comment": {
              "body": "Attempts to deserialize the given arguments into a new instance of the\n given class.\n \u003cp\u003e\n The class must implement \u003ca href\u003d\"org/bukkit/configuration/serialization/ConfigurationSerializable.html\" title\u003d\"interface in org.bukkit.configuration.serialization\"\u003e\u003ccode\u003eConfigurationSerializable\u003c/code\u003e\u003c/a\u003e, including\n the extra methods as specified in the javadoc of\n ConfigurationSerializable.\n \u003cp\u003e\n If a new instance could not be made, an example being the class not\n fully implementing the interface, null will be returned.",
              "tags": "Returns New instance of the specified class.",
              "plain": "Attempts to deserialize the given arguments into a new instance of the\n given class.\n \u003cp\u003e\n The class must implement {@link ConfigurationSerializable}, including\n the extra methods as specified in the javadoc of\n ConfigurationSerializable.\n \u003cp\u003e\n If a new instance could not be made, an example being the class not\n fully implementing the interface, null will be returned.\n@param args Arguments for deserialization\n@return New instance of the specified class"
            }
          },
          {
            "kind": "METHOD",
            "name": "deserializeObject(java.util.Map\u003cjava.lang.String,?\u003e,java.lang.Class\u003c? extends org.bukkit.configuration.serialization.ConfigurationSerializable\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "args"
              },
              {
                "kind": "PARAMETER",
                "name": "clazz"
              }
            ],
            "comment": {
              "body": "Attempts to deserialize the given arguments into a new instance of the\n given class.\n \u003cp\u003e\n The class must implement \u003ca href\u003d\"org/bukkit/configuration/serialization/ConfigurationSerializable.html\" title\u003d\"interface in org.bukkit.configuration.serialization\"\u003e\u003ccode\u003eConfigurationSerializable\u003c/code\u003e\u003c/a\u003e, including\n the extra methods as specified in the javadoc of\n ConfigurationSerializable.\n \u003cp\u003e\n If a new instance could not be made, an example being the class not\n fully implementing the interface, null will be returned.",
              "tags": "Returns New instance of the specified class.",
              "plain": "Attempts to deserialize the given arguments into a new instance of the\n given class.\n \u003cp\u003e\n The class must implement {@link ConfigurationSerializable}, including\n the extra methods as specified in the javadoc of\n ConfigurationSerializable.\n \u003cp\u003e\n If a new instance could not be made, an example being the class not\n fully implementing the interface, null will be returned.\n@param args Arguments for deserialization\n@param clazz Class to deserialize into\n@return New instance of the specified class"
            }
          },
          {
            "kind": "METHOD",
            "name": "deserializeViaCtor(java.lang.reflect.Constructor\u003c? extends org.bukkit.configuration.serialization.ConfigurationSerializable\u003e,java.util.Map\u003cjava.lang.String,?\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "args"
              },
              {
                "kind": "PARAMETER",
                "name": "ctor"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "deserializeViaMethod(java.lang.reflect.Method,java.util.Map\u003cjava.lang.String,?\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "args"
              },
              {
                "kind": "PARAMETER",
                "name": "method"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getAlias(java.lang.Class\u003c? extends org.bukkit.configuration.serialization.ConfigurationSerializable\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "clazz"
              }
            ],
            "comment": {
              "body": "Gets the correct alias for the given \u003ca href\u003d\"org/bukkit/configuration/serialization/ConfigurationSerializable.html\" title\u003d\"interface in org.bukkit.configuration.serialization\"\u003e\u003ccode\u003eConfigurationSerializable\u003c/code\u003e\u003c/a\u003e\n class",
              "tags": "Returns Alias to use for the class.",
              "plain": "Gets the correct alias for the given {@link ConfigurationSerializable}\n class\n@param clazz Class to get alias for\n@return Alias to use for the class"
            }
          },
          {
            "kind": "METHOD",
            "name": "getClassByAlias(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "alias"
              }
            ],
            "comment": {
              "body": "Attempts to get a registered \u003ca href\u003d\"org/bukkit/configuration/serialization/ConfigurationSerializable.html\" title\u003d\"interface in org.bukkit.configuration.serialization\"\u003e\u003ccode\u003eConfigurationSerializable\u003c/code\u003e\u003c/a\u003e class by\n its alias",
              "tags": "Returns Registered class, or null if not found.",
              "plain": "Attempts to get a registered {@link ConfigurationSerializable} class by\n its alias\n@param alias Alias of the serializable\n@return Registered class, or null if not found"
            }
          },
          {
            "kind": "METHOD",
            "name": "getConstructor()"
          },
          {
            "kind": "METHOD",
            "name": "getMethod(java.lang.String,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "isStatic"
              },
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "registerClass(java.lang.Class\u003c? extends org.bukkit.configuration.serialization.ConfigurationSerializable\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "clazz"
              }
            ],
            "comment": {
              "body": "Registers the given \u003ca href\u003d\"org/bukkit/configuration/serialization/ConfigurationSerializable.html\" title\u003d\"interface in org.bukkit.configuration.serialization\"\u003e\u003ccode\u003eConfigurationSerializable\u003c/code\u003e\u003c/a\u003e class by its\n alias",
              "plain": "Registers the given {@link ConfigurationSerializable} class by its\n alias\n@param clazz Class to register"
            }
          },
          {
            "kind": "METHOD",
            "name": "registerClass(java.lang.Class\u003c? extends org.bukkit.configuration.serialization.ConfigurationSerializable\u003e,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "alias"
              },
              {
                "kind": "PARAMETER",
                "name": "clazz"
              }
            ],
            "comment": {
              "body": "Registers the given alias to the specified \u003ca href\u003d\"org/bukkit/configuration/serialization/ConfigurationSerializable.html\" title\u003d\"interface in org.bukkit.configuration.serialization\"\u003e\u003ccode\u003eConfigurationSerializable\u003c/code\u003e\u003c/a\u003e class",
              "plain": "Registers the given alias to the specified {@link ConfigurationSerializable} class\n@param clazz Class to register\n@param alias Alias to register as\n@see SerializableAs"
            }
          },
          {
            "kind": "METHOD",
            "name": "unregisterClass(java.lang.Class\u003c? extends org.bukkit.configuration.serialization.ConfigurationSerializable\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "clazz"
              }
            ],
            "comment": {
              "body": "Unregisters any aliases for the specified \u003ca href\u003d\"org/bukkit/configuration/serialization/ConfigurationSerializable.html\" title\u003d\"interface in org.bukkit.configuration.serialization\"\u003e\u003ccode\u003eConfigurationSerializable\u003c/code\u003e\u003c/a\u003e class",
              "plain": "Unregisters any aliases for the specified {@link ConfigurationSerializable} class\n@param clazz Class to unregister"
            }
          },
          {
            "kind": "METHOD",
            "name": "unregisterClass(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "alias"
              }
            ],
            "comment": {
              "body": "Unregisters the specified alias to a \u003ca href\u003d\"org/bukkit/configuration/serialization/ConfigurationSerializable.html\" title\u003d\"interface in org.bukkit.configuration.serialization\"\u003e\u003ccode\u003eConfigurationSerializable\u003c/code\u003e\u003c/a\u003e",
              "plain": "Unregisters the specified alias to a {@link ConfigurationSerializable}\n@param alias Alias to unregister"
            }
          }
        ],
        "comment": {
          "body": "Utility class for storing and retrieving classes for \u003ca href\u003d\"org/bukkit/configuration/Configuration.html\" title\u003d\"interface in org.bukkit.configuration\"\u003e\u003ccode\u003eConfiguration\u003c/code\u003e\u003c/a\u003e.",
          "plain": "Utility class for storing and retrieving classes for {@link Configuration}."
        }
      },
      {
        "kind": "ANNOTATION_TYPE",
        "name": "org.bukkit.configuration.serialization.DelegateDeserialization",
        "children": [
          {
            "kind": "METHOD",
            "name": "value()",
            "comment": {
              "body": "Which class should be used as a delegate for this classes\n deserialization",
              "tags": "Returns Delegate class.",
              "plain": "Which class should be used as a delegate for this classes\n deserialization\n@return Delegate class"
            }
          }
        ],
        "comment": {
          "body": "Applies to a \u003ca href\u003d\"org/bukkit/configuration/serialization/ConfigurationSerializable.html\" title\u003d\"interface in org.bukkit.configuration.serialization\"\u003e\u003ccode\u003eConfigurationSerializable\u003c/code\u003e\u003c/a\u003e that will delegate all\n deserialization to another \u003ca href\u003d\"org/bukkit/configuration/serialization/ConfigurationSerializable.html\" title\u003d\"interface in org.bukkit.configuration.serialization\"\u003e\u003ccode\u003eConfigurationSerializable\u003c/code\u003e\u003c/a\u003e.",
          "plain": "Applies to a {@link ConfigurationSerializable} that will delegate all\n deserialization to another {@link ConfigurationSerializable}."
        }
      },
      {
        "kind": "ANNOTATION_TYPE",
        "name": "org.bukkit.configuration.serialization.SerializableAs",
        "children": [
          {
            "kind": "METHOD",
            "name": "value()",
            "comment": {
              "body": "This is the name your class will be stored and retrieved as.\n \u003cp\u003e\n This name MUST be unique. We recommend using names such as\n \"MyPluginThing\" instead of \"Thing\".",
              "tags": "Returns Name to serialize the class as..",
              "plain": "This is the name your class will be stored and retrieved as.\n \u003cp\u003e\n This name MUST be unique. We recommend using names such as\n \"MyPluginThing\" instead of \"Thing\".\n@return Name to serialize the class as."
            }
          }
        ],
        "comment": {
          "body": "Represents an \"alias\" that a \u003ca href\u003d\"org/bukkit/configuration/serialization/ConfigurationSerializable.html\" title\u003d\"interface in org.bukkit.configuration.serialization\"\u003e\u003ccode\u003eConfigurationSerializable\u003c/code\u003e\u003c/a\u003e may be\n stored as.\n If this is not present on a \u003ca href\u003d\"org/bukkit/configuration/serialization/ConfigurationSerializable.html\" title\u003d\"interface in org.bukkit.configuration.serialization\"\u003e\u003ccode\u003eConfigurationSerializable\u003c/code\u003e\u003c/a\u003e class, it\n will use the fully qualified name of the class.\n \u003cp\u003e\n This value will be stored in the configuration so that the configuration\n deserialization can determine what type it is.\n \u003cp\u003e\n Using this annotation on any other class than a \u003ca href\u003d\"org/bukkit/configuration/serialization/ConfigurationSerializable.html\" title\u003d\"interface in org.bukkit.configuration.serialization\"\u003e\u003ccode\u003eConfigurationSerializable\u003c/code\u003e\u003c/a\u003e will have no effect.",
          "plain": "Represents an \"alias\" that a {@link ConfigurationSerializable} may be\n stored as.\n If this is not present on a {@link ConfigurationSerializable} class, it\n will use the fully qualified name of the class.\n \u003cp\u003e\n This value will be stored in the configuration so that the configuration\n deserialization can determine what type it is.\n \u003cp\u003e\n Using this annotation on any other class than a {@link ConfigurationSerializable} will have no effect.\n@see ConfigurationSerialization#registerClass(Class, String)"
        }
      }
    ]
  },
  {
    "kind": "PACKAGE",
    "name": "org.bukkit.conversations",
    "children": [
      {
        "kind": "CLASS",
        "name": "org.bukkit.conversations.BooleanPrompt",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "BooleanPrompt()"
          },
          {
            "kind": "METHOD",
            "name": "acceptValidatedInput(org.bukkit.conversations.ConversationContext,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "context"
              },
              {
                "kind": "PARAMETER",
                "name": "input"
              }
            ],
            "comment": {
              "body": "Override this method to perform some action with the user\u0027s boolean\n response.",
              "tags": "Returns The next \u003ca href\u003d\"org/bukkit/conversations/Prompt.html\" title\u003d\"interface in org.bukkit.conversations\"\u003e\u003ccode\u003ePrompt\u003c/code\u003e\u003c/a\u003e in the prompt graph..",
              "plain": "Override this method to perform some action with the user\u0027s boolean\n response.\n@param context Context information about the conversation.\n@param input The user\u0027s boolean response.\n@return The next {@link Prompt} in the prompt graph."
            }
          },
          {
            "kind": "METHOD",
            "name": "acceptValidatedInput(org.bukkit.conversations.ConversationContext,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "context"
              },
              {
                "kind": "PARAMETER",
                "name": "input"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "isInputValid(org.bukkit.conversations.ConversationContext,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "context"
              },
              {
                "kind": "PARAMETER",
                "name": "input"
              }
            ]
          }
        ],
        "comment": {
          "body": "BooleanPrompt is the base class for any prompt that requires a boolean\n response from the user.",
          "plain": "BooleanPrompt is the base class for any prompt that requires a boolean\n response from the user."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.conversations.Conversable",
        "children": [
          {
            "kind": "METHOD",
            "name": "abandonConversation(org.bukkit.conversations.Conversation)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "conversation"
              }
            ],
            "comment": {
              "body": "Abandons an active conversation.",
              "plain": "Abandons an active conversation.\n@param conversation The conversation to abandon"
            }
          },
          {
            "kind": "METHOD",
            "name": "abandonConversation(org.bukkit.conversations.Conversation,org.bukkit.conversations.ConversationAbandonedEvent)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "conversation"
              },
              {
                "kind": "PARAMETER",
                "name": "details"
              }
            ],
            "comment": {
              "body": "Abandons an active conversation.",
              "plain": "Abandons an active conversation.\n@param conversation The conversation to abandon\n@param details Details about why the conversation was abandoned"
            }
          },
          {
            "kind": "METHOD",
            "name": "acceptConversationInput(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "input"
              }
            ],
            "comment": {
              "body": "Accepts input into the active conversation. If no conversation is in\n progress, this method does nothing.",
              "plain": "Accepts input into the active conversation. If no conversation is in\n progress, this method does nothing.\n@param input The input message into the conversation"
            }
          },
          {
            "kind": "METHOD",
            "name": "beginConversation(org.bukkit.conversations.Conversation)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "conversation"
              }
            ],
            "comment": {
              "body": "Enters into a dialog with a Conversation object.",
              "tags": "Returns True if the conversation should proceed, false if it has been\n     enqueued.",
              "plain": "Enters into a dialog with a Conversation object.\n@param conversation The conversation to begin\n@return True if the conversation should proceed, false if it has been\n     enqueued"
            }
          },
          {
            "kind": "METHOD",
            "name": "isConversing()",
            "comment": {
              "body": "Tests to see of a Conversable object is actively engaged in a\n conversation.",
              "tags": "Returns True if a conversation is in progress.",
              "plain": "Tests to see of a Conversable object is actively engaged in a\n conversation.\n@return True if a conversation is in progress"
            }
          },
          {
            "kind": "METHOD",
            "name": "sendRawMessage(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "message"
              }
            ],
            "comment": {
              "body": "Sends this sender a message raw",
              "plain": "Sends this sender a message raw\n@param message Message to be displayed"
            }
          }
        ],
        "comment": {
          "body": "The Conversable interface is used to indicate objects that can have\n conversations.",
          "plain": "The Conversable interface is used to indicate objects that can have\n conversations."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.conversations.Conversation",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "Conversation(org.bukkit.plugin.Plugin,org.bukkit.conversations.Conversable,org.bukkit.conversations.Prompt)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "firstPrompt"
              },
              {
                "kind": "PARAMETER",
                "name": "forWhom"
              },
              {
                "kind": "PARAMETER",
                "name": "plugin"
              }
            ],
            "comment": {
              "body": "Initializes a new Conversation.",
              "plain": "Initializes a new Conversation.\n@param plugin The plugin that owns this conversation.\n@param forWhom The entity for whom this conversation is mediating.\n@param firstPrompt The first prompt in the conversation graph."
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Conversation(org.bukkit.plugin.Plugin,org.bukkit.conversations.Conversable,org.bukkit.conversations.Prompt,java.util.Map\u003cjava.lang.Object,java.lang.Object\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "firstPrompt"
              },
              {
                "kind": "PARAMETER",
                "name": "forWhom"
              },
              {
                "kind": "PARAMETER",
                "name": "initialSessionData"
              },
              {
                "kind": "PARAMETER",
                "name": "plugin"
              }
            ],
            "comment": {
              "body": "Initializes a new Conversation.",
              "plain": "Initializes a new Conversation.\n@param plugin The plugin that owns this conversation.\n@param forWhom The entity for whom this conversation is mediating.\n@param firstPrompt The first prompt in the conversation graph.\n@param initialSessionData Any initial values to put in the conversation\n     context sessionData map."
            }
          },
          {
            "kind": "METHOD",
            "name": "abandon()",
            "comment": {
              "body": "Abandons and resets the current conversation. Restores the user\u0027s\n normal chat behavior.",
              "plain": "Abandons and resets the current conversation. Restores the user\u0027s\n normal chat behavior."
            }
          },
          {
            "kind": "METHOD",
            "name": "abandon(org.bukkit.conversations.ConversationAbandonedEvent)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "details"
              }
            ],
            "comment": {
              "body": "Abandons and resets the current conversation. Restores the user\u0027s\n normal chat behavior.",
              "plain": "Abandons and resets the current conversation. Restores the user\u0027s\n normal chat behavior.\n@param details Details about why the conversation was abandoned"
            }
          },
          {
            "kind": "FIELD",
            "name": "abandoned"
          },
          {
            "kind": "FIELD",
            "name": "abandonedListeners"
          },
          {
            "kind": "METHOD",
            "name": "acceptInput(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "input"
              }
            ],
            "comment": {
              "body": "Passes player input into the current prompt. The next prompt (as\n determined by the current prompt) is then displayed to the user.",
              "plain": "Passes player input into the current prompt. The next prompt (as\n determined by the current prompt) is then displayed to the user.\n@param input The user\u0027s chat text."
            }
          },
          {
            "kind": "METHOD",
            "name": "addConversationAbandonedListener(org.bukkit.conversations.ConversationAbandonedListener)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "listener"
              }
            ],
            "comment": {
              "body": "Adds a \u003ca href\u003d\"org/bukkit/conversations/ConversationAbandonedListener.html\" title\u003d\"interface in org.bukkit.conversations\"\u003e\u003ccode\u003eConversationAbandonedListener\u003c/code\u003e\u003c/a\u003e.",
              "plain": "Adds a {@link ConversationAbandonedListener}.\n@param listener The listener to add."
            }
          },
          {
            "kind": "METHOD",
            "name": "addConversationCanceller(org.bukkit.conversations.ConversationCanceller)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "canceller"
              }
            ],
            "comment": {
              "body": "Adds a \u003ca href\u003d\"org/bukkit/conversations/ConversationCanceller.html\" title\u003d\"interface in org.bukkit.conversations\"\u003e\u003ccode\u003eConversationCanceller\u003c/code\u003e\u003c/a\u003e to the cancellers collection.",
              "plain": "Adds a {@link ConversationCanceller} to the cancellers collection.\n@param canceller The {@link ConversationCanceller} to add."
            }
          },
          {
            "kind": "METHOD",
            "name": "begin()",
            "comment": {
              "body": "Displays the first prompt of this conversation and begins redirecting\n the user\u0027s chat responses.",
              "plain": "Displays the first prompt of this conversation and begins redirecting\n the user\u0027s chat responses."
            }
          },
          {
            "kind": "FIELD",
            "name": "cancellers"
          },
          {
            "kind": "FIELD",
            "name": "context"
          },
          {
            "kind": "FIELD",
            "name": "currentPrompt"
          },
          {
            "kind": "FIELD",
            "name": "firstPrompt"
          },
          {
            "kind": "METHOD",
            "name": "getCancellers()",
            "comment": {
              "body": "Gets the list of \u003ca href\u003d\"org/bukkit/conversations/ConversationCanceller.html\" title\u003d\"interface in org.bukkit.conversations\"\u003e\u003ccode\u003eConversationCanceller\u003c/code\u003e\u003c/a\u003es",
              "tags": "Returns The list..",
              "plain": "Gets the list of {@link ConversationCanceller}s\n@return The list."
            }
          },
          {
            "kind": "METHOD",
            "name": "getContext()",
            "comment": {
              "body": "Returns the Conversation\u0027s \u003ca href\u003d\"org/bukkit/conversations/ConversationContext.html\" title\u003d\"class in org.bukkit.conversations\"\u003e\u003ccode\u003eConversationContext\u003c/code\u003e\u003c/a\u003e.",
              "tags": "Returns The ConversationContext..",
              "plain": "Returns the Conversation\u0027s {@link ConversationContext}.\n@return The ConversationContext."
            }
          },
          {
            "kind": "METHOD",
            "name": "getForWhom()",
            "comment": {
              "body": "Gets the entity for whom this conversation is mediating.",
              "tags": "Returns The entity..",
              "plain": "Gets the entity for whom this conversation is mediating.\n@return The entity."
            }
          },
          {
            "kind": "METHOD",
            "name": "getPrefix()",
            "comment": {
              "body": "Gets the \u003ca href\u003d\"org/bukkit/conversations/ConversationPrefix.html\" title\u003d\"interface in org.bukkit.conversations\"\u003e\u003ccode\u003eConversationPrefix\u003c/code\u003e\u003c/a\u003e that prepends all output from this\n conversation.",
              "tags": "Returns The ConversationPrefix in use..",
              "plain": "Gets the {@link ConversationPrefix} that prepends all output from this\n conversation.\n@return The ConversationPrefix in use."
            }
          },
          {
            "kind": "METHOD",
            "name": "getState()",
            "comment": {
              "body": "Returns Returns the current state of the conversation.",
              "tags": "Returns The current state of the conversation..",
              "plain": "Returns Returns the current state of the conversation.\n@return The current state of the conversation."
            }
          },
          {
            "kind": "METHOD",
            "name": "isLocalEchoEnabled()",
            "comment": {
              "body": "Gets the status of local echo for this conversation. If local echo is\n enabled, any text submitted to a conversation gets echoed back into the\n submitter\u0027s chat window.",
              "tags": "Returns The status of local echo..",
              "plain": "Gets the status of local echo for this conversation. If local echo is\n enabled, any text submitted to a conversation gets echoed back into the\n submitter\u0027s chat window.\n@return The status of local echo."
            }
          },
          {
            "kind": "METHOD",
            "name": "isModal()",
            "comment": {
              "body": "Gets the modality of this conversation. If a conversation is modal, all\n messages directed to the player are suppressed for the duration of the\n conversation.",
              "tags": "Returns The conversation modality..",
              "plain": "Gets the modality of this conversation. If a conversation is modal, all\n messages directed to the player are suppressed for the duration of the\n conversation.\n@return The conversation modality."
            }
          },
          {
            "kind": "FIELD",
            "name": "localEchoEnabled"
          },
          {
            "kind": "FIELD",
            "name": "modal"
          },
          {
            "kind": "ENUM",
            "name": "org.bukkit.conversations.Conversation.ConversationState",
            "children": [
              {
                "kind": "ENUM_CONSTANT",
                "name": "ABANDONED"
              },
              {
                "kind": "CONSTRUCTOR",
                "name": "ConversationState()"
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "STARTED"
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "UNSTARTED"
              },
              {
                "kind": "METHOD",
                "name": "valueOf(java.lang.String)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "name"
                  }
                ]
              },
              {
                "kind": "METHOD",
                "name": "values()"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "outputNextPrompt()",
            "comment": {
              "body": "Displays the next user prompt and abandons the conversation if the next\n prompt is null.",
              "plain": "Displays the next user prompt and abandons the conversation if the next\n prompt is null."
            }
          },
          {
            "kind": "FIELD",
            "name": "prefix"
          },
          {
            "kind": "METHOD",
            "name": "removeConversationAbandonedListener(org.bukkit.conversations.ConversationAbandonedListener)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "listener"
              }
            ],
            "comment": {
              "body": "Removes a \u003ca href\u003d\"org/bukkit/conversations/ConversationAbandonedListener.html\" title\u003d\"interface in org.bukkit.conversations\"\u003e\u003ccode\u003eConversationAbandonedListener\u003c/code\u003e\u003c/a\u003e.",
              "plain": "Removes a {@link ConversationAbandonedListener}.\n@param listener The listener to remove."
            }
          },
          {
            "kind": "METHOD",
            "name": "setLocalEchoEnabled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "localEchoEnabled"
              }
            ],
            "comment": {
              "body": "Sets the status of local echo for this conversation. If local echo is\n enabled, any text submitted to a conversation gets echoed back into the\n submitter\u0027s chat window.",
              "plain": "Sets the status of local echo for this conversation. If local echo is\n enabled, any text submitted to a conversation gets echoed back into the\n submitter\u0027s chat window.\n@param localEchoEnabled The status of local echo."
            }
          },
          {
            "kind": "METHOD",
            "name": "setModal(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "modal"
              }
            ],
            "comment": {
              "body": "Sets the modality of this conversation.  If a conversation is modal,\n all messages directed to the player are suppressed for the duration of\n the conversation.",
              "plain": "Sets the modality of this conversation.  If a conversation is modal,\n all messages directed to the player are suppressed for the duration of\n the conversation.\n@param modal The new conversation modality."
            }
          },
          {
            "kind": "METHOD",
            "name": "setPrefix(org.bukkit.conversations.ConversationPrefix)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "prefix"
              }
            ],
            "comment": {
              "body": "Sets the \u003ca href\u003d\"org/bukkit/conversations/ConversationPrefix.html\" title\u003d\"interface in org.bukkit.conversations\"\u003e\u003ccode\u003eConversationPrefix\u003c/code\u003e\u003c/a\u003e that prepends all output from this\n conversation.",
              "plain": "Sets the {@link ConversationPrefix} that prepends all output from this\n conversation.\n@param prefix The ConversationPrefix to use."
            }
          }
        ],
        "comment": {
          "body": "The Conversation class is responsible for tracking the current state of a\n conversation, displaying prompts to the user, and dispatching the user\u0027s\n response to the appropriate place. Conversation objects are not typically\n instantiated directly. Instead a \u003ca href\u003d\"org/bukkit/conversations/ConversationFactory.html\" title\u003d\"class in org.bukkit.conversations\"\u003e\u003ccode\u003eConversationFactory\u003c/code\u003e\u003c/a\u003e is used to\n construct identical conversations on demand.\n \u003cp\u003e\n Conversation flow consists of a directed graph of \u003ca href\u003d\"org/bukkit/conversations/Prompt.html\" title\u003d\"interface in org.bukkit.conversations\"\u003e\u003ccode\u003ePrompt\u003c/code\u003e\u003c/a\u003e objects.\n Each time a prompt gets input from the user, it must return the next prompt\n in the graph. Since each Prompt chooses the next Prompt, complex\n conversation trees can be implemented where the nature of the player\u0027s\n response directs the flow of the conversation.\n \u003cp\u003e\n Each conversation has a \u003ca href\u003d\"org/bukkit/conversations/ConversationPrefix.html\" title\u003d\"interface in org.bukkit.conversations\"\u003e\u003ccode\u003eConversationPrefix\u003c/code\u003e\u003c/a\u003e that prepends all output\n from the conversation to the player. The ConversationPrefix can be used to\n display the plugin name or conversation status as the conversation evolves.\n \u003cp\u003e\n Each conversation has a timeout measured in the number of inactive seconds\n to wait before abandoning the conversation. If the inactivity timeout is\n reached, the conversation is abandoned and the user\u0027s incoming and outgoing\n chat is returned to normal.\n \u003cp\u003e\n You should not construct a conversation manually. Instead, use the \u003ca href\u003d\"org/bukkit/conversations/ConversationFactory.html\" title\u003d\"class in org.bukkit.conversations\"\u003e\u003ccode\u003eConversationFactory\u003c/code\u003e\u003c/a\u003e for access to all available options.",
          "plain": "The Conversation class is responsible for tracking the current state of a\n conversation, displaying prompts to the user, and dispatching the user\u0027s\n response to the appropriate place. Conversation objects are not typically\n instantiated directly. Instead a {@link ConversationFactory} is used to\n construct identical conversations on demand.\n \u003cp\u003e\n Conversation flow consists of a directed graph of {@link Prompt} objects.\n Each time a prompt gets input from the user, it must return the next prompt\n in the graph. Since each Prompt chooses the next Prompt, complex\n conversation trees can be implemented where the nature of the player\u0027s\n response directs the flow of the conversation.\n \u003cp\u003e\n Each conversation has a {@link ConversationPrefix} that prepends all output\n from the conversation to the player. The ConversationPrefix can be used to\n display the plugin name or conversation status as the conversation evolves.\n \u003cp\u003e\n Each conversation has a timeout measured in the number of inactive seconds\n to wait before abandoning the conversation. If the inactivity timeout is\n reached, the conversation is abandoned and the user\u0027s incoming and outgoing\n chat is returned to normal.\n \u003cp\u003e\n You should not construct a conversation manually. Instead, use the {@link ConversationFactory} for access to all available options."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.conversations.ConversationAbandonedEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "ConversationAbandonedEvent(org.bukkit.conversations.Conversation)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "conversation"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "ConversationAbandonedEvent(org.bukkit.conversations.Conversation,org.bukkit.conversations.ConversationCanceller)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "canceller"
              },
              {
                "kind": "PARAMETER",
                "name": "conversation"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "canceller"
          },
          {
            "kind": "FIELD",
            "name": "context"
          },
          {
            "kind": "METHOD",
            "name": "getCanceller()",
            "comment": {
              "body": "Gets the object that caused the conversation to be abandoned.",
              "tags": "Returns The object that abandoned the conversation..",
              "plain": "Gets the object that caused the conversation to be abandoned.\n@return The object that abandoned the conversation."
            }
          },
          {
            "kind": "METHOD",
            "name": "getContext()",
            "comment": {
              "body": "Gets the abandoned conversation\u0027s conversation context.",
              "tags": "Returns The abandoned conversation\u0027s conversation context..",
              "plain": "Gets the abandoned conversation\u0027s conversation context.\n@return The abandoned conversation\u0027s conversation context."
            }
          },
          {
            "kind": "METHOD",
            "name": "gracefulExit()",
            "comment": {
              "body": "Indicates how the conversation was abandoned - naturally as part of the\n prompt chain or prematurely via a \u003ca href\u003d\"org/bukkit/conversations/ConversationCanceller.html\" title\u003d\"interface in org.bukkit.conversations\"\u003e\u003ccode\u003eConversationCanceller\u003c/code\u003e\u003c/a\u003e.",
              "tags": "Returns True if the conversation is abandoned gracefully by a \u003ca href\u003d\"org/bukkit/conversations/Prompt.html\" title\u003d\"interface in org.bukkit.conversations\"\u003e\u003ccode\u003ePrompt\u003c/code\u003e\u003c/a\u003e returning null or the next prompt. False of the\n     conversations is abandoned prematurely by a ConversationCanceller..",
              "plain": "Indicates how the conversation was abandoned - naturally as part of the\n prompt chain or prematurely via a {@link ConversationCanceller}.\n@return True if the conversation is abandoned gracefully by a {@link Prompt} returning null or the next prompt. False of the\n     conversations is abandoned prematurely by a ConversationCanceller."
            }
          }
        ],
        "comment": {
          "body": "ConversationAbandonedEvent contains information about an abandoned\n conversation.",
          "plain": "ConversationAbandonedEvent contains information about an abandoned\n conversation."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.conversations.ConversationAbandonedListener",
        "children": [
          {
            "kind": "METHOD",
            "name": "conversationAbandoned(org.bukkit.conversations.ConversationAbandonedEvent)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "abandonedEvent"
              }
            ],
            "comment": {
              "body": "Called whenever a \u003ca href\u003d\"org/bukkit/conversations/Conversation.html\" title\u003d\"class in org.bukkit.conversations\"\u003e\u003ccode\u003eConversation\u003c/code\u003e\u003c/a\u003e is abandoned.",
              "plain": "Called whenever a {@link Conversation} is abandoned.\n@param abandonedEvent Contains details about the abandoned\n     conversation."
            }
          }
        ],
        "comment": {
          "plain": ""
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.conversations.ConversationCanceller",
        "children": [
          {
            "kind": "METHOD",
            "name": "cancelBasedOnInput(org.bukkit.conversations.ConversationContext,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "context"
              },
              {
                "kind": "PARAMETER",
                "name": "input"
              }
            ],
            "comment": {
              "body": "Cancels a conversation based on user input.",
              "tags": "Returns True to cancel the conversation, False otherwise..",
              "plain": "Cancels a conversation based on user input.\n@param context Context information about the conversation.\n@param input The input text from the user.\n@return True to cancel the conversation, False otherwise."
            }
          },
          {
            "kind": "METHOD",
            "name": "clone()",
            "comment": {
              "body": "Allows the \u003ca href\u003d\"org/bukkit/conversations/ConversationFactory.html\" title\u003d\"class in org.bukkit.conversations\"\u003e\u003ccode\u003eConversationFactory\u003c/code\u003e\u003c/a\u003e to duplicate this\n ConversationCanceller when creating a new \u003ca href\u003d\"org/bukkit/conversations/Conversation.html\" title\u003d\"class in org.bukkit.conversations\"\u003e\u003ccode\u003eConversation\u003c/code\u003e\u003c/a\u003e.\n \u003cp\u003e\n Implementing this method should reset any internal object state.",
              "tags": "Returns A clone..",
              "plain": "Allows the {@link ConversationFactory} to duplicate this\n ConversationCanceller when creating a new {@link Conversation}.\n \u003cp\u003e\n Implementing this method should reset any internal object state.\n@return A clone."
            }
          },
          {
            "kind": "METHOD",
            "name": "setConversation(org.bukkit.conversations.Conversation)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "conversation"
              }
            ],
            "comment": {
              "body": "Sets the conversation this ConversationCanceller can optionally cancel.",
              "plain": "Sets the conversation this ConversationCanceller can optionally cancel.\n@param conversation A conversation."
            }
          }
        ],
        "comment": {
          "body": "A ConversationCanceller is a class that cancels an active \u003ca href\u003d\"org/bukkit/conversations/Conversation.html\" title\u003d\"class in org.bukkit.conversations\"\u003e\u003ccode\u003eConversation\u003c/code\u003e\u003c/a\u003e. A Conversation can have more than one ConversationCanceller.",
          "plain": "A ConversationCanceller is a class that cancels an active {@link Conversation}. A Conversation can have more than one ConversationCanceller."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.conversations.ConversationContext",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "ConversationContext(org.bukkit.plugin.Plugin,org.bukkit.conversations.Conversable,java.util.Map\u003cjava.lang.Object,java.lang.Object\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "forWhom"
              },
              {
                "kind": "PARAMETER",
                "name": "initialSessionData"
              },
              {
                "kind": "PARAMETER",
                "name": "plugin"
              }
            ],
            "comment": {
              "plain": "@param plugin The owning plugin.\n@param forWhom The subject of the conversation.\n@param initialSessionData Any initial values to put in the sessionData\n     map."
            }
          },
          {
            "kind": "FIELD",
            "name": "forWhom"
          },
          {
            "kind": "METHOD",
            "name": "getAllSessionData()",
            "comment": {
              "body": "Gets the entire sessionData map.",
              "tags": "Returns The full sessionData map..",
              "plain": "Gets the entire sessionData map.\n@return The full sessionData map."
            }
          },
          {
            "kind": "METHOD",
            "name": "getForWhom()",
            "comment": {
              "body": "Gets the subject of the conversation.",
              "tags": "Returns The subject of the conversation..",
              "plain": "Gets the subject of the conversation.\n@return The subject of the conversation."
            }
          },
          {
            "kind": "METHOD",
            "name": "getPlugin()",
            "comment": {
              "body": "Gets the plugin that owns this conversation.",
              "tags": "Returns The owning plugin..",
              "plain": "Gets the plugin that owns this conversation.\n@return The owning plugin."
            }
          },
          {
            "kind": "METHOD",
            "name": "getSessionData(java.lang.Object)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "key"
              }
            ],
            "comment": {
              "body": "Gets session data shared between all \u003ca href\u003d\"org/bukkit/conversations/Prompt.html\" title\u003d\"interface in org.bukkit.conversations\"\u003e\u003ccode\u003ePrompt\u003c/code\u003e\u003c/a\u003e invocations. Use\n this as a way to pass data through each Prompt as the conversation\n develops.",
              "tags": "Returns The requested session data..",
              "plain": "Gets session data shared between all {@link Prompt} invocations. Use\n this as a way to pass data through each Prompt as the conversation\n develops.\n@param key The session data key.\n@return The requested session data."
            }
          },
          {
            "kind": "FIELD",
            "name": "plugin"
          },
          {
            "kind": "FIELD",
            "name": "sessionData"
          },
          {
            "kind": "METHOD",
            "name": "setSessionData(java.lang.Object,java.lang.Object)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "key"
              },
              {
                "kind": "PARAMETER",
                "name": "value"
              }
            ],
            "comment": {
              "body": "Sets session data shared between all \u003ca href\u003d\"org/bukkit/conversations/Prompt.html\" title\u003d\"interface in org.bukkit.conversations\"\u003e\u003ccode\u003ePrompt\u003c/code\u003e\u003c/a\u003e invocations. Use\n this as a way to pass data through each prompt as the conversation\n develops.",
              "plain": "Sets session data shared between all {@link Prompt} invocations. Use\n this as a way to pass data through each prompt as the conversation\n develops.\n@param key The session data key.\n@param value The session data value."
            }
          }
        ],
        "comment": {
          "body": "A ConversationContext provides continuity between nodes in the prompt graph\n by giving the developer access to the subject of the conversation and a\n generic map for storing values that are shared between all \u003ca href\u003d\"org/bukkit/conversations/Prompt.html\" title\u003d\"interface in org.bukkit.conversations\"\u003e\u003ccode\u003ePrompt\u003c/code\u003e\u003c/a\u003e\n invocations.",
          "plain": "A ConversationContext provides continuity between nodes in the prompt graph\n by giving the developer access to the subject of the conversation and a\n generic map for storing values that are shared between all {@link Prompt}\n invocations."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.conversations.ConversationFactory",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "ConversationFactory(org.bukkit.plugin.Plugin)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "plugin"
              }
            ],
            "comment": {
              "body": "Constructs a ConversationFactory.",
              "plain": "Constructs a ConversationFactory.\n@param plugin The plugin that owns the factory."
            }
          },
          {
            "kind": "FIELD",
            "name": "abandonedListeners"
          },
          {
            "kind": "METHOD",
            "name": "addConversationAbandonedListener(org.bukkit.conversations.ConversationAbandonedListener)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "listener"
              }
            ],
            "comment": {
              "body": "Adds a \u003ca href\u003d\"org/bukkit/conversations/ConversationAbandonedListener.html\" title\u003d\"interface in org.bukkit.conversations\"\u003e\u003ccode\u003eConversationAbandonedListener\u003c/code\u003e\u003c/a\u003e to all conversations\n constructed by this factory.",
              "tags": "Returns This object..",
              "plain": "Adds a {@link ConversationAbandonedListener} to all conversations\n constructed by this factory.\n@param listener The listener to add.\n@return This object."
            }
          },
          {
            "kind": "METHOD",
            "name": "buildConversation(org.bukkit.conversations.Conversable)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "forWhom"
              }
            ],
            "comment": {
              "body": "Constructs a \u003ca href\u003d\"org/bukkit/conversations/Conversation.html\" title\u003d\"class in org.bukkit.conversations\"\u003e\u003ccode\u003eConversation\u003c/code\u003e\u003c/a\u003e in accordance with the defaults set\n for this factory.",
              "tags": "Returns A new conversation..",
              "plain": "Constructs a {@link Conversation} in accordance with the defaults set\n for this factory.\n@param forWhom The entity for whom the new conversation is mediating.\n@return A new conversation."
            }
          },
          {
            "kind": "FIELD",
            "name": "cancellers"
          },
          {
            "kind": "FIELD",
            "name": "firstPrompt"
          },
          {
            "kind": "FIELD",
            "name": "initialSessionData"
          },
          {
            "kind": "FIELD",
            "name": "isModal"
          },
          {
            "kind": "FIELD",
            "name": "localEchoEnabled"
          },
          {
            "kind": "CLASS",
            "name": "org.bukkit.conversations.ConversationFactory.NotPlayerMessagePrompt",
            "children": [
              {
                "kind": "CONSTRUCTOR",
                "name": "NotPlayerMessagePrompt()"
              },
              {
                "kind": "METHOD",
                "name": "getNextPrompt(org.bukkit.conversations.ConversationContext)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "context"
                  }
                ]
              },
              {
                "kind": "METHOD",
                "name": "getPromptText(org.bukkit.conversations.ConversationContext)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "context"
                  }
                ]
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "playerOnlyMessage"
          },
          {
            "kind": "FIELD",
            "name": "plugin"
          },
          {
            "kind": "FIELD",
            "name": "prefix"
          },
          {
            "kind": "METHOD",
            "name": "thatExcludesNonPlayersWithMessage(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "playerOnlyMessage"
              }
            ],
            "comment": {
              "body": "Prevents this factory from creating a conversation for non-player\n \u003ca href\u003d\"org/bukkit/conversations/Conversable.html\" title\u003d\"interface in org.bukkit.conversations\"\u003e\u003ccode\u003eConversable\u003c/code\u003e\u003c/a\u003e objects.",
              "tags": "Returns This object..",
              "plain": "Prevents this factory from creating a conversation for non-player\n {@link Conversable} objects.\n@param playerOnlyMessage The message to return to a non-play in lieu of\n     starting a conversation.\n@return This object."
            }
          },
          {
            "kind": "METHOD",
            "name": "withConversationCanceller(org.bukkit.conversations.ConversationCanceller)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "canceller"
              }
            ],
            "comment": {
              "body": "Adds a \u003ca href\u003d\"org/bukkit/conversations/ConversationCanceller.html\" title\u003d\"interface in org.bukkit.conversations\"\u003e\u003ccode\u003eConversationCanceller\u003c/code\u003e\u003c/a\u003e to constructed conversations.",
              "tags": "Returns This object..",
              "plain": "Adds a {@link ConversationCanceller} to constructed conversations.\n@param canceller The {@link ConversationCanceller} to add.\n@return This object."
            }
          },
          {
            "kind": "METHOD",
            "name": "withEscapeSequence(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "escapeSequence"
              }
            ],
            "comment": {
              "body": "Sets the player input that, when received, will immediately terminate\n the conversation.",
              "tags": "Returns This object..",
              "plain": "Sets the player input that, when received, will immediately terminate\n the conversation.\n@param escapeSequence Input to terminate the conversation.\n@return This object."
            }
          },
          {
            "kind": "METHOD",
            "name": "withFirstPrompt(org.bukkit.conversations.Prompt)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "firstPrompt"
              }
            ],
            "comment": {
              "body": "Sets the first prompt to use in all generated conversations.\n \u003cp\u003e\n The default is Prompt.END_OF_CONVERSATION.",
              "tags": "Returns This object..",
              "plain": "Sets the first prompt to use in all generated conversations.\n \u003cp\u003e\n The default is Prompt.END_OF_CONVERSATION.\n@param firstPrompt The first prompt.\n@return This object."
            }
          },
          {
            "kind": "METHOD",
            "name": "withInitialSessionData(java.util.Map\u003cjava.lang.Object,java.lang.Object\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "initialSessionData"
              }
            ],
            "comment": {
              "body": "Sets any initial data with which to populate the conversation context\n sessionData map.",
              "tags": "Returns This object..",
              "plain": "Sets any initial data with which to populate the conversation context\n sessionData map.\n@param initialSessionData The conversation context\u0027s initial\n     sessionData.\n@return This object."
            }
          },
          {
            "kind": "METHOD",
            "name": "withLocalEcho(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "localEchoEnabled"
              }
            ],
            "comment": {
              "body": "Sets the local echo status for all \u003ca href\u003d\"org/bukkit/conversations/Conversation.html\" title\u003d\"class in org.bukkit.conversations\"\u003e\u003ccode\u003eConversation\u003c/code\u003e\u003c/a\u003es created by\n this factory. If local echo is enabled, any text submitted to a\n conversation gets echoed back into the submitter\u0027s chat window.",
              "tags": "Returns This object..",
              "plain": "Sets the local echo status for all {@link Conversation}s created by\n this factory. If local echo is enabled, any text submitted to a\n conversation gets echoed back into the submitter\u0027s chat window.\n@param localEchoEnabled The status of local echo.\n@return This object."
            }
          },
          {
            "kind": "METHOD",
            "name": "withModality(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "modal"
              }
            ],
            "comment": {
              "body": "Sets the modality of all \u003ca href\u003d\"org/bukkit/conversations/Conversation.html\" title\u003d\"class in org.bukkit.conversations\"\u003e\u003ccode\u003eConversation\u003c/code\u003e\u003c/a\u003es created by this factory.\n If a conversation is modal, all messages directed to the player are\n suppressed for the duration of the conversation.\n \u003cp\u003e\n The default is True.",
              "tags": "Returns This object..",
              "plain": "Sets the modality of all {@link Conversation}s created by this factory.\n If a conversation is modal, all messages directed to the player are\n suppressed for the duration of the conversation.\n \u003cp\u003e\n The default is True.\n@param modal The modality of all conversations to be created.\n@return This object."
            }
          },
          {
            "kind": "METHOD",
            "name": "withPrefix(org.bukkit.conversations.ConversationPrefix)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "prefix"
              }
            ],
            "comment": {
              "body": "Sets the \u003ca href\u003d\"org/bukkit/conversations/ConversationPrefix.html\" title\u003d\"interface in org.bukkit.conversations\"\u003e\u003ccode\u003eConversationPrefix\u003c/code\u003e\u003c/a\u003e that prepends all output from all\n generated conversations.\n \u003cp\u003e\n The default is a \u003ca href\u003d\"org/bukkit/conversations/NullConversationPrefix.html\" title\u003d\"class in org.bukkit.conversations\"\u003e\u003ccode\u003eNullConversationPrefix\u003c/code\u003e\u003c/a\u003e;",
              "tags": "Returns This object..",
              "plain": "Sets the {@link ConversationPrefix} that prepends all output from all\n generated conversations.\n \u003cp\u003e\n The default is a {@link NullConversationPrefix};\n@param prefix The ConversationPrefix to use.\n@return This object."
            }
          },
          {
            "kind": "METHOD",
            "name": "withTimeout(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "timeoutSeconds"
              }
            ],
            "comment": {
              "body": "Sets the number of inactive seconds to wait before automatically\n abandoning all generated conversations.\n \u003cp\u003e\n The default is 600 seconds (5 minutes).",
              "tags": "Returns This object..",
              "plain": "Sets the number of inactive seconds to wait before automatically\n abandoning all generated conversations.\n \u003cp\u003e\n The default is 600 seconds (5 minutes).\n@param timeoutSeconds The number of seconds to wait.\n@return This object."
            }
          }
        ],
        "comment": {
          "body": "A ConversationFactory is responsible for creating a \u003ca href\u003d\"org/bukkit/conversations/Conversation.html\" title\u003d\"class in org.bukkit.conversations\"\u003e\u003ccode\u003eConversation\u003c/code\u003e\u003c/a\u003e\n from a predefined template. A ConversationFactory is typically created when\n a plugin is instantiated and builds a Conversation each time a user\n initiates a conversation with the plugin. Each Conversation maintains its\n own state and calls back as needed into the plugin.\n \u003cp\u003e\n The ConversationFactory implements a fluid API, allowing parameters to be\n set as an extension to the constructor.",
          "plain": "A ConversationFactory is responsible for creating a {@link Conversation}\n from a predefined template. A ConversationFactory is typically created when\n a plugin is instantiated and builds a Conversation each time a user\n initiates a conversation with the plugin. Each Conversation maintains its\n own state and calls back as needed into the plugin.\n \u003cp\u003e\n The ConversationFactory implements a fluid API, allowing parameters to be\n set as an extension to the constructor."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.conversations.ConversationPrefix",
        "children": [
          {
            "kind": "METHOD",
            "name": "getPrefix(org.bukkit.conversations.ConversationContext)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "context"
              }
            ],
            "comment": {
              "body": "Gets the prefix to use before each message to the player.",
              "tags": "Returns The prefix text..",
              "plain": "Gets the prefix to use before each message to the player.\n@param context Context information about the conversation.\n@return The prefix text."
            }
          }
        ],
        "comment": {
          "body": "A ConversationPrefix implementation prepends all output from the\n conversation to the player. The ConversationPrefix can be used to display\n the plugin name or conversation status as the conversation evolves.",
          "plain": "A ConversationPrefix implementation prepends all output from the\n conversation to the player. The ConversationPrefix can be used to display\n the plugin name or conversation status as the conversation evolves."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.conversations.ExactMatchConversationCanceller",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "ExactMatchConversationCanceller(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "escapeSequence"
              }
            ],
            "comment": {
              "body": "Builds an ExactMatchConversationCanceller.",
              "plain": "Builds an ExactMatchConversationCanceller.\n@param escapeSequence The string that, if entered by the user, will\n     cancel the conversation."
            }
          },
          {
            "kind": "METHOD",
            "name": "cancelBasedOnInput(org.bukkit.conversations.ConversationContext,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "context"
              },
              {
                "kind": "PARAMETER",
                "name": "input"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "clone()"
          },
          {
            "kind": "FIELD",
            "name": "escapeSequence"
          },
          {
            "kind": "METHOD",
            "name": "setConversation(org.bukkit.conversations.Conversation)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "conversation"
              }
            ]
          }
        ],
        "comment": {
          "body": "An ExactMatchConversationCanceller cancels a conversation if the user\n enters an exact input string",
          "plain": "An ExactMatchConversationCanceller cancels a conversation if the user\n enters an exact input string"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.conversations.FixedSetPrompt",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "FixedSetPrompt()"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "FixedSetPrompt(java.lang.String...)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "fixedSet"
              }
            ],
            "comment": {
              "body": "Creates a FixedSetPrompt from a set of strings.\n \u003cp\u003e\n foo \u003d new FixedSetPrompt(\"bar\", \"cheese\", \"panda\");",
              "plain": "Creates a FixedSetPrompt from a set of strings.\n \u003cp\u003e\n foo \u003d new FixedSetPrompt(\"bar\", \"cheese\", \"panda\");\n@param fixedSet A fixed set of strings, one of which the user must\n     type."
            }
          },
          {
            "kind": "FIELD",
            "name": "fixedSet"
          },
          {
            "kind": "METHOD",
            "name": "formatFixedSet()",
            "comment": {
              "body": "Utility function to create a formatted string containing all the\n options declared in the constructor.",
              "tags": "Returns the options formatted like \"[bar, cheese, panda]\" if bar,\n     cheese, and panda were the options used.",
              "plain": "Utility function to create a formatted string containing all the\n options declared in the constructor.\n@return the options formatted like \"[bar, cheese, panda]\" if bar,\n     cheese, and panda were the options used"
            }
          },
          {
            "kind": "METHOD",
            "name": "isInputValid(org.bukkit.conversations.ConversationContext,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "context"
              },
              {
                "kind": "PARAMETER",
                "name": "input"
              }
            ]
          }
        ],
        "comment": {
          "body": "FixedSetPrompt is the base class for any prompt that requires a fixed set\n response from the user.",
          "plain": "FixedSetPrompt is the base class for any prompt that requires a fixed set\n response from the user."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.conversations.InactivityConversationCanceller",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "InactivityConversationCanceller(org.bukkit.plugin.Plugin,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "plugin"
              },
              {
                "kind": "PARAMETER",
                "name": "timeoutSeconds"
              }
            ],
            "comment": {
              "body": "Creates an InactivityConversationCanceller.",
              "plain": "Creates an InactivityConversationCanceller.\n@param plugin The owning plugin.\n@param timeoutSeconds The number of seconds of inactivity to wait."
            }
          },
          {
            "kind": "METHOD",
            "name": "cancelBasedOnInput(org.bukkit.conversations.ConversationContext,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "context"
              },
              {
                "kind": "PARAMETER",
                "name": "input"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "cancelling(org.bukkit.conversations.Conversation)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "conversation"
              }
            ],
            "comment": {
              "body": "Subclasses of InactivityConversationCanceller can override this method\n to take additional actions when the inactivity timer abandons the\n conversation.",
              "plain": "Subclasses of InactivityConversationCanceller can override this method\n to take additional actions when the inactivity timer abandons the\n conversation.\n@param conversation The conversation being abandoned."
            }
          },
          {
            "kind": "METHOD",
            "name": "clone()"
          },
          {
            "kind": "FIELD",
            "name": "conversation"
          },
          {
            "kind": "FIELD",
            "name": "plugin"
          },
          {
            "kind": "METHOD",
            "name": "setConversation(org.bukkit.conversations.Conversation)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "conversation"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "startTimer()",
            "comment": {
              "body": "Starts an inactivity timer.",
              "plain": "Starts an inactivity timer."
            }
          },
          {
            "kind": "METHOD",
            "name": "stopTimer()",
            "comment": {
              "body": "Stops the active inactivity timer.",
              "plain": "Stops the active inactivity timer."
            }
          },
          {
            "kind": "FIELD",
            "name": "taskId"
          },
          {
            "kind": "FIELD",
            "name": "timeoutSeconds"
          }
        ],
        "comment": {
          "body": "An InactivityConversationCanceller will cancel a \u003ca href\u003d\"org/bukkit/conversations/Conversation.html\" title\u003d\"class in org.bukkit.conversations\"\u003e\u003ccode\u003eConversation\u003c/code\u003e\u003c/a\u003e after\n a period of inactivity by the user.",
          "plain": "An InactivityConversationCanceller will cancel a {@link Conversation} after\n a period of inactivity by the user."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.conversations.ManuallyAbandonedConversationCanceller",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "ManuallyAbandonedConversationCanceller()"
          },
          {
            "kind": "METHOD",
            "name": "cancelBasedOnInput(org.bukkit.conversations.ConversationContext,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "context"
              },
              {
                "kind": "PARAMETER",
                "name": "input"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "clone()"
          },
          {
            "kind": "METHOD",
            "name": "setConversation(org.bukkit.conversations.Conversation)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "conversation"
              }
            ]
          }
        ],
        "comment": {
          "body": "The ManuallyAbandonedConversationCanceller is only used as part of a \u003ca href\u003d\"org/bukkit/conversations/ConversationAbandonedEvent.html\" title\u003d\"class in org.bukkit.conversations\"\u003e\u003ccode\u003eConversationAbandonedEvent\u003c/code\u003e\u003c/a\u003e to indicate that the conversation was manually\n abandoned by programmatically calling the abandon() method on it.",
          "plain": "The ManuallyAbandonedConversationCanceller is only used as part of a {@link ConversationAbandonedEvent} to indicate that the conversation was manually\n abandoned by programmatically calling the abandon() method on it."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.conversations.MessagePrompt",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "MessagePrompt()"
          },
          {
            "kind": "METHOD",
            "name": "acceptInput(org.bukkit.conversations.ConversationContext,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "context"
              },
              {
                "kind": "PARAMETER",
                "name": "input"
              }
            ],
            "comment": {
              "body": "Accepts and ignores any user input, returning the next prompt in the\n prompt graph instead.",
              "tags": "Returns The next prompt in the prompt graph..",
              "plain": "Accepts and ignores any user input, returning the next prompt in the\n prompt graph instead.\n@param context Context information about the conversation.\n@param input Ignored.\n@return The next prompt in the prompt graph."
            }
          },
          {
            "kind": "METHOD",
            "name": "blocksForInput(org.bukkit.conversations.ConversationContext)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "context"
              }
            ],
            "comment": {
              "body": "Message prompts never wait for user input before continuing.",
              "tags": "Returns Always false..",
              "plain": "Message prompts never wait for user input before continuing.\n@param context Context information about the conversation.\n@return Always false."
            }
          },
          {
            "kind": "METHOD",
            "name": "getNextPrompt(org.bukkit.conversations.ConversationContext)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "context"
              }
            ],
            "comment": {
              "body": "Override this method to return the next prompt in the prompt graph.",
              "tags": "Returns The next prompt in the prompt graph..",
              "plain": "Override this method to return the next prompt in the prompt graph.\n@param context Context information about the conversation.\n@return The next prompt in the prompt graph."
            }
          }
        ],
        "comment": {
          "body": "MessagePrompt is the base class for any prompt that only displays a message\n to the user and requires no input.",
          "plain": "MessagePrompt is the base class for any prompt that only displays a message\n to the user and requires no input."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.conversations.NullConversationPrefix",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "NullConversationPrefix()"
          },
          {
            "kind": "METHOD",
            "name": "getPrefix(org.bukkit.conversations.ConversationContext)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "context"
              }
            ],
            "comment": {
              "body": "Prepends each conversation message with an empty string.",
              "tags": "Returns An empty string..",
              "plain": "Prepends each conversation message with an empty string.\n@param context Context information about the conversation.\n@return An empty string."
            }
          }
        ],
        "comment": {
          "body": "NullConversationPrefix is a \u003ca href\u003d\"org/bukkit/conversations/ConversationPrefix.html\" title\u003d\"interface in org.bukkit.conversations\"\u003e\u003ccode\u003eConversationPrefix\u003c/code\u003e\u003c/a\u003e implementation that\n displays nothing in front of conversation output.",
          "plain": "NullConversationPrefix is a {@link ConversationPrefix} implementation that\n displays nothing in front of conversation output."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.conversations.NumericPrompt",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "NumericPrompt()"
          },
          {
            "kind": "METHOD",
            "name": "acceptValidatedInput(org.bukkit.conversations.ConversationContext,java.lang.Number)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "context"
              },
              {
                "kind": "PARAMETER",
                "name": "input"
              }
            ],
            "comment": {
              "body": "Override this method to perform some action with the user\u0027s integer\n response.",
              "tags": "Returns The next \u003ca href\u003d\"org/bukkit/conversations/Prompt.html\" title\u003d\"interface in org.bukkit.conversations\"\u003e\u003ccode\u003ePrompt\u003c/code\u003e\u003c/a\u003e in the prompt graph..",
              "plain": "Override this method to perform some action with the user\u0027s integer\n response.\n@param context Context information about the conversation.\n@param input The user\u0027s response as a {@link Number}.\n@return The next {@link Prompt} in the prompt graph."
            }
          },
          {
            "kind": "METHOD",
            "name": "acceptValidatedInput(org.bukkit.conversations.ConversationContext,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "context"
              },
              {
                "kind": "PARAMETER",
                "name": "input"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getFailedValidationText(org.bukkit.conversations.ConversationContext,java.lang.Number)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "context"
              },
              {
                "kind": "PARAMETER",
                "name": "invalidInput"
              }
            ],
            "comment": {
              "body": "Optionally override this method to display an additional message if the\n user enters an invalid numeric input.",
              "tags": "Returns A message explaining how to correct the input..",
              "plain": "Optionally override this method to display an additional message if the\n user enters an invalid numeric input.\n@param context Context information about the conversation.\n@param invalidInput The invalid input provided by the user.\n@return A message explaining how to correct the input."
            }
          },
          {
            "kind": "METHOD",
            "name": "getFailedValidationText(org.bukkit.conversations.ConversationContext,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "context"
              },
              {
                "kind": "PARAMETER",
                "name": "invalidInput"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getInputNotNumericText(org.bukkit.conversations.ConversationContext,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "context"
              },
              {
                "kind": "PARAMETER",
                "name": "invalidInput"
              }
            ],
            "comment": {
              "body": "Optionally override this method to display an additional message if the\n user enters an invalid number.",
              "tags": "Returns A message explaining how to correct the input..",
              "plain": "Optionally override this method to display an additional message if the\n user enters an invalid number.\n@param context Context information about the conversation.\n@param invalidInput The invalid input provided by the user.\n@return A message explaining how to correct the input."
            }
          },
          {
            "kind": "METHOD",
            "name": "isInputValid(org.bukkit.conversations.ConversationContext,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "context"
              },
              {
                "kind": "PARAMETER",
                "name": "input"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "isNumberValid(org.bukkit.conversations.ConversationContext,java.lang.Number)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "context"
              },
              {
                "kind": "PARAMETER",
                "name": "input"
              }
            ],
            "comment": {
              "body": "Override this method to do further validation on the numeric player\n input after the input has been determined to actually be a number.",
              "tags": "Returns The validity of the player\u0027s input..",
              "plain": "Override this method to do further validation on the numeric player\n input after the input has been determined to actually be a number.\n@param context Context information about the conversation.\n@param input The number the player provided.\n@return The validity of the player\u0027s input."
            }
          }
        ],
        "comment": {
          "body": "NumericPrompt is the base class for any prompt that requires a \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/lang/Number.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003e\u003ccode\u003eNumber\u003c/code\u003e\u003c/a\u003e response from the user.",
          "plain": "NumericPrompt is the base class for any prompt that requires a {@link Number} response from the user."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.conversations.PlayerNamePrompt",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PlayerNamePrompt(org.bukkit.plugin.Plugin)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "plugin"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "acceptValidatedInput(org.bukkit.conversations.ConversationContext,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "context"
              },
              {
                "kind": "PARAMETER",
                "name": "input"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "acceptValidatedInput(org.bukkit.conversations.ConversationContext,org.bukkit.entity.Player)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "context"
              },
              {
                "kind": "PARAMETER",
                "name": "input"
              }
            ],
            "comment": {
              "body": "Override this method to perform some action with the user\u0027s player name\n response.",
              "tags": "Returns The next \u003ca href\u003d\"org/bukkit/conversations/Prompt.html\" title\u003d\"interface in org.bukkit.conversations\"\u003e\u003ccode\u003ePrompt\u003c/code\u003e\u003c/a\u003e in the prompt graph..",
              "plain": "Override this method to perform some action with the user\u0027s player name\n response.\n@param context Context information about the conversation.\n@param input The user\u0027s player name response.\n@return The next {@link Prompt} in the prompt graph."
            }
          },
          {
            "kind": "METHOD",
            "name": "isInputValid(org.bukkit.conversations.ConversationContext,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "context"
              },
              {
                "kind": "PARAMETER",
                "name": "input"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "plugin"
          }
        ],
        "comment": {
          "body": "PlayerNamePrompt is the base class for any prompt that requires the player\n to enter another player\u0027s name.",
          "plain": "PlayerNamePrompt is the base class for any prompt that requires the player\n to enter another player\u0027s name."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.conversations.PluginNameConversationPrefix",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PluginNameConversationPrefix(org.bukkit.plugin.Plugin)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "plugin"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "PluginNameConversationPrefix(org.bukkit.plugin.Plugin,java.lang.String,org.bukkit.ChatColor)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "plugin"
              },
              {
                "kind": "PARAMETER",
                "name": "prefixColor"
              },
              {
                "kind": "PARAMETER",
                "name": "separator"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "cachedPrefix"
          },
          {
            "kind": "METHOD",
            "name": "getPrefix(org.bukkit.conversations.ConversationContext)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "context"
              }
            ],
            "comment": {
              "body": "Prepends each conversation message with the plugin name.",
              "tags": "Returns An empty string..",
              "plain": "Prepends each conversation message with the plugin name.\n@param context Context information about the conversation.\n@return An empty string."
            }
          },
          {
            "kind": "FIELD",
            "name": "plugin"
          },
          {
            "kind": "FIELD",
            "name": "prefixColor"
          },
          {
            "kind": "FIELD",
            "name": "separator"
          }
        ],
        "comment": {
          "body": "PluginNameConversationPrefix is a \u003ca href\u003d\"org/bukkit/conversations/ConversationPrefix.html\" title\u003d\"interface in org.bukkit.conversations\"\u003e\u003ccode\u003eConversationPrefix\u003c/code\u003e\u003c/a\u003e implementation\n that displays the plugin name in front of conversation output.",
          "plain": "PluginNameConversationPrefix is a {@link ConversationPrefix} implementation\n that displays the plugin name in front of conversation output."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.conversations.Prompt",
        "children": [
          {
            "kind": "FIELD",
            "name": "END_OF_CONVERSATION",
            "comment": {
              "body": "A convenience constant for indicating the end of a conversation.",
              "plain": "A convenience constant for indicating the end of a conversation."
            }
          },
          {
            "kind": "METHOD",
            "name": "acceptInput(org.bukkit.conversations.ConversationContext,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "context"
              },
              {
                "kind": "PARAMETER",
                "name": "input"
              }
            ],
            "comment": {
              "body": "Accepts and processes input from the user. Using the input, the next\n Prompt in the prompt graph is returned.",
              "tags": "Returns The next Prompt in the prompt graph..",
              "plain": "Accepts and processes input from the user. Using the input, the next\n Prompt in the prompt graph is returned.\n@param context Context information about the conversation.\n@param input The input text from the user.\n@return The next Prompt in the prompt graph."
            }
          },
          {
            "kind": "METHOD",
            "name": "blocksForInput(org.bukkit.conversations.ConversationContext)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "context"
              }
            ],
            "comment": {
              "body": "Checks to see if this prompt implementation should wait for user input\n or immediately display the next prompt.",
              "tags": "Returns If true, the \u003ca href\u003d\"org/bukkit/conversations/Conversation.html\" title\u003d\"class in org.bukkit.conversations\"\u003e\u003ccode\u003eConversation\u003c/code\u003e\u003c/a\u003e will wait for input before\n     continuing..",
              "plain": "Checks to see if this prompt implementation should wait for user input\n or immediately display the next prompt.\n@param context Context information about the conversation.\n@return If true, the {@link Conversation} will wait for input before\n     continuing."
            }
          },
          {
            "kind": "METHOD",
            "name": "getPromptText(org.bukkit.conversations.ConversationContext)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "context"
              }
            ],
            "comment": {
              "body": "Gets the text to display to the user when this prompt is first\n presented.",
              "tags": "Returns The text to display..",
              "plain": "Gets the text to display to the user when this prompt is first\n presented.\n@param context Context information about the conversation.\n@return The text to display."
            }
          }
        ],
        "comment": {
          "body": "A Prompt is the main constituent of a \u003ca href\u003d\"org/bukkit/conversations/Conversation.html\" title\u003d\"class in org.bukkit.conversations\"\u003e\u003ccode\u003eConversation\u003c/code\u003e\u003c/a\u003e. Each prompt\n displays text to the user and optionally waits for a user\u0027s response.\n Prompts are chained together into a directed graph that represents the\n conversation flow. To halt a conversation, END_OF_CONVERSATION is returned\n in liu of another Prompt object.",
          "plain": "A Prompt is the main constituent of a {@link Conversation}. Each prompt\n displays text to the user and optionally waits for a user\u0027s response.\n Prompts are chained together into a directed graph that represents the\n conversation flow. To halt a conversation, END_OF_CONVERSATION is returned\n in liu of another Prompt object."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.conversations.RegexPrompt",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "RegexPrompt()"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "RegexPrompt(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "regex"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "RegexPrompt(java.util.regex.Pattern)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "pattern"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "isInputValid(org.bukkit.conversations.ConversationContext,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "context"
              },
              {
                "kind": "PARAMETER",
                "name": "input"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "pattern"
          }
        ],
        "comment": {
          "body": "RegexPrompt is the base class for any prompt that requires an input\n validated by a regular expression.",
          "plain": "RegexPrompt is the base class for any prompt that requires an input\n validated by a regular expression."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.conversations.StringPrompt",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "StringPrompt()"
          },
          {
            "kind": "METHOD",
            "name": "blocksForInput(org.bukkit.conversations.ConversationContext)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "context"
              }
            ],
            "comment": {
              "body": "Ensures that the prompt waits for the user to provide input.",
              "tags": "Returns True..",
              "plain": "Ensures that the prompt waits for the user to provide input.\n@param context Context information about the conversation.\n@return True."
            }
          }
        ],
        "comment": {
          "body": "StringPrompt is the base class for any prompt that accepts an arbitrary\n string from the user.",
          "plain": "StringPrompt is the base class for any prompt that accepts an arbitrary\n string from the user."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.conversations.ValidatingPrompt",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "ValidatingPrompt()"
          },
          {
            "kind": "METHOD",
            "name": "acceptInput(org.bukkit.conversations.ConversationContext,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "context"
              },
              {
                "kind": "PARAMETER",
                "name": "input"
              }
            ],
            "comment": {
              "body": "Accepts and processes input from the user and validates it. If\n validation fails, this prompt is returned for re-execution, otherwise\n the next Prompt in the prompt graph is returned.",
              "tags": "Returns This prompt or the next Prompt in the prompt graph..",
              "plain": "Accepts and processes input from the user and validates it. If\n validation fails, this prompt is returned for re-execution, otherwise\n the next Prompt in the prompt graph is returned.\n@param context Context information about the conversation.\n@param input The input text from the user.\n@return This prompt or the next Prompt in the prompt graph."
            }
          },
          {
            "kind": "METHOD",
            "name": "acceptValidatedInput(org.bukkit.conversations.ConversationContext,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "context"
              },
              {
                "kind": "PARAMETER",
                "name": "input"
              }
            ],
            "comment": {
              "body": "Override this method to accept and processes the validated input from\n the user. Using the input, the next Prompt in the prompt graph should\n be returned.",
              "tags": "Returns The next Prompt in the prompt graph..",
              "plain": "Override this method to accept and processes the validated input from\n the user. Using the input, the next Prompt in the prompt graph should\n be returned.\n@param context Context information about the conversation.\n@param input The validated input text from the user.\n@return The next Prompt in the prompt graph."
            }
          },
          {
            "kind": "METHOD",
            "name": "blocksForInput(org.bukkit.conversations.ConversationContext)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "context"
              }
            ],
            "comment": {
              "body": "Ensures that the prompt waits for the user to provide input.",
              "tags": "Returns True..",
              "plain": "Ensures that the prompt waits for the user to provide input.\n@param context Context information about the conversation.\n@return True."
            }
          },
          {
            "kind": "METHOD",
            "name": "getFailedValidationText(org.bukkit.conversations.ConversationContext,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "context"
              },
              {
                "kind": "PARAMETER",
                "name": "invalidInput"
              }
            ],
            "comment": {
              "body": "Optionally override this method to display an additional message if the\n user enters an invalid input.",
              "tags": "Returns A message explaining how to correct the input..",
              "plain": "Optionally override this method to display an additional message if the\n user enters an invalid input.\n@param context Context information about the conversation.\n@param invalidInput The invalid input provided by the user.\n@return A message explaining how to correct the input."
            }
          },
          {
            "kind": "METHOD",
            "name": "isInputValid(org.bukkit.conversations.ConversationContext,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "context"
              },
              {
                "kind": "PARAMETER",
                "name": "input"
              }
            ],
            "comment": {
              "body": "Override this method to check the validity of the player\u0027s input.",
              "tags": "Returns True or false depending on the validity of the input..",
              "plain": "Override this method to check the validity of the player\u0027s input.\n@param context Context information about the conversation.\n@param input The player\u0027s raw console input.\n@return True or false depending on the validity of the input."
            }
          }
        ],
        "comment": {
          "body": "ValidatingPrompt is the base class for any prompt that requires validation.\n ValidatingPrompt will keep replaying the prompt text until the user enters\n a valid response.",
          "plain": "ValidatingPrompt is the base class for any prompt that requires validation.\n ValidatingPrompt will keep replaying the prompt text until the user enters\n a valid response."
        }
      }
    ]
  },
  {
    "kind": "PACKAGE",
    "name": "org.bukkit.enchantments",
    "children": [
      {
        "kind": "CLASS",
        "name": "org.bukkit.enchantments.Enchantment",
        "children": [
          {
            "kind": "FIELD",
            "name": "ARROW_DAMAGE",
            "comment": {
              "body": "Provides extra damage when shooting arrows from bows",
              "plain": "Provides extra damage when shooting arrows from bows"
            }
          },
          {
            "kind": "FIELD",
            "name": "ARROW_FIRE",
            "comment": {
              "body": "Sets entities on fire when hit by arrows shot from a bow",
              "plain": "Sets entities on fire when hit by arrows shot from a bow"
            }
          },
          {
            "kind": "FIELD",
            "name": "ARROW_INFINITE",
            "comment": {
              "body": "Provides infinite arrows when shooting a bow",
              "plain": "Provides infinite arrows when shooting a bow"
            }
          },
          {
            "kind": "FIELD",
            "name": "ARROW_KNOCKBACK",
            "comment": {
              "body": "Provides a knockback when an entity is hit by an arrow from a bow",
              "plain": "Provides a knockback when an entity is hit by an arrow from a bow"
            }
          },
          {
            "kind": "FIELD",
            "name": "BINDING_CURSE",
            "comment": {
              "body": "Item cannot be removed",
              "plain": "Item cannot be removed"
            }
          },
          {
            "kind": "FIELD",
            "name": "DAMAGE_ALL",
            "comment": {
              "body": "Increases damage against all targets",
              "plain": "Increases damage against all targets"
            }
          },
          {
            "kind": "FIELD",
            "name": "DAMAGE_ARTHROPODS",
            "comment": {
              "body": "Increases damage against arthropod targets",
              "plain": "Increases damage against arthropod targets"
            }
          },
          {
            "kind": "FIELD",
            "name": "DAMAGE_UNDEAD",
            "comment": {
              "body": "Increases damage against undead targets",
              "plain": "Increases damage against undead targets"
            }
          },
          {
            "kind": "FIELD",
            "name": "DEPTH_STRIDER",
            "comment": {
              "body": "Increases walking speed while in water",
              "plain": "Increases walking speed while in water"
            }
          },
          {
            "kind": "FIELD",
            "name": "DIG_SPEED",
            "comment": {
              "body": "Increases the rate at which you mine/dig",
              "plain": "Increases the rate at which you mine/dig"
            }
          },
          {
            "kind": "FIELD",
            "name": "DURABILITY",
            "comment": {
              "body": "Decreases the rate at which a tool looses durability",
              "plain": "Decreases the rate at which a tool looses durability"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Enchantment(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "id"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "FIRE_ASPECT",
            "comment": {
              "body": "When attacking a target, has a chance to set them on fire",
              "plain": "When attacking a target, has a chance to set them on fire"
            }
          },
          {
            "kind": "FIELD",
            "name": "FROST_WALKER",
            "comment": {
              "body": "Freezes any still water adjacent to ice / frost which player is walking on",
              "plain": "Freezes any still water adjacent to ice / frost which player is walking on"
            }
          },
          {
            "kind": "FIELD",
            "name": "KNOCKBACK",
            "comment": {
              "body": "All damage to other targets will knock them back when hit",
              "plain": "All damage to other targets will knock them back when hit"
            }
          },
          {
            "kind": "FIELD",
            "name": "LOOT_BONUS_BLOCKS",
            "comment": {
              "body": "Provides a chance of gaining extra loot when destroying blocks",
              "plain": "Provides a chance of gaining extra loot when destroying blocks"
            }
          },
          {
            "kind": "FIELD",
            "name": "LOOT_BONUS_MOBS",
            "comment": {
              "body": "Provides a chance of gaining extra loot when killing monsters",
              "plain": "Provides a chance of gaining extra loot when killing monsters"
            }
          },
          {
            "kind": "FIELD",
            "name": "LUCK",
            "comment": {
              "body": "Decreases odds of catching worthless junk",
              "plain": "Decreases odds of catching worthless junk"
            }
          },
          {
            "kind": "FIELD",
            "name": "LURE",
            "comment": {
              "body": "Increases rate of fish biting your hook",
              "plain": "Increases rate of fish biting your hook"
            }
          },
          {
            "kind": "FIELD",
            "name": "MENDING",
            "comment": {
              "body": "Allows mending the item using experience orbs",
              "plain": "Allows mending the item using experience orbs"
            }
          },
          {
            "kind": "FIELD",
            "name": "OXYGEN",
            "comment": {
              "body": "Decreases the rate of air loss whilst underwater",
              "plain": "Decreases the rate of air loss whilst underwater"
            }
          },
          {
            "kind": "FIELD",
            "name": "PROTECTION_ENVIRONMENTAL",
            "comment": {
              "body": "Provides protection against environmental damage",
              "plain": "Provides protection against environmental damage"
            }
          },
          {
            "kind": "FIELD",
            "name": "PROTECTION_EXPLOSIONS",
            "comment": {
              "body": "Provides protection against explosive damage",
              "plain": "Provides protection against explosive damage"
            }
          },
          {
            "kind": "FIELD",
            "name": "PROTECTION_FALL",
            "comment": {
              "body": "Provides protection against fall damage",
              "plain": "Provides protection against fall damage"
            }
          },
          {
            "kind": "FIELD",
            "name": "PROTECTION_FIRE",
            "comment": {
              "body": "Provides protection against fire damage",
              "plain": "Provides protection against fire damage"
            }
          },
          {
            "kind": "FIELD",
            "name": "PROTECTION_PROJECTILE",
            "comment": {
              "body": "Provides protection against projectile damage",
              "plain": "Provides protection against projectile damage"
            }
          },
          {
            "kind": "FIELD",
            "name": "SILK_TOUCH",
            "comment": {
              "body": "Allows blocks to drop themselves instead of fragments (for example,\n stone instead of cobblestone)",
              "plain": "Allows blocks to drop themselves instead of fragments (for example,\n stone instead of cobblestone)"
            }
          },
          {
            "kind": "FIELD",
            "name": "SWEEPING_EDGE",
            "comment": {
              "body": "Increases damage against targets when using a sweep attack",
              "plain": "Increases damage against targets when using a sweep attack"
            }
          },
          {
            "kind": "FIELD",
            "name": "THORNS",
            "comment": {
              "body": "Damages the attacker",
              "plain": "Damages the attacker"
            }
          },
          {
            "kind": "FIELD",
            "name": "VANISHING_CURSE",
            "comment": {
              "body": "Item disappears instead of dropping",
              "plain": "Item disappears instead of dropping"
            }
          },
          {
            "kind": "FIELD",
            "name": "WATER_WORKER",
            "comment": {
              "body": "Increases the speed at which a player may mine underwater",
              "plain": "Increases the speed at which a player may mine underwater"
            }
          },
          {
            "kind": "FIELD",
            "name": "acceptingNew"
          },
          {
            "kind": "FIELD",
            "name": "byId"
          },
          {
            "kind": "FIELD",
            "name": "byName"
          },
          {
            "kind": "METHOD",
            "name": "canEnchantItem(org.bukkit.inventory.ItemStack)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "item"
              }
            ],
            "comment": {
              "body": "Checks if this Enchantment may be applied to the given \u003ca href\u003d\"org/bukkit/inventory/ItemStack.html\" title\u003d\"class in org.bukkit.inventory\"\u003e\u003ccode\u003eItemStack\u003c/code\u003e\u003c/a\u003e.\n \u003cp\u003e\n This does not check if it conflicts with any enchantments already\n applied to the item.",
              "tags": "Returns True if the enchantment may be applied, otherwise False.",
              "plain": "Checks if this Enchantment may be applied to the given {@link ItemStack}.\n \u003cp\u003e\n This does not check if it conflicts with any enchantments already\n applied to the item.\n@param item Item to test\n@return True if the enchantment may be applied, otherwise False"
            }
          },
          {
            "kind": "METHOD",
            "name": "conflictsWith(org.bukkit.enchantments.Enchantment)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "other"
              }
            ],
            "comment": {
              "body": "Check if this enchantment conflicts with another enchantment.",
              "tags": "Returns True if there is a conflict..",
              "plain": "Check if this enchantment conflicts with another enchantment.\n@param other The enchantment to check against\n@return True if there is a conflict."
            }
          },
          {
            "kind": "METHOD",
            "name": "equals(java.lang.Object)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "obj"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getById(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "id"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Gets the Enchantment at the specified ID",
              "tags": "Returns Resulting Enchantment, or null if not found.",
              "plain": "Gets the Enchantment at the specified ID\n@param id ID to fetch\n@return Resulting Enchantment, or null if not found\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "getByName(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ],
            "comment": {
              "body": "Gets the Enchantment at the specified name",
              "tags": "Returns Resulting Enchantment, or null if not found.",
              "plain": "Gets the Enchantment at the specified name\n@param name Name to fetch\n@return Resulting Enchantment, or null if not found"
            }
          },
          {
            "kind": "METHOD",
            "name": "getId()",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Gets the unique ID of this enchantment",
              "tags": "Returns Unique ID.",
              "plain": "Gets the unique ID of this enchantment\n@return Unique ID\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "getItemTarget()",
            "comment": {
              "body": "Gets the type of \u003ca href\u003d\"org/bukkit/inventory/ItemStack.html\" title\u003d\"class in org.bukkit.inventory\"\u003e\u003ccode\u003eItemStack\u003c/code\u003e\u003c/a\u003e that may fit this Enchantment.",
              "tags": "Returns Target type of the Enchantment.",
              "plain": "Gets the type of {@link ItemStack} that may fit this Enchantment.\n@return Target type of the Enchantment"
            }
          },
          {
            "kind": "METHOD",
            "name": "getMaxLevel()",
            "comment": {
              "body": "Gets the maximum level that this Enchantment may become.",
              "tags": "Returns Maximum level of the Enchantment.",
              "plain": "Gets the maximum level that this Enchantment may become.\n@return Maximum level of the Enchantment"
            }
          },
          {
            "kind": "METHOD",
            "name": "getName()",
            "comment": {
              "body": "Gets the unique name of this enchantment",
              "tags": "Returns Unique name.",
              "plain": "Gets the unique name of this enchantment\n@return Unique name"
            }
          },
          {
            "kind": "METHOD",
            "name": "getStartLevel()",
            "comment": {
              "body": "Gets the level that this Enchantment should start at",
              "tags": "Returns Starting level of the Enchantment.",
              "plain": "Gets the level that this Enchantment should start at\n@return Starting level of the Enchantment"
            }
          },
          {
            "kind": "METHOD",
            "name": "hashCode()"
          },
          {
            "kind": "FIELD",
            "name": "id"
          },
          {
            "kind": "METHOD",
            "name": "isAcceptingRegistrations()",
            "comment": {
              "body": "Checks if this is accepting Enchantment registrations.",
              "tags": "Returns True if the server Implementation may add enchantments.",
              "plain": "Checks if this is accepting Enchantment registrations.\n@return True if the server Implementation may add enchantments"
            }
          },
          {
            "kind": "METHOD",
            "name": "isCursed()",
            "comment": {
              "body": "Checks if this enchantment is a cursed enchantment\n \u003cbr\u003e\n Cursed enchantments are found the same way treasure enchantments are",
              "tags": "Returns true if the enchantment is cursed.",
              "plain": "Checks if this enchantment is a cursed enchantment\n \u003cbr\u003e\n Cursed enchantments are found the same way treasure enchantments are\n@return true if the enchantment is cursed"
            }
          },
          {
            "kind": "METHOD",
            "name": "isTreasure()",
            "comment": {
              "body": "Checks if this enchantment is a treasure enchantment.\n \u003cbr\u003e\n Treasure enchantments can only be received via looting, trading, or\n fishing.",
              "tags": "Returns true if the enchantment is a treasure enchantment.",
              "plain": "Checks if this enchantment is a treasure enchantment.\n \u003cbr\u003e\n Treasure enchantments can only be received via looting, trading, or\n fishing.\n@return true if the enchantment is a treasure enchantment"
            }
          },
          {
            "kind": "METHOD",
            "name": "registerEnchantment(org.bukkit.enchantments.Enchantment)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "enchantment"
              }
            ],
            "comment": {
              "body": "Registers an enchantment with the given ID and object.\n \u003cp\u003e\n Generally not to be used from within a plugin.",
              "plain": "Registers an enchantment with the given ID and object.\n \u003cp\u003e\n Generally not to be used from within a plugin.\n@param enchantment Enchantment to register"
            }
          },
          {
            "kind": "METHOD",
            "name": "stopAcceptingRegistrations()",
            "comment": {
              "body": "Stops accepting any enchantment registrations",
              "plain": "Stops accepting any enchantment registrations"
            }
          },
          {
            "kind": "METHOD",
            "name": "toString()"
          },
          {
            "kind": "METHOD",
            "name": "values()",
            "comment": {
              "body": "Gets an array of all the registered \u003ca href\u003d\"org/bukkit/enchantments/Enchantment.html\" title\u003d\"class in org.bukkit.enchantments\"\u003e\u003ccode\u003eEnchantment\u003c/code\u003e\u003c/a\u003es",
              "tags": "Returns Array of enchantments.",
              "plain": "Gets an array of all the registered {@link Enchantment}s\n@return Array of enchantments"
            }
          }
        ],
        "comment": {
          "body": "The various type of enchantments that may be added to armour or weapons",
          "plain": "The various type of enchantments that may be added to armour or weapons"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.enchantments.EnchantmentOffer",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "EnchantmentOffer(org.bukkit.enchantments.Enchantment,int,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cost"
              },
              {
                "kind": "PARAMETER",
                "name": "enchantment"
              },
              {
                "kind": "PARAMETER",
                "name": "enchantmentLevel"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "cost"
          },
          {
            "kind": "FIELD",
            "name": "enchantment"
          },
          {
            "kind": "FIELD",
            "name": "enchantmentLevel"
          },
          {
            "kind": "METHOD",
            "name": "getCost()",
            "comment": {
              "body": "Gets the cost in experience levels the player has to pay to enchant his\n item with this enchantment.",
              "tags": "Returns cost for this enchantment.",
              "plain": "Gets the cost in experience levels the player has to pay to enchant his\n item with this enchantment.\n@return cost for this enchantment"
            }
          },
          {
            "kind": "METHOD",
            "name": "getEnchantment()",
            "comment": {
              "body": "Get the type of the enchantment.",
              "tags": "Returns type of enchantment.",
              "plain": "Get the type of the enchantment.\n@return type of enchantment"
            }
          },
          {
            "kind": "METHOD",
            "name": "getEnchantmentLevel()",
            "comment": {
              "body": "Gets the level of the enchantment.",
              "tags": "Returns level of the enchantment.",
              "plain": "Gets the level of the enchantment.\n@return level of the enchantment"
            }
          },
          {
            "kind": "METHOD",
            "name": "setCost(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cost"
              }
            ],
            "comment": {
              "body": "Sets the cost in experience levels the player has to pay to enchant his\n item with this enchantment",
              "plain": "Sets the cost in experience levels the player has to pay to enchant his\n item with this enchantment\n@param cost cost for this enchantment"
            }
          },
          {
            "kind": "METHOD",
            "name": "setEnchantment(org.bukkit.enchantments.Enchantment)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "enchantment"
              }
            ],
            "comment": {
              "body": "Sets the type of the enchantment.",
              "plain": "Sets the type of the enchantment.\n@param enchantment type of the enchantment"
            }
          },
          {
            "kind": "METHOD",
            "name": "setEnchantmentLevel(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "enchantmentLevel"
              }
            ],
            "comment": {
              "body": "Sets the level of the enchantment.",
              "plain": "Sets the level of the enchantment.\n@param enchantmentLevel level of the enchantment"
            }
          }
        ],
        "comment": {
          "body": "A class for the available enchantment offers in the enchantment table.",
          "plain": "A class for the available enchantment offers in the enchantment table."
        }
      },
      {
        "kind": "ENUM",
        "name": "org.bukkit.enchantments.EnchantmentTarget",
        "children": [
          {
            "kind": "ENUM_CONSTANT",
            "name": "ALL",
            "comment": {
              "body": "Allows the Enchantment to be placed on all items",
              "plain": "Allows the Enchantment to be placed on all items"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ARMOR",
            "comment": {
              "body": "Allows the Enchantment to be placed on armor",
              "plain": "Allows the Enchantment to be placed on armor"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ARMOR_FEET",
            "comment": {
              "body": "Allows the Enchantment to be placed on feet slot armor",
              "plain": "Allows the Enchantment to be placed on feet slot armor"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ARMOR_HEAD",
            "comment": {
              "body": "Allows the Enchantment to be placed on head slot armor",
              "plain": "Allows the Enchantment to be placed on head slot armor"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ARMOR_LEGS",
            "comment": {
              "body": "Allows the Enchantment to be placed on leg slot armor",
              "plain": "Allows the Enchantment to be placed on leg slot armor"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ARMOR_TORSO",
            "comment": {
              "body": "Allows the Enchantment to be placed on torso slot armor",
              "plain": "Allows the Enchantment to be placed on torso slot armor"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BOW",
            "comment": {
              "body": "Allows the Enchantment to be placed on bows.",
              "plain": "Allows the Enchantment to be placed on bows."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BREAKABLE",
            "comment": {
              "body": "Allows the enchantment to be placed on items with durability.",
              "plain": "Allows the enchantment to be placed on items with durability."
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "EnchantmentTarget()"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "FISHING_ROD",
            "comment": {
              "body": "Allows the Enchantment to be placed on fishing rods.",
              "plain": "Allows the Enchantment to be placed on fishing rods."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "TOOL",
            "comment": {
              "body": "Allows the Enchantment to be placed on tools (spades, pickaxe, hoes,\n axes)",
              "plain": "Allows the Enchantment to be placed on tools (spades, pickaxe, hoes,\n axes)"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "WEAPON",
            "comment": {
              "body": "Allows the Enchantment to be placed on weapons (swords)",
              "plain": "Allows the Enchantment to be placed on weapons (swords)"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "WEARABLE",
            "comment": {
              "body": "Allows the enchantment to be placed on wearable items.",
              "plain": "Allows the enchantment to be placed on wearable items."
            }
          },
          {
            "kind": "METHOD",
            "name": "includes(org.bukkit.Material)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "item"
              }
            ],
            "comment": {
              "body": "Check whether this target includes the specified item.",
              "tags": "Returns True if the target includes the item.",
              "plain": "Check whether this target includes the specified item.\n@param item The item to check\n@return True if the target includes the item"
            }
          },
          {
            "kind": "METHOD",
            "name": "includes(org.bukkit.inventory.ItemStack)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "item"
              }
            ],
            "comment": {
              "body": "Check whether this target includes the specified item.",
              "tags": "Returns True if the target includes the item.",
              "plain": "Check whether this target includes the specified item.\n@param item The item to check\n@return True if the target includes the item"
            }
          },
          {
            "kind": "METHOD",
            "name": "valueOf(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "values()"
          }
        ],
        "comment": {
          "body": "Represents the applicable target for a \u003ca href\u003d\"org/bukkit/enchantments/Enchantment.html\" title\u003d\"class in org.bukkit.enchantments\"\u003e\u003ccode\u003eEnchantment\u003c/code\u003e\u003c/a\u003e",
          "plain": "Represents the applicable target for a {@link Enchantment}"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.enchantments.EnchantmentWrapper",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "EnchantmentWrapper(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "id"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "canEnchantItem(org.bukkit.inventory.ItemStack)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "item"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "conflictsWith(org.bukkit.enchantments.Enchantment)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "other"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getEnchantment()",
            "comment": {
              "body": "Gets the enchantment bound to this wrapper",
              "tags": "Returns Enchantment.",
              "plain": "Gets the enchantment bound to this wrapper\n@return Enchantment"
            }
          },
          {
            "kind": "METHOD",
            "name": "getItemTarget()"
          },
          {
            "kind": "METHOD",
            "name": "getMaxLevel()"
          },
          {
            "kind": "METHOD",
            "name": "getName()"
          },
          {
            "kind": "METHOD",
            "name": "getStartLevel()"
          },
          {
            "kind": "METHOD",
            "name": "isCursed()"
          },
          {
            "kind": "METHOD",
            "name": "isTreasure()"
          }
        ],
        "comment": {
          "body": "A simple wrapper for ease of selecting \u003ca href\u003d\"org/bukkit/enchantments/Enchantment.html\" title\u003d\"class in org.bukkit.enchantments\"\u003e\u003ccode\u003eEnchantment\u003c/code\u003e\u003c/a\u003es",
          "plain": "A simple wrapper for ease of selecting {@link Enchantment}s"
        }
      }
    ]
  },
  {
    "kind": "PACKAGE",
    "name": "org.bukkit.entity",
    "children": [
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.AbstractHorse",
        "children": [
          {
            "kind": "METHOD",
            "name": "getDomestication()",
            "comment": {
              "body": "Gets the domestication level of this horse.\n \u003cp\u003e\n A higher domestication level indicates that the horse is closer to\n becoming tame. As the domestication level gets closer to the max\n domestication level, the chance of the horse becoming tame increases.",
              "tags": "Returns domestication level.",
              "plain": "Gets the domestication level of this horse.\n \u003cp\u003e\n A higher domestication level indicates that the horse is closer to\n becoming tame. As the domestication level gets closer to the max\n domestication level, the chance of the horse becoming tame increases.\n@return domestication level"
            }
          },
          {
            "kind": "METHOD",
            "name": "getInventory()"
          },
          {
            "kind": "METHOD",
            "name": "getJumpStrength()",
            "comment": {
              "body": "Gets the jump strength of this horse.\n \u003cp\u003e\n Jump strength defines how high the horse can jump. A higher jump strength\n increases how high a jump will go.",
              "tags": "Returns the horse\u0027s jump strength.",
              "plain": "Gets the jump strength of this horse.\n \u003cp\u003e\n Jump strength defines how high the horse can jump. A higher jump strength\n increases how high a jump will go.\n@return the horse\u0027s jump strength"
            }
          },
          {
            "kind": "METHOD",
            "name": "getMaxDomestication()",
            "comment": {
              "body": "Gets the maximum domestication level of this horse.\n \u003cp\u003e\n The higher this level is, the longer it will likely take\n for the horse to be tamed.",
              "tags": "Returns the max domestication level.",
              "plain": "Gets the maximum domestication level of this horse.\n \u003cp\u003e\n The higher this level is, the longer it will likely take\n for the horse to be tamed.\n@return the max domestication level"
            }
          },
          {
            "kind": "METHOD",
            "name": "getVariant()",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Gets the horse\u0027s variant.\n \u003cp\u003e\n A horse\u0027s variant defines its physical appearance and capabilities.\n Whether a horse is a regular horse, donkey, mule, or other kind of horse\n is determined using the variant.",
              "tags": "Returns a \u003ca href\u003d\"org/bukkit/entity/Horse.Variant.html\" title\u003d\"enum in org.bukkit.entity\"\u003e\u003ccode\u003eHorse.Variant\u003c/code\u003e\u003c/a\u003e representing the horse\u0027s variant.",
              "plain": "Gets the horse\u0027s variant.\n \u003cp\u003e\n A horse\u0027s variant defines its physical appearance and capabilities.\n Whether a horse is a regular horse, donkey, mule, or other kind of horse\n is determined using the variant.\n@return a {@link Horse.Variant} representing the horse\u0027s variant\n@deprecated different variants are different classes"
            }
          },
          {
            "kind": "METHOD",
            "name": "setDomestication(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "level"
              }
            ],
            "comment": {
              "body": "Sets the domestication level of this horse.\n \u003cp\u003e\n Setting the domestication level to a high value will increase the\n horse\u0027s chances of becoming tame.\n \u003cp\u003e\n Domestication level must be greater than zero and no greater than\n the max domestication level of the horse, determined with\n \u003ca href\u003d\"org/bukkit/entity/AbstractHorse.html#getMaxDomestication()\"\u003e\u003ccode\u003eAbstractHorse.getMaxDomestication()\u003c/code\u003e\u003c/a\u003e",
              "plain": "Sets the domestication level of this horse.\n \u003cp\u003e\n Setting the domestication level to a high value will increase the\n horse\u0027s chances of becoming tame.\n \u003cp\u003e\n Domestication level must be greater than zero and no greater than\n the max domestication level of the horse, determined with\n {@link #getMaxDomestication()}\n@param level domestication level"
            }
          },
          {
            "kind": "METHOD",
            "name": "setJumpStrength(double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "strength"
              }
            ],
            "comment": {
              "body": "Sets the jump strength of this horse.\n \u003cp\u003e\n A higher jump strength increases how high a jump will go.\n Setting a jump strength to 0 will result in no jump.\n You cannot set a jump strength to a value below 0 or\n above 2.",
              "plain": "Sets the jump strength of this horse.\n \u003cp\u003e\n A higher jump strength increases how high a jump will go.\n Setting a jump strength to 0 will result in no jump.\n You cannot set a jump strength to a value below 0 or\n above 2.\n@param strength jump strength for this horse"
            }
          },
          {
            "kind": "METHOD",
            "name": "setMaxDomestication(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "level"
              }
            ],
            "comment": {
              "body": "Sets the maximum domestication level of this horse.\n \u003cp\u003e\n Setting a higher max domestication will increase the amount of\n domesticating (feeding, riding, etc.) necessary in order to tame it,\n while setting a lower max value will have the opposite effect.\n \u003cp\u003e\n Maximum domestication must be greater than zero.",
              "plain": "Sets the maximum domestication level of this horse.\n \u003cp\u003e\n Setting a higher max domestication will increase the amount of\n domesticating (feeding, riding, etc.) necessary in order to tame it,\n while setting a lower max value will have the opposite effect.\n \u003cp\u003e\n Maximum domestication must be greater than zero.\n@param level the max domestication level"
            }
          },
          {
            "kind": "METHOD",
            "name": "setVariant(org.bukkit.entity.Horse.Variant)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "variant"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param variant Variant to set\n@deprecated you are required to spawn a different entity"
            }
          }
        ],
        "comment": {
          "body": "Represents a Horse-like creature.",
          "plain": "Represents a Horse-like creature."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.Ageable",
        "children": [
          {
            "kind": "METHOD",
            "name": "canBreed()",
            "comment": {
              "body": "Return the ability to breed of the animal.",
              "tags": "Returns the ability to breed of the animal.",
              "plain": "Return the ability to breed of the animal.\n@return the ability to breed of the animal"
            }
          },
          {
            "kind": "METHOD",
            "name": "getAge()",
            "comment": {
              "body": "Gets the age of this animal.",
              "tags": "Returns Age.",
              "plain": "Gets the age of this animal.\n@return Age"
            }
          },
          {
            "kind": "METHOD",
            "name": "getAgeLock()",
            "comment": {
              "body": "Gets the current agelock.",
              "tags": "Returns the current agelock.",
              "plain": "Gets the current agelock.\n@return the current agelock"
            }
          },
          {
            "kind": "METHOD",
            "name": "isAdult()",
            "comment": {
              "body": "Returns true if the animal is an adult.",
              "tags": "Returns return true if the animal is an adult.",
              "plain": "Returns true if the animal is an adult.\n@return return true if the animal is an adult"
            }
          },
          {
            "kind": "METHOD",
            "name": "setAdult()",
            "comment": {
              "body": "Sets the age of the animal to an adult",
              "plain": "Sets the age of the animal to an adult"
            }
          },
          {
            "kind": "METHOD",
            "name": "setAge(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "age"
              }
            ],
            "comment": {
              "body": "Sets the age of this animal.",
              "plain": "Sets the age of this animal.\n@param age New age"
            }
          },
          {
            "kind": "METHOD",
            "name": "setAgeLock(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "lock"
              }
            ],
            "comment": {
              "body": "Lock the age of the animal, setting this will prevent the animal from\n maturing or getting ready for mating.",
              "plain": "Lock the age of the animal, setting this will prevent the animal from\n maturing or getting ready for mating.\n@param lock new lock"
            }
          },
          {
            "kind": "METHOD",
            "name": "setBaby()",
            "comment": {
              "body": "Sets the age of the animal to a baby",
              "plain": "Sets the age of the animal to a baby"
            }
          },
          {
            "kind": "METHOD",
            "name": "setBreed(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "breed"
              }
            ],
            "comment": {
              "body": "Set breedability of the animal, if the animal is a baby and set to\n breed it will instantly grow up.",
              "plain": "Set breedability of the animal, if the animal is a baby and set to\n breed it will instantly grow up.\n@param breed breedability of the animal"
            }
          }
        ],
        "comment": {
          "body": "Represents an entity that can age and breed.",
          "plain": "Represents an entity that can age and breed."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.Ambient",
        "comment": {
          "body": "Represents an ambient mob",
          "plain": "Represents an ambient mob"
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.AnimalTamer",
        "children": [
          {
            "kind": "METHOD",
            "name": "getName()",
            "comment": {
              "body": "This is the name of the specified AnimalTamer.",
              "tags": "Returns The name to reference on tamed animals or null if a name cannot be obtained.",
              "plain": "This is the name of the specified AnimalTamer.\n@return The name to reference on tamed animals or null if a name cannot be obtained"
            }
          },
          {
            "kind": "METHOD",
            "name": "getUniqueId()",
            "comment": {
              "body": "This is the UUID of the specified AnimalTamer.",
              "tags": "Returns The UUID to reference on tamed animals.",
              "plain": "This is the UUID of the specified AnimalTamer.\n@return The UUID to reference on tamed animals"
            }
          }
        ]
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.Animals",
        "comment": {
          "body": "Represents an Animal.",
          "plain": "Represents an Animal."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.AreaEffectCloud",
        "children": [
          {
            "kind": "METHOD",
            "name": "addCustomEffect(org.bukkit.potion.PotionEffect,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "effect"
              },
              {
                "kind": "PARAMETER",
                "name": "overwrite"
              }
            ],
            "comment": {
              "body": "Adds a custom potion effect to this cloud.",
              "tags": "Returns true if the effect was added as a result of this call.",
              "plain": "Adds a custom potion effect to this cloud.\n@param effect the potion effect to add\n@param overwrite true if any existing effect of the same type should be\n overwritten\n@return true if the effect was added as a result of this call"
            }
          },
          {
            "kind": "METHOD",
            "name": "clearCustomEffects()",
            "comment": {
              "body": "Removes all custom potion effects from this cloud.",
              "plain": "Removes all custom potion effects from this cloud."
            }
          },
          {
            "kind": "METHOD",
            "name": "getBasePotionData()",
            "comment": {
              "body": "Returns the potion data about the base potion",
              "tags": "Returns a PotionData object.",
              "plain": "Returns the potion data about the base potion\n@return a PotionData object"
            }
          },
          {
            "kind": "METHOD",
            "name": "getColor()",
            "comment": {
              "body": "Gets the color of this cloud. Will be applied as a tint to its particles.",
              "tags": "Returns cloud color.",
              "plain": "Gets the color of this cloud. Will be applied as a tint to its particles.\n@return cloud color"
            }
          },
          {
            "kind": "METHOD",
            "name": "getCustomEffects()",
            "comment": {
              "body": "Gets an immutable list containing all custom potion effects applied to\n this cloud.\n \u003cp\u003e\n Plugins should check that hasCustomEffects() returns true before calling\n this method.",
              "tags": "Returns the immutable list of custom potion effects.",
              "plain": "Gets an immutable list containing all custom potion effects applied to\n this cloud.\n \u003cp\u003e\n Plugins should check that hasCustomEffects() returns true before calling\n this method.\n@return the immutable list of custom potion effects"
            }
          },
          {
            "kind": "METHOD",
            "name": "getDuration()",
            "comment": {
              "body": "Gets the duration which this cloud will exist for (in ticks).",
              "tags": "Returns cloud duration.",
              "plain": "Gets the duration which this cloud will exist for (in ticks).\n@return cloud duration"
            }
          },
          {
            "kind": "METHOD",
            "name": "getDurationOnUse()",
            "comment": {
              "body": "Gets the amount that the duration of this cloud will decrease by when it\n applies an effect to an entity.",
              "tags": "Returns duration on use delta.",
              "plain": "Gets the amount that the duration of this cloud will decrease by when it\n applies an effect to an entity.\n@return duration on use delta"
            }
          },
          {
            "kind": "METHOD",
            "name": "getParticle()",
            "comment": {
              "body": "Gets the particle which this cloud will be composed of",
              "tags": "Returns particle the set particle type.",
              "plain": "Gets the particle which this cloud will be composed of\n@return particle the set particle type"
            }
          },
          {
            "kind": "METHOD",
            "name": "getRadius()",
            "comment": {
              "body": "Gets the initial radius of the cloud.",
              "tags": "Returns radius.",
              "plain": "Gets the initial radius of the cloud.\n@return radius"
            }
          },
          {
            "kind": "METHOD",
            "name": "getRadiusOnUse()",
            "comment": {
              "body": "Gets the amount that the radius of this cloud will decrease by when it\n applies an effect to an entity.",
              "tags": "Returns radius on use delta.",
              "plain": "Gets the amount that the radius of this cloud will decrease by when it\n applies an effect to an entity.\n@return radius on use delta"
            }
          },
          {
            "kind": "METHOD",
            "name": "getRadiusPerTick()",
            "comment": {
              "body": "Gets the amount that the radius of this cloud will decrease by each tick.",
              "tags": "Returns radius per tick delta.",
              "plain": "Gets the amount that the radius of this cloud will decrease by each tick.\n@return radius per tick delta"
            }
          },
          {
            "kind": "METHOD",
            "name": "getReapplicationDelay()",
            "comment": {
              "body": "Gets the time that an entity will be immune from subsequent exposure.",
              "tags": "Returns reapplication delay.",
              "plain": "Gets the time that an entity will be immune from subsequent exposure.\n@return reapplication delay"
            }
          },
          {
            "kind": "METHOD",
            "name": "getSource()",
            "comment": {
              "body": "Retrieve the original source of this cloud.",
              "tags": "Returns the \u003ca href\u003d\"org/bukkit/projectiles/ProjectileSource.html\" title\u003d\"interface in org.bukkit.projectiles\"\u003e\u003ccode\u003eProjectileSource\u003c/code\u003e\u003c/a\u003e that threw the LingeringPotion.",
              "plain": "Retrieve the original source of this cloud.\n@return the {@link ProjectileSource} that threw the LingeringPotion"
            }
          },
          {
            "kind": "METHOD",
            "name": "getWaitTime()",
            "comment": {
              "body": "Gets the time which an entity has to be exposed to the cloud before the\n effect is applied.",
              "tags": "Returns wait time.",
              "plain": "Gets the time which an entity has to be exposed to the cloud before the\n effect is applied.\n@return wait time"
            }
          },
          {
            "kind": "METHOD",
            "name": "hasCustomEffect(org.bukkit.potion.PotionEffectType)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "comment": {
              "body": "Checks for a specific custom potion effect type on this cloud.",
              "tags": "Returns true if the potion has this effect.",
              "plain": "Checks for a specific custom potion effect type on this cloud.\n@param type the potion effect type to check for\n@return true if the potion has this effect"
            }
          },
          {
            "kind": "METHOD",
            "name": "hasCustomEffects()",
            "comment": {
              "body": "Checks for the presence of custom potion effects.",
              "tags": "Returns true if custom potion effects are applied.",
              "plain": "Checks for the presence of custom potion effects.\n@return true if custom potion effects are applied"
            }
          },
          {
            "kind": "METHOD",
            "name": "removeCustomEffect(org.bukkit.potion.PotionEffectType)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "comment": {
              "body": "Removes a custom potion effect from this cloud.",
              "tags": "Returns true if the an effect was removed as a result of this call.",
              "plain": "Removes a custom potion effect from this cloud.\n@param type the potion effect type to remove\n@return true if the an effect was removed as a result of this call"
            }
          },
          {
            "kind": "METHOD",
            "name": "setBasePotionData(org.bukkit.potion.PotionData)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              }
            ],
            "comment": {
              "body": "Sets the underlying potion data",
              "plain": "Sets the underlying potion data\n@param data PotionData to set the base potion state to"
            }
          },
          {
            "kind": "METHOD",
            "name": "setColor(org.bukkit.Color)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "color"
              }
            ],
            "comment": {
              "body": "Sets the color of this cloud. Will be applied as a tint to its particles.",
              "plain": "Sets the color of this cloud. Will be applied as a tint to its particles.\n@param color cloud color"
            }
          },
          {
            "kind": "METHOD",
            "name": "setDuration(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "duration"
              }
            ],
            "comment": {
              "body": "Sets the duration which this cloud will exist for (in ticks).",
              "plain": "Sets the duration which this cloud will exist for (in ticks).\n@param duration cloud duration"
            }
          },
          {
            "kind": "METHOD",
            "name": "setDurationOnUse(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "duration"
              }
            ],
            "comment": {
              "body": "Sets the amount that the duration of this cloud will decrease by when it\n applies an effect to an entity.",
              "plain": "Sets the amount that the duration of this cloud will decrease by when it\n applies an effect to an entity.\n@param duration duration on use delta"
            }
          },
          {
            "kind": "METHOD",
            "name": "setParticle(org.bukkit.Particle)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "particle"
              }
            ],
            "comment": {
              "body": "Sets the particle which this cloud will be composed of",
              "plain": "Sets the particle which this cloud will be composed of\n@param particle the new particle type"
            }
          },
          {
            "kind": "METHOD",
            "name": "setRadius(float)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "radius"
              }
            ],
            "comment": {
              "body": "Sets the initial radius of the cloud.",
              "plain": "Sets the initial radius of the cloud.\n@param radius radius"
            }
          },
          {
            "kind": "METHOD",
            "name": "setRadiusOnUse(float)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "radius"
              }
            ],
            "comment": {
              "body": "Sets the amount that the radius of this cloud will decrease by when it\n applies an effect to an entity.",
              "plain": "Sets the amount that the radius of this cloud will decrease by when it\n applies an effect to an entity.\n@param radius radius on use delta"
            }
          },
          {
            "kind": "METHOD",
            "name": "setRadiusPerTick(float)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "radius"
              }
            ],
            "comment": {
              "body": "Gets the amount that the radius of this cloud will decrease by each tick.",
              "plain": "Gets the amount that the radius of this cloud will decrease by each tick.\n@param radius per tick delta"
            }
          },
          {
            "kind": "METHOD",
            "name": "setReapplicationDelay(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "delay"
              }
            ],
            "comment": {
              "body": "Sets the time that an entity will be immune from subsequent exposure.",
              "plain": "Sets the time that an entity will be immune from subsequent exposure.\n@param delay reapplication delay"
            }
          },
          {
            "kind": "METHOD",
            "name": "setSource(org.bukkit.projectiles.ProjectileSource)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "source"
              }
            ],
            "comment": {
              "body": "Set the original source of this cloud.",
              "plain": "Set the original source of this cloud.\n@param source the {@link ProjectileSource} that threw the LingeringPotion"
            }
          },
          {
            "kind": "METHOD",
            "name": "setWaitTime(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "waitTime"
              }
            ],
            "comment": {
              "body": "Sets the time which an entity has to be exposed to the cloud before the\n effect is applied.",
              "plain": "Sets the time which an entity has to be exposed to the cloud before the\n effect is applied.\n@param waitTime wait time"
            }
          }
        ],
        "comment": {
          "body": "Represents an area effect cloud which will imbue a potion effect onto\n entities which enter it.",
          "plain": "Represents an area effect cloud which will imbue a potion effect onto\n entities which enter it."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.ArmorStand",
        "children": [
          {
            "kind": "METHOD",
            "name": "canMove()",
            "comment": {
              "body": "Tests if this armor stand can move.\n\n \u003cp\u003eThe default value is \u003ccode\u003etrue\u003c/code\u003e.\u003c/p\u003e",
              "tags": "Returns \u003ccode\u003etrue\u003c/code\u003e if this armour stand can move, \u003ccode\u003efalse\u003c/code\u003e otherwise.",
              "plain": "Tests if this armor stand can move.\n\n \u003cp\u003eThe default value is {@code true}.\u003c/p\u003e\n@return {@code true} if this armour stand can move, {@code false} otherwise"
            }
          },
          {
            "kind": "METHOD",
            "name": "canTick()",
            "comment": {
              "body": "Tests if this armor stand can tick.\n\n \u003cp\u003eThe default value is defined in \u003ccode\u003epaper.yml\u003c/code\u003e.\u003c/p\u003e",
              "tags": "Returns \u003ccode\u003etrue\u003c/code\u003e if this armour stand can tick, \u003ccode\u003efalse\u003c/code\u003e otherwise.",
              "plain": "Tests if this armor stand can tick.\n\n \u003cp\u003eThe default value is defined in {@code paper.yml}.\u003c/p\u003e\n@return {@code true} if this armour stand can tick, {@code false} otherwise"
            }
          },
          {
            "kind": "METHOD",
            "name": "getBodyPose()",
            "comment": {
              "body": "Returns the armor stand\u0027s body\u0027s\n current pose as a \u003ca href\u003d\"org/bukkit/util/EulerAngle.html\" title\u003d\"class in org.bukkit.util\"\u003e\u003ccode\u003eEulerAngle\u003c/code\u003e\u003c/a\u003e",
              "tags": "Returns the current pose.",
              "plain": "Returns the armor stand\u0027s body\u0027s\n current pose as a {@link org.bukkit.util.EulerAngle}\n@return the current pose"
            }
          },
          {
            "kind": "METHOD",
            "name": "getBoots()",
            "comment": {
              "body": "Returns the item currently being worn\n by the armor stand on its feet",
              "tags": "Returns the worn item.",
              "plain": "Returns the item currently being worn\n by the armor stand on its feet\n@return the worn item"
            }
          },
          {
            "kind": "METHOD",
            "name": "getChestplate()",
            "comment": {
              "body": "Returns the item currently being worn\n by the armor stand on its chest",
              "tags": "Returns the worn item.",
              "plain": "Returns the item currently being worn\n by the armor stand on its chest\n@return the worn item"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHeadPose()",
            "comment": {
              "body": "Returns the armor stand\u0027s head\u0027s\n current pose as a \u003ca href\u003d\"org/bukkit/util/EulerAngle.html\" title\u003d\"class in org.bukkit.util\"\u003e\u003ccode\u003eEulerAngle\u003c/code\u003e\u003c/a\u003e",
              "tags": "Returns the current pose.",
              "plain": "Returns the armor stand\u0027s head\u0027s\n current pose as a {@link org.bukkit.util.EulerAngle}\n@return the current pose"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHelmet()",
            "comment": {
              "body": "Returns the item currently being worn\n by the armor stand on its head",
              "tags": "Returns the worn item.",
              "plain": "Returns the item currently being worn\n by the armor stand on its head\n@return the worn item"
            }
          },
          {
            "kind": "METHOD",
            "name": "getItemInHand()",
            "comment": {
              "body": "Returns the item the armor stand is\n currently holding",
              "tags": "Returns the held item.",
              "plain": "Returns the item the armor stand is\n currently holding\n@return the held item"
            }
          },
          {
            "kind": "METHOD",
            "name": "getLeftArmPose()",
            "comment": {
              "body": "Returns the armor stand\u0027s left arm\u0027s\n current pose as a \u003ca href\u003d\"org/bukkit/util/EulerAngle.html\" title\u003d\"class in org.bukkit.util\"\u003e\u003ccode\u003eEulerAngle\u003c/code\u003e\u003c/a\u003e",
              "tags": "Returns the current pose.",
              "plain": "Returns the armor stand\u0027s left arm\u0027s\n current pose as a {@link org.bukkit.util.EulerAngle}\n@return the current pose"
            }
          },
          {
            "kind": "METHOD",
            "name": "getLeftLegPose()",
            "comment": {
              "body": "Returns the armor stand\u0027s left leg\u0027s\n current pose as a \u003ca href\u003d\"org/bukkit/util/EulerAngle.html\" title\u003d\"class in org.bukkit.util\"\u003e\u003ccode\u003eEulerAngle\u003c/code\u003e\u003c/a\u003e",
              "tags": "Returns the current pose.",
              "plain": "Returns the armor stand\u0027s left leg\u0027s\n current pose as a {@link org.bukkit.util.EulerAngle}\n@return the current pose"
            }
          },
          {
            "kind": "METHOD",
            "name": "getLeggings()",
            "comment": {
              "body": "Returns the item currently being worn\n by the armor stand on its legs",
              "tags": "Returns the worn item.",
              "plain": "Returns the item currently being worn\n by the armor stand on its legs\n@return the worn item"
            }
          },
          {
            "kind": "METHOD",
            "name": "getRightArmPose()",
            "comment": {
              "body": "Returns the armor stand\u0027s right arm\u0027s\n current pose as a \u003ca href\u003d\"org/bukkit/util/EulerAngle.html\" title\u003d\"class in org.bukkit.util\"\u003e\u003ccode\u003eEulerAngle\u003c/code\u003e\u003c/a\u003e",
              "tags": "Returns the current pose.",
              "plain": "Returns the armor stand\u0027s right arm\u0027s\n current pose as a {@link org.bukkit.util.EulerAngle}\n@return the current pose"
            }
          },
          {
            "kind": "METHOD",
            "name": "getRightLegPose()",
            "comment": {
              "body": "Returns the armor stand\u0027s right leg\u0027s\n current pose as a \u003ca href\u003d\"org/bukkit/util/EulerAngle.html\" title\u003d\"class in org.bukkit.util\"\u003e\u003ccode\u003eEulerAngle\u003c/code\u003e\u003c/a\u003e",
              "tags": "Returns the current pose.",
              "plain": "Returns the armor stand\u0027s right leg\u0027s\n current pose as a {@link org.bukkit.util.EulerAngle}\n@return the current pose"
            }
          },
          {
            "kind": "METHOD",
            "name": "hasArms()",
            "comment": {
              "body": "Returns whether this armor stand has arms",
              "tags": "Returns whether this has arms or not.",
              "plain": "Returns whether this armor stand has arms\n@return whether this has arms or not"
            }
          },
          {
            "kind": "METHOD",
            "name": "hasBasePlate()",
            "comment": {
              "body": "Returns whether the armor stand has\n a base plate",
              "tags": "Returns whether it has a base plate.",
              "plain": "Returns whether the armor stand has\n a base plate\n@return whether it has a base plate"
            }
          },
          {
            "kind": "METHOD",
            "name": "isMarker()",
            "comment": {
              "body": "Returns whether this armor stand is a marker,\n meaning it has a very small collision box",
              "tags": "Returns whether this is a marker.",
              "plain": "Returns whether this armor stand is a marker,\n meaning it has a very small collision box\n@return whether this is a marker"
            }
          },
          {
            "kind": "METHOD",
            "name": "isSmall()",
            "comment": {
              "body": "Returns whether this armor stand is scaled\n down",
              "tags": "Returns whether this is scaled down.",
              "plain": "Returns whether this armor stand is scaled\n down\n@return whether this is scaled down"
            }
          },
          {
            "kind": "METHOD",
            "name": "isVisible()",
            "comment": {
              "body": "Returns whether the armor stand should be\n visible or not",
              "tags": "Returns whether the stand is visible or not.",
              "plain": "Returns whether the armor stand should be\n visible or not\n@return whether the stand is visible or not"
            }
          },
          {
            "kind": "METHOD",
            "name": "setArms(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "arms"
              }
            ],
            "comment": {
              "body": "Sets whether this armor stand has arms",
              "plain": "Sets whether this armor stand has arms\n@param arms whether this has arms or not"
            }
          },
          {
            "kind": "METHOD",
            "name": "setBasePlate(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "basePlate"
              }
            ],
            "comment": {
              "body": "Sets whether the armor stand has a\n base plate",
              "plain": "Sets whether the armor stand has a\n base plate\n@param basePlate whether is has a base plate"
            }
          },
          {
            "kind": "METHOD",
            "name": "setBodyPose(org.bukkit.util.EulerAngle)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "pose"
              }
            ],
            "comment": {
              "body": "Sets the armor stand\u0027s body\u0027s\n current pose as a \u003ca href\u003d\"org/bukkit/util/EulerAngle.html\" title\u003d\"class in org.bukkit.util\"\u003e\u003ccode\u003eEulerAngle\u003c/code\u003e\u003c/a\u003e",
              "plain": "Sets the armor stand\u0027s body\u0027s\n current pose as a {@link org.bukkit.util.EulerAngle}\n@param pose the current pose"
            }
          },
          {
            "kind": "METHOD",
            "name": "setBoots(org.bukkit.inventory.ItemStack)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "item"
              }
            ],
            "comment": {
              "body": "Sets the item currently being worn\n by the armor stand on its feet",
              "plain": "Sets the item currently being worn\n by the armor stand on its feet\n@param item the item to wear"
            }
          },
          {
            "kind": "METHOD",
            "name": "setCanMove(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "move"
              }
            ],
            "comment": {
              "body": "Sets if this armor stand can move.",
              "plain": "Sets if this armor stand can move.\n@param move {@code true} if this armour stand can move, {@code false} otherwise"
            }
          },
          {
            "kind": "METHOD",
            "name": "setCanTick(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "tick"
              }
            ],
            "comment": {
              "body": "Sets if this armor stand can tick.",
              "plain": "Sets if this armor stand can tick.\n@param tick {@code true} if this armour stand can tick, {@code false} otherwise"
            }
          },
          {
            "kind": "METHOD",
            "name": "setChestplate(org.bukkit.inventory.ItemStack)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "item"
              }
            ],
            "comment": {
              "body": "Sets the item currently being worn\n by the armor stand on its chest",
              "plain": "Sets the item currently being worn\n by the armor stand on its chest\n@param item the item to wear"
            }
          },
          {
            "kind": "METHOD",
            "name": "setHeadPose(org.bukkit.util.EulerAngle)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "pose"
              }
            ],
            "comment": {
              "body": "Sets the armor stand\u0027s head\u0027s\n current pose as a \u003ca href\u003d\"org/bukkit/util/EulerAngle.html\" title\u003d\"class in org.bukkit.util\"\u003e\u003ccode\u003eEulerAngle\u003c/code\u003e\u003c/a\u003e",
              "plain": "Sets the armor stand\u0027s head\u0027s\n current pose as a {@link org.bukkit.util.EulerAngle}\n@param pose the current pose"
            }
          },
          {
            "kind": "METHOD",
            "name": "setHelmet(org.bukkit.inventory.ItemStack)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "item"
              }
            ],
            "comment": {
              "body": "Sets the item currently being worn\n by the armor stand on its head",
              "plain": "Sets the item currently being worn\n by the armor stand on its head\n@param item the item to wear"
            }
          },
          {
            "kind": "METHOD",
            "name": "setItemInHand(org.bukkit.inventory.ItemStack)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "item"
              }
            ],
            "comment": {
              "body": "Sets the item the armor stand is currently\n holding",
              "plain": "Sets the item the armor stand is currently\n holding\n@param item the item to hold"
            }
          },
          {
            "kind": "METHOD",
            "name": "setLeftArmPose(org.bukkit.util.EulerAngle)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "pose"
              }
            ],
            "comment": {
              "body": "Sets the armor stand\u0027s left arm\u0027s\n current pose as a \u003ca href\u003d\"org/bukkit/util/EulerAngle.html\" title\u003d\"class in org.bukkit.util\"\u003e\u003ccode\u003eEulerAngle\u003c/code\u003e\u003c/a\u003e",
              "plain": "Sets the armor stand\u0027s left arm\u0027s\n current pose as a {@link org.bukkit.util.EulerAngle}\n@param pose the current pose"
            }
          },
          {
            "kind": "METHOD",
            "name": "setLeftLegPose(org.bukkit.util.EulerAngle)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "pose"
              }
            ],
            "comment": {
              "body": "Sets the armor stand\u0027s left leg\u0027s\n current pose as a \u003ca href\u003d\"org/bukkit/util/EulerAngle.html\" title\u003d\"class in org.bukkit.util\"\u003e\u003ccode\u003eEulerAngle\u003c/code\u003e\u003c/a\u003e",
              "plain": "Sets the armor stand\u0027s left leg\u0027s\n current pose as a {@link org.bukkit.util.EulerAngle}\n@param pose the current pose"
            }
          },
          {
            "kind": "METHOD",
            "name": "setLeggings(org.bukkit.inventory.ItemStack)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "item"
              }
            ],
            "comment": {
              "body": "Sets the item currently being worn\n by the armor stand on its legs",
              "plain": "Sets the item currently being worn\n by the armor stand on its legs\n@param item the item to wear"
            }
          },
          {
            "kind": "METHOD",
            "name": "setMarker(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "marker"
              }
            ],
            "comment": {
              "body": "Sets whether this armor stand is a marker,\n meaning it has a very small collision box",
              "plain": "Sets whether this armor stand is a marker,\n meaning it has a very small collision box\n@param marker whether this is a marker"
            }
          },
          {
            "kind": "METHOD",
            "name": "setRightArmPose(org.bukkit.util.EulerAngle)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "pose"
              }
            ],
            "comment": {
              "body": "Sets the armor stand\u0027s right arm\u0027s\n current pose as a \u003ca href\u003d\"org/bukkit/util/EulerAngle.html\" title\u003d\"class in org.bukkit.util\"\u003e\u003ccode\u003eEulerAngle\u003c/code\u003e\u003c/a\u003e",
              "plain": "Sets the armor stand\u0027s right arm\u0027s\n current pose as a {@link org.bukkit.util.EulerAngle}\n@param pose the current pose"
            }
          },
          {
            "kind": "METHOD",
            "name": "setRightLegPose(org.bukkit.util.EulerAngle)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "pose"
              }
            ],
            "comment": {
              "body": "Sets the armor stand\u0027s right leg\u0027s\n current pose as a \u003ca href\u003d\"org/bukkit/util/EulerAngle.html\" title\u003d\"class in org.bukkit.util\"\u003e\u003ccode\u003eEulerAngle\u003c/code\u003e\u003c/a\u003e",
              "plain": "Sets the armor stand\u0027s right leg\u0027s\n current pose as a {@link org.bukkit.util.EulerAngle}\n@param pose the current pose"
            }
          },
          {
            "kind": "METHOD",
            "name": "setSmall(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "small"
              }
            ],
            "comment": {
              "body": "Sets whether this armor stand is scaled\n down",
              "plain": "Sets whether this armor stand is scaled\n down\n@param small whether this is scaled down"
            }
          },
          {
            "kind": "METHOD",
            "name": "setVisible(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "visible"
              }
            ],
            "comment": {
              "body": "Sets whether the armor stand should be\n visible or not",
              "plain": "Sets whether the armor stand should be\n visible or not\n@param visible whether the stand is visible or not"
            }
          }
        ]
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.Arrow",
        "children": [
          {
            "kind": "METHOD",
            "name": "getAttachedBlock()",
            "comment": {
              "body": "Gets the block to which this arrow is attached.",
              "tags": "Returns the attached block or null if not attached.",
              "plain": "Gets the block to which this arrow is attached.\n@return the attached block or null if not attached"
            }
          },
          {
            "kind": "METHOD",
            "name": "getKnockbackStrength()",
            "comment": {
              "body": "Gets the knockback strength for an arrow, which is the\n \u003ca href\u003d\"org/bukkit/enchantments/Enchantment.html#KNOCKBACK\"\u003e\u003ccode\u003eKnockBack\u003c/code\u003e\u003c/a\u003e level\n of the bow that shot it.",
              "tags": "Returns the knockback strength value.",
              "plain": "Gets the knockback strength for an arrow, which is the\n {@link org.bukkit.enchantments.Enchantment#KNOCKBACK KnockBack} level\n of the bow that shot it.\n@return the knockback strength value"
            }
          },
          {
            "kind": "METHOD",
            "name": "getPickupRule()",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Gets the \u003ca href\u003d\"org/bukkit/entity/Arrow.PickupRule.html\" title\u003d\"enum in org.bukkit.entity\"\u003e\u003ccode\u003eArrow.PickupRule\u003c/code\u003e\u003c/a\u003e for this arrow.\n\n \u003cp\u003eThis is generally \u003ca href\u003d\"org/bukkit/entity/Arrow.PickupRule.html#ALLOWED\"\u003e\u003ccode\u003eArrow.PickupRule.ALLOWED\u003c/code\u003e\u003c/a\u003e only if the arrow was\n \u003cb\u003enot\u003c/b\u003e fired from a bow with the infinity enchantment.\u003c/p\u003e",
              "tags": "Returns The pickup rule.",
              "plain": "Gets the {@link PickupRule} for this arrow.\n\n \u003cp\u003eThis is generally {@link PickupRule#ALLOWED} only if the arrow was\n \u003cb\u003enot\u003c/b\u003e fired from a bow with the infinity enchantment.\u003c/p\u003e\n@return The pickup rule\n@deprecated Use {@link Arrow#getPickupStatus()} as an upstream compatible replacement for this function"
            }
          },
          {
            "kind": "METHOD",
            "name": "getPickupStatus()",
            "comment": {
              "body": "Gets the current pickup status of this arrow.",
              "tags": "Returns the pickup status of this arrow..",
              "plain": "Gets the current pickup status of this arrow.\n@return the pickup status of this arrow."
            }
          },
          {
            "kind": "METHOD",
            "name": "isCritical()",
            "comment": {
              "body": "Gets whether this arrow is critical.\n \u003cp\u003e\n Critical arrows have increased damage and cause particle effects.\n \u003cp\u003e\n Critical arrows generally occur when a player fully draws a bow before\n firing.",
              "tags": "Returns true if it is critical.",
              "plain": "Gets whether this arrow is critical.\n \u003cp\u003e\n Critical arrows have increased damage and cause particle effects.\n \u003cp\u003e\n Critical arrows generally occur when a player fully draws a bow before\n firing.\n@return true if it is critical"
            }
          },
          {
            "kind": "METHOD",
            "name": "isInBlock()",
            "comment": {
              "body": "Gets whether this arrow is in a block or not.\n \u003cp\u003e\n Arrows in a block are motionless and may be picked up by players.",
              "tags": "Returns true if in a block.",
              "plain": "Gets whether this arrow is in a block or not.\n \u003cp\u003e\n Arrows in a block are motionless and may be picked up by players.\n@return true if in a block"
            }
          },
          {
            "kind": "ENUM",
            "name": "org.bukkit.entity.Arrow.PickupRule",
            "children": [
              {
                "kind": "ENUM_CONSTANT",
                "name": "ALLOWED"
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "CREATIVE_ONLY"
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "DISALLOWED"
              },
              {
                "kind": "CONSTRUCTOR",
                "name": "PickupRule()"
              },
              {
                "kind": "METHOD",
                "name": "valueOf(java.lang.String)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "name"
                  }
                ]
              },
              {
                "kind": "METHOD",
                "name": "values()"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            }
          },
          {
            "kind": "ENUM",
            "name": "org.bukkit.entity.Arrow.PickupStatus",
            "children": [
              {
                "kind": "ENUM_CONSTANT",
                "name": "ALLOWED",
                "comment": {
                  "body": "The arrow can be picked up.",
                  "plain": "The arrow can be picked up."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "CREATIVE_ONLY",
                "comment": {
                  "body": "The arrow can only be picked up by players in creative mode.",
                  "plain": "The arrow can only be picked up by players in creative mode."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "DISALLOWED",
                "comment": {
                  "body": "The arrow cannot be picked up.",
                  "plain": "The arrow cannot be picked up."
                }
              },
              {
                "kind": "CONSTRUCTOR",
                "name": "PickupStatus()"
              },
              {
                "kind": "METHOD",
                "name": "valueOf(java.lang.String)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "name"
                  }
                ]
              },
              {
                "kind": "METHOD",
                "name": "values()"
              }
            ],
            "comment": {
              "body": "Represents the pickup status of this arrow.",
              "plain": "Represents the pickup status of this arrow."
            }
          },
          {
            "kind": "CLASS",
            "name": "org.bukkit.entity.Arrow.Spigot",
            "children": [
              {
                "kind": "CONSTRUCTOR",
                "name": "Spigot()"
              },
              {
                "kind": "METHOD",
                "name": "getDamage()"
              },
              {
                "kind": "METHOD",
                "name": "setDamage(double)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "damage"
                  }
                ]
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "setCritical(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "critical"
              }
            ],
            "comment": {
              "body": "Sets whether or not this arrow should be critical.",
              "plain": "Sets whether or not this arrow should be critical.\n@param critical whether or not it should be critical"
            }
          },
          {
            "kind": "METHOD",
            "name": "setKnockbackStrength(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "knockbackStrength"
              }
            ],
            "comment": {
              "body": "Sets the knockback strength for an arrow.",
              "plain": "Sets the knockback strength for an arrow.\n@param knockbackStrength the knockback strength value"
            }
          },
          {
            "kind": "METHOD",
            "name": "setPickupRule(org.bukkit.entity.Arrow.PickupRule)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "rule"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Set the rule for which players can pickup this arrow as an item.",
              "plain": "Set the rule for which players can pickup this arrow as an item.\n@param rule The pickup rule\n@deprecated Use {@link Arrow#setPickupStatus(PickupStatus)} with {@link PickupStatus} as an upstream compatible replacement for this function"
            }
          },
          {
            "kind": "METHOD",
            "name": "setPickupStatus(org.bukkit.entity.Arrow.PickupStatus)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "status"
              }
            ],
            "comment": {
              "body": "Sets the current pickup status of this arrow.",
              "plain": "Sets the current pickup status of this arrow.\n@param status new pickup status of this arrow."
            }
          },
          {
            "kind": "METHOD",
            "name": "spigot()"
          }
        ],
        "comment": {
          "body": "Represents an arrow.",
          "plain": "Represents an arrow."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.Bat",
        "children": [
          {
            "kind": "METHOD",
            "name": "isAwake()",
            "comment": {
              "body": "Checks the current waking state of this bat.\n \u003cp\u003e\n This does not imply any persistence of state past the method call.",
              "tags": "Returns true if the bat is awake or false if it is currently hanging\n     from a block.",
              "plain": "Checks the current waking state of this bat.\n \u003cp\u003e\n This does not imply any persistence of state past the method call.\n@return true if the bat is awake or false if it is currently hanging\n     from a block"
            }
          },
          {
            "kind": "METHOD",
            "name": "setAwake(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "state"
              }
            ],
            "comment": {
              "body": "This method modifies the current waking state of this bat.\n \u003cp\u003e\n This does not prevent a bat from spontaneously awaking itself, or from\n reattaching itself to a block.",
              "plain": "This method modifies the current waking state of this bat.\n \u003cp\u003e\n This does not prevent a bat from spontaneously awaking itself, or from\n reattaching itself to a block.\n@param state the new state"
            }
          }
        ],
        "comment": {
          "body": "Represents a Bat",
          "plain": "Represents a Bat"
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.Blaze",
        "comment": {
          "body": "Represents a Blaze monster",
          "plain": "Represents a Blaze monster"
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.Boat",
        "children": [
          {
            "kind": "METHOD",
            "name": "getMaxSpeed()",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Gets the maximum speed of a boat. The speed is unrelated to the\n velocity.",
              "tags": "Returns The max speed..",
              "plain": "Gets the maximum speed of a boat. The speed is unrelated to the\n velocity.\n@return The max speed.\n@deprecated boats are complex and many of these methods do not work correctly across multiple versions."
            }
          },
          {
            "kind": "METHOD",
            "name": "getOccupiedDeceleration()",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Gets the deceleration rate (newSpeed \u003d curSpeed * rate) of occupied\n boats. The default is 0.2.",
              "tags": "Returns The rate of deceleration.",
              "plain": "Gets the deceleration rate (newSpeed \u003d curSpeed * rate) of occupied\n boats. The default is 0.2.\n@return The rate of deceleration\n@deprecated boats are complex and many of these methods do not work correctly across multiple versions."
            }
          },
          {
            "kind": "METHOD",
            "name": "getUnoccupiedDeceleration()",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Gets the deceleration rate (newSpeed \u003d curSpeed * rate) of unoccupied\n boats. The default is -1. Values below 0 indicate that no additional\n deceleration is imposed.",
              "tags": "Returns The rate of deceleration.",
              "plain": "Gets the deceleration rate (newSpeed \u003d curSpeed * rate) of unoccupied\n boats. The default is -1. Values below 0 indicate that no additional\n deceleration is imposed.\n@return The rate of deceleration\n@deprecated boats are complex and many of these methods do not work correctly across multiple versions."
            }
          },
          {
            "kind": "METHOD",
            "name": "getWoodType()",
            "comment": {
              "body": "Gets the wood type of the boat.",
              "tags": "Returns the wood type.",
              "plain": "Gets the wood type of the boat.\n@return the wood type"
            }
          },
          {
            "kind": "METHOD",
            "name": "getWorkOnLand()",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Get whether boats can work on land.",
              "tags": "Returns whether boats can work on land.",
              "plain": "Get whether boats can work on land.\n@return whether boats can work on land\n@deprecated boats are complex and many of these methods do not work correctly across multiple versions."
            }
          },
          {
            "kind": "METHOD",
            "name": "setMaxSpeed(double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "speed"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Sets the maximum speed of a boat. Must be nonnegative. Default is 0.4D.",
              "plain": "Sets the maximum speed of a boat. Must be nonnegative. Default is 0.4D.\n@param speed The max speed.\n@deprecated boats are complex and many of these methods do not work correctly across multiple versions."
            }
          },
          {
            "kind": "METHOD",
            "name": "setOccupiedDeceleration(double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "rate"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Sets the deceleration rate (newSpeed \u003d curSpeed * rate) of occupied\n boats. Setting this to a higher value allows for quicker acceleration.\n The default is 0.2.",
              "plain": "Sets the deceleration rate (newSpeed \u003d curSpeed * rate) of occupied\n boats. Setting this to a higher value allows for quicker acceleration.\n The default is 0.2.\n@param rate deceleration rate\n@deprecated boats are complex and many of these methods do not work correctly across multiple versions."
            }
          },
          {
            "kind": "METHOD",
            "name": "setUnoccupiedDeceleration(double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "rate"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Sets the deceleration rate (newSpeed \u003d curSpeed * rate) of unoccupied\n boats. Setting this to a higher value allows for quicker deceleration\n of boats when a player disembarks. The default is -1. Values below 0\n indicate that no additional deceleration is imposed.",
              "plain": "Sets the deceleration rate (newSpeed \u003d curSpeed * rate) of unoccupied\n boats. Setting this to a higher value allows for quicker deceleration\n of boats when a player disembarks. The default is -1. Values below 0\n indicate that no additional deceleration is imposed.\n@param rate deceleration rate\n@deprecated boats are complex and many of these methods do not work correctly across multiple versions."
            }
          },
          {
            "kind": "METHOD",
            "name": "setWoodType(org.bukkit.TreeSpecies)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "species"
              }
            ],
            "comment": {
              "body": "Sets the wood type of the boat.",
              "plain": "Sets the wood type of the boat.\n@param species the new wood type"
            }
          },
          {
            "kind": "METHOD",
            "name": "setWorkOnLand(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "workOnLand"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Set whether boats can work on land.",
              "plain": "Set whether boats can work on land.\n@param workOnLand whether boats can work on land\n@deprecated boats are complex and many of these methods do not work correctly across multiple versions."
            }
          }
        ],
        "comment": {
          "body": "Represents a boat entity.",
          "plain": "Represents a boat entity."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.CaveSpider",
        "comment": {
          "body": "Represents a Spider.",
          "plain": "Represents a Spider."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.ChestedHorse",
        "children": [
          {
            "kind": "METHOD",
            "name": "isCarryingChest()",
            "comment": {
              "body": "Gets whether the horse has a chest equipped.",
              "tags": "Returns true if the horse has chest storage.",
              "plain": "Gets whether the horse has a chest equipped.\n@return true if the horse has chest storage"
            }
          },
          {
            "kind": "METHOD",
            "name": "setCarryingChest(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "chest"
              }
            ],
            "comment": {
              "body": "Sets whether the horse has a chest equipped. Removing a chest will also\n clear the chest\u0027s inventory.",
              "plain": "Sets whether the horse has a chest equipped. Removing a chest will also\n clear the chest\u0027s inventory.\n@param chest true if the horse should have a chest"
            }
          }
        ],
        "comment": {
          "body": "Represents Horse-like creatures which can carry an inventory.",
          "plain": "Represents Horse-like creatures which can carry an inventory."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.Chicken",
        "comment": {
          "body": "Represents a Chicken.",
          "plain": "Represents a Chicken."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.ComplexEntityPart",
        "children": [
          {
            "kind": "METHOD",
            "name": "getParent()",
            "comment": {
              "body": "Gets the parent \u003ca href\u003d\"org/bukkit/entity/ComplexLivingEntity.html\" title\u003d\"interface in org.bukkit.entity\"\u003e\u003ccode\u003eComplexLivingEntity\u003c/code\u003e\u003c/a\u003e of this part.",
              "tags": "Returns Parent complex entity.",
              "plain": "Gets the parent {@link ComplexLivingEntity} of this part.\n@return Parent complex entity"
            }
          }
        ],
        "comment": {
          "body": "Represents a single part of a \u003ca href\u003d\"org/bukkit/entity/ComplexLivingEntity.html\" title\u003d\"interface in org.bukkit.entity\"\u003e\u003ccode\u003eComplexLivingEntity\u003c/code\u003e\u003c/a\u003e",
          "plain": "Represents a single part of a {@link ComplexLivingEntity}"
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.ComplexLivingEntity",
        "children": [
          {
            "kind": "METHOD",
            "name": "getParts()",
            "comment": {
              "body": "Gets a list of parts that belong to this complex entity",
              "tags": "Returns List of parts.",
              "plain": "Gets a list of parts that belong to this complex entity\n@return List of parts"
            }
          }
        ],
        "comment": {
          "body": "Represents a complex living entity - one that is made up of various smaller\n parts",
          "plain": "Represents a complex living entity - one that is made up of various smaller\n parts"
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.Cow",
        "comment": {
          "body": "Represents a Cow.",
          "plain": "Represents a Cow."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.Creature",
        "comment": {
          "body": "Represents a Creature. Creatures are non-intelligent monsters or animals\n which have very simple abilities.",
          "plain": "Represents a Creature. Creatures are non-intelligent monsters or animals\n which have very simple abilities."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.Creeper",
        "children": [
          {
            "kind": "METHOD",
            "name": "getExplosionRadius()",
            "comment": {
              "body": "Get the explosion radius in which this Creeper\u0027s explosion will affect.",
              "tags": "Returns the explosion radius.",
              "plain": "Get the explosion radius in which this Creeper\u0027s explosion will affect.\n@return the explosion radius"
            }
          },
          {
            "kind": "METHOD",
            "name": "getMaxFuseTicks()",
            "comment": {
              "body": "Get the maximum fuse ticks for this Creeper, where the maximum ticks \n is the amount of time in which a creeper is allowed to be in the \n primed state before exploding.",
              "tags": "Returns the maximum fuse ticks.",
              "plain": "Get the maximum fuse ticks for this Creeper, where the maximum ticks \n is the amount of time in which a creeper is allowed to be in the \n primed state before exploding.\n@return the maximum fuse ticks"
            }
          },
          {
            "kind": "METHOD",
            "name": "isPowered()",
            "comment": {
              "body": "Checks if this Creeper is powered (Electrocuted)",
              "tags": "Returns true if this creeper is powered.",
              "plain": "Checks if this Creeper is powered (Electrocuted)\n@return true if this creeper is powered"
            }
          },
          {
            "kind": "METHOD",
            "name": "setExplosionRadius(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "radius"
              }
            ],
            "comment": {
              "body": "Set the explosion radius in which this Creeper\u0027s explosion will affect.",
              "plain": "Set the explosion radius in which this Creeper\u0027s explosion will affect.\n@param radius the new explosion radius"
            }
          },
          {
            "kind": "METHOD",
            "name": "setMaxFuseTicks(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "ticks"
              }
            ],
            "comment": {
              "body": "Set the maximum fuse ticks for this Creeper, where the maximum ticks \n is the amount of time in which a creeper is allowed to be in the \n primed state before exploding.",
              "plain": "Set the maximum fuse ticks for this Creeper, where the maximum ticks \n is the amount of time in which a creeper is allowed to be in the \n primed state before exploding.\n@param ticks the new maximum fuse ticks"
            }
          },
          {
            "kind": "METHOD",
            "name": "setPowered(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "value"
              }
            ],
            "comment": {
              "body": "Sets the Powered status of this Creeper",
              "plain": "Sets the Powered status of this Creeper\n@param value New Powered status"
            }
          }
        ],
        "comment": {
          "body": "Represents a Creeper",
          "plain": "Represents a Creeper"
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.Damageable",
        "children": [
          {
            "kind": "METHOD",
            "name": "damage(double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "amount"
              }
            ],
            "comment": {
              "body": "Deals the given amount of damage to this entity.",
              "plain": "Deals the given amount of damage to this entity.\n@param amount Amount of damage to deal"
            }
          },
          {
            "kind": "METHOD",
            "name": "damage(double,org.bukkit.entity.Entity)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "amount"
              },
              {
                "kind": "PARAMETER",
                "name": "source"
              }
            ],
            "comment": {
              "body": "Deals the given amount of damage to this entity, from a specified\n entity.",
              "plain": "Deals the given amount of damage to this entity, from a specified\n entity.\n@param amount Amount of damage to deal\n@param source Entity which to attribute this damage from"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHealth()",
            "comment": {
              "body": "Gets the entity\u0027s health from 0 to \u003ca href\u003d\"org/bukkit/entity/Damageable.html#getMaxHealth()\"\u003e\u003ccode\u003eDamageable.getMaxHealth()\u003c/code\u003e\u003c/a\u003e, where 0 is dead.",
              "tags": "Returns Health represented from 0 to max.",
              "plain": "Gets the entity\u0027s health from 0 to {@link #getMaxHealth()}, where 0 is dead.\n@return Health represented from 0 to max"
            }
          },
          {
            "kind": "METHOD",
            "name": "getMaxHealth()",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Gets the maximum health this entity has.",
              "tags": "Returns Maximum health.",
              "plain": "Gets the maximum health this entity has.\n@return Maximum health\n@deprecated use {@link Attribute#GENERIC_MAX_HEALTH}."
            }
          },
          {
            "kind": "METHOD",
            "name": "resetMaxHealth()",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Resets the max health to the original amount.",
              "plain": "Resets the max health to the original amount.\n@deprecated use {@link Attribute#GENERIC_MAX_HEALTH}."
            }
          },
          {
            "kind": "METHOD",
            "name": "setHealth(double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "health"
              }
            ],
            "comment": {
              "body": "Sets the entity\u0027s health from 0 to \u003ca href\u003d\"org/bukkit/entity/Damageable.html#getMaxHealth()\"\u003e\u003ccode\u003eDamageable.getMaxHealth()\u003c/code\u003e\u003c/a\u003e, where 0 is\n dead.",
              "plain": "Sets the entity\u0027s health from 0 to {@link #getMaxHealth()}, where 0 is\n dead.\n@param health New health represented from 0 to max\n@throws IllegalArgumentException Thrown if the health is {@literal \u003c 0 or \u003e}\n     {@link #getMaxHealth()}"
            }
          },
          {
            "kind": "METHOD",
            "name": "setMaxHealth(double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "health"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Sets the maximum health this entity can have.\n \u003cp\u003e\n If the health of the entity is above the value provided it will be set\n to that value.\n \u003cp\u003e\n Note: An entity with a health bar (\u003ca href\u003d\"org/bukkit/entity/Player.html\" title\u003d\"interface in org.bukkit.entity\"\u003e\u003ccode\u003ePlayer\u003c/code\u003e\u003c/a\u003e, \u003ca href\u003d\"org/bukkit/entity/EnderDragon.html\" title\u003d\"interface in org.bukkit.entity\"\u003e\u003ccode\u003eEnderDragon\u003c/code\u003e\u003c/a\u003e,\n \u003ca href\u003d\"org/bukkit/entity/Wither.html\" title\u003d\"interface in org.bukkit.entity\"\u003e\u003ccode\u003eWither\u003c/code\u003e\u003c/a\u003e, etc...} will have their bar scaled accordingly.",
              "plain": "Sets the maximum health this entity can have.\n \u003cp\u003e\n If the health of the entity is above the value provided it will be set\n to that value.\n \u003cp\u003e\n Note: An entity with a health bar ({@link Player}, {@link EnderDragon},\n {@link Wither}, etc...} will have their bar scaled accordingly.\n@param health amount of health to set the maximum to\n@deprecated use {@link Attribute#GENERIC_MAX_HEALTH}."
            }
          }
        ],
        "comment": {
          "body": "Represents an \u003ca href\u003d\"org/bukkit/entity/Entity.html\" title\u003d\"interface in org.bukkit.entity\"\u003e\u003ccode\u003eEntity\u003c/code\u003e\u003c/a\u003e that has health and can take damage.",
          "plain": "Represents an {@link Entity} that has health and can take damage."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.Donkey",
        "comment": {
          "body": "Represents a Donkey - variant of \u003ca href\u003d\"org/bukkit/entity/ChestedHorse.html\" title\u003d\"interface in org.bukkit.entity\"\u003e\u003ccode\u003eChestedHorse\u003c/code\u003e\u003c/a\u003e.",
          "plain": "Represents a Donkey - variant of {@link ChestedHorse}."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.DragonFireball"
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.Egg",
        "comment": {
          "body": "Represents a thrown egg.",
          "plain": "Represents a thrown egg."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.ElderGuardian",
        "comment": {
          "body": "Represents an ElderGuardian - variant of \u003ca href\u003d\"org/bukkit/entity/Guardian.html\" title\u003d\"interface in org.bukkit.entity\"\u003e\u003ccode\u003eGuardian\u003c/code\u003e\u003c/a\u003e.",
          "plain": "Represents an ElderGuardian - variant of {@link Guardian}."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.EnderCrystal",
        "children": [
          {
            "kind": "METHOD",
            "name": "getBeamTarget()",
            "comment": {
              "body": "Gets the location that this end crystal is pointing its beam to.",
              "tags": "Returns the location that the beam is pointed to, or null if the beam is not shown.",
              "plain": "Gets the location that this end crystal is pointing its beam to.\n@return the location that the beam is pointed to, or null if the beam is not shown"
            }
          },
          {
            "kind": "METHOD",
            "name": "isShowingBottom()",
            "comment": {
              "body": "Return whether or not this end crystal is showing the\n bedrock slate underneath it.",
              "tags": "Returns true if the bottom is being shown.",
              "plain": "Return whether or not this end crystal is showing the\n bedrock slate underneath it.\n@return true if the bottom is being shown"
            }
          },
          {
            "kind": "METHOD",
            "name": "setBeamTarget(org.bukkit.Location)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "location"
              }
            ],
            "comment": {
              "body": "Sets the location that this end crystal is pointing to. Passing a null\n value will remove the current beam.",
              "plain": "Sets the location that this end crystal is pointing to. Passing a null\n value will remove the current beam.\n@param location the location to point the beam to\n@throws IllegalArgumentException for differing worlds"
            }
          },
          {
            "kind": "METHOD",
            "name": "setShowingBottom(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "showing"
              }
            ],
            "comment": {
              "body": "Sets whether or not this end crystal is showing the\n bedrock slate underneath it.",
              "plain": "Sets whether or not this end crystal is showing the\n bedrock slate underneath it.\n@param showing whether the bedrock slate should be shown"
            }
          }
        ],
        "comment": {
          "body": "A crystal that heals nearby EnderDragons",
          "plain": "A crystal that heals nearby EnderDragons"
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.EnderDragon",
        "children": [
          {
            "kind": "METHOD",
            "name": "getPhase()",
            "comment": {
              "body": "Gets the current phase that the dragon is performing.",
              "tags": "Returns the current phase.",
              "plain": "Gets the current phase that the dragon is performing.\n@return the current phase"
            }
          },
          {
            "kind": "ENUM",
            "name": "org.bukkit.entity.EnderDragon.Phase",
            "children": [
              {
                "kind": "ENUM_CONSTANT",
                "name": "BREATH_ATTACK",
                "comment": {
                  "body": "The dragon will attack with dragon breath at its current location.",
                  "plain": "The dragon will attack with dragon breath at its current location."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "CHARGE_PLAYER",
                "comment": {
                  "body": "The dragon will charge a player.",
                  "plain": "The dragon will charge a player."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "CIRCLING",
                "comment": {
                  "body": "The dragon will circle outside the ring of pillars if ender\n crystals remain or inside the ring if not.",
                  "plain": "The dragon will circle outside the ring of pillars if ender\n crystals remain or inside the ring if not."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "DYING",
                "comment": {
                  "body": "The dragon will fly to the vicinity of the portal and die.",
                  "plain": "The dragon will fly to the vicinity of the portal and die."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "FLY_TO_PORTAL",
                "comment": {
                  "body": "The dragon will fly towards the empty portal (approaching\n from the other side, if applicable).",
                  "plain": "The dragon will fly towards the empty portal (approaching\n from the other side, if applicable)."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "HOVER",
                "comment": {
                  "body": "The dragon will hover at its current location, not performing any actions.",
                  "plain": "The dragon will hover at its current location, not performing any actions."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "LAND_ON_PORTAL",
                "comment": {
                  "body": "The dragon will land on on the portal. If the dragon is not near\n the portal, it will fly to it before mounting.",
                  "plain": "The dragon will land on on the portal. If the dragon is not near\n the portal, it will fly to it before mounting."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "LEAVE_PORTAL",
                "comment": {
                  "body": "The dragon will leave the portal.",
                  "plain": "The dragon will leave the portal."
                }
              },
              {
                "kind": "CONSTRUCTOR",
                "name": "Phase()"
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "ROAR_BEFORE_ATTACK",
                "comment": {
                  "body": "The dragon will roar before performing a breath attack.",
                  "plain": "The dragon will roar before performing a breath attack."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "SEARCH_FOR_BREATH_ATTACK_TARGET",
                "comment": {
                  "body": "The dragon will search for a player to attack with dragon breath.\n If no player is close enough to the dragon for 5 seconds, the \n dragon will charge at a player within 150 blocks or will take off \n and begin circling if no player is found.",
                  "plain": "The dragon will search for a player to attack with dragon breath.\n If no player is close enough to the dragon for 5 seconds, the \n dragon will charge at a player within 150 blocks or will take off \n and begin circling if no player is found."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "STRAFING",
                "comment": {
                  "body": "The dragon will fly towards a targeted player and shoot a\n fireball when within 64 blocks.",
                  "plain": "The dragon will fly towards a targeted player and shoot a\n fireball when within 64 blocks."
                }
              },
              {
                "kind": "METHOD",
                "name": "valueOf(java.lang.String)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "name"
                  }
                ]
              },
              {
                "kind": "METHOD",
                "name": "values()"
              }
            ],
            "comment": {
              "body": "Represents a phase or action that an Ender Dragon can perform.",
              "plain": "Represents a phase or action that an Ender Dragon can perform."
            }
          },
          {
            "kind": "METHOD",
            "name": "setPhase(org.bukkit.entity.EnderDragon.Phase)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "phase"
              }
            ],
            "comment": {
              "body": "Sets the next phase for the dragon to perform.",
              "plain": "Sets the next phase for the dragon to perform.\n@param phase the next phase"
            }
          }
        ],
        "comment": {
          "body": "Represents an Ender Dragon",
          "plain": "Represents an Ender Dragon"
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.EnderDragonPart",
        "children": [
          {
            "kind": "METHOD",
            "name": "getParent()"
          }
        ],
        "comment": {
          "body": "Represents an ender dragon part",
          "plain": "Represents an ender dragon part"
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.EnderPearl",
        "comment": {
          "body": "Represents a thrown Ender Pearl entity",
          "plain": "Represents a thrown Ender Pearl entity"
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.EnderSignal",
        "children": [
          {
            "kind": "METHOD",
            "name": "getDespawnTimer()",
            "comment": {
              "body": "Gets the amount of time this entity has been alive (in ticks).\n \u003cbr\u003e\n When this number is greater than 80, it will despawn on the next tick.",
              "tags": "Returns the number of ticks this EnderSignal has been alive..",
              "plain": "Gets the amount of time this entity has been alive (in ticks).\n \u003cbr\u003e\n When this number is greater than 80, it will despawn on the next tick.\n@return the number of ticks this EnderSignal has been alive."
            }
          },
          {
            "kind": "METHOD",
            "name": "getDropItem()",
            "comment": {
              "body": "Gets if the EnderSignal should drop an item on death.\u003cbr\u003e\n If \u003ccode\u003etrue\u003c/code\u003e, it will drop an item. If \u003ccode\u003efalse\u003c/code\u003e, it will shatter.",
              "tags": "Returns true if the EnderSignal will drop an item on death, or false if\n it will shatter.",
              "plain": "Gets if the EnderSignal should drop an item on death.\u003cbr\u003e\n If {@code true}, it will drop an item. If {@code false}, it will shatter.\n@return true if the EnderSignal will drop an item on death, or false if\n it will shatter"
            }
          },
          {
            "kind": "METHOD",
            "name": "getTargetLocation()",
            "comment": {
              "body": "Get the location this EnderSignal is moving towards.",
              "tags": "Returns the \u003ca href\u003d\"org/bukkit/Location.html\" title\u003d\"class in org.bukkit\"\u003e\u003ccode\u003eLocation\u003c/code\u003e\u003c/a\u003e this EnderSignal is moving towards..",
              "plain": "Get the location this EnderSignal is moving towards.\n@return the {@link Location} this EnderSignal is moving towards."
            }
          },
          {
            "kind": "METHOD",
            "name": "setDespawnTimer(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "timer"
              }
            ],
            "comment": {
              "body": "Set how long this entity has been alive (in ticks).\n \u003cbr\u003e\n When this number is greater than 80, it will despawn on the next tick.",
              "plain": "Set how long this entity has been alive (in ticks).\n \u003cbr\u003e\n When this number is greater than 80, it will despawn on the next tick.\n@param timer how long (in ticks) this EnderSignal has been alive."
            }
          },
          {
            "kind": "METHOD",
            "name": "setDropItem(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "drop"
              }
            ],
            "comment": {
              "body": "Sets if the EnderSignal should drop an item on death; or if it should\n shatter.",
              "plain": "Sets if the EnderSignal should drop an item on death; or if it should\n shatter.\n@param drop true if the EnderSignal should drop an item on death, or\n false if it should shatter."
            }
          },
          {
            "kind": "METHOD",
            "name": "setTargetLocation(org.bukkit.Location)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "location"
              }
            ],
            "comment": {
              "body": "Set the \u003ca href\u003d\"org/bukkit/Location.html\" title\u003d\"class in org.bukkit\"\u003e\u003ccode\u003eLocation\u003c/code\u003e\u003c/a\u003e this EnderSignal is moving towards.\n \u003cbr\u003e\n When setting a new target location, the \u003ca href\u003d\"org/bukkit/entity/EnderSignal.html#getDropItem()\"\u003e\u003ccode\u003eEnderSignal.getDropItem()\u003c/code\u003e\u003c/a\u003e resets to\n a random value and the despawn timer gets set back to 0.",
              "plain": "Set the {@link Location} this EnderSignal is moving towards.\n \u003cbr\u003e\n When setting a new target location, the {@link #getDropItem()} resets to\n a random value and the despawn timer gets set back to 0.\n@param location the new target location"
            }
          }
        ],
        "comment": {
          "body": "Represents an EnderSignal, which is created upon throwing an ender eye.",
          "plain": "Represents an EnderSignal, which is created upon throwing an ender eye."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.Enderman",
        "children": [
          {
            "kind": "METHOD",
            "name": "getCarriedMaterial()",
            "comment": {
              "body": "Get the id and data of the block that the Enderman is carrying.",
              "tags": "Returns MaterialData containing the id and data of the block.",
              "plain": "Get the id and data of the block that the Enderman is carrying.\n@return MaterialData containing the id and data of the block"
            }
          },
          {
            "kind": "METHOD",
            "name": "setCarriedMaterial(org.bukkit.material.MaterialData)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "material"
              }
            ],
            "comment": {
              "body": "Set the id and data of the block that the Enderman is carrying.",
              "plain": "Set the id and data of the block that the Enderman is carrying.\n@param material data to set the carried block to"
            }
          },
          {
            "kind": "METHOD",
            "name": "teleportRandomly()",
            "comment": {
              "body": "Try to teleport the enderman to a random nearby location.\n\n May conditionally fail if the random location was not valid",
              "tags": "Returns If the enderman teleported successfully or not.",
              "plain": "Try to teleport the enderman to a random nearby location.\n\n May conditionally fail if the random location was not valid\n@return If the enderman teleported successfully or not"
            }
          }
        ],
        "comment": {
          "body": "Represents an Enderman.",
          "plain": "Represents an Enderman."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.Endermite"
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.Entity",
        "children": [
          {
            "kind": "METHOD",
            "name": "addPassenger(org.bukkit.entity.Entity)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "passenger"
              }
            ],
            "comment": {
              "body": "Add a passenger to the vehicle.",
              "tags": "Returns false if it could not be done for whatever reason.",
              "plain": "Add a passenger to the vehicle.\n@param passenger The passenger to add\n@return false if it could not be done for whatever reason"
            }
          },
          {
            "kind": "METHOD",
            "name": "addScoreboardTag(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "tag"
              }
            ],
            "comment": {
              "body": "Add a tag to this entity.\n \u003cbr\u003e\n Entities can have no more than 1024 tags.",
              "tags": "Returns true if the tag was successfully added.",
              "plain": "Add a tag to this entity.\n \u003cbr\u003e\n Entities can have no more than 1024 tags.\n@param tag the tag to add\n@return true if the tag was successfully added"
            }
          },
          {
            "kind": "METHOD",
            "name": "eject()",
            "comment": {
              "body": "Eject any passenger.",
              "tags": "Returns True if there was a passenger..",
              "plain": "Eject any passenger.\n@return True if there was a passenger."
            }
          },
          {
            "kind": "METHOD",
            "name": "fromMobSpawner()",
            "comment": {
              "body": "Returns whether this entity was spawned from a mob spawner.",
              "tags": "Returns True if entity spawned from a mob spawner.",
              "plain": "Returns whether this entity was spawned from a mob spawner.\n@return True if entity spawned from a mob spawner"
            }
          },
          {
            "kind": "METHOD",
            "name": "getChunk()",
            "comment": {
              "body": "Gets the latest chunk an entity is currently or was in.",
              "tags": "Returns The current, or most recent chunk if the entity is invalid (which may load the chunk).",
              "plain": "Gets the latest chunk an entity is currently or was in.\n@return The current, or most recent chunk if the entity is invalid (which may load the chunk)"
            }
          },
          {
            "kind": "METHOD",
            "name": "getEntityId()",
            "comment": {
              "body": "Returns a unique id for this entity",
              "tags": "Returns Entity id.",
              "plain": "Returns a unique id for this entity\n@return Entity id"
            }
          },
          {
            "kind": "METHOD",
            "name": "getFallDistance()",
            "comment": {
              "body": "Returns the distance this entity has fallen",
              "tags": "Returns The distance..",
              "plain": "Returns the distance this entity has fallen\n@return The distance."
            }
          },
          {
            "kind": "METHOD",
            "name": "getFireTicks()",
            "comment": {
              "body": "Returns the entity\u0027s current fire ticks (ticks before the entity stops\n being on fire).",
              "tags": "Returns int fireTicks.",
              "plain": "Returns the entity\u0027s current fire ticks (ticks before the entity stops\n being on fire).\n@return int fireTicks"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHeight()",
            "comment": {
              "body": "Gets the entity\u0027s height",
              "tags": "Returns height of entity.",
              "plain": "Gets the entity\u0027s height\n@return height of entity"
            }
          },
          {
            "kind": "METHOD",
            "name": "getLastDamageCause()",
            "comment": {
              "body": "Retrieve the last \u003ca href\u003d\"org/bukkit/event/entity/EntityDamageEvent.html\" title\u003d\"class in org.bukkit.event.entity\"\u003e\u003ccode\u003eEntityDamageEvent\u003c/code\u003e\u003c/a\u003e inflicted on this entity.\n This event may have been cancelled.",
              "tags": "Returns the last known \u003ca href\u003d\"org/bukkit/event/entity/EntityDamageEvent.html\" title\u003d\"class in org.bukkit.event.entity\"\u003e\u003ccode\u003eEntityDamageEvent\u003c/code\u003e\u003c/a\u003e or null if hitherto\n     unharmed.",
              "plain": "Retrieve the last {@link EntityDamageEvent} inflicted on this entity.\n This event may have been cancelled.\n@return the last known {@link EntityDamageEvent} or null if hitherto\n     unharmed"
            }
          },
          {
            "kind": "METHOD",
            "name": "getLocation()",
            "comment": {
              "body": "Gets the entity\u0027s current position",
              "tags": "Returns a new copy of Location containing the position of this entity.",
              "plain": "Gets the entity\u0027s current position\n@return a new copy of Location containing the position of this entity"
            }
          },
          {
            "kind": "METHOD",
            "name": "getLocation(org.bukkit.Location)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "loc"
              }
            ],
            "comment": {
              "body": "Stores the entity\u0027s current position in the provided Location object.\n \u003cp\u003e\n If the provided Location is null this method does nothing and returns\n null.",
              "tags": "Returns The Location object provided or null.",
              "plain": "Stores the entity\u0027s current position in the provided Location object.\n \u003cp\u003e\n If the provided Location is null this method does nothing and returns\n null.\n@param loc the location to copy into\n@return The Location object provided or null"
            }
          },
          {
            "kind": "METHOD",
            "name": "getMaxFireTicks()",
            "comment": {
              "body": "Returns the entity\u0027s maximum fire ticks.",
              "tags": "Returns int maxFireTicks.",
              "plain": "Returns the entity\u0027s maximum fire ticks.\n@return int maxFireTicks"
            }
          },
          {
            "kind": "METHOD",
            "name": "getNearbyEntities(double,double,double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "y"
              },
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ],
            "comment": {
              "body": "Returns a list of entities within a bounding box centered around this\n entity",
              "tags": "Returns \u003ccode\u003eList\u0026lt;Entity\u0026gt;\u003c/code\u003e List of entities nearby.",
              "plain": "Returns a list of entities within a bounding box centered around this\n entity\n@param x 1/2 the size of the box along x axis\n@param y 1/2 the size of the box along y axis\n@param z 1/2 the size of the box along z axis\n@return {@code List\u003cEntity\u003e} List of entities nearby"
            }
          },
          {
            "kind": "METHOD",
            "name": "getOrigin()",
            "comment": {
              "body": "Gets the location where this entity originates from.\n \u003cp\u003e\n This value can be null if the entity hasn\u0027t yet been added to the world.",
              "tags": "Returns Location where entity originates or null if not yet added.",
              "plain": "Gets the location where this entity originates from.\n \u003cp\u003e\n This value can be null if the entity hasn\u0027t yet been added to the world.\n@return Location where entity originates or null if not yet added"
            }
          },
          {
            "kind": "METHOD",
            "name": "getPassenger()",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Gets the primary passenger of a vehicle. For vehicles that could have\n multiple passengers, this will only return the primary passenger.",
              "tags": "Returns an entity.",
              "plain": "Gets the primary passenger of a vehicle. For vehicles that could have\n multiple passengers, this will only return the primary passenger.\n@return an entity\n@deprecated entities may have multiple passengers, use\n {@link #getPassengers()}"
            }
          },
          {
            "kind": "METHOD",
            "name": "getPassengers()",
            "comment": {
              "body": "Gets a list of passengers of this vehicle.\n \u003cp\u003e\n The returned list will not be directly linked to the entity\u0027s current\n passengers, and no guarantees are made as to its mutability.",
              "tags": "Returns list of entities corresponding to current passengers..",
              "plain": "Gets a list of passengers of this vehicle.\n \u003cp\u003e\n The returned list will not be directly linked to the entity\u0027s current\n passengers, and no guarantees are made as to its mutability.\n@return list of entities corresponding to current passengers."
            }
          },
          {
            "kind": "METHOD",
            "name": "getPistonMoveReaction()",
            "comment": {
              "body": "Returns the reaction of the entity when moved by a piston.",
              "tags": "Returns reaction.",
              "plain": "Returns the reaction of the entity when moved by a piston.\n@return reaction"
            }
          },
          {
            "kind": "METHOD",
            "name": "getPortalCooldown()",
            "comment": {
              "body": "Gets the period of time (in ticks) before this entity can use a portal.",
              "tags": "Returns portal cooldown ticks.",
              "plain": "Gets the period of time (in ticks) before this entity can use a portal.\n@return portal cooldown ticks"
            }
          },
          {
            "kind": "METHOD",
            "name": "getScoreboardTags()",
            "comment": {
              "body": "Returns a set of tags for this entity.\n \u003cbr\u003e\n Entities can have no more than 1024 tags.",
              "tags": "Returns a set of tags for this entity.",
              "plain": "Returns a set of tags for this entity.\n \u003cbr\u003e\n Entities can have no more than 1024 tags.\n@return a set of tags for this entity"
            }
          },
          {
            "kind": "METHOD",
            "name": "getServer()",
            "comment": {
              "body": "Gets the \u003ca href\u003d\"org/bukkit/Server.html\" title\u003d\"interface in org.bukkit\"\u003e\u003ccode\u003eServer\u003c/code\u003e\u003c/a\u003e that contains this Entity",
              "tags": "Returns Server instance running this Entity.",
              "plain": "Gets the {@link Server} that contains this Entity\n@return Server instance running this Entity"
            }
          },
          {
            "kind": "METHOD",
            "name": "getTicksLived()",
            "comment": {
              "body": "Gets the amount of ticks this entity has lived for.\n \u003cp\u003e\n This is the equivalent to \"age\" in entities.",
              "tags": "Returns Age of entity.",
              "plain": "Gets the amount of ticks this entity has lived for.\n \u003cp\u003e\n This is the equivalent to \"age\" in entities.\n@return Age of entity"
            }
          },
          {
            "kind": "METHOD",
            "name": "getType()",
            "comment": {
              "body": "Get the type of the entity.",
              "tags": "Returns The entity type..",
              "plain": "Get the type of the entity.\n@return The entity type."
            }
          },
          {
            "kind": "METHOD",
            "name": "getUniqueId()",
            "comment": {
              "body": "Returns a unique and persistent id for this entity",
              "tags": "Returns unique id.",
              "plain": "Returns a unique and persistent id for this entity\n@return unique id"
            }
          },
          {
            "kind": "METHOD",
            "name": "getVehicle()",
            "comment": {
              "body": "Get the vehicle that this player is inside. If there is no vehicle,\n null will be returned.",
              "tags": "Returns The current vehicle..",
              "plain": "Get the vehicle that this player is inside. If there is no vehicle,\n null will be returned.\n@return The current vehicle."
            }
          },
          {
            "kind": "METHOD",
            "name": "getVelocity()",
            "comment": {
              "body": "Gets this entity\u0027s current velocity",
              "tags": "Returns Current traveling velocity of this entity.",
              "plain": "Gets this entity\u0027s current velocity\n@return Current traveling velocity of this entity"
            }
          },
          {
            "kind": "METHOD",
            "name": "getWidth()",
            "comment": {
              "body": "Gets the entity\u0027s width",
              "tags": "Returns width of entity.",
              "plain": "Gets the entity\u0027s width\n@return width of entity"
            }
          },
          {
            "kind": "METHOD",
            "name": "getWorld()",
            "comment": {
              "body": "Gets the current world this entity resides in",
              "tags": "Returns World.",
              "plain": "Gets the current world this entity resides in\n@return World"
            }
          },
          {
            "kind": "METHOD",
            "name": "hasGravity()",
            "comment": {
              "body": "Returns whether gravity applies to this entity.",
              "tags": "Returns whether gravity applies.",
              "plain": "Returns whether gravity applies to this entity.\n@return whether gravity applies"
            }
          },
          {
            "kind": "METHOD",
            "name": "isCustomNameVisible()",
            "comment": {
              "body": "Gets whether or not the mob\u0027s custom name is displayed client side.\n \u003cp\u003e\n This value has no effect on players, they will always display their\n name.",
              "tags": "Returns if the custom name is displayed.",
              "plain": "Gets whether or not the mob\u0027s custom name is displayed client side.\n \u003cp\u003e\n This value has no effect on players, they will always display their\n name.\n@return if the custom name is displayed"
            }
          },
          {
            "kind": "METHOD",
            "name": "isDead()",
            "comment": {
              "body": "Returns true if this entity has been marked for removal.",
              "tags": "Returns True if it is dead..",
              "plain": "Returns true if this entity has been marked for removal.\n@return True if it is dead."
            }
          },
          {
            "kind": "METHOD",
            "name": "isEmpty()",
            "comment": {
              "body": "Check if a vehicle has passengers.",
              "tags": "Returns True if the vehicle has no passengers..",
              "plain": "Check if a vehicle has passengers.\n@return True if the vehicle has no passengers."
            }
          },
          {
            "kind": "METHOD",
            "name": "isGlowing()",
            "comment": {
              "body": "Gets whether the entity is glowing or not.",
              "tags": "Returns whether the entity is glowing.",
              "plain": "Gets whether the entity is glowing or not.\n@return whether the entity is glowing"
            }
          },
          {
            "kind": "METHOD",
            "name": "isInsideVehicle()",
            "comment": {
              "body": "Returns whether this entity is inside a vehicle.",
              "tags": "Returns True if the entity is in a vehicle..",
              "plain": "Returns whether this entity is inside a vehicle.\n@return True if the entity is in a vehicle."
            }
          },
          {
            "kind": "METHOD",
            "name": "isInvulnerable()",
            "comment": {
              "body": "Gets whether the entity is invulnerable or not.",
              "tags": "Returns whether the entity is.",
              "plain": "Gets whether the entity is invulnerable or not.\n@return whether the entity is"
            }
          },
          {
            "kind": "METHOD",
            "name": "isOnGround()",
            "comment": {
              "body": "Returns true if the entity is supported by a block. This value is a\n state updated by the server and is not recalculated unless the entity\n moves.",
              "tags": "Returns True if entity is on ground..",
              "plain": "Returns true if the entity is supported by a block. This value is a\n state updated by the server and is not recalculated unless the entity\n moves.\n@return True if entity is on ground."
            }
          },
          {
            "kind": "METHOD",
            "name": "isSilent()",
            "comment": {
              "body": "Gets whether the entity is silent or not.",
              "tags": "Returns whether the entity is silent..",
              "plain": "Gets whether the entity is silent or not.\n@return whether the entity is silent."
            }
          },
          {
            "kind": "METHOD",
            "name": "isValid()",
            "comment": {
              "body": "Returns false if the entity has died or been despawned for some other\n reason.",
              "tags": "Returns True if valid..",
              "plain": "Returns false if the entity has died or been despawned for some other\n reason.\n@return True if valid."
            }
          },
          {
            "kind": "METHOD",
            "name": "leaveVehicle()",
            "comment": {
              "body": "Leave the current vehicle. If the entity is currently in a vehicle (and\n is removed from it), true will be returned, otherwise false will be\n returned.",
              "tags": "Returns True if the entity was in a vehicle..",
              "plain": "Leave the current vehicle. If the entity is currently in a vehicle (and\n is removed from it), true will be returned, otherwise false will be\n returned.\n@return True if the entity was in a vehicle."
            }
          },
          {
            "kind": "CLASS",
            "name": "org.bukkit.entity.Entity.Spigot",
            "children": [
              {
                "kind": "CONSTRUCTOR",
                "name": "Spigot()"
              },
              {
                "kind": "METHOD",
                "name": "isInvulnerable()",
                "comment": {
                  "body": "Returns whether this entity is invulnerable.",
                  "tags": "Returns True if the entity is invulnerable..",
                  "plain": "Returns whether this entity is invulnerable.\n@return True if the entity is invulnerable."
                }
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "playEffect(org.bukkit.EntityEffect)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "comment": {
              "body": "Performs the specified \u003ca href\u003d\"org/bukkit/EntityEffect.html\" title\u003d\"enum in org.bukkit\"\u003e\u003ccode\u003eEntityEffect\u003c/code\u003e\u003c/a\u003e for this entity.\n \u003cp\u003e\n This will be viewable to all players near the entity.\n \u003cp\u003e\n If the effect is not applicable to this class of entity, it will not play.",
              "plain": "Performs the specified {@link EntityEffect} for this entity.\n \u003cp\u003e\n This will be viewable to all players near the entity.\n \u003cp\u003e\n If the effect is not applicable to this class of entity, it will not play.\n@param type Effect to play."
            }
          },
          {
            "kind": "METHOD",
            "name": "remove()",
            "comment": {
              "body": "Mark the entity\u0027s removal.",
              "plain": "Mark the entity\u0027s removal."
            }
          },
          {
            "kind": "METHOD",
            "name": "removePassenger(org.bukkit.entity.Entity)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "passenger"
              }
            ],
            "comment": {
              "body": "Remove a passenger from the vehicle.",
              "tags": "Returns false if it could not be done for whatever reason.",
              "plain": "Remove a passenger from the vehicle.\n@param passenger The passenger to remove\n@return false if it could not be done for whatever reason"
            }
          },
          {
            "kind": "METHOD",
            "name": "removeScoreboardTag(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "tag"
              }
            ],
            "comment": {
              "body": "Removes a given tag from this entity.",
              "tags": "Returns true if the tag was successfully removed.",
              "plain": "Removes a given tag from this entity.\n@param tag the tag to remove\n@return true if the tag was successfully removed"
            }
          },
          {
            "kind": "METHOD",
            "name": "setCustomNameVisible(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "flag"
              }
            ],
            "comment": {
              "body": "Sets whether or not to display the mob\u0027s custom name client side. The\n name will be displayed above the mob similarly to a player.\n \u003cp\u003e\n This value has no effect on players, they will always display their\n name.",
              "plain": "Sets whether or not to display the mob\u0027s custom name client side. The\n name will be displayed above the mob similarly to a player.\n \u003cp\u003e\n This value has no effect on players, they will always display their\n name.\n@param flag custom name or not"
            }
          },
          {
            "kind": "METHOD",
            "name": "setFallDistance(float)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "distance"
              }
            ],
            "comment": {
              "body": "Sets the fall distance for this entity",
              "plain": "Sets the fall distance for this entity\n@param distance The new distance."
            }
          },
          {
            "kind": "METHOD",
            "name": "setFireTicks(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "ticks"
              }
            ],
            "comment": {
              "body": "Sets the entity\u0027s current fire ticks (ticks before the entity stops\n being on fire).",
              "plain": "Sets the entity\u0027s current fire ticks (ticks before the entity stops\n being on fire).\n@param ticks Current ticks remaining"
            }
          },
          {
            "kind": "METHOD",
            "name": "setGlowing(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "flag"
              }
            ],
            "comment": {
              "body": "Sets whether the entity has a team colored (default: white) glow.",
              "plain": "Sets whether the entity has a team colored (default: white) glow.\n@param flag if the entity is glowing"
            }
          },
          {
            "kind": "METHOD",
            "name": "setGravity(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "gravity"
              }
            ],
            "comment": {
              "body": "Sets whether gravity applies to this entity.",
              "plain": "Sets whether gravity applies to this entity.\n@param gravity whether gravity should apply"
            }
          },
          {
            "kind": "METHOD",
            "name": "setInvulnerable(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "flag"
              }
            ],
            "comment": {
              "body": "Sets whether the entity is invulnerable or not.\n \u003cp\u003e\n When an entity is invulnerable it can only be damaged by players in\n creative mode.",
              "plain": "Sets whether the entity is invulnerable or not.\n \u003cp\u003e\n When an entity is invulnerable it can only be damaged by players in\n creative mode.\n@param flag if the entity is invulnerable"
            }
          },
          {
            "kind": "METHOD",
            "name": "setLastDamageCause(org.bukkit.event.entity.EntityDamageEvent)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "event"
              }
            ],
            "comment": {
              "body": "Record the last \u003ca href\u003d\"org/bukkit/event/entity/EntityDamageEvent.html\" title\u003d\"class in org.bukkit.event.entity\"\u003e\u003ccode\u003eEntityDamageEvent\u003c/code\u003e\u003c/a\u003e inflicted on this entity",
              "plain": "Record the last {@link EntityDamageEvent} inflicted on this entity\n@param event a {@link EntityDamageEvent}"
            }
          },
          {
            "kind": "METHOD",
            "name": "setPassenger(org.bukkit.entity.Entity)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "passenger"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Set the passenger of a vehicle.",
              "tags": "Returns false if it could not be done for whatever reason.",
              "plain": "Set the passenger of a vehicle.\n@param passenger The new passenger.\n@return false if it could not be done for whatever reason\n@deprecated entities may have multiple passengers, use\n {@link #getPassengers()}"
            }
          },
          {
            "kind": "METHOD",
            "name": "setPortalCooldown(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cooldown"
              }
            ],
            "comment": {
              "body": "Sets the period of time (in ticks) before this entity can use a portal.",
              "plain": "Sets the period of time (in ticks) before this entity can use a portal.\n@param cooldown portal cooldown ticks"
            }
          },
          {
            "kind": "METHOD",
            "name": "setSilent(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "flag"
              }
            ],
            "comment": {
              "body": "Sets whether the entity is silent or not.\n \u003cp\u003e\n When an entity is silent it will not produce any sound.",
              "plain": "Sets whether the entity is silent or not.\n \u003cp\u003e\n When an entity is silent it will not produce any sound.\n@param flag if the entity is silent"
            }
          },
          {
            "kind": "METHOD",
            "name": "setTicksLived(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "value"
              }
            ],
            "comment": {
              "body": "Sets the amount of ticks this entity has lived for.\n \u003cp\u003e\n This is the equivalent to \"age\" in entities. May not be less than one\n tick.",
              "plain": "Sets the amount of ticks this entity has lived for.\n \u003cp\u003e\n This is the equivalent to \"age\" in entities. May not be less than one\n tick.\n@param value Age of entity"
            }
          },
          {
            "kind": "METHOD",
            "name": "setVelocity(org.bukkit.util.Vector)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "velocity"
              }
            ],
            "comment": {
              "body": "Sets this entity\u0027s velocity",
              "plain": "Sets this entity\u0027s velocity\n@param velocity New velocity to travel with"
            }
          },
          {
            "kind": "METHOD",
            "name": "spigot()"
          },
          {
            "kind": "METHOD",
            "name": "teleport(org.bukkit.Location)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "location"
              }
            ],
            "comment": {
              "body": "Teleports this entity to the given location. If this entity is riding a\n vehicle, it will be dismounted prior to teleportation.",
              "tags": "Returns \u003ccode\u003etrue\u003c/code\u003e if the teleport was successful.",
              "plain": "Teleports this entity to the given location. If this entity is riding a\n vehicle, it will be dismounted prior to teleportation.\n@param location New location to teleport this entity to\n@return \u003ccode\u003etrue\u003c/code\u003e if the teleport was successful"
            }
          },
          {
            "kind": "METHOD",
            "name": "teleport(org.bukkit.Location,org.bukkit.event.player.PlayerTeleportEvent.TeleportCause)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cause"
              },
              {
                "kind": "PARAMETER",
                "name": "location"
              }
            ],
            "comment": {
              "body": "Teleports this entity to the given location. If this entity is riding a\n vehicle, it will be dismounted prior to teleportation.",
              "tags": "Returns \u003ccode\u003etrue\u003c/code\u003e if the teleport was successful.",
              "plain": "Teleports this entity to the given location. If this entity is riding a\n vehicle, it will be dismounted prior to teleportation.\n@param location New location to teleport this entity to\n@param cause The cause of this teleportation\n@return \u003ccode\u003etrue\u003c/code\u003e if the teleport was successful"
            }
          },
          {
            "kind": "METHOD",
            "name": "teleport(org.bukkit.entity.Entity)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "destination"
              }
            ],
            "comment": {
              "body": "Teleports this entity to the target Entity. If this entity is riding a\n vehicle, it will be dismounted prior to teleportation.",
              "tags": "Returns \u003ccode\u003etrue\u003c/code\u003e if the teleport was successful.",
              "plain": "Teleports this entity to the target Entity. If this entity is riding a\n vehicle, it will be dismounted prior to teleportation.\n@param destination Entity to teleport this entity to\n@return \u003ccode\u003etrue\u003c/code\u003e if the teleport was successful"
            }
          },
          {
            "kind": "METHOD",
            "name": "teleport(org.bukkit.entity.Entity,org.bukkit.event.player.PlayerTeleportEvent.TeleportCause)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cause"
              },
              {
                "kind": "PARAMETER",
                "name": "destination"
              }
            ],
            "comment": {
              "body": "Teleports this entity to the target Entity. If this entity is riding a\n vehicle, it will be dismounted prior to teleportation.",
              "tags": "Returns \u003ccode\u003etrue\u003c/code\u003e if the teleport was successful.",
              "plain": "Teleports this entity to the target Entity. If this entity is riding a\n vehicle, it will be dismounted prior to teleportation.\n@param destination Entity to teleport this entity to\n@param cause The cause of this teleportation\n@return \u003ccode\u003etrue\u003c/code\u003e if the teleport was successful"
            }
          }
        ],
        "comment": {
          "body": "Represents a base entity in the world",
          "plain": "Represents a base entity in the world"
        }
      },
      {
        "kind": "ENUM",
        "name": "org.bukkit.entity.EntityType",
        "children": [
          {
            "kind": "ENUM_CONSTANT",
            "name": "AREA_EFFECT_CLOUD",
            "comment": {
              "plain": "@see AreaEffectCloud"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ARMOR_STAND",
            "comment": {
              "body": "Mechanical entity with an inventory for placing weapons / armor into.",
              "plain": "Mechanical entity with an inventory for placing weapons / armor into."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ARROW",
            "comment": {
              "body": "An arrow projectile; may get stuck in the ground.",
              "plain": "An arrow projectile; may get stuck in the ground."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BAT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BLAZE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BOAT",
            "comment": {
              "body": "A placed boat.",
              "plain": "A placed boat."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "CAVE_SPIDER"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "CHICKEN"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "COMPLEX_PART"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "COW"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "CREEPER"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "DONKEY",
            "comment": {
              "plain": "@see Donkey"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "DRAGON_FIREBALL",
            "comment": {
              "body": "Like \u003ca href\u003d\"org/bukkit/entity/EntityType.html#FIREBALL\"\u003e\u003ccode\u003eEntityType.FIREBALL\u003c/code\u003e\u003c/a\u003e but with added effects.",
              "plain": "Like {@link #FIREBALL} but with added effects."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "DROPPED_ITEM",
            "comment": {
              "body": "An item resting on the ground.\n \u003cp\u003e\n Spawn with \u003ca href\u003d\"org/bukkit/World.html#dropItem(org.bukkit.Location,org.bukkit.inventory.ItemStack)\"\u003e\u003ccode\u003eWorld.dropItem(Location, ItemStack)\u003c/code\u003e\u003c/a\u003e or \u003ca href\u003d\"org/bukkit/World.html#dropItemNaturally(org.bukkit.Location,org.bukkit.inventory.ItemStack)\"\u003e\u003ccode\u003eWorld.dropItemNaturally(Location, ItemStack)\u003c/code\u003e\u003c/a\u003e",
              "plain": "An item resting on the ground.\n \u003cp\u003e\n Spawn with {@link World#dropItem(Location, ItemStack)} or {@link World#dropItemNaturally(Location, ItemStack)}"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "EGG",
            "comment": {
              "body": "A flying chicken egg.",
              "plain": "A flying chicken egg."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ELDER_GUARDIAN",
            "comment": {
              "plain": "@see ElderGuardian"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENDERMAN"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENDERMITE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENDER_CRYSTAL"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENDER_DRAGON"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENDER_PEARL",
            "comment": {
              "body": "A flying ender pearl.",
              "plain": "A flying ender pearl."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENDER_SIGNAL",
            "comment": {
              "body": "An ender eye signal.",
              "plain": "An ender eye signal."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "EVOKER",
            "comment": {
              "plain": "@see Evoker"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "EVOKER_FANGS",
            "comment": {
              "plain": "@see EvokerFangs"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "EXPERIENCE_ORB",
            "comment": {
              "body": "An experience orb.",
              "plain": "An experience orb."
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "EntityType(java.lang.String,java.lang.Class\u003c? extends org.bukkit.entity.Entity\u003e,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "clazz"
              },
              {
                "kind": "PARAMETER",
                "name": "name"
              },
              {
                "kind": "PARAMETER",
                "name": "typeId"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "EntityType(java.lang.String,java.lang.Class\u003c? extends org.bukkit.entity.Entity\u003e,int,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "clazz"
              },
              {
                "kind": "PARAMETER",
                "name": "independent"
              },
              {
                "kind": "PARAMETER",
                "name": "name"
              },
              {
                "kind": "PARAMETER",
                "name": "typeId"
              }
            ]
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "FALLING_BLOCK",
            "comment": {
              "body": "A block that is going to or is about to fall.",
              "plain": "A block that is going to or is about to fall."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "FIREBALL",
            "comment": {
              "body": "A flying large fireball, as thrown by a Ghast for example.",
              "plain": "A flying large fireball, as thrown by a Ghast for example."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "FIREWORK",
            "comment": {
              "body": "Internal representation of a Firework once it has been launched.",
              "plain": "Internal representation of a Firework once it has been launched."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "FISHING_HOOK",
            "comment": {
              "body": "A fishing line and bobber.",
              "plain": "A fishing line and bobber."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "GHAST"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "GIANT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "GUARDIAN"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "HORSE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "HUSK",
            "comment": {
              "plain": "@see Husk"
            }
          },
          {
            "kind": "FIELD",
            "name": "ID_MAP"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ILLUSIONER",
            "comment": {
              "plain": "@see Illusioner"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "IRON_GOLEM"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ITEM_FRAME",
            "comment": {
              "body": "An item frame on a wall.",
              "plain": "An item frame on a wall."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "LEASH_HITCH",
            "comment": {
              "body": "A leash attached to a fencepost.",
              "plain": "A leash attached to a fencepost."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "LIGHTNING",
            "comment": {
              "body": "A bolt of lightning.\n \u003cp\u003e\n Spawn with \u003ca href\u003d\"org/bukkit/World.html#strikeLightning(org.bukkit.Location)\"\u003e\u003ccode\u003eWorld.strikeLightning(Location)\u003c/code\u003e\u003c/a\u003e.",
              "plain": "A bolt of lightning.\n \u003cp\u003e\n Spawn with {@link World#strikeLightning(Location)}."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "LINGERING_POTION",
            "comment": {
              "body": "A flying lingering potion",
              "plain": "A flying lingering potion"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "LLAMA"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "LLAMA_SPIT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "MAGMA_CUBE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "MINECART",
            "comment": {
              "plain": "@see RideableMinecart"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "MINECART_CHEST",
            "comment": {
              "plain": "@see StorageMinecart"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "MINECART_COMMAND",
            "comment": {
              "plain": "@see CommandMinecart"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "MINECART_FURNACE",
            "comment": {
              "plain": "@see PoweredMinecart"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "MINECART_HOPPER",
            "comment": {
              "plain": "@see HopperMinecart"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "MINECART_MOB_SPAWNER",
            "comment": {
              "plain": "@see SpawnerMinecart"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "MINECART_TNT",
            "comment": {
              "plain": "@see ExplosiveMinecart"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "MULE",
            "comment": {
              "plain": "@see Mule"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "MUSHROOM_COW"
          },
          {
            "kind": "FIELD",
            "name": "NAME_MAP"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "OCELOT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "PAINTING",
            "comment": {
              "body": "A painting on a wall.",
              "plain": "A painting on a wall."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "PARROT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "PIG"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "PIG_ZOMBIE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "PLAYER"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "POLAR_BEAR"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "PRIMED_TNT",
            "comment": {
              "body": "Primed TNT that is about to explode.",
              "plain": "Primed TNT that is about to explode."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "RABBIT"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SHEEP"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SHULKER"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SHULKER_BULLET",
            "comment": {
              "body": "Bullet fired by \u003ca href\u003d\"org/bukkit/entity/EntityType.html#SHULKER\"\u003e\u003ccode\u003eEntityType.SHULKER\u003c/code\u003e\u003c/a\u003e.",
              "plain": "Bullet fired by {@link #SHULKER}."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SILVERFISH"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SKELETON"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SKELETON_HORSE",
            "comment": {
              "plain": "@see SkeletonHorse"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SLIME"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SMALL_FIREBALL",
            "comment": {
              "body": "A flying small fireball, such as thrown by a Blaze or player.",
              "plain": "A flying small fireball, such as thrown by a Blaze or player."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SNOWBALL",
            "comment": {
              "body": "A flying snowball.",
              "plain": "A flying snowball."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SNOWMAN"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SPECTRAL_ARROW",
            "comment": {
              "body": "Like \u003ca href\u003d\"org/bukkit/entity/EntityType.html#TIPPED_ARROW\"\u003e\u003ccode\u003eEntityType.TIPPED_ARROW\u003c/code\u003e\u003c/a\u003e but causes the \u003ca href\u003d\"org/bukkit/potion/PotionEffectType.html#GLOWING\"\u003e\u003ccode\u003ePotionEffectType.GLOWING\u003c/code\u003e\u003c/a\u003e effect on all team members.",
              "plain": "Like {@link #TIPPED_ARROW} but causes the {@link PotionEffectType#GLOWING} effect on all team members."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SPIDER"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SPLASH_POTION",
            "comment": {
              "body": "A flying splash potion.",
              "plain": "A flying splash potion."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SQUID"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "STRAY",
            "comment": {
              "plain": "@see Stray"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "THROWN_EXP_BOTTLE",
            "comment": {
              "body": "A flying experience bottle.",
              "plain": "A flying experience bottle."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "TIPPED_ARROW",
            "comment": {
              "body": "Like \u003ca href\u003d\"org/bukkit/entity/EntityType.html#ARROW\"\u003e\u003ccode\u003eEntityType.ARROW\u003c/code\u003e\u003c/a\u003e but tipped with a specific potion which is applied on\n contact.",
              "plain": "Like {@link #ARROW} but tipped with a specific potion which is applied on\n contact."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "UNKNOWN",
            "comment": {
              "body": "An unknown entity without an Entity Class",
              "plain": "An unknown entity without an Entity Class"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "VEX",
            "comment": {
              "plain": "@see Vex"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "VILLAGER"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "VINDICATOR",
            "comment": {
              "plain": "@see Vindicator"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "WEATHER"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "WITCH"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "WITHER"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "WITHER_SKELETON",
            "comment": {
              "plain": "@see WitherSkeleton"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "WITHER_SKULL",
            "comment": {
              "body": "A flying wither skull projectile.",
              "plain": "A flying wither skull projectile."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "WOLF"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ZOMBIE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ZOMBIE_HORSE",
            "comment": {
              "plain": "@see ZombieHorse"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ZOMBIE_VILLAGER",
            "comment": {
              "plain": "@see ZombieVillager"
            }
          },
          {
            "kind": "FIELD",
            "name": "clazz"
          },
          {
            "kind": "METHOD",
            "name": "fromId(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "id"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "tags": "Returns the matching entity type or null.",
              "plain": "@param id the raw type id\n@return the matching entity type or null\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "fromName(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "tags": "Returns the matching entity type or null.",
              "plain": "@param name the entity type\u0027s name\n@return the matching entity type or null\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "getEntityClass()"
          },
          {
            "kind": "METHOD",
            "name": "getName()",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "tags": "Returns the entity type\u0027s name.",
              "plain": "@return the entity type\u0027s name\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "getTypeId()",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "tags": "Returns the raw type id.",
              "plain": "@return the raw type id\n@deprecated Magic value"
            }
          },
          {
            "kind": "FIELD",
            "name": "independent"
          },
          {
            "kind": "METHOD",
            "name": "isAlive()"
          },
          {
            "kind": "METHOD",
            "name": "isSpawnable()",
            "comment": {
              "body": "Some entities cannot be spawned using \u003ca href\u003d\"org/bukkit/World.html#spawnEntity(org.bukkit.Location,org.bukkit.entity.EntityType)\"\u003e\u003ccode\u003eWorld.spawnEntity(Location, EntityType)\u003c/code\u003e\u003c/a\u003e or \u003ca href\u003d\"org/bukkit/World.html#spawn(org.bukkit.Location,java.lang.Class)\"\u003e\u003ccode\u003eWorld.spawn(Location, Class)\u003c/code\u003e\u003c/a\u003e, usually because they require additional\n information in order to spawn.",
              "tags": "Returns False if the entity type cannot be spawned.",
              "plain": "Some entities cannot be spawned using {@link World#spawnEntity(Location, EntityType)} or {@link World#spawn(Location, Class)}, usually because they require additional\n information in order to spawn.\n@return False if the entity type cannot be spawned"
            }
          },
          {
            "kind": "FIELD",
            "name": "living"
          },
          {
            "kind": "FIELD",
            "name": "name"
          },
          {
            "kind": "FIELD",
            "name": "typeId"
          },
          {
            "kind": "METHOD",
            "name": "valueOf(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "values()"
          }
        ]
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.Evoker",
        "children": [
          {
            "kind": "METHOD",
            "name": "getCurrentSpell()",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Gets the \u003ca href\u003d\"org/bukkit/entity/Evoker.Spell.html\" title\u003d\"enum in org.bukkit.entity\"\u003e\u003ccode\u003eEvoker.Spell\u003c/code\u003e\u003c/a\u003e the Evoker is currently using.",
              "tags": "Returns the current spell.",
              "plain": "Gets the {@link Spell} the Evoker is currently using.\n@return the current spell\n@deprecated future versions of Minecraft have additional spell casting\n entities."
            }
          },
          {
            "kind": "ENUM",
            "name": "org.bukkit.entity.Evoker.Spell",
            "children": [
              {
                "kind": "ENUM_CONSTANT",
                "name": "BLINDNESS",
                "comment": {
                  "body": "The spell that makes the target blind.",
                  "plain": "The spell that makes the target blind."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "DISAPPEAR",
                "comment": {
                  "body": "The spell that makes the casting entity invisible.",
                  "plain": "The spell that makes the casting entity invisible."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "FANGS",
                "comment": {
                  "body": "The spell that summons Fangs.",
                  "plain": "The spell that summons Fangs."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "NONE",
                "comment": {
                  "body": "No spell is being evoked.",
                  "plain": "No spell is being evoked."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "SUMMON",
                "comment": {
                  "body": "The spell that summons Vexes.",
                  "plain": "The spell that summons Vexes."
                }
              },
              {
                "kind": "CONSTRUCTOR",
                "name": "Spell()"
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "WOLOLO",
                "comment": {
                  "body": "The \"wololo\" spell.",
                  "plain": "The \"wololo\" spell."
                }
              },
              {
                "kind": "METHOD",
                "name": "valueOf(java.lang.String)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "name"
                  }
                ]
              },
              {
                "kind": "METHOD",
                "name": "values()"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Represents the current spell the Evoker is using.",
              "plain": "Represents the current spell the Evoker is using.\n@deprecated future versions of Minecraft have additional spell casting\n entities."
            }
          },
          {
            "kind": "METHOD",
            "name": "setCurrentSpell(org.bukkit.entity.Evoker.Spell)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "spell"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Sets the \u003ca href\u003d\"org/bukkit/entity/Evoker.Spell.html\" title\u003d\"enum in org.bukkit.entity\"\u003e\u003ccode\u003eEvoker.Spell\u003c/code\u003e\u003c/a\u003e the Evoker is currently using.",
              "plain": "Sets the {@link Spell} the Evoker is currently using.\n@param spell the spell the evoker should be using\n@deprecated future versions of Minecraft have additional spell casting\n entities."
            }
          }
        ],
        "comment": {
          "body": "Represents an Evoker \"Illager\".",
          "plain": "Represents an Evoker \"Illager\"."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.EvokerFangs",
        "children": [
          {
            "kind": "METHOD",
            "name": "getOwner()",
            "comment": {
              "body": "Gets the \u003ca href\u003d\"org/bukkit/entity/LivingEntity.html\" title\u003d\"interface in org.bukkit.entity\"\u003e\u003ccode\u003eLivingEntity\u003c/code\u003e\u003c/a\u003e which summoned the fangs.",
              "tags": "Returns the \u003ca href\u003d\"org/bukkit/entity/LivingEntity.html\" title\u003d\"interface in org.bukkit.entity\"\u003e\u003ccode\u003eLivingEntity\u003c/code\u003e\u003c/a\u003e which summoned the fangs.",
              "plain": "Gets the {@link LivingEntity} which summoned the fangs.\n@return the {@link LivingEntity} which summoned the fangs"
            }
          },
          {
            "kind": "METHOD",
            "name": "setOwner(org.bukkit.entity.LivingEntity)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "owner"
              }
            ],
            "comment": {
              "body": "Sets the \u003ca href\u003d\"org/bukkit/entity/LivingEntity.html\" title\u003d\"interface in org.bukkit.entity\"\u003e\u003ccode\u003eLivingEntity\u003c/code\u003e\u003c/a\u003e which summoned the fangs.",
              "plain": "Sets the {@link LivingEntity} which summoned the fangs.\n@param owner the {@link LivingEntity} which summoned the fangs"
            }
          }
        ],
        "comment": {
          "body": "Represents Evoker Fangs.",
          "plain": "Represents Evoker Fangs."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.ExperienceOrb",
        "children": [
          {
            "kind": "METHOD",
            "name": "getExperience()",
            "comment": {
              "body": "Gets how much experience is contained within this orb",
              "tags": "Returns Amount of experience.",
              "plain": "Gets how much experience is contained within this orb\n@return Amount of experience"
            }
          },
          {
            "kind": "METHOD",
            "name": "getSourceEntityId()",
            "comment": {
              "body": "If this experience orb was spawned in relation to another\n entity, such as a player or other living entity death, or breeding,\n return the source entity UUID.\n\n In the case of breeding, this will be the new baby entities UUID.\n In the case of an entity being killed, this will be the dead entities UUID.",
              "tags": "Returns The UUID of the entity that sourced this experience orb.",
              "plain": "If this experience orb was spawned in relation to another\n entity, such as a player or other living entity death, or breeding,\n return the source entity UUID.\n\n In the case of breeding, this will be the new baby entities UUID.\n In the case of an entity being killed, this will be the dead entities UUID.\n@return The UUID of the entity that sourced this experience orb"
            }
          },
          {
            "kind": "METHOD",
            "name": "getSpawnReason()",
            "comment": {
              "body": "Gets the reason that this experience orb was spawned. For any case that we\n do not know, such as orbs spawned before this API was added, UNKNOWN is returned.",
              "tags": "Returns The reason for this orb being spawned..",
              "plain": "Gets the reason that this experience orb was spawned. For any case that we\n do not know, such as orbs spawned before this API was added, UNKNOWN is returned.\n@return The reason for this orb being spawned."
            }
          },
          {
            "kind": "METHOD",
            "name": "getTriggerEntityId()",
            "comment": {
              "body": "If this experience orb was triggered to be spawned by\n an entity such as a player, due to events such as killing entity,\n breaking blocks, smelting in a furnace, etc, this will return the UUID\n of the entity that triggered this orb to drop.\n\n In the case of an entity being killed, this will be the killers UUID.",
              "tags": "Returns UUID of the player that triggered this orb to drop, or null if unknown/no triggering entity.",
              "plain": "If this experience orb was triggered to be spawned by\n an entity such as a player, due to events such as killing entity,\n breaking blocks, smelting in a furnace, etc, this will return the UUID\n of the entity that triggered this orb to drop.\n\n In the case of an entity being killed, this will be the killers UUID.\n@return UUID of the player that triggered this orb to drop, or null if unknown/no triggering entity"
            }
          },
          {
            "kind": "METHOD",
            "name": "isFromBottle()",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Check if this orb was spawned from a \u003ca href\u003d\"org/bukkit/entity/ThrownExpBottle.html\" title\u003d\"interface in org.bukkit.entity\"\u003e\u003ccode\u003eThrownExpBottle\u003c/code\u003e\u003c/a\u003e",
              "tags": "Returns if orb was spawned from a bottle.",
              "plain": "Check if this orb was spawned from a {@link ThrownExpBottle}\n@return if orb was spawned from a bottle\n@deprecated Use getSpawnReason() \u003d\u003d EXP_BOTTLE"
            }
          },
          {
            "kind": "ENUM",
            "name": "org.bukkit.entity.ExperienceOrb.SpawnReason",
            "children": [
              {
                "kind": "ENUM_CONSTANT",
                "name": "BLOCK_BREAK",
                "comment": {
                  "body": "Spawned by player breaking a block that gives experience points such as Diamond Ore",
                  "plain": "Spawned by player breaking a block that gives experience points such as Diamond Ore"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "BREED",
                "comment": {
                  "body": "Spawned by player breeding animals",
                  "plain": "Spawned by player breeding animals"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "CUSTOM",
                "comment": {
                  "body": "Spawned by Bukkit API",
                  "plain": "Spawned by Bukkit API"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "ENTITY_DEATH",
                "comment": {
                  "body": "Spawned by an entity dying after being damaged by a player",
                  "plain": "Spawned by an entity dying after being damaged by a player"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "EXP_BOTTLE",
                "comment": {
                  "body": "Spawned by a player throwing an experience points bottle",
                  "plain": "Spawned by a player throwing an experience points bottle"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "FISHING",
                "comment": {
                  "body": "Spawned by player fishing",
                  "plain": "Spawned by player fishing"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "FURNACE",
                "comment": {
                  "body": "Spawned by player using a furnace",
                  "plain": "Spawned by player using a furnace"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "PLAYER_DEATH",
                "comment": {
                  "body": "Spawned by a player dying",
                  "plain": "Spawned by a player dying"
                }
              },
              {
                "kind": "CONSTRUCTOR",
                "name": "SpawnReason()"
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "UNKNOWN",
                "comment": {
                  "body": "We do not know why it was spawned",
                  "plain": "We do not know why it was spawned"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "VILLAGER_TRADE",
                "comment": {
                  "body": "Spawned by player trading with a villager",
                  "plain": "Spawned by player trading with a villager"
                }
              },
              {
                "kind": "METHOD",
                "name": "valueOf(java.lang.String)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "name"
                  }
                ]
              },
              {
                "kind": "METHOD",
                "name": "values()"
              }
            ],
            "comment": {
              "body": "Reasons for why this Experience Orb was spawned",
              "plain": "Reasons for why this Experience Orb was spawned"
            }
          },
          {
            "kind": "METHOD",
            "name": "setExperience(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "value"
              }
            ],
            "comment": {
              "body": "Sets how much experience is contained within this orb",
              "plain": "Sets how much experience is contained within this orb\n@param value Amount of experience"
            }
          }
        ],
        "comment": {
          "body": "Represents an Experience Orb.",
          "plain": "Represents an Experience Orb."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.Explosive",
        "children": [
          {
            "kind": "METHOD",
            "name": "getYield()",
            "comment": {
              "body": "Return the radius or yield of this explosive\u0027s explosion",
              "tags": "Returns the radius of blocks affected.",
              "plain": "Return the radius or yield of this explosive\u0027s explosion\n@return the radius of blocks affected"
            }
          },
          {
            "kind": "METHOD",
            "name": "isIncendiary()",
            "comment": {
              "body": "Return whether or not this explosive creates a fire when exploding",
              "tags": "Returns true if the explosive creates fire, false otherwise.",
              "plain": "Return whether or not this explosive creates a fire when exploding\n@return true if the explosive creates fire, false otherwise"
            }
          },
          {
            "kind": "METHOD",
            "name": "setIsIncendiary(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "isIncendiary"
              }
            ],
            "comment": {
              "body": "Set whether or not this explosive\u0027s explosion causes fire",
              "plain": "Set whether or not this explosive\u0027s explosion causes fire\n@param isIncendiary Whether it should cause fire"
            }
          },
          {
            "kind": "METHOD",
            "name": "setYield(float)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "yield"
              }
            ],
            "comment": {
              "body": "Set the radius affected by this explosive\u0027s explosion",
              "plain": "Set the radius affected by this explosive\u0027s explosion\n@param yield The explosive yield"
            }
          }
        ],
        "comment": {
          "body": "A representation of an explosive entity",
          "plain": "A representation of an explosive entity"
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.FallingBlock",
        "children": [
          {
            "kind": "METHOD",
            "name": "canHurtEntities()",
            "comment": {
              "body": "Get the HurtEntities state of this block.",
              "tags": "Returns whether entities will be damaged by this block..",
              "plain": "Get the HurtEntities state of this block.\n@return whether entities will be damaged by this block."
            }
          },
          {
            "kind": "METHOD",
            "name": "getBlockData()",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Get the data for the falling block",
              "tags": "Returns data of the block.",
              "plain": "Get the data for the falling block\n@return data of the block\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "getBlockId()",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Get the ID of the falling block",
              "tags": "Returns ID type of the block.",
              "plain": "Get the ID of the falling block\n@return ID type of the block\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "getDropItem()",
            "comment": {
              "body": "Get if the falling block will break into an item if it cannot be placed",
              "tags": "Returns true if the block will break into an item when obstructed.",
              "plain": "Get if the falling block will break into an item if it cannot be placed\n@return true if the block will break into an item when obstructed"
            }
          },
          {
            "kind": "METHOD",
            "name": "getMaterial()",
            "comment": {
              "body": "Get the Material of the falling block",
              "tags": "Returns Material of the block.",
              "plain": "Get the Material of the falling block\n@return Material of the block"
            }
          },
          {
            "kind": "METHOD",
            "name": "getSourceLoc()",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Gets the source block location of the FallingBlock",
              "tags": "Returns the source block location the FallingBlock was spawned from.",
              "plain": "Gets the source block location of the FallingBlock\n@return the source block location the FallingBlock was spawned from\n@deprecated replaced by {@link Entity#getOrigin()}"
            }
          },
          {
            "kind": "METHOD",
            "name": "setDropItem(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "drop"
              }
            ],
            "comment": {
              "body": "Set if the falling block will break into an item if it cannot be placed",
              "plain": "Set if the falling block will break into an item if it cannot be placed\n@param drop true to break into an item when obstructed"
            }
          },
          {
            "kind": "METHOD",
            "name": "setHurtEntities(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "hurtEntities"
              }
            ],
            "comment": {
              "body": "Set the HurtEntities state of this block.",
              "plain": "Set the HurtEntities state of this block.\n@param hurtEntities whether entities will be damaged by this block."
            }
          }
        ],
        "comment": {
          "body": "Represents a falling block",
          "plain": "Represents a falling block"
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.Fireball",
        "children": [
          {
            "kind": "METHOD",
            "name": "getDirection()",
            "comment": {
              "body": "Retrieve the direction this fireball is heading toward",
              "tags": "Returns the direction.",
              "plain": "Retrieve the direction this fireball is heading toward\n@return the direction"
            }
          },
          {
            "kind": "METHOD",
            "name": "setDirection(org.bukkit.util.Vector)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "direction"
              }
            ],
            "comment": {
              "body": "Fireballs fly straight and do not take setVelocity(...) well.",
              "plain": "Fireballs fly straight and do not take setVelocity(...) well.\n@param direction the direction this fireball is flying toward"
            }
          }
        ],
        "comment": {
          "body": "Represents a Fireball.",
          "plain": "Represents a Fireball."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.Firework",
        "children": [
          {
            "kind": "METHOD",
            "name": "detonate()",
            "comment": {
              "body": "Cause this firework to explode at earliest opportunity, as if it has no\n remaining fuse.",
              "plain": "Cause this firework to explode at earliest opportunity, as if it has no\n remaining fuse."
            }
          },
          {
            "kind": "METHOD",
            "name": "getBoostedEntity()",
            "comment": {
              "body": "If this firework is boosting an entity, return it",
              "tags": "Returns The entity being boosted.",
              "plain": "If this firework is boosting an entity, return it\n@return The entity being boosted"
            }
          },
          {
            "kind": "METHOD",
            "name": "getFireworkMeta()",
            "comment": {
              "body": "Get a copy of the fireworks meta",
              "tags": "Returns A copy of the current Firework meta.",
              "plain": "Get a copy of the fireworks meta\n@return A copy of the current Firework meta"
            }
          },
          {
            "kind": "METHOD",
            "name": "getSpawningEntity()"
          },
          {
            "kind": "METHOD",
            "name": "setFireworkMeta(org.bukkit.inventory.meta.FireworkMeta)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "meta"
              }
            ],
            "comment": {
              "body": "Apply the provided meta to the fireworks",
              "plain": "Apply the provided meta to the fireworks\n@param meta The FireworkMeta to apply"
            }
          }
        ]
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.Fish",
        "comment": {
          "body": "Represents a fishing hook.",
          "plain": "Represents a fishing hook.\n@deprecated in favor of {@link FishHook}"
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.FishHook",
        "children": [
          {
            "kind": "METHOD",
            "name": "getBiteChance()",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Gets the chance of a fish biting.\n \u003cp\u003e\n 0.0 \u003d No Chance.\u003cbr\u003e\n 1.0 \u003d Instant catch.",
              "tags": "Returns chance the bite chance.",
              "plain": "Gets the chance of a fish biting.\n \u003cp\u003e\n 0.0 \u003d No Chance.\u003cbr\u003e\n 1.0 \u003d Instant catch.\n@return chance the bite chance\n@deprecated has no effect in newer Minecraft versions"
            }
          },
          {
            "kind": "METHOD",
            "name": "setBiteChance(double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "chance"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Sets the chance of a fish biting.\n \u003cp\u003e\n 0.0 \u003d No Chance.\u003cbr\u003e\n 1.0 \u003d Instant catch.",
              "plain": "Sets the chance of a fish biting.\n \u003cp\u003e\n 0.0 \u003d No Chance.\u003cbr\u003e\n 1.0 \u003d Instant catch.\n@param chance the bite chance\n@throws IllegalArgumentException if the bite chance is not between 0\n     and 1\n@deprecated has no effect in newer Minecraft versions"
            }
          }
        ],
        "comment": {
          "body": "Represents a fishing hook.",
          "plain": "Represents a fishing hook."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.Flying",
        "comment": {
          "body": "Represents a Flying Entity.",
          "plain": "Represents a Flying Entity."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.Ghast",
        "comment": {
          "body": "Represents a Ghast.",
          "plain": "Represents a Ghast."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.Giant",
        "comment": {
          "body": "Represents a Giant.",
          "plain": "Represents a Giant."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.Golem",
        "comment": {
          "body": "A mechanical creature that may harm enemies.",
          "plain": "A mechanical creature that may harm enemies."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.Guardian",
        "children": [
          {
            "kind": "METHOD",
            "name": "isElder()",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Check if the Guardian is an elder Guardian",
              "tags": "Returns true if the Guardian is an Elder Guardian, false if not.",
              "plain": "Check if the Guardian is an elder Guardian\n@return true if the Guardian is an Elder Guardian, false if not\n@deprecated should check if instance of {@link ElderGuardian}."
            }
          },
          {
            "kind": "METHOD",
            "name": "setElder(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "shouldBeElder"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param shouldBeElder Sets whether the Guardian is an Elder\n@deprecated Must spawn a new {@link ElderGuardian}."
            }
          }
        ]
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.Hanging",
        "children": [
          {
            "kind": "METHOD",
            "name": "setFacingDirection(org.bukkit.block.BlockFace,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "face"
              },
              {
                "kind": "PARAMETER",
                "name": "force"
              }
            ],
            "comment": {
              "body": "Sets the direction of the hanging entity, potentially overriding rules\n of placement. Note that if the result is not valid the object would\n normally drop as an item.",
              "tags": "Returns False if force was false and there was no block for it to\n     attach to in order to face the given direction..",
              "plain": "Sets the direction of the hanging entity, potentially overriding rules\n of placement. Note that if the result is not valid the object would\n normally drop as an item.\n@param face The new direction.\n@param force Whether to force it.\n@return False if force was false and there was no block for it to\n     attach to in order to face the given direction."
            }
          }
        ],
        "comment": {
          "body": "Represents a Hanging entity",
          "plain": "Represents a Hanging entity"
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.Horse",
        "children": [
          {
            "kind": "METHOD",
            "name": "getColor()",
            "comment": {
              "body": "Gets the horse\u0027s color.\n \u003cp\u003e\n Colors only apply to horses, not to donkeys, mules, skeleton horses\n or undead horses.",
              "tags": "Returns a \u003ca href\u003d\"org/bukkit/entity/Horse.Color.html\" title\u003d\"enum in org.bukkit.entity\"\u003e\u003ccode\u003eHorse.Color\u003c/code\u003e\u003c/a\u003e representing the horse\u0027s group.",
              "plain": "Gets the horse\u0027s color.\n \u003cp\u003e\n Colors only apply to horses, not to donkeys, mules, skeleton horses\n or undead horses.\n@return a {@link Color} representing the horse\u0027s group"
            }
          },
          {
            "kind": "METHOD",
            "name": "getInventory()"
          },
          {
            "kind": "METHOD",
            "name": "getStyle()",
            "comment": {
              "body": "Gets the horse\u0027s style.\n Styles determine what kind of markings or patterns a horse has.\n \u003cp\u003e\n Styles only apply to horses, not to donkeys, mules, skeleton horses\n or undead horses.",
              "tags": "Returns a \u003ca href\u003d\"org/bukkit/entity/Horse.Style.html\" title\u003d\"enum in org.bukkit.entity\"\u003e\u003ccode\u003eHorse.Style\u003c/code\u003e\u003c/a\u003e representing the horse\u0027s style.",
              "plain": "Gets the horse\u0027s style.\n Styles determine what kind of markings or patterns a horse has.\n \u003cp\u003e\n Styles only apply to horses, not to donkeys, mules, skeleton horses\n or undead horses.\n@return a {@link Style} representing the horse\u0027s style"
            }
          },
          {
            "kind": "METHOD",
            "name": "isCarryingChest()",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "tags": "Returns carrying chest status.",
              "plain": "@return carrying chest status\n@deprecated see {@link ChestedHorse}"
            }
          },
          {
            "kind": "ENUM",
            "name": "org.bukkit.entity.Horse.Color",
            "children": [
              {
                "kind": "ENUM_CONSTANT",
                "name": "BLACK",
                "comment": {
                  "body": "Pitch black",
                  "plain": "Pitch black"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "BROWN",
                "comment": {
                  "body": "Light brown",
                  "plain": "Light brown"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "CHESTNUT",
                "comment": {
                  "body": "Chestnut",
                  "plain": "Chestnut"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "CREAMY",
                "comment": {
                  "body": "Very light brown",
                  "plain": "Very light brown"
                }
              },
              {
                "kind": "CONSTRUCTOR",
                "name": "Color()"
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "DARK_BROWN",
                "comment": {
                  "body": "Dark brown",
                  "plain": "Dark brown"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "GRAY",
                "comment": {
                  "body": "Gray",
                  "plain": "Gray"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "WHITE",
                "comment": {
                  "body": "Snow white",
                  "plain": "Snow white"
                }
              },
              {
                "kind": "METHOD",
                "name": "valueOf(java.lang.String)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "name"
                  }
                ]
              },
              {
                "kind": "METHOD",
                "name": "values()"
              }
            ],
            "comment": {
              "body": "Represents the base color that the horse has.",
              "plain": "Represents the base color that the horse has."
            }
          },
          {
            "kind": "ENUM",
            "name": "org.bukkit.entity.Horse.Style",
            "children": [
              {
                "kind": "ENUM_CONSTANT",
                "name": "BLACK_DOTS",
                "comment": {
                  "body": "Small black dots",
                  "plain": "Small black dots"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "NONE",
                "comment": {
                  "body": "No markings",
                  "plain": "No markings"
                }
              },
              {
                "kind": "CONSTRUCTOR",
                "name": "Style()"
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "WHITE",
                "comment": {
                  "body": "White socks or stripes",
                  "plain": "White socks or stripes"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "WHITEFIELD",
                "comment": {
                  "body": "Milky splotches",
                  "plain": "Milky splotches"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "WHITE_DOTS",
                "comment": {
                  "body": "Round white dots",
                  "plain": "Round white dots"
                }
              },
              {
                "kind": "METHOD",
                "name": "valueOf(java.lang.String)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "name"
                  }
                ]
              },
              {
                "kind": "METHOD",
                "name": "values()"
              }
            ],
            "comment": {
              "body": "Represents the style, or markings, that the horse has.",
              "plain": "Represents the style, or markings, that the horse has."
            }
          },
          {
            "kind": "ENUM",
            "name": "org.bukkit.entity.Horse.Variant",
            "children": [
              {
                "kind": "ENUM_CONSTANT",
                "name": "DONKEY",
                "comment": {
                  "body": "A donkey",
                  "plain": "A donkey"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "HORSE",
                "comment": {
                  "body": "A normal horse",
                  "plain": "A normal horse"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "LLAMA",
                "comment": {
                  "body": "Not really a horse :)",
                  "plain": "Not really a horse :)"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "MULE",
                "comment": {
                  "body": "A mule",
                  "plain": "A mule"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "SKELETON_HORSE",
                "comment": {
                  "body": "A skeleton horse",
                  "plain": "A skeleton horse"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "UNDEAD_HORSE",
                "comment": {
                  "body": "An undead horse",
                  "plain": "An undead horse"
                }
              },
              {
                "kind": "CONSTRUCTOR",
                "name": "Variant()"
              },
              {
                "kind": "METHOD",
                "name": "valueOf(java.lang.String)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "name"
                  }
                ]
              },
              {
                "kind": "METHOD",
                "name": "values()"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@deprecated different variants are differing classes"
            }
          },
          {
            "kind": "METHOD",
            "name": "setCarryingChest(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "chest"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param chest Sets whether the Horse is carrying a chest\n@deprecated see {@link ChestedHorse}"
            }
          },
          {
            "kind": "METHOD",
            "name": "setColor(org.bukkit.entity.Horse.Color)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "color"
              }
            ],
            "comment": {
              "body": "Sets the horse\u0027s color.\n \u003cp\u003e\n Attempting to set a color for any donkey, mule, skeleton horse or\n undead horse will not result in a change.",
              "plain": "Sets the horse\u0027s color.\n \u003cp\u003e\n Attempting to set a color for any donkey, mule, skeleton horse or\n undead horse will not result in a change.\n@param color a {@link Color} for this horse"
            }
          },
          {
            "kind": "METHOD",
            "name": "setStyle(org.bukkit.entity.Horse.Style)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "style"
              }
            ],
            "comment": {
              "body": "Sets the style of this horse.\n Styles determine what kind of markings or patterns a horse has.\n \u003cp\u003e\n Attempting to set a style for any donkey, mule, skeleton horse or\n undead horse will not result in a change.",
              "plain": "Sets the style of this horse.\n Styles determine what kind of markings or patterns a horse has.\n \u003cp\u003e\n Attempting to set a style for any donkey, mule, skeleton horse or\n undead horse will not result in a change.\n@param style a {@link Style} for this horse"
            }
          }
        ],
        "comment": {
          "body": "Represents a Horse.",
          "plain": "Represents a Horse."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.HumanEntity",
        "children": [
          {
            "kind": "METHOD",
            "name": "closeInventory()",
            "comment": {
              "body": "Force-closes the currently open inventory view for this player, if any.",
              "plain": "Force-closes the currently open inventory view for this player, if any."
            }
          },
          {
            "kind": "METHOD",
            "name": "closeInventory(org.bukkit.event.inventory.InventoryCloseEvent.Reason)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "reason"
              }
            ],
            "comment": {
              "body": "Force-closes the currently open inventory view for this player, if any.",
              "plain": "Force-closes the currently open inventory view for this player, if any.\n@param reason why the inventory is closing"
            }
          },
          {
            "kind": "METHOD",
            "name": "getCooldown(org.bukkit.Material)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "material"
              }
            ],
            "comment": {
              "body": "Get the cooldown time in ticks remaining for the specified material.",
              "tags": "Returns the remaining cooldown time in ticks.",
              "plain": "Get the cooldown time in ticks remaining for the specified material.\n@param material the material to check\n@return the remaining cooldown time in ticks"
            }
          },
          {
            "kind": "METHOD",
            "name": "getEnderChest()",
            "comment": {
              "body": "Get the player\u0027s EnderChest inventory",
              "tags": "Returns The EnderChest of the player.",
              "plain": "Get the player\u0027s EnderChest inventory\n@return The EnderChest of the player"
            }
          },
          {
            "kind": "METHOD",
            "name": "getExpToLevel()",
            "comment": {
              "body": "Get the total amount of experience required for the player to level",
              "tags": "Returns Experience required to level up.",
              "plain": "Get the total amount of experience required for the player to level\n@return Experience required to level up"
            }
          },
          {
            "kind": "METHOD",
            "name": "getGameMode()",
            "comment": {
              "body": "Gets this human\u0027s current \u003ca href\u003d\"org/bukkit/GameMode.html\" title\u003d\"enum in org.bukkit\"\u003e\u003ccode\u003eGameMode\u003c/code\u003e\u003c/a\u003e",
              "tags": "Returns Current game mode.",
              "plain": "Gets this human\u0027s current {@link GameMode}\n@return Current game mode"
            }
          },
          {
            "kind": "METHOD",
            "name": "getInventory()",
            "comment": {
              "body": "Get the player\u0027s inventory.",
              "tags": "Returns The inventory of the player, this also contains the armor\n     slots..",
              "plain": "Get the player\u0027s inventory.\n@return The inventory of the player, this also contains the armor\n     slots."
            }
          },
          {
            "kind": "METHOD",
            "name": "getItemInHand()",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Returns the ItemStack currently in your hand, can be empty.",
              "tags": "Returns The ItemStack of the item you are currently holding..",
              "plain": "Returns the ItemStack currently in your hand, can be empty.\n@return The ItemStack of the item you are currently holding.\n@deprecated Humans may now dual wield in their off hand, use explicit\n methods in {@link PlayerInventory}."
            }
          },
          {
            "kind": "METHOD",
            "name": "getItemOnCursor()",
            "comment": {
              "body": "Returns the ItemStack currently on your cursor, can be empty. Will\n always be empty if the player currently has no open window.",
              "tags": "Returns The ItemStack of the item you are currently moving around..",
              "plain": "Returns the ItemStack currently on your cursor, can be empty. Will\n always be empty if the player currently has no open window.\n@return The ItemStack of the item you are currently moving around."
            }
          },
          {
            "kind": "METHOD",
            "name": "getMainHand()",
            "comment": {
              "body": "Gets the player\u0027s selected main hand",
              "tags": "Returns the players main hand.",
              "plain": "Gets the player\u0027s selected main hand\n@return the players main hand"
            }
          },
          {
            "kind": "METHOD",
            "name": "getName()",
            "comment": {
              "body": "Returns the name of this player",
              "tags": "Returns Player name.",
              "plain": "Returns the name of this player\n@return Player name"
            }
          },
          {
            "kind": "METHOD",
            "name": "getOpenInventory()",
            "comment": {
              "body": "Gets the inventory view the player is currently viewing. If they do not\n have an inventory window open, it returns their internal crafting view.",
              "tags": "Returns The inventory view..",
              "plain": "Gets the inventory view the player is currently viewing. If they do not\n have an inventory window open, it returns their internal crafting view.\n@return The inventory view."
            }
          },
          {
            "kind": "METHOD",
            "name": "getShoulderEntityLeft()",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Gets the entity currently perched on the left shoulder or null if no\n entity.\n \u003cbr\u003e\n The returned entity will not be spawned within the world, so most\n operations are invalid unless the entity is first spawned in.",
              "tags": "Returns left shoulder entity.",
              "plain": "Gets the entity currently perched on the left shoulder or null if no\n entity.\n \u003cbr\u003e\n The returned entity will not be spawned within the world, so most\n operations are invalid unless the entity is first spawned in.\n@return left shoulder entity\n@deprecated There are currently no well defined semantics regarding\n serialized entities in Bukkit. Use with care."
            }
          },
          {
            "kind": "METHOD",
            "name": "getShoulderEntityRight()",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Gets the entity currently perched on the right shoulder or null if no\n entity.\n \u003cbr\u003e\n The returned entity will not be spawned within the world, so most\n operations are invalid unless the entity is first spawned in.",
              "tags": "Returns right shoulder entity.",
              "plain": "Gets the entity currently perched on the right shoulder or null if no\n entity.\n \u003cbr\u003e\n The returned entity will not be spawned within the world, so most\n operations are invalid unless the entity is first spawned in.\n@return right shoulder entity\n@deprecated There are currently no well defined semantics regarding\n serialized entities in Bukkit. Use with care."
            }
          },
          {
            "kind": "METHOD",
            "name": "getSleepTicks()",
            "comment": {
              "body": "Get the sleep ticks of the player. This value may be capped.",
              "tags": "Returns slumber ticks.",
              "plain": "Get the sleep ticks of the player. This value may be capped.\n@return slumber ticks"
            }
          },
          {
            "kind": "METHOD",
            "name": "hasCooldown(org.bukkit.Material)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "material"
              }
            ],
            "comment": {
              "body": "Check whether a cooldown is active on the specified material.",
              "tags": "Returns if a cooldown is active on the material.",
              "plain": "Check whether a cooldown is active on the specified material.\n@param material the material to check\n@return if a cooldown is active on the material"
            }
          },
          {
            "kind": "METHOD",
            "name": "isBlocking()",
            "comment": {
              "body": "Check if the player is currently blocking (ie with a shield).",
              "tags": "Returns Whether they are blocking..",
              "plain": "Check if the player is currently blocking (ie with a shield).\n@return Whether they are blocking."
            }
          },
          {
            "kind": "METHOD",
            "name": "isHandRaised()",
            "comment": {
              "body": "Check if the player currently has their hand raised (ie about to begin\n blocking).",
              "tags": "Returns Whether their hand is raised.",
              "plain": "Check if the player currently has their hand raised (ie about to begin\n blocking).\n@return Whether their hand is raised"
            }
          },
          {
            "kind": "METHOD",
            "name": "isSleeping()",
            "comment": {
              "body": "Returns whether this player is slumbering.",
              "tags": "Returns slumber state.",
              "plain": "Returns whether this player is slumbering.\n@return slumber state"
            }
          },
          {
            "kind": "METHOD",
            "name": "openEnchanting(org.bukkit.Location,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "force"
              },
              {
                "kind": "PARAMETER",
                "name": "location"
              }
            ],
            "comment": {
              "body": "Opens an empty enchanting inventory window with the player\u0027s inventory\n on the bottom.",
              "tags": "Returns The newly opened inventory view, or null if it could not be\n     opened..",
              "plain": "Opens an empty enchanting inventory window with the player\u0027s inventory\n on the bottom.\n@param location The location to attach it to. If null, the player\u0027s\n     location is used.\n@param force If false, and there is no enchanting table at the\n     location, no inventory will be opened and null will be returned.\n@return The newly opened inventory view, or null if it could not be\n     opened."
            }
          },
          {
            "kind": "METHOD",
            "name": "openInventory(org.bukkit.inventory.Inventory)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "inventory"
              }
            ],
            "comment": {
              "body": "Opens an inventory window with the specified inventory on the top and\n the player\u0027s inventory on the bottom.",
              "tags": "Returns The newly opened inventory view.",
              "plain": "Opens an inventory window with the specified inventory on the top and\n the player\u0027s inventory on the bottom.\n@param inventory The inventory to open\n@return The newly opened inventory view"
            }
          },
          {
            "kind": "METHOD",
            "name": "openInventory(org.bukkit.inventory.InventoryView)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "inventory"
              }
            ],
            "comment": {
              "body": "Opens an inventory window to the specified inventory view.",
              "plain": "Opens an inventory window to the specified inventory view.\n@param inventory The view to open"
            }
          },
          {
            "kind": "METHOD",
            "name": "openMerchant(org.bukkit.entity.Villager,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "force"
              },
              {
                "kind": "PARAMETER",
                "name": "trader"
              }
            ],
            "comment": {
              "body": "Starts a trade between the player and the villager.\n\n Note that only one player may trade with a villager at once. You must use\n the force parameter for this.",
              "tags": "Returns The newly opened inventory view, or null if it could not be\n opened..",
              "plain": "Starts a trade between the player and the villager.\n\n Note that only one player may trade with a villager at once. You must use\n the force parameter for this.\n@param trader The merchant to trade with. Cannot be null.\n@param force whether to force the trade even if another player is trading\n@return The newly opened inventory view, or null if it could not be\n opened."
            }
          },
          {
            "kind": "METHOD",
            "name": "openMerchant(org.bukkit.inventory.Merchant,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "force"
              },
              {
                "kind": "PARAMETER",
                "name": "merchant"
              }
            ],
            "comment": {
              "body": "Starts a trade between the player and the merchant.\n\n Note that only one player may trade with a merchant at once. You must use\n the force parameter for this.",
              "tags": "Returns The newly opened inventory view, or null if it could not be\n opened..",
              "plain": "Starts a trade between the player and the merchant.\n\n Note that only one player may trade with a merchant at once. You must use\n the force parameter for this.\n@param merchant The merchant to trade with. Cannot be null.\n@param force whether to force the trade even if another player is trading\n@return The newly opened inventory view, or null if it could not be\n opened."
            }
          },
          {
            "kind": "METHOD",
            "name": "openSign(org.bukkit.block.Sign)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "sign"
              }
            ],
            "comment": {
              "body": "Opens an editor window for the specified sign",
              "plain": "Opens an editor window for the specified sign\n@param sign The sign to open"
            }
          },
          {
            "kind": "METHOD",
            "name": "openWorkbench(org.bukkit.Location,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "force"
              },
              {
                "kind": "PARAMETER",
                "name": "location"
              }
            ],
            "comment": {
              "body": "Opens an empty workbench inventory window with the player\u0027s inventory\n on the bottom.",
              "tags": "Returns The newly opened inventory view, or null if it could not be\n     opened..",
              "plain": "Opens an empty workbench inventory window with the player\u0027s inventory\n on the bottom.\n@param location The location to attach it to. If null, the player\u0027s\n     location is used.\n@param force If false, and there is no workbench block at the location,\n     no inventory will be opened and null will be returned.\n@return The newly opened inventory view, or null if it could not be\n     opened."
            }
          },
          {
            "kind": "METHOD",
            "name": "releaseLeftShoulderEntity()",
            "comment": {
              "body": "If there is an Entity on this entities left shoulder, it will be released to the world and returned.\n If no Entity is released, null will be returned.",
              "tags": "Returns The released entity, or null.",
              "plain": "If there is an Entity on this entities left shoulder, it will be released to the world and returned.\n If no Entity is released, null will be returned.\n@return The released entity, or null"
            }
          },
          {
            "kind": "METHOD",
            "name": "releaseRightShoulderEntity()",
            "comment": {
              "body": "If there is an Entity on this entities left shoulder, it will be released to the world and returned.\n If no Entity is released, null will be returned.",
              "tags": "Returns The released entity, or null.",
              "plain": "If there is an Entity on this entities left shoulder, it will be released to the world and returned.\n If no Entity is released, null will be returned.\n@return The released entity, or null"
            }
          },
          {
            "kind": "METHOD",
            "name": "setCooldown(org.bukkit.Material,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "material"
              },
              {
                "kind": "PARAMETER",
                "name": "ticks"
              }
            ],
            "comment": {
              "body": "Set a cooldown on the specified material for a certain amount of ticks.\n ticks. 0 ticks will result in the removal of the cooldown.\n \u003cp\u003e\n Cooldowns are used by the server for items such as ender pearls and\n shields to prevent them from being used repeatedly.\n \u003cp\u003e\n Note that cooldowns will not by themselves stop an item from being used\n for attacking.",
              "plain": "Set a cooldown on the specified material for a certain amount of ticks.\n ticks. 0 ticks will result in the removal of the cooldown.\n \u003cp\u003e\n Cooldowns are used by the server for items such as ender pearls and\n shields to prevent them from being used repeatedly.\n \u003cp\u003e\n Note that cooldowns will not by themselves stop an item from being used\n for attacking.\n@param material the material to set the cooldown for\n@param ticks the amount of ticks to set or 0 to remove"
            }
          },
          {
            "kind": "METHOD",
            "name": "setGameMode(org.bukkit.GameMode)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "mode"
              }
            ],
            "comment": {
              "body": "Sets this human\u0027s current \u003ca href\u003d\"org/bukkit/GameMode.html\" title\u003d\"enum in org.bukkit\"\u003e\u003ccode\u003eGameMode\u003c/code\u003e\u003c/a\u003e",
              "plain": "Sets this human\u0027s current {@link GameMode}\n@param mode New game mode"
            }
          },
          {
            "kind": "METHOD",
            "name": "setItemInHand(org.bukkit.inventory.ItemStack)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "item"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Sets the item to the given ItemStack, this will replace whatever the\n user was holding.",
              "plain": "Sets the item to the given ItemStack, this will replace whatever the\n user was holding.\n@param item The ItemStack which will end up in the hand\n@deprecated Humans may now dual wield in their off hand, use explicit\n methods in {@link PlayerInventory}."
            }
          },
          {
            "kind": "METHOD",
            "name": "setItemOnCursor(org.bukkit.inventory.ItemStack)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "item"
              }
            ],
            "comment": {
              "body": "Sets the item to the given ItemStack, this will replace whatever the\n user was moving. Will always be empty if the player currently has no\n open window.",
              "plain": "Sets the item to the given ItemStack, this will replace whatever the\n user was moving. Will always be empty if the player currently has no\n open window.\n@param item The ItemStack which will end up in the hand"
            }
          },
          {
            "kind": "METHOD",
            "name": "setShoulderEntityLeft(org.bukkit.entity.Entity)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "entity"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Sets the entity currently perched on the left shoulder, or null to\n remove. This method will remove the entity from the world.\n \u003cbr\u003e\n Note that only a copy of the entity will be set to display on the\n shoulder.\n \u003cbr\u003e\n Also note that the client will currently only render \u003ca href\u003d\"org/bukkit/entity/Parrot.html\" title\u003d\"interface in org.bukkit.entity\"\u003e\u003ccode\u003eParrot\u003c/code\u003e\u003c/a\u003e\n entities.",
              "plain": "Sets the entity currently perched on the left shoulder, or null to\n remove. This method will remove the entity from the world.\n \u003cbr\u003e\n Note that only a copy of the entity will be set to display on the\n shoulder.\n \u003cbr\u003e\n Also note that the client will currently only render {@link Parrot}\n entities.\n@param entity left shoulder entity\n@deprecated There are currently no well defined semantics regarding\n serialized entities in Bukkit. Use with care."
            }
          },
          {
            "kind": "METHOD",
            "name": "setShoulderEntityRight(org.bukkit.entity.Entity)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "entity"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Sets the entity currently perched on the right shoulder, or null to\n remove. This method will remove the entity from the world.\n \u003cbr\u003e\n Note that only a copy of the entity will be set to display on the\n shoulder.\n \u003cbr\u003e\n Also note that the client will currently only render \u003ca href\u003d\"org/bukkit/entity/Parrot.html\" title\u003d\"interface in org.bukkit.entity\"\u003e\u003ccode\u003eParrot\u003c/code\u003e\u003c/a\u003e\n entities.",
              "plain": "Sets the entity currently perched on the right shoulder, or null to\n remove. This method will remove the entity from the world.\n \u003cbr\u003e\n Note that only a copy of the entity will be set to display on the\n shoulder.\n \u003cbr\u003e\n Also note that the client will currently only render {@link Parrot}\n entities.\n@param entity right shoulder entity\n@deprecated There are currently no well defined semantics regarding\n serialized entities in Bukkit. Use with care."
            }
          },
          {
            "kind": "METHOD",
            "name": "setWindowProperty(org.bukkit.inventory.InventoryView.Property,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "prop"
              },
              {
                "kind": "PARAMETER",
                "name": "value"
              }
            ],
            "comment": {
              "body": "If the player currently has an inventory window open, this method will\n set a property of that window, such as the state of a progress bar.",
              "tags": "Returns True if the property was successfully set..",
              "plain": "If the player currently has an inventory window open, this method will\n set a property of that window, such as the state of a progress bar.\n@param prop The property.\n@param value The value to set the property to.\n@return True if the property was successfully set."
            }
          }
        ],
        "comment": {
          "body": "Represents a human entity, such as an NPC or a player",
          "plain": "Represents a human entity, such as an NPC or a player"
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.Husk",
        "comment": {
          "body": "Represents a Husk - variant of \u003ca href\u003d\"org/bukkit/entity/Zombie.html\" title\u003d\"interface in org.bukkit.entity\"\u003e\u003ccode\u003eZombie\u003c/code\u003e\u003c/a\u003e.",
          "plain": "Represents a Husk - variant of {@link Zombie}."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.Illager",
        "comment": {
          "body": "Represents a type of \"Illager\".",
          "plain": "Represents a type of \"Illager\"."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.Illusioner",
        "comment": {
          "body": "Represents an Illusioner \"Illager\".",
          "plain": "Represents an Illusioner \"Illager\"."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.IronGolem",
        "children": [
          {
            "kind": "METHOD",
            "name": "isPlayerCreated()",
            "comment": {
              "body": "Gets whether this iron golem was built by a player.",
              "tags": "Returns Whether this iron golem was built by a player.",
              "plain": "Gets whether this iron golem was built by a player.\n@return Whether this iron golem was built by a player"
            }
          },
          {
            "kind": "METHOD",
            "name": "setPlayerCreated(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "playerCreated"
              }
            ],
            "comment": {
              "body": "Sets whether this iron golem was built by a player or not.",
              "plain": "Sets whether this iron golem was built by a player or not.\n@param playerCreated true if you want to set the iron golem as being\n     player created, false if you want it to be a natural village golem."
            }
          }
        ],
        "comment": {
          "body": "An iron Golem that protects Villages.",
          "plain": "An iron Golem that protects Villages."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.Item",
        "children": [
          {
            "kind": "METHOD",
            "name": "canMobPickup()",
            "comment": {
              "body": "Gets if non-player entities can pick this Item up",
              "tags": "Returns True if non-player entities can pickup.",
              "plain": "Gets if non-player entities can pick this Item up\n@return True if non-player entities can pickup"
            }
          },
          {
            "kind": "METHOD",
            "name": "getItemStack()",
            "comment": {
              "body": "Gets the item stack associated with this item drop.",
              "tags": "Returns An item stack..",
              "plain": "Gets the item stack associated with this item drop.\n@return An item stack."
            }
          },
          {
            "kind": "METHOD",
            "name": "getPickupDelay()",
            "comment": {
              "body": "Gets the delay before this Item is available to be picked up by players",
              "tags": "Returns Remaining delay.",
              "plain": "Gets the delay before this Item is available to be picked up by players\n@return Remaining delay"
            }
          },
          {
            "kind": "METHOD",
            "name": "setCanMobPickup(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "canMobPickup"
              }
            ],
            "comment": {
              "body": "Sets if non-player entities can pick this Item up",
              "plain": "Sets if non-player entities can pick this Item up\n@param canMobPickup True to allow non-player entity pickup"
            }
          },
          {
            "kind": "METHOD",
            "name": "setItemStack(org.bukkit.inventory.ItemStack)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "stack"
              }
            ],
            "comment": {
              "body": "Sets the item stack associated with this item drop.",
              "plain": "Sets the item stack associated with this item drop.\n@param stack An item stack."
            }
          },
          {
            "kind": "METHOD",
            "name": "setPickupDelay(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "delay"
              }
            ],
            "comment": {
              "body": "Sets the delay before this Item is available to be picked up by players",
              "plain": "Sets the delay before this Item is available to be picked up by players\n@param delay New delay"
            }
          }
        ],
        "comment": {
          "body": "Represents an Item.",
          "plain": "Represents an Item."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.ItemFrame",
        "children": [
          {
            "kind": "METHOD",
            "name": "getItem()",
            "comment": {
              "body": "Get the item in this frame",
              "tags": "Returns a defensive copy the item in this item frame.",
              "plain": "Get the item in this frame\n@return a defensive copy the item in this item frame"
            }
          },
          {
            "kind": "METHOD",
            "name": "getRotation()",
            "comment": {
              "body": "Get the rotation of the frame\u0027s item",
              "tags": "Returns the direction.",
              "plain": "Get the rotation of the frame\u0027s item\n@return the direction"
            }
          },
          {
            "kind": "METHOD",
            "name": "setItem(org.bukkit.inventory.ItemStack)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "item"
              }
            ],
            "comment": {
              "body": "Set the item in this frame",
              "plain": "Set the item in this frame\n@param item the new item"
            }
          },
          {
            "kind": "METHOD",
            "name": "setRotation(org.bukkit.Rotation)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "rotation"
              }
            ],
            "comment": {
              "body": "Set the rotation of the frame\u0027s item",
              "plain": "Set the rotation of the frame\u0027s item\n@param rotation the new rotation\n@throws IllegalArgumentException if rotation is null"
            }
          }
        ],
        "comment": {
          "body": "Represents an Item Frame",
          "plain": "Represents an Item Frame"
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.LargeFireball",
        "comment": {
          "body": "Represents a large \u003ca href\u003d\"org/bukkit/entity/Fireball.html\" title\u003d\"interface in org.bukkit.entity\"\u003e\u003ccode\u003eFireball\u003c/code\u003e\u003c/a\u003e",
          "plain": "Represents a large {@link Fireball}"
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.LeashHitch",
        "comment": {
          "body": "Represents a Leash Hitch on a fence",
          "plain": "Represents a Leash Hitch on a fence"
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.LightningStrike",
        "children": [
          {
            "kind": "METHOD",
            "name": "isEffect()",
            "comment": {
              "body": "Returns whether the strike is an effect that does no damage.",
              "tags": "Returns whether the strike is an effect.",
              "plain": "Returns whether the strike is an effect that does no damage.\n@return whether the strike is an effect"
            }
          },
          {
            "kind": "CLASS",
            "name": "org.bukkit.entity.LightningStrike.Spigot",
            "children": [
              {
                "kind": "CONSTRUCTOR",
                "name": "Spigot()"
              },
              {
                "kind": "METHOD",
                "name": "isSilent()"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "spigot()"
          }
        ],
        "comment": {
          "body": "Represents an instance of a lightning strike. May or may not do damage.",
          "plain": "Represents an instance of a lightning strike. May or may not do damage."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.LingeringPotion",
        "comment": {
          "body": "Represents a thrown lingering potion bottle",
          "plain": "Represents a thrown lingering potion bottle"
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.LivingEntity",
        "children": [
          {
            "kind": "METHOD",
            "name": "addPotionEffect(org.bukkit.potion.PotionEffect)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "effect"
              }
            ],
            "comment": {
              "body": "Adds the given \u003ca href\u003d\"org/bukkit/potion/PotionEffect.html\" title\u003d\"class in org.bukkit.potion\"\u003e\u003ccode\u003ePotionEffect\u003c/code\u003e\u003c/a\u003e to the living entity.\n \u003cp\u003e\n Only one potion effect can be present for a given \u003ca href\u003d\"org/bukkit/potion/PotionEffectType.html\" title\u003d\"class in org.bukkit.potion\"\u003e\u003ccode\u003ePotionEffectType\u003c/code\u003e\u003c/a\u003e.",
              "tags": "Returns whether the effect could be added.",
              "plain": "Adds the given {@link PotionEffect} to the living entity.\n \u003cp\u003e\n Only one potion effect can be present for a given {@link PotionEffectType}.\n@param effect PotionEffect to be added\n@return whether the effect could be added"
            }
          },
          {
            "kind": "METHOD",
            "name": "addPotionEffect(org.bukkit.potion.PotionEffect,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "effect"
              },
              {
                "kind": "PARAMETER",
                "name": "force"
              }
            ],
            "comment": {
              "body": "Adds the given \u003ca href\u003d\"org/bukkit/potion/PotionEffect.html\" title\u003d\"class in org.bukkit.potion\"\u003e\u003ccode\u003ePotionEffect\u003c/code\u003e\u003c/a\u003e to the living entity.\n \u003cp\u003e\n Only one potion effect can be present for a given \u003ca href\u003d\"org/bukkit/potion/PotionEffectType.html\" title\u003d\"class in org.bukkit.potion\"\u003e\u003ccode\u003ePotionEffectType\u003c/code\u003e\u003c/a\u003e.",
              "tags": "Returns whether the effect could be added.",
              "plain": "Adds the given {@link PotionEffect} to the living entity.\n \u003cp\u003e\n Only one potion effect can be present for a given {@link PotionEffectType}.\n@param effect PotionEffect to be added\n@param force whether conflicting effects should be removed\n@return whether the effect could be added"
            }
          },
          {
            "kind": "METHOD",
            "name": "addPotionEffects(java.util.Collection\u003corg.bukkit.potion.PotionEffect\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "effects"
              }
            ],
            "comment": {
              "body": "Attempts to add all of the given \u003ca href\u003d\"org/bukkit/potion/PotionEffect.html\" title\u003d\"class in org.bukkit.potion\"\u003e\u003ccode\u003ePotionEffect\u003c/code\u003e\u003c/a\u003e to the living\n entity.",
              "tags": "Returns whether all of the effects could be added.",
              "plain": "Attempts to add all of the given {@link PotionEffect} to the living\n entity.\n@param effects the effects to add\n@return whether all of the effects could be added"
            }
          },
          {
            "kind": "METHOD",
            "name": "getActiveItem()",
            "comment": {
              "body": "Get\u0027s the item being actively \"used\" or consumed.",
              "tags": "Returns The item. Will be null if no active item..",
              "plain": "Get\u0027s the item being actively \"used\" or consumed.\n@return The item. Will be null if no active item."
            }
          },
          {
            "kind": "METHOD",
            "name": "getActivePotionEffects()",
            "comment": {
              "body": "Returns all currently active \u003ca href\u003d\"org/bukkit/potion/PotionEffect.html\" title\u003d\"class in org.bukkit.potion\"\u003e\u003ccode\u003ePotionEffect\u003c/code\u003e\u003c/a\u003es on the living\n entity.",
              "tags": "Returns a collection of \u003ca href\u003d\"org/bukkit/potion/PotionEffect.html\" title\u003d\"class in org.bukkit.potion\"\u003e\u003ccode\u003ePotionEffect\u003c/code\u003e\u003c/a\u003es.",
              "plain": "Returns all currently active {@link PotionEffect}s on the living\n entity.\n@return a collection of {@link PotionEffect}s"
            }
          },
          {
            "kind": "METHOD",
            "name": "getArrowsStuck()",
            "comment": {
              "body": "Get the number of arrows stuck in this entity",
              "tags": "Returns Number of arrows stuck.",
              "plain": "Get the number of arrows stuck in this entity\n@return Number of arrows stuck"
            }
          },
          {
            "kind": "METHOD",
            "name": "getCanPickupItems()",
            "comment": {
              "body": "Gets if the living entity can pick up items.",
              "tags": "Returns whether or not the living entity can pick up items.",
              "plain": "Gets if the living entity can pick up items.\n@return whether or not the living entity can pick up items"
            }
          },
          {
            "kind": "METHOD",
            "name": "getEquipment()",
            "comment": {
              "body": "Gets the inventory with the equipment worn by the living entity.",
              "tags": "Returns the living entity\u0027s inventory.",
              "plain": "Gets the inventory with the equipment worn by the living entity.\n@return the living entity\u0027s inventory"
            }
          },
          {
            "kind": "METHOD",
            "name": "getEyeHeight()",
            "comment": {
              "body": "Gets the height of the living entity\u0027s eyes above its Location.",
              "tags": "Returns height of the living entity\u0027s eyes above its location.",
              "plain": "Gets the height of the living entity\u0027s eyes above its Location.\n@return height of the living entity\u0027s eyes above its location"
            }
          },
          {
            "kind": "METHOD",
            "name": "getEyeHeight(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "ignorePose"
              }
            ],
            "comment": {
              "body": "Gets the height of the living entity\u0027s eyes above its Location.",
              "tags": "Returns height of the living entity\u0027s eyes above its location.",
              "plain": "Gets the height of the living entity\u0027s eyes above its Location.\n@param ignorePose if set to true, the effects of pose changes, eg\n     sneaking and gliding will be ignored\n@return height of the living entity\u0027s eyes above its location"
            }
          },
          {
            "kind": "METHOD",
            "name": "getEyeLocation()",
            "comment": {
              "body": "Get a Location detailing the current eye position of the living entity.",
              "tags": "Returns a location at the eyes of the living entity.",
              "plain": "Get a Location detailing the current eye position of the living entity.\n@return a location at the eyes of the living entity"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHandRaisedTime()",
            "comment": {
              "body": "Get how long the players hands have been raised (Charging Bow attack, using a potion, etc)",
              "tags": "Returns Get how long the players hands have been raised (Charging Bow attack, using a potion, etc).",
              "plain": "Get how long the players hands have been raised (Charging Bow attack, using a potion, etc)\n@return Get how long the players hands have been raised (Charging Bow attack, using a potion, etc)"
            }
          },
          {
            "kind": "METHOD",
            "name": "getItemUseRemainingTime()",
            "comment": {
              "body": "Get\u0027s remaining time a player needs to keep hands raised with an item to finish using it.",
              "tags": "Returns Remaining ticks to use the item.",
              "plain": "Get\u0027s remaining time a player needs to keep hands raised with an item to finish using it.\n@return Remaining ticks to use the item"
            }
          },
          {
            "kind": "METHOD",
            "name": "getKiller()",
            "comment": {
              "body": "Gets the player identified as the killer of the living entity.\n \u003cp\u003e\n May be null.",
              "tags": "Returns killer player, or null if none found.",
              "plain": "Gets the player identified as the killer of the living entity.\n \u003cp\u003e\n May be null.\n@return killer player, or null if none found"
            }
          },
          {
            "kind": "METHOD",
            "name": "getLastDamage()",
            "comment": {
              "body": "Returns the living entity\u0027s last damage taken in the current no damage\n ticks time.\n \u003cp\u003e\n Only damage higher than this amount will further damage the living\n entity.",
              "tags": "Returns damage taken since the last no damage ticks time period.",
              "plain": "Returns the living entity\u0027s last damage taken in the current no damage\n ticks time.\n \u003cp\u003e\n Only damage higher than this amount will further damage the living\n entity.\n@return damage taken since the last no damage ticks time period"
            }
          },
          {
            "kind": "METHOD",
            "name": "getLastTwoTargetBlocks(java.util.Set\u003corg.bukkit.Material\u003e,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "maxDistance"
              },
              {
                "kind": "PARAMETER",
                "name": "transparent"
              }
            ],
            "comment": {
              "body": "Gets the last two blocks along the living entity\u0027s line of sight.\n \u003cp\u003e\n The target block will be the last block in the list.",
              "tags": "Returns list containing the last 2 blocks along the living entity\u0027s\n     line of sight.",
              "plain": "Gets the last two blocks along the living entity\u0027s line of sight.\n \u003cp\u003e\n The target block will be the last block in the list.\n@param transparent HashSet containing all transparent block Materials (set to\n     null for only air)\n@param maxDistance this is the maximum distance to scan. This may be\n     further limited by the server, but never to less than 100 blocks\n@return list containing the last 2 blocks along the living entity\u0027s\n     line of sight"
            }
          },
          {
            "kind": "METHOD",
            "name": "getLeashHolder()",
            "comment": {
              "body": "Gets the entity that is currently leading this entity.",
              "tags": "Returns the entity holding the leash.",
              "plain": "Gets the entity that is currently leading this entity.\n@return the entity holding the leash\n@throws IllegalStateException if not currently leashed"
            }
          },
          {
            "kind": "METHOD",
            "name": "getLineOfSight(java.util.Set\u003corg.bukkit.Material\u003e,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "maxDistance"
              },
              {
                "kind": "PARAMETER",
                "name": "transparent"
              }
            ],
            "comment": {
              "body": "Gets all blocks along the living entity\u0027s line of sight.\n \u003cp\u003e\n This list contains all blocks from the living entity\u0027s eye position to\n target inclusive.",
              "tags": "Returns list containing all blocks along the living entity\u0027s line of\n     sight.",
              "plain": "Gets all blocks along the living entity\u0027s line of sight.\n \u003cp\u003e\n This list contains all blocks from the living entity\u0027s eye position to\n target inclusive.\n@param transparent HashSet containing all transparent block Materials (set to\n     null for only air)\n@param maxDistance this is the maximum distance to scan (may be limited\n     by server by at least 100 blocks, no less)\n@return list containing all blocks along the living entity\u0027s line of\n     sight"
            }
          },
          {
            "kind": "METHOD",
            "name": "getMaximumAir()",
            "comment": {
              "body": "Returns the maximum amount of air the living entity can have, in ticks.",
              "tags": "Returns maximum amount of air.",
              "plain": "Returns the maximum amount of air the living entity can have, in ticks.\n@return maximum amount of air"
            }
          },
          {
            "kind": "METHOD",
            "name": "getMaximumNoDamageTicks()",
            "comment": {
              "body": "Returns the living entity\u0027s current maximum no damage ticks.\n \u003cp\u003e\n This is the maximum duration in which the living entity will not take\n damage.",
              "tags": "Returns maximum no damage ticks.",
              "plain": "Returns the living entity\u0027s current maximum no damage ticks.\n \u003cp\u003e\n This is the maximum duration in which the living entity will not take\n damage.\n@return maximum no damage ticks"
            }
          },
          {
            "kind": "METHOD",
            "name": "getNoDamageTicks()",
            "comment": {
              "body": "Returns the living entity\u0027s current no damage ticks.",
              "tags": "Returns amount of no damage ticks.",
              "plain": "Returns the living entity\u0027s current no damage ticks.\n@return amount of no damage ticks"
            }
          },
          {
            "kind": "METHOD",
            "name": "getPotionEffect(org.bukkit.potion.PotionEffectType)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "comment": {
              "body": "Returns the active \u003ca href\u003d\"org/bukkit/potion/PotionEffect.html\" title\u003d\"class in org.bukkit.potion\"\u003e\u003ccode\u003ePotionEffect\u003c/code\u003e\u003c/a\u003e of the specified type.\n \u003cp\u003e\n If the effect is not present on the entity then null will be returned.",
              "tags": "Returns the effect active on this entity, or null if not active..",
              "plain": "Returns the active {@link PotionEffect} of the specified type.\n \u003cp\u003e\n If the effect is not present on the entity then null will be returned.\n@param type the potion type to check\n@return the effect active on this entity, or null if not active."
            }
          },
          {
            "kind": "METHOD",
            "name": "getRemainingAir()",
            "comment": {
              "body": "Returns the amount of air that the living entity has remaining, in\n ticks.",
              "tags": "Returns amount of air remaining.",
              "plain": "Returns the amount of air that the living entity has remaining, in\n ticks.\n@return amount of air remaining"
            }
          },
          {
            "kind": "METHOD",
            "name": "getRemoveWhenFarAway()",
            "comment": {
              "body": "Returns if the living entity despawns when away from players or not.\n \u003cp\u003e\n By default, animals are not removed while other mobs are.",
              "tags": "Returns true if the living entity is removed when away from players.",
              "plain": "Returns if the living entity despawns when away from players or not.\n \u003cp\u003e\n By default, animals are not removed while other mobs are.\n@return true if the living entity is removed when away from players"
            }
          },
          {
            "kind": "METHOD",
            "name": "getShieldBlockingDelay()",
            "comment": {
              "body": "Get the delay (in ticks) before blocking is effective for this entity",
              "tags": "Returns Delay in ticks.",
              "plain": "Get the delay (in ticks) before blocking is effective for this entity\n@return Delay in ticks"
            }
          },
          {
            "kind": "METHOD",
            "name": "getTargetBlock(java.util.Set\u003corg.bukkit.Material\u003e,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "maxDistance"
              },
              {
                "kind": "PARAMETER",
                "name": "transparent"
              }
            ],
            "comment": {
              "body": "Gets the block that the living entity has targeted.",
              "tags": "Returns block that the living entity has targeted.",
              "plain": "Gets the block that the living entity has targeted.\n@param transparent HashSet containing all transparent block Materials (set to\n     null for only air)\n@param maxDistance this is the maximum distance to scan (may be limited\n     by server by at least 100 blocks, no less)\n@return block that the living entity has targeted"
            }
          },
          {
            "kind": "METHOD",
            "name": "hasAI()",
            "comment": {
              "body": "Checks whether an entity has AI.",
              "tags": "Returns true if the entity has AI, otherwise false..",
              "plain": "Checks whether an entity has AI.\n@return true if the entity has AI, otherwise false."
            }
          },
          {
            "kind": "METHOD",
            "name": "hasLineOfSight(org.bukkit.entity.Entity)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "other"
              }
            ],
            "comment": {
              "body": "Checks whether the living entity has block line of sight to another.\n \u003cp\u003e\n This uses the same algorithm that hostile mobs use to find the closest\n player.",
              "tags": "Returns true if there is a line of sight, false if not.",
              "plain": "Checks whether the living entity has block line of sight to another.\n \u003cp\u003e\n This uses the same algorithm that hostile mobs use to find the closest\n player.\n@param other the entity to determine line of sight to\n@return true if there is a line of sight, false if not"
            }
          },
          {
            "kind": "METHOD",
            "name": "hasPotionEffect(org.bukkit.potion.PotionEffectType)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "comment": {
              "body": "Returns whether the living entity already has an existing effect of\n the given \u003ca href\u003d\"org/bukkit/potion/PotionEffectType.html\" title\u003d\"class in org.bukkit.potion\"\u003e\u003ccode\u003ePotionEffectType\u003c/code\u003e\u003c/a\u003e applied to it.",
              "tags": "Returns whether the living entity has this potion effect active on them.",
              "plain": "Returns whether the living entity already has an existing effect of\n the given {@link PotionEffectType} applied to it.\n@param type the potion type to check\n@return whether the living entity has this potion effect active on them"
            }
          },
          {
            "kind": "METHOD",
            "name": "isCollidable()",
            "comment": {
              "body": "Gets if this entity is subject to collisions with other entities.\n \u003cp\u003e\n Please note that this method returns only the custom collidable state,\n not whether the entity is non-collidable for other reasons such as being\n dead.",
              "tags": "Returns collision status.",
              "plain": "Gets if this entity is subject to collisions with other entities.\n \u003cp\u003e\n Please note that this method returns only the custom collidable state,\n not whether the entity is non-collidable for other reasons such as being\n dead.\n@return collision status"
            }
          },
          {
            "kind": "METHOD",
            "name": "isGliding()",
            "comment": {
              "body": "Checks to see if an entity is gliding, such as using an Elytra.",
              "tags": "Returns True if this entity is gliding..",
              "plain": "Checks to see if an entity is gliding, such as using an Elytra.\n@return True if this entity is gliding."
            }
          },
          {
            "kind": "METHOD",
            "name": "isHandRaised()",
            "comment": {
              "body": "Whether or not this entity is using or charging an attack (Bow pulled back, drinking potion, eating food)",
              "tags": "Returns Whether or not this entity is using or charging an attack (Bow pulled back, drinking potion, eating food).",
              "plain": "Whether or not this entity is using or charging an attack (Bow pulled back, drinking potion, eating food)\n@return Whether or not this entity is using or charging an attack (Bow pulled back, drinking potion, eating food)"
            }
          },
          {
            "kind": "METHOD",
            "name": "isLeashed()",
            "comment": {
              "body": "Returns whether the entity is currently leashed.",
              "tags": "Returns whether the entity is leashed.",
              "plain": "Returns whether the entity is currently leashed.\n@return whether the entity is leashed"
            }
          },
          {
            "kind": "METHOD",
            "name": "removePotionEffect(org.bukkit.potion.PotionEffectType)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "comment": {
              "body": "Removes any effects present of the given \u003ca href\u003d\"org/bukkit/potion/PotionEffectType.html\" title\u003d\"class in org.bukkit.potion\"\u003e\u003ccode\u003ePotionEffectType\u003c/code\u003e\u003c/a\u003e.",
              "plain": "Removes any effects present of the given {@link PotionEffectType}.\n@param type the potion type to remove"
            }
          },
          {
            "kind": "METHOD",
            "name": "setAI(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "ai"
              }
            ],
            "comment": {
              "body": "Sets whether an entity will have AI.",
              "plain": "Sets whether an entity will have AI.\n@param ai whether the mob will have AI or not."
            }
          },
          {
            "kind": "METHOD",
            "name": "setArrowsStuck(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "arrows"
              }
            ],
            "comment": {
              "body": "Set the number of arrows stuck in this entity",
              "plain": "Set the number of arrows stuck in this entity\n@param arrows Number of arrows to stick in this entity"
            }
          },
          {
            "kind": "METHOD",
            "name": "setCanPickupItems(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "pickup"
              }
            ],
            "comment": {
              "body": "Sets whether or not the living entity can pick up items.",
              "plain": "Sets whether or not the living entity can pick up items.\n@param pickup whether or not the living entity can pick up items"
            }
          },
          {
            "kind": "METHOD",
            "name": "setCollidable(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "collidable"
              }
            ],
            "comment": {
              "body": "Set if this entity will be subject to collisions other entities.\n \u003cp\u003e\n Note that collisions are bidirectional, so this method would need to be\n set to false on both the collidee and the collidant to ensure no\n collisions take place.",
              "plain": "Set if this entity will be subject to collisions other entities.\n \u003cp\u003e\n Note that collisions are bidirectional, so this method would need to be\n set to false on both the collidee and the collidant to ensure no\n collisions take place.\n@param collidable collision status"
            }
          },
          {
            "kind": "METHOD",
            "name": "setGliding(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "gliding"
              }
            ],
            "comment": {
              "body": "Makes entity start or stop gliding. This will work even if an Elytra\n is not equipped, but will be reverted by the server immediately after\n unless an event-cancelling mechanism is put in place.",
              "plain": "Makes entity start or stop gliding. This will work even if an Elytra\n is not equipped, but will be reverted by the server immediately after\n unless an event-cancelling mechanism is put in place.\n@param gliding True if the entity is gliding."
            }
          },
          {
            "kind": "METHOD",
            "name": "setKiller(org.bukkit.entity.Player)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "killer"
              }
            ],
            "comment": {
              "body": "Sets the player identified as the killer of the living entity.",
              "plain": "Sets the player identified as the killer of the living entity.\n@param killer player"
            }
          },
          {
            "kind": "METHOD",
            "name": "setLastDamage(double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "damage"
              }
            ],
            "comment": {
              "body": "Sets the damage dealt within the current no damage ticks time period.",
              "plain": "Sets the damage dealt within the current no damage ticks time period.\n@param damage amount of damage"
            }
          },
          {
            "kind": "METHOD",
            "name": "setLeashHolder(org.bukkit.entity.Entity)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "holder"
              }
            ],
            "comment": {
              "body": "Sets the leash on this entity to be held by the supplied entity.\n \u003cp\u003e\n This method has no effect on EnderDragons, Withers, Players, or Bats.\n Non-living entities excluding leashes will not persist as leash\n holders.",
              "tags": "Returns whether the operation was successful.",
              "plain": "Sets the leash on this entity to be held by the supplied entity.\n \u003cp\u003e\n This method has no effect on EnderDragons, Withers, Players, or Bats.\n Non-living entities excluding leashes will not persist as leash\n holders.\n@param holder the entity to leash this entity to\n@return whether the operation was successful"
            }
          },
          {
            "kind": "METHOD",
            "name": "setMaximumAir(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "ticks"
              }
            ],
            "comment": {
              "body": "Sets the maximum amount of air the living entity can have, in ticks.",
              "plain": "Sets the maximum amount of air the living entity can have, in ticks.\n@param ticks maximum amount of air"
            }
          },
          {
            "kind": "METHOD",
            "name": "setMaximumNoDamageTicks(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "ticks"
              }
            ],
            "comment": {
              "body": "Sets the living entity\u0027s current maximum no damage ticks.",
              "plain": "Sets the living entity\u0027s current maximum no damage ticks.\n@param ticks maximum amount of no damage ticks"
            }
          },
          {
            "kind": "METHOD",
            "name": "setNoDamageTicks(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "ticks"
              }
            ],
            "comment": {
              "body": "Sets the living entity\u0027s current no damage ticks.",
              "plain": "Sets the living entity\u0027s current no damage ticks.\n@param ticks amount of no damage ticks"
            }
          },
          {
            "kind": "METHOD",
            "name": "setRemainingAir(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "ticks"
              }
            ],
            "comment": {
              "body": "Sets the amount of air that the living entity has remaining, in ticks.",
              "plain": "Sets the amount of air that the living entity has remaining, in ticks.\n@param ticks amount of air remaining"
            }
          },
          {
            "kind": "METHOD",
            "name": "setRemoveWhenFarAway(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "remove"
              }
            ],
            "comment": {
              "body": "Sets whether or not the living entity despawns when away from players\n or not.",
              "plain": "Sets whether or not the living entity despawns when away from players\n or not.\n@param remove the removal status"
            }
          },
          {
            "kind": "METHOD",
            "name": "setShieldBlockingDelay(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "delay"
              }
            ],
            "comment": {
              "body": "Set the delay (in ticks) before blocking is effective for this entity",
              "plain": "Set the delay (in ticks) before blocking is effective for this entity\n@param delay Delay in ticks"
            }
          }
        ],
        "comment": {
          "body": "Represents a living entity, such as a monster or player",
          "plain": "Represents a living entity, such as a monster or player"
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.Llama",
        "children": [
          {
            "kind": "METHOD",
            "name": "getColor()",
            "comment": {
              "body": "Gets the llama\u0027s color.",
              "tags": "Returns a \u003ca href\u003d\"org/bukkit/entity/Llama.Color.html\" title\u003d\"enum in org.bukkit.entity\"\u003e\u003ccode\u003eLlama.Color\u003c/code\u003e\u003c/a\u003e representing the llama\u0027s color.",
              "plain": "Gets the llama\u0027s color.\n@return a {@link Color} representing the llama\u0027s color"
            }
          },
          {
            "kind": "METHOD",
            "name": "getInventory()"
          },
          {
            "kind": "METHOD",
            "name": "getStrength()",
            "comment": {
              "body": "Gets the llama\u0027s strength. A higher strength llama will have more\n inventory slots and be more threatening to entities.",
              "tags": "Returns llama strength [1,5].",
              "plain": "Gets the llama\u0027s strength. A higher strength llama will have more\n inventory slots and be more threatening to entities.\n@return llama strength [1,5]"
            }
          },
          {
            "kind": "ENUM",
            "name": "org.bukkit.entity.Llama.Color",
            "children": [
              {
                "kind": "ENUM_CONSTANT",
                "name": "BROWN",
                "comment": {
                  "body": "A brown llama.",
                  "plain": "A brown llama."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "CREAMY",
                "comment": {
                  "body": "A cream-colored llama.",
                  "plain": "A cream-colored llama."
                }
              },
              {
                "kind": "CONSTRUCTOR",
                "name": "Color()"
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "GRAY",
                "comment": {
                  "body": "A gray llama.",
                  "plain": "A gray llama."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "WHITE",
                "comment": {
                  "body": "A white llama.",
                  "plain": "A white llama."
                }
              },
              {
                "kind": "METHOD",
                "name": "valueOf(java.lang.String)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "name"
                  }
                ]
              },
              {
                "kind": "METHOD",
                "name": "values()"
              }
            ],
            "comment": {
              "body": "Represents the base color that the llama has.",
              "plain": "Represents the base color that the llama has."
            }
          },
          {
            "kind": "METHOD",
            "name": "setColor(org.bukkit.entity.Llama.Color)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "color"
              }
            ],
            "comment": {
              "body": "Sets the llama\u0027s color.",
              "plain": "Sets the llama\u0027s color.\n@param color a {@link Color} for this llama"
            }
          },
          {
            "kind": "METHOD",
            "name": "setStrength(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "strength"
              }
            ],
            "comment": {
              "body": "Sets the llama\u0027s strength. A higher strength llama will have more\n inventory slots and be more threatening to entities. Inventory slots are\n equal to strength * 3.",
              "plain": "Sets the llama\u0027s strength. A higher strength llama will have more\n inventory slots and be more threatening to entities. Inventory slots are\n equal to strength * 3.\n@param strength llama strength [1,5]"
            }
          }
        ],
        "comment": {
          "body": "Represents a Llama.",
          "plain": "Represents a Llama."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.LlamaSpit",
        "comment": {
          "body": "Represents Llama spit.",
          "plain": "Represents Llama spit."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.MagmaCube",
        "comment": {
          "body": "Represents a MagmaCube.",
          "plain": "Represents a MagmaCube."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.Minecart",
        "children": [
          {
            "kind": "METHOD",
            "name": "getDamage()",
            "comment": {
              "body": "Gets a minecart\u0027s damage.",
              "tags": "Returns The damage.",
              "plain": "Gets a minecart\u0027s damage.\n@return The damage"
            }
          },
          {
            "kind": "METHOD",
            "name": "getDerailedVelocityMod()",
            "comment": {
              "body": "Gets the derailed velocity modifier. Used for minecarts that are on the\n ground, but not on rails.\n \u003cp\u003e\n A derailed minecart\u0027s velocity is multiplied by this factor each tick.",
              "tags": "Returns derailed visible speed.",
              "plain": "Gets the derailed velocity modifier. Used for minecarts that are on the\n ground, but not on rails.\n \u003cp\u003e\n A derailed minecart\u0027s velocity is multiplied by this factor each tick.\n@return derailed visible speed"
            }
          },
          {
            "kind": "METHOD",
            "name": "getDisplayBlock()",
            "comment": {
              "body": "Gets the display block for this minecart.\n This function will return the type AIR if none is set.",
              "tags": "Returns the block displayed by this minecart..",
              "plain": "Gets the display block for this minecart.\n This function will return the type AIR if none is set.\n@return the block displayed by this minecart."
            }
          },
          {
            "kind": "METHOD",
            "name": "getDisplayBlockOffset()",
            "comment": {
              "body": "Gets the offset of the display block.",
              "tags": "Returns the current block offset for this minecart..",
              "plain": "Gets the offset of the display block.\n@return the current block offset for this minecart."
            }
          },
          {
            "kind": "METHOD",
            "name": "getFlyingVelocityMod()",
            "comment": {
              "body": "Gets the flying velocity modifier. Used for minecarts that are in\n mid-air. A flying minecart\u0027s velocity is multiplied by this factor each\n tick.",
              "tags": "Returns The vector factor.",
              "plain": "Gets the flying velocity modifier. Used for minecarts that are in\n mid-air. A flying minecart\u0027s velocity is multiplied by this factor each\n tick.\n@return The vector factor"
            }
          },
          {
            "kind": "METHOD",
            "name": "getMaxSpeed()",
            "comment": {
              "body": "Gets the maximum speed of a minecart. The speed is unrelated to the\n velocity.",
              "tags": "Returns The max speed.",
              "plain": "Gets the maximum speed of a minecart. The speed is unrelated to the\n velocity.\n@return The max speed"
            }
          },
          {
            "kind": "METHOD",
            "name": "isSlowWhenEmpty()",
            "comment": {
              "body": "Returns whether this minecart will slow down faster without a passenger\n occupying it",
              "tags": "Returns Whether it decelerates faster.",
              "plain": "Returns whether this minecart will slow down faster without a passenger\n occupying it\n@return Whether it decelerates faster"
            }
          },
          {
            "kind": "METHOD",
            "name": "setDamage(double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "damage"
              }
            ],
            "comment": {
              "body": "Sets a minecart\u0027s damage.",
              "plain": "Sets a minecart\u0027s damage.\n@param damage over 40 to \"kill\" a minecart"
            }
          },
          {
            "kind": "METHOD",
            "name": "setDerailedVelocityMod(org.bukkit.util.Vector)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "derailed"
              }
            ],
            "comment": {
              "body": "Sets the derailed velocity modifier. Used for minecarts that are on the\n ground, but not on rails. A derailed minecart\u0027s velocity is multiplied\n by this factor each tick.",
              "plain": "Sets the derailed velocity modifier. Used for minecarts that are on the\n ground, but not on rails. A derailed minecart\u0027s velocity is multiplied\n by this factor each tick.\n@param derailed visible speed"
            }
          },
          {
            "kind": "METHOD",
            "name": "setDisplayBlock(org.bukkit.material.MaterialData)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "material"
              }
            ],
            "comment": {
              "body": "Sets the display block for this minecart.\n Passing a null value will set the minecart to have no display block.",
              "plain": "Sets the display block for this minecart.\n Passing a null value will set the minecart to have no display block.\n@param material the material to set as display block."
            }
          },
          {
            "kind": "METHOD",
            "name": "setDisplayBlockOffset(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "offset"
              }
            ],
            "comment": {
              "body": "Sets the offset of the display block.",
              "plain": "Sets the offset of the display block.\n@param offset the block offset to set for this minecart."
            }
          },
          {
            "kind": "METHOD",
            "name": "setFlyingVelocityMod(org.bukkit.util.Vector)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "flying"
              }
            ],
            "comment": {
              "body": "Sets the flying velocity modifier. Used for minecarts that are in\n mid-air. A flying minecart\u0027s velocity is multiplied by this factor each\n tick.",
              "plain": "Sets the flying velocity modifier. Used for minecarts that are in\n mid-air. A flying minecart\u0027s velocity is multiplied by this factor each\n tick.\n@param flying velocity modifier vector"
            }
          },
          {
            "kind": "METHOD",
            "name": "setMaxSpeed(double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "speed"
              }
            ],
            "comment": {
              "body": "Sets the maximum speed of a minecart. Must be nonnegative. Default is\n 0.4D.",
              "plain": "Sets the maximum speed of a minecart. Must be nonnegative. Default is\n 0.4D.\n@param speed The max speed"
            }
          },
          {
            "kind": "METHOD",
            "name": "setSlowWhenEmpty(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "slow"
              }
            ],
            "comment": {
              "body": "Sets whether this minecart will slow down faster without a passenger\n occupying it",
              "plain": "Sets whether this minecart will slow down faster without a passenger\n occupying it\n@param slow Whether it will decelerate faster"
            }
          }
        ],
        "comment": {
          "body": "Represents a minecart entity.",
          "plain": "Represents a minecart entity."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.Monster",
        "comment": {
          "body": "Represents a Monster.",
          "plain": "Represents a Monster."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.Mule",
        "comment": {
          "body": "Represents a Mule - variant of \u003ca href\u003d\"org/bukkit/entity/ChestedHorse.html\" title\u003d\"interface in org.bukkit.entity\"\u003e\u003ccode\u003eChestedHorse\u003c/code\u003e\u003c/a\u003e.",
          "plain": "Represents a Mule - variant of {@link ChestedHorse}."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.MushroomCow",
        "comment": {
          "body": "Represents a mushroom \u003ca href\u003d\"org/bukkit/entity/Cow.html\" title\u003d\"interface in org.bukkit.entity\"\u003e\u003ccode\u003eCow\u003c/code\u003e\u003c/a\u003e",
          "plain": "Represents a mushroom {@link Cow}"
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.NPC",
        "comment": {
          "body": "Represents a non-player character",
          "plain": "Represents a non-player character"
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.Ocelot",
        "children": [
          {
            "kind": "METHOD",
            "name": "getCatType()",
            "comment": {
              "body": "Gets the current type of this cat.",
              "tags": "Returns Type of the cat..",
              "plain": "Gets the current type of this cat.\n@return Type of the cat."
            }
          },
          {
            "kind": "ENUM",
            "name": "org.bukkit.entity.Ocelot.Type",
            "children": [
              {
                "kind": "ENUM_CONSTANT",
                "name": "BLACK_CAT"
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "RED_CAT"
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "SIAMESE_CAT"
              },
              {
                "kind": "CONSTRUCTOR",
                "name": "Type(int)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "id"
                  }
                ]
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "WILD_OCELOT"
              },
              {
                "kind": "METHOD",
                "name": "getId()",
                "deprecated": {
                  "deprecated": "true"
                },
                "comment": {
                  "body": "Gets the ID of this cat type.",
                  "tags": "Returns Type ID..",
                  "plain": "Gets the ID of this cat type.\n@return Type ID.\n@deprecated Magic value"
                }
              },
              {
                "kind": "METHOD",
                "name": "getType(int)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "id"
                  }
                ],
                "deprecated": {
                  "deprecated": "true"
                },
                "comment": {
                  "body": "Gets a cat type by its ID.",
                  "tags": "Returns Resulting type, or null if not found..",
                  "plain": "Gets a cat type by its ID.\n@param id ID of the cat type to get.\n@return Resulting type, or null if not found.\n@deprecated Magic value"
                }
              },
              {
                "kind": "FIELD",
                "name": "id"
              },
              {
                "kind": "FIELD",
                "name": "types"
              },
              {
                "kind": "METHOD",
                "name": "valueOf(java.lang.String)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "name"
                  }
                ]
              },
              {
                "kind": "METHOD",
                "name": "values()"
              }
            ],
            "comment": {
              "body": "Represents the various different cat types there are.",
              "plain": "Represents the various different cat types there are."
            }
          },
          {
            "kind": "METHOD",
            "name": "setCatType(org.bukkit.entity.Ocelot.Type)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "comment": {
              "body": "Sets the current type of this cat.",
              "plain": "Sets the current type of this cat.\n@param type New type of this cat."
            }
          }
        ],
        "comment": {
          "body": "A wild tameable cat",
          "plain": "A wild tameable cat"
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.Painting",
        "children": [
          {
            "kind": "METHOD",
            "name": "getArt()",
            "comment": {
              "body": "Get the art on this painting",
              "tags": "Returns The art.",
              "plain": "Get the art on this painting\n@return The art"
            }
          },
          {
            "kind": "METHOD",
            "name": "setArt(org.bukkit.Art)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "art"
              }
            ],
            "comment": {
              "body": "Set the art on this painting",
              "tags": "Returns False if the new art won\u0027t fit at the painting\u0027s current\n     location.",
              "plain": "Set the art on this painting\n@param art The new art\n@return False if the new art won\u0027t fit at the painting\u0027s current\n     location"
            }
          },
          {
            "kind": "METHOD",
            "name": "setArt(org.bukkit.Art,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "art"
              },
              {
                "kind": "PARAMETER",
                "name": "force"
              }
            ],
            "comment": {
              "body": "Set the art on this painting",
              "tags": "Returns False if force was false and the new art won\u0027t fit at the\n     painting\u0027s current location.",
              "plain": "Set the art on this painting\n@param art The new art\n@param force If true, force the new art regardless of whether it fits\n     at the current location. Note that forcing it where it can\u0027t fit\n     normally causes it to drop as an item unless you override this by\n     catching the {@link HangingBreakEvent}.\n@return False if force was false and the new art won\u0027t fit at the\n     painting\u0027s current location"
            }
          }
        ],
        "comment": {
          "body": "Represents a Painting.",
          "plain": "Represents a Painting."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.Parrot",
        "children": [
          {
            "kind": "METHOD",
            "name": "getVariant()",
            "comment": {
              "body": "Get the variant of this parrot.",
              "tags": "Returns parrot variant.",
              "plain": "Get the variant of this parrot.\n@return parrot variant"
            }
          },
          {
            "kind": "ENUM",
            "name": "org.bukkit.entity.Parrot.Variant",
            "children": [
              {
                "kind": "ENUM_CONSTANT",
                "name": "BLUE",
                "comment": {
                  "body": "Royal blue colored parrot.",
                  "plain": "Royal blue colored parrot."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "CYAN",
                "comment": {
                  "body": "Cyan colored parrot.",
                  "plain": "Cyan colored parrot."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "GRAY",
                "comment": {
                  "body": "Gray colored parrot.",
                  "plain": "Gray colored parrot."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "GREEN",
                "comment": {
                  "body": "Green colored parrot.",
                  "plain": "Green colored parrot."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "RED",
                "comment": {
                  "body": "Classic parrot - red with colored wingtips.",
                  "plain": "Classic parrot - red with colored wingtips."
                }
              },
              {
                "kind": "CONSTRUCTOR",
                "name": "Variant()"
              },
              {
                "kind": "METHOD",
                "name": "valueOf(java.lang.String)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "name"
                  }
                ]
              },
              {
                "kind": "METHOD",
                "name": "values()"
              }
            ],
            "comment": {
              "body": "Represents the variant of a parrot - ie its color.",
              "plain": "Represents the variant of a parrot - ie its color."
            }
          },
          {
            "kind": "METHOD",
            "name": "setVariant(org.bukkit.entity.Parrot.Variant)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "variant"
              }
            ],
            "comment": {
              "body": "Set the variant of this parrot.",
              "plain": "Set the variant of this parrot.\n@param variant parrot variant"
            }
          }
        ],
        "comment": {
          "body": "Represents a Parrot.",
          "plain": "Represents a Parrot."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.Pig",
        "children": [
          {
            "kind": "METHOD",
            "name": "hasSaddle()",
            "comment": {
              "body": "Check if the pig has a saddle.",
              "tags": "Returns if the pig has been saddled..",
              "plain": "Check if the pig has a saddle.\n@return if the pig has been saddled."
            }
          },
          {
            "kind": "METHOD",
            "name": "setSaddle(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "saddled"
              }
            ],
            "comment": {
              "body": "Sets if the pig has a saddle or not",
              "plain": "Sets if the pig has a saddle or not\n@param saddled set if the pig has a saddle or not."
            }
          }
        ],
        "comment": {
          "body": "Represents a Pig.",
          "plain": "Represents a Pig."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.PigZombie",
        "children": [
          {
            "kind": "METHOD",
            "name": "getAnger()",
            "comment": {
              "body": "Get the pig zombie\u0027s current anger level.",
              "tags": "Returns The anger level..",
              "plain": "Get the pig zombie\u0027s current anger level.\n@return The anger level."
            }
          },
          {
            "kind": "METHOD",
            "name": "isAngry()",
            "comment": {
              "body": "Shorthand; gets whether the zombie is angry.",
              "tags": "Returns True if the zombie is angry, otherwise false..",
              "plain": "Shorthand; gets whether the zombie is angry.\n@return True if the zombie is angry, otherwise false."
            }
          },
          {
            "kind": "METHOD",
            "name": "setAnger(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "level"
              }
            ],
            "comment": {
              "body": "Set the pig zombie\u0027s current anger level.",
              "plain": "Set the pig zombie\u0027s current anger level.\n@param level The anger level. Higher levels of anger take longer to\n     wear off."
            }
          },
          {
            "kind": "METHOD",
            "name": "setAngry(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "angry"
              }
            ],
            "comment": {
              "body": "Shorthand; sets to either 0 or the default level.",
              "plain": "Shorthand; sets to either 0 or the default level.\n@param angry Whether the zombie should be angry."
            }
          }
        ],
        "comment": {
          "body": "Represents a Pig Zombie.",
          "plain": "Represents a Pig Zombie."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.Player",
        "children": [
          {
            "kind": "METHOD",
            "name": "\u003cT\u003eplayEffect(org.bukkit.Location,org.bukkit.Effect,T)",
            "children": [
              {
                "kind": "TYPE_PARAMETER",
                "name": "T"
              },
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "effect"
              },
              {
                "kind": "PARAMETER",
                "name": "loc"
              }
            ],
            "comment": {
              "body": "Plays an effect to just this player.",
              "plain": "Plays an effect to just this player.\n@param \u003cT\u003e the data based based on the type of the effect\n@param loc the location to play the effect at\n@param effect the {@link Effect}\n@param data a data bit needed for some effects"
            }
          },
          {
            "kind": "METHOD",
            "name": "\u003cT\u003espawnParticle(org.bukkit.Particle,double,double,double,int,T)",
            "children": [
              {
                "kind": "TYPE_PARAMETER",
                "name": "T"
              },
              {
                "kind": "PARAMETER",
                "name": "count"
              },
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "particle"
              },
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "y"
              },
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ],
            "comment": {
              "body": "Spawns the particle (the number of times specified by count)\n at the target location.",
              "plain": "Spawns the particle (the number of times specified by count)\n at the target location.\n@param particle the particle to spawn\n@param x the position on the x axis to spawn at\n@param y the position on the y axis to spawn at\n@param z the position on the z axis to spawn at\n@param count the number of particles\n@param data the data to use for the particle or null,\n             the type of this depends on {@link Particle#getDataType()}\n@param \u003cT\u003e Type"
            }
          },
          {
            "kind": "METHOD",
            "name": "\u003cT\u003espawnParticle(org.bukkit.Particle,double,double,double,int,double,double,double,T)",
            "children": [
              {
                "kind": "TYPE_PARAMETER",
                "name": "T"
              },
              {
                "kind": "PARAMETER",
                "name": "count"
              },
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "offsetX"
              },
              {
                "kind": "PARAMETER",
                "name": "offsetY"
              },
              {
                "kind": "PARAMETER",
                "name": "offsetZ"
              },
              {
                "kind": "PARAMETER",
                "name": "particle"
              },
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "y"
              },
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ],
            "comment": {
              "body": "Spawns the particle (the number of times specified by count)\n at the target location. The position of each particle will be\n randomized positively and negatively by the offset parameters\n on each axis.",
              "plain": "Spawns the particle (the number of times specified by count)\n at the target location. The position of each particle will be\n randomized positively and negatively by the offset parameters\n on each axis.\n@param particle the particle to spawn\n@param x the position on the x axis to spawn at\n@param y the position on the y axis to spawn at\n@param z the position on the z axis to spawn at\n@param count the number of particles\n@param offsetX the maximum random offset on the X axis\n@param offsetY the maximum random offset on the Y axis\n@param offsetZ the maximum random offset on the Z axis\n@param data the data to use for the particle or null,\n             the type of this depends on {@link Particle#getDataType()}\n@param \u003cT\u003e Type"
            }
          },
          {
            "kind": "METHOD",
            "name": "\u003cT\u003espawnParticle(org.bukkit.Particle,double,double,double,int,double,double,double,double,T)",
            "children": [
              {
                "kind": "TYPE_PARAMETER",
                "name": "T"
              },
              {
                "kind": "PARAMETER",
                "name": "count"
              },
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "extra"
              },
              {
                "kind": "PARAMETER",
                "name": "offsetX"
              },
              {
                "kind": "PARAMETER",
                "name": "offsetY"
              },
              {
                "kind": "PARAMETER",
                "name": "offsetZ"
              },
              {
                "kind": "PARAMETER",
                "name": "particle"
              },
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "y"
              },
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ],
            "comment": {
              "body": "Spawns the particle (the number of times specified by count)\n at the target location. The position of each particle will be\n randomized positively and negatively by the offset parameters\n on each axis.",
              "plain": "Spawns the particle (the number of times specified by count)\n at the target location. The position of each particle will be\n randomized positively and negatively by the offset parameters\n on each axis.\n@param particle the particle to spawn\n@param x the position on the x axis to spawn at\n@param y the position on the y axis to spawn at\n@param z the position on the z axis to spawn at\n@param count the number of particles\n@param offsetX the maximum random offset on the X axis\n@param offsetY the maximum random offset on the Y axis\n@param offsetZ the maximum random offset on the Z axis\n@param extra the extra data for this particle, depends on the\n              particle used (normally speed)\n@param data the data to use for the particle or null,\n             the type of this depends on {@link Particle#getDataType()}\n@param \u003cT\u003e Type"
            }
          },
          {
            "kind": "METHOD",
            "name": "\u003cT\u003espawnParticle(org.bukkit.Particle,org.bukkit.Location,int,T)",
            "children": [
              {
                "kind": "TYPE_PARAMETER",
                "name": "T"
              },
              {
                "kind": "PARAMETER",
                "name": "count"
              },
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "location"
              },
              {
                "kind": "PARAMETER",
                "name": "particle"
              }
            ],
            "comment": {
              "body": "Spawns the particle (the number of times specified by count)\n at the target location.",
              "plain": "Spawns the particle (the number of times specified by count)\n at the target location.\n@param particle the particle to spawn\n@param location the location to spawn at\n@param count the number of particles\n@param data the data to use for the particle or null,\n             the type of this depends on {@link Particle#getDataType()}\n@param \u003cT\u003e Type"
            }
          },
          {
            "kind": "METHOD",
            "name": "\u003cT\u003espawnParticle(org.bukkit.Particle,org.bukkit.Location,int,double,double,double,T)",
            "children": [
              {
                "kind": "TYPE_PARAMETER",
                "name": "T"
              },
              {
                "kind": "PARAMETER",
                "name": "count"
              },
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "location"
              },
              {
                "kind": "PARAMETER",
                "name": "offsetX"
              },
              {
                "kind": "PARAMETER",
                "name": "offsetY"
              },
              {
                "kind": "PARAMETER",
                "name": "offsetZ"
              },
              {
                "kind": "PARAMETER",
                "name": "particle"
              }
            ],
            "comment": {
              "body": "Spawns the particle (the number of times specified by count)\n at the target location. The position of each particle will be\n randomized positively and negatively by the offset parameters\n on each axis.",
              "plain": "Spawns the particle (the number of times specified by count)\n at the target location. The position of each particle will be\n randomized positively and negatively by the offset parameters\n on each axis.\n@param particle the particle to spawn\n@param location the location to spawn at\n@param count the number of particles\n@param offsetX the maximum random offset on the X axis\n@param offsetY the maximum random offset on the Y axis\n@param offsetZ the maximum random offset on the Z axis\n@param data the data to use for the particle or null,\n             the type of this depends on {@link Particle#getDataType()}\n@param \u003cT\u003e Type"
            }
          },
          {
            "kind": "METHOD",
            "name": "\u003cT\u003espawnParticle(org.bukkit.Particle,org.bukkit.Location,int,double,double,double,double,T)",
            "children": [
              {
                "kind": "TYPE_PARAMETER",
                "name": "T"
              },
              {
                "kind": "PARAMETER",
                "name": "count"
              },
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "extra"
              },
              {
                "kind": "PARAMETER",
                "name": "location"
              },
              {
                "kind": "PARAMETER",
                "name": "offsetX"
              },
              {
                "kind": "PARAMETER",
                "name": "offsetY"
              },
              {
                "kind": "PARAMETER",
                "name": "offsetZ"
              },
              {
                "kind": "PARAMETER",
                "name": "particle"
              }
            ],
            "comment": {
              "body": "Spawns the particle (the number of times specified by count)\n at the target location. The position of each particle will be\n randomized positively and negatively by the offset parameters\n on each axis.",
              "plain": "Spawns the particle (the number of times specified by count)\n at the target location. The position of each particle will be\n randomized positively and negatively by the offset parameters\n on each axis.\n@param particle the particle to spawn\n@param location the location to spawn at\n@param count the number of particles\n@param offsetX the maximum random offset on the X axis\n@param offsetY the maximum random offset on the Y axis\n@param offsetZ the maximum random offset on the Z axis\n@param extra the extra data for this particle, depends on the\n              particle used (normally speed)\n@param data the data to use for the particle or null,\n             the type of this depends on {@link Particle#getDataType()}\n@param \u003cT\u003e Type"
            }
          },
          {
            "kind": "METHOD",
            "name": "applyMending(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "amount"
              }
            ],
            "comment": {
              "body": "Applies the mending effect to any items just as picking up an orb would.\n\n Can also be called with \u003ca href\u003d\"org/bukkit/entity/Player.html#giveExp(int,boolean)\"\u003e\u003ccode\u003ePlayer.giveExp(int, boolean)\u003c/code\u003e\u003c/a\u003e by passing true to applyMending",
              "tags": "Returns the remaining experience.",
              "plain": "Applies the mending effect to any items just as picking up an orb would.\n\n Can also be called with {@link #giveExp(int, boolean)} by passing true to applyMending\n@param amount Exp to apply\n@return the remaining experience"
            }
          },
          {
            "kind": "METHOD",
            "name": "awardAchievement(org.bukkit.Achievement)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "achievement"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Awards the given achievement and any parent achievements that the\n player does not have.",
              "plain": "Awards the given achievement and any parent achievements that the\n player does not have.\n@param achievement Achievement to award\n@throws IllegalArgumentException if achievement is null\n@deprecated future versions of Minecraft do not have achievements"
            }
          },
          {
            "kind": "METHOD",
            "name": "banPlayerFull(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "reason"
              }
            ],
            "comment": {
              "body": "Permanently Bans the Profile and IP address currently used by the player.",
              "tags": "Returns Ban Entry.",
              "plain": "Permanently Bans the Profile and IP address currently used by the player.\n@param reason Reason for ban\n@return Ban Entry"
            }
          },
          {
            "kind": "METHOD",
            "name": "banPlayerFull(java.lang.String,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "reason"
              },
              {
                "kind": "PARAMETER",
                "name": "source"
              }
            ],
            "comment": {
              "body": "Permanently Bans the Profile and IP address currently used by the player.",
              "tags": "Returns Ban Entry.",
              "plain": "Permanently Bans the Profile and IP address currently used by the player.\n@param reason Reason for ban\n@param source Source of ban, or null for default\n@return Ban Entry"
            }
          },
          {
            "kind": "METHOD",
            "name": "banPlayerFull(java.lang.String,java.util.Date)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "expires"
              },
              {
                "kind": "PARAMETER",
                "name": "reason"
              }
            ],
            "comment": {
              "body": "Bans the Profile and IP address currently used by the player.",
              "tags": "Returns Ban Entry.",
              "plain": "Bans the Profile and IP address currently used by the player.\n@param reason Reason for Ban\n@param expires When to expire the ban\n@return Ban Entry"
            }
          },
          {
            "kind": "METHOD",
            "name": "banPlayerFull(java.lang.String,java.util.Date,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "expires"
              },
              {
                "kind": "PARAMETER",
                "name": "reason"
              },
              {
                "kind": "PARAMETER",
                "name": "source"
              }
            ],
            "comment": {
              "body": "Bans the Profile and IP address currently used by the player.",
              "tags": "Returns Ban Entry.",
              "plain": "Bans the Profile and IP address currently used by the player.\n@param reason Reason for Ban\n@param expires When to expire the ban\n@param source Source of the ban, or null for default\n@return Ban Entry"
            }
          },
          {
            "kind": "METHOD",
            "name": "banPlayerIP(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "reason"
              }
            ],
            "comment": {
              "body": "Permanently Bans the IP address currently used by the player.\n Does not ban the Profile, use \u003ca href\u003d\"org/bukkit/entity/Player.html#banPlayerFull(java.lang.String,java.util.Date,java.lang.String)\"\u003e\u003ccode\u003ePlayer.banPlayerFull(String, Date, String)\u003c/code\u003e\u003c/a\u003e",
              "tags": "Returns Ban Entry.",
              "plain": "Permanently Bans the IP address currently used by the player.\n Does not ban the Profile, use {@link #banPlayerFull(String, Date, String)}\n@param reason Reason for ban\n@return Ban Entry"
            }
          },
          {
            "kind": "METHOD",
            "name": "banPlayerIP(java.lang.String,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "kickPlayer"
              },
              {
                "kind": "PARAMETER",
                "name": "reason"
              }
            ],
            "comment": {
              "body": "Permanently Bans the IP address currently used by the player.\n Does not ban the Profile, use \u003ca href\u003d\"org/bukkit/entity/Player.html#banPlayerFull(java.lang.String,java.util.Date,java.lang.String)\"\u003e\u003ccode\u003ePlayer.banPlayerFull(String, Date, String)\u003c/code\u003e\u003c/a\u003e",
              "tags": "Returns Ban Entry.",
              "plain": "Permanently Bans the IP address currently used by the player.\n Does not ban the Profile, use {@link #banPlayerFull(String, Date, String)}\n@param reason Reason for ban\n@param kickPlayer Whether or not to kick the player afterwards\n@return Ban Entry"
            }
          },
          {
            "kind": "METHOD",
            "name": "banPlayerIP(java.lang.String,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "reason"
              },
              {
                "kind": "PARAMETER",
                "name": "source"
              }
            ],
            "comment": {
              "body": "Permanently Bans the IP address currently used by the player.\n Does not ban the Profile, use \u003ca href\u003d\"org/bukkit/entity/Player.html#banPlayerFull(java.lang.String,java.util.Date,java.lang.String)\"\u003e\u003ccode\u003ePlayer.banPlayerFull(String, Date, String)\u003c/code\u003e\u003c/a\u003e",
              "tags": "Returns Ban Entry.",
              "plain": "Permanently Bans the IP address currently used by the player.\n Does not ban the Profile, use {@link #banPlayerFull(String, Date, String)}\n@param reason Reason for ban\n@param source Source of ban, or null for default\n@return Ban Entry"
            }
          },
          {
            "kind": "METHOD",
            "name": "banPlayerIP(java.lang.String,java.lang.String,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "kickPlayer"
              },
              {
                "kind": "PARAMETER",
                "name": "reason"
              },
              {
                "kind": "PARAMETER",
                "name": "source"
              }
            ],
            "comment": {
              "body": "Permanently Bans the IP address currently used by the player.\n Does not ban the Profile, use \u003ca href\u003d\"org/bukkit/entity/Player.html#banPlayerFull(java.lang.String,java.util.Date,java.lang.String)\"\u003e\u003ccode\u003ePlayer.banPlayerFull(String, Date, String)\u003c/code\u003e\u003c/a\u003e",
              "tags": "Returns Ban Entry.",
              "plain": "Permanently Bans the IP address currently used by the player.\n Does not ban the Profile, use {@link #banPlayerFull(String, Date, String)}\n@param reason Reason for ban\n@param source Source of ban, or null for default\n@param kickPlayer Whether or not to kick the player afterwards\n@return Ban Entry"
            }
          },
          {
            "kind": "METHOD",
            "name": "banPlayerIP(java.lang.String,java.util.Date)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "expires"
              },
              {
                "kind": "PARAMETER",
                "name": "reason"
              }
            ],
            "comment": {
              "body": "Bans the IP address currently used by the player.\n Does not ban the Profile, use \u003ca href\u003d\"org/bukkit/entity/Player.html#banPlayerFull(java.lang.String,java.util.Date,java.lang.String)\"\u003e\u003ccode\u003ePlayer.banPlayerFull(String, Date, String)\u003c/code\u003e\u003c/a\u003e",
              "tags": "Returns Ban Entry.",
              "plain": "Bans the IP address currently used by the player.\n Does not ban the Profile, use {@link #banPlayerFull(String, Date, String)}\n@param reason Reason for Ban\n@param expires When to expire the ban\n@return Ban Entry"
            }
          },
          {
            "kind": "METHOD",
            "name": "banPlayerIP(java.lang.String,java.util.Date,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "expires"
              },
              {
                "kind": "PARAMETER",
                "name": "kickPlayer"
              },
              {
                "kind": "PARAMETER",
                "name": "reason"
              }
            ],
            "comment": {
              "body": "Bans the IP address currently used by the player.\n Does not ban the Profile, use \u003ca href\u003d\"org/bukkit/entity/Player.html#banPlayerFull(java.lang.String,java.util.Date,java.lang.String)\"\u003e\u003ccode\u003ePlayer.banPlayerFull(String, Date, String)\u003c/code\u003e\u003c/a\u003e",
              "tags": "Returns Ban Entry.",
              "plain": "Bans the IP address currently used by the player.\n Does not ban the Profile, use {@link #banPlayerFull(String, Date, String)}\n@param reason Reason for Ban\n@param expires When to expire the ban\n@param kickPlayer Whether or not to kick the player afterwards\n@return Ban Entry"
            }
          },
          {
            "kind": "METHOD",
            "name": "banPlayerIP(java.lang.String,java.util.Date,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "expires"
              },
              {
                "kind": "PARAMETER",
                "name": "reason"
              },
              {
                "kind": "PARAMETER",
                "name": "source"
              }
            ],
            "comment": {
              "body": "Bans the IP address currently used by the player.\n Does not ban the Profile, use \u003ca href\u003d\"org/bukkit/entity/Player.html#banPlayerFull(java.lang.String,java.util.Date,java.lang.String)\"\u003e\u003ccode\u003ePlayer.banPlayerFull(String, Date, String)\u003c/code\u003e\u003c/a\u003e",
              "tags": "Returns Ban Entry.",
              "plain": "Bans the IP address currently used by the player.\n Does not ban the Profile, use {@link #banPlayerFull(String, Date, String)}\n@param reason Reason for Ban\n@param expires When to expire the ban\n@param source Source of the banm or null for default\n@return Ban Entry"
            }
          },
          {
            "kind": "METHOD",
            "name": "banPlayerIP(java.lang.String,java.util.Date,java.lang.String,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "expires"
              },
              {
                "kind": "PARAMETER",
                "name": "kickPlayer"
              },
              {
                "kind": "PARAMETER",
                "name": "reason"
              },
              {
                "kind": "PARAMETER",
                "name": "source"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "canSee(org.bukkit.entity.Player)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "player"
              }
            ],
            "comment": {
              "body": "Checks to see if a player has been hidden from this player",
              "tags": "Returns True if the provided player is not being hidden from this\n     player.",
              "plain": "Checks to see if a player has been hidden from this player\n@param player Player to check\n@return True if the provided player is not being hidden from this\n     player"
            }
          },
          {
            "kind": "METHOD",
            "name": "chat(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "msg"
              }
            ],
            "comment": {
              "body": "Says a message (or runs a command).",
              "plain": "Says a message (or runs a command).\n@param msg message to print"
            }
          },
          {
            "kind": "METHOD",
            "name": "decrementStatistic(org.bukkit.Statistic)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "statistic"
              }
            ],
            "comment": {
              "body": "Decrements the given statistic for this player.\n \u003cp\u003e\n This is equivalent to the following code:\n \u003ccode\u003edecrementStatistic(Statistic, 1)\u003c/code\u003e",
              "plain": "Decrements the given statistic for this player.\n \u003cp\u003e\n This is equivalent to the following code:\n \u003ccode\u003edecrementStatistic(Statistic, 1)\u003c/code\u003e\n@param statistic Statistic to decrement\n@throws IllegalArgumentException if statistic is null\n@throws IllegalArgumentException if the statistic requires an\n     additional parameter"
            }
          },
          {
            "kind": "METHOD",
            "name": "decrementStatistic(org.bukkit.Statistic,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "amount"
              },
              {
                "kind": "PARAMETER",
                "name": "statistic"
              }
            ],
            "comment": {
              "body": "Decrements the given statistic for this player.",
              "plain": "Decrements the given statistic for this player.\n@param statistic Statistic to decrement\n@param amount Amount to decrement this statistic by\n@throws IllegalArgumentException if statistic is null\n@throws IllegalArgumentException if amount is negative\n@throws IllegalArgumentException if the statistic requires an\n     additional parameter"
            }
          },
          {
            "kind": "METHOD",
            "name": "decrementStatistic(org.bukkit.Statistic,org.bukkit.Material)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "material"
              },
              {
                "kind": "PARAMETER",
                "name": "statistic"
              }
            ],
            "comment": {
              "body": "Decrements the given statistic for this player for the given material.\n \u003cp\u003e\n This is equivalent to the following code:\n \u003ccode\u003edecrementStatistic(Statistic, Material, 1)\u003c/code\u003e",
              "plain": "Decrements the given statistic for this player for the given material.\n \u003cp\u003e\n This is equivalent to the following code:\n \u003ccode\u003edecrementStatistic(Statistic, Material, 1)\u003c/code\u003e\n@param statistic Statistic to decrement\n@param material Material to offset the statistic with\n@throws IllegalArgumentException if statistic is null\n@throws IllegalArgumentException if material is null\n@throws IllegalArgumentException if the given parameter is not valid\n     for the statistic"
            }
          },
          {
            "kind": "METHOD",
            "name": "decrementStatistic(org.bukkit.Statistic,org.bukkit.Material,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "amount"
              },
              {
                "kind": "PARAMETER",
                "name": "material"
              },
              {
                "kind": "PARAMETER",
                "name": "statistic"
              }
            ],
            "comment": {
              "body": "Decrements the given statistic for this player for the given material.",
              "plain": "Decrements the given statistic for this player for the given material.\n@param statistic Statistic to decrement\n@param material Material to offset the statistic with\n@param amount Amount to decrement this statistic by\n@throws IllegalArgumentException if statistic is null\n@throws IllegalArgumentException if material is null\n@throws IllegalArgumentException if amount is negative\n@throws IllegalArgumentException if the given parameter is not valid\n     for the statistic"
            }
          },
          {
            "kind": "METHOD",
            "name": "decrementStatistic(org.bukkit.Statistic,org.bukkit.entity.EntityType)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "entityType"
              },
              {
                "kind": "PARAMETER",
                "name": "statistic"
              }
            ],
            "comment": {
              "body": "Decrements the given statistic for this player for the given entity.\n \u003cp\u003e\n This is equivalent to the following code:\n \u003ccode\u003edecrementStatistic(Statistic, EntityType, 1)\u003c/code\u003e",
              "plain": "Decrements the given statistic for this player for the given entity.\n \u003cp\u003e\n This is equivalent to the following code:\n \u003ccode\u003edecrementStatistic(Statistic, EntityType, 1)\u003c/code\u003e\n@param statistic Statistic to decrement\n@param entityType EntityType to offset the statistic with\n@throws IllegalArgumentException if statistic is null\n@throws IllegalArgumentException if entityType is null\n@throws IllegalArgumentException if the given parameter is not valid\n     for the statistic"
            }
          },
          {
            "kind": "METHOD",
            "name": "decrementStatistic(org.bukkit.Statistic,org.bukkit.entity.EntityType,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "amount"
              },
              {
                "kind": "PARAMETER",
                "name": "entityType"
              },
              {
                "kind": "PARAMETER",
                "name": "statistic"
              }
            ],
            "comment": {
              "body": "Decrements the given statistic for this player for the given entity.",
              "plain": "Decrements the given statistic for this player for the given entity.\n@param statistic Statistic to decrement\n@param entityType EntityType to offset the statistic with\n@param amount Amount to decrement this statistic by\n@throws IllegalArgumentException if statistic is null\n@throws IllegalArgumentException if entityType is null\n@throws IllegalArgumentException if amount is negative\n@throws IllegalArgumentException if the given parameter is not valid\n     for the statistic"
            }
          },
          {
            "kind": "METHOD",
            "name": "getAddress()",
            "comment": {
              "body": "Gets the socket address of this player",
              "tags": "Returns the player\u0027s address.",
              "plain": "Gets the socket address of this player\n@return the player\u0027s address"
            }
          },
          {
            "kind": "METHOD",
            "name": "getAdvancementProgress(org.bukkit.advancement.Advancement)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "advancement"
              }
            ],
            "comment": {
              "body": "Return the player\u0027s progression on the specified advancement.",
              "tags": "Returns object detailing the player\u0027s progress.",
              "plain": "Return the player\u0027s progression on the specified advancement.\n@param advancement advancement\n@return object detailing the player\u0027s progress"
            }
          },
          {
            "kind": "METHOD",
            "name": "getAffectsSpawning()",
            "comment": {
              "body": "Get whether the player can affect mob spawning",
              "tags": "Returns if the player can affect mob spawning.",
              "plain": "Get whether the player can affect mob spawning\n@return if the player can affect mob spawning"
            }
          },
          {
            "kind": "METHOD",
            "name": "getAllowFlight()",
            "comment": {
              "body": "Determines if the Player is allowed to fly via jump key double-tap like\n in creative mode.",
              "tags": "Returns True if the player is allowed to fly..",
              "plain": "Determines if the Player is allowed to fly via jump key double-tap like\n in creative mode.\n@return True if the player is allowed to fly."
            }
          },
          {
            "kind": "METHOD",
            "name": "getBedSpawnLocation()",
            "comment": {
              "body": "Gets the Location where the player will spawn at their bed, null if\n they have not slept in one or their current bed spawn is invalid.",
              "tags": "Returns Bed Spawn Location if bed exists, otherwise null..",
              "plain": "Gets the Location where the player will spawn at their bed, null if\n they have not slept in one or their current bed spawn is invalid.\n@return Bed Spawn Location if bed exists, otherwise null."
            }
          },
          {
            "kind": "METHOD",
            "name": "getCompassTarget()",
            "comment": {
              "body": "Get the previously set compass target.",
              "tags": "Returns location of the target.",
              "plain": "Get the previously set compass target.\n@return location of the target"
            }
          },
          {
            "kind": "METHOD",
            "name": "getDisplayName()",
            "comment": {
              "body": "Gets the \"friendly\" name to display of this player. This may include\n color.\n \u003cp\u003e\n Note that this name will not be displayed in game, only in chat and\n places defined by plugins.",
              "tags": "Returns the friendly name.",
              "plain": "Gets the \"friendly\" name to display of this player. This may include\n color.\n \u003cp\u003e\n Note that this name will not be displayed in game, only in chat and\n places defined by plugins.\n@return the friendly name"
            }
          },
          {
            "kind": "METHOD",
            "name": "getExhaustion()",
            "comment": {
              "body": "Gets the players current exhaustion level.\n \u003cp\u003e\n Exhaustion controls how fast the food level drops. While you have a\n certain amount of exhaustion, your saturation will drop to zero, and\n then your food will drop to zero.",
              "tags": "Returns Exhaustion level.",
              "plain": "Gets the players current exhaustion level.\n \u003cp\u003e\n Exhaustion controls how fast the food level drops. While you have a\n certain amount of exhaustion, your saturation will drop to zero, and\n then your food will drop to zero.\n@return Exhaustion level"
            }
          },
          {
            "kind": "METHOD",
            "name": "getExp()",
            "comment": {
              "body": "Gets the players current experience points towards the next level.\n \u003cp\u003e\n This is a percentage value. 0 is \"no progress\" and 1 is \"next level\".",
              "tags": "Returns Current experience points.",
              "plain": "Gets the players current experience points towards the next level.\n \u003cp\u003e\n This is a percentage value. 0 is \"no progress\" and 1 is \"next level\".\n@return Current experience points"
            }
          },
          {
            "kind": "METHOD",
            "name": "getFlySpeed()",
            "comment": {
              "body": "Gets the current allowed speed that a client can fly.",
              "tags": "Returns The current allowed speed, from -1 to 1.",
              "plain": "Gets the current allowed speed that a client can fly.\n@return The current allowed speed, from -1 to 1"
            }
          },
          {
            "kind": "METHOD",
            "name": "getFoodLevel()",
            "comment": {
              "body": "Gets the players current food level",
              "tags": "Returns Food level.",
              "plain": "Gets the players current food level\n@return Food level"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHealthScale()",
            "comment": {
              "body": "Gets the number that health is scaled to for the client.",
              "tags": "Returns the number that health would be scaled to for the client if\n     HealthScaling is set to true.",
              "plain": "Gets the number that health is scaled to for the client.\n@return the number that health would be scaled to for the client if\n     HealthScaling is set to true\n@see Player#setHealthScale(double)\n@see Player#setHealthScaled(boolean)"
            }
          },
          {
            "kind": "METHOD",
            "name": "getLevel()",
            "comment": {
              "body": "Gets the players current experience level",
              "tags": "Returns Current experience level.",
              "plain": "Gets the players current experience level\n@return Current experience level"
            }
          },
          {
            "kind": "METHOD",
            "name": "getLocale()",
            "comment": {
              "body": "Gets the player\u0027s current locale.\n\n The value of the locale String is not defined properly.\n \u003cbr\u003e\n The vanilla Minecraft client will use lowercase language / country pairs\n separated by an underscore, but custom resource packs may use any format\n they wish.",
              "tags": "Returns the player\u0027s locale.",
              "plain": "Gets the player\u0027s current locale.\n\n The value of the locale String is not defined properly.\n \u003cbr\u003e\n The vanilla Minecraft client will use lowercase language / country pairs\n separated by an underscore, but custom resource packs may use any format\n they wish.\n@return the player\u0027s locale"
            }
          },
          {
            "kind": "METHOD",
            "name": "getPlayerListName()",
            "comment": {
              "body": "Gets the name that is shown on the player list.",
              "tags": "Returns the player list name.",
              "plain": "Gets the name that is shown on the player list.\n@return the player list name"
            }
          },
          {
            "kind": "METHOD",
            "name": "getPlayerProfile()",
            "comment": {
              "body": "Gets a copy of this players profile",
              "tags": "Returns The players profile object.",
              "plain": "Gets a copy of this players profile\n@return The players profile object"
            }
          },
          {
            "kind": "METHOD",
            "name": "getPlayerTime()",
            "comment": {
              "body": "Returns the player\u0027s current timestamp.",
              "tags": "Returns The player\u0027s time.",
              "plain": "Returns the player\u0027s current timestamp.\n@return The player\u0027s time"
            }
          },
          {
            "kind": "METHOD",
            "name": "getPlayerTimeOffset()",
            "comment": {
              "body": "Returns the player\u0027s current time offset relative to server time, or\n the current player\u0027s fixed time if the player\u0027s time is absolute.",
              "tags": "Returns The player\u0027s time.",
              "plain": "Returns the player\u0027s current time offset relative to server time, or\n the current player\u0027s fixed time if the player\u0027s time is absolute.\n@return The player\u0027s time"
            }
          },
          {
            "kind": "METHOD",
            "name": "getPlayerWeather()",
            "comment": {
              "body": "Returns the type of weather the player is currently experiencing.",
              "tags": "Returns The WeatherType that the player is currently experiencing or\n     null if player is seeing server weather..",
              "plain": "Returns the type of weather the player is currently experiencing.\n@return The WeatherType that the player is currently experiencing or\n     null if player is seeing server weather."
            }
          },
          {
            "kind": "METHOD",
            "name": "getResourcePackHash()",
            "comment": {
              "tags": "Returns the most recent resource pack hash received from the player,\n         or null if no hash has ever been received from this player..",
              "plain": "@return the most recent resource pack hash received from the player,\n         or null if no hash has ever been received from this player."
            }
          },
          {
            "kind": "METHOD",
            "name": "getResourcePackStatus()",
            "comment": {
              "tags": "Returns the most recent resource pack status received from the player,\n         or null if no status has ever been received from this player..",
              "plain": "@return the most recent resource pack status received from the player,\n         or null if no status has ever been received from this player."
            }
          },
          {
            "kind": "METHOD",
            "name": "getSaturation()",
            "comment": {
              "body": "Gets the players current saturation level.\n \u003cp\u003e\n Saturation is a buffer for food level. Your food level will not drop if\n you are saturated \u0026gt; 0.",
              "tags": "Returns Saturation level.",
              "plain": "Gets the players current saturation level.\n \u003cp\u003e\n Saturation is a buffer for food level. Your food level will not drop if\n you are saturated {@literal \u003e} 0.\n@return Saturation level"
            }
          },
          {
            "kind": "METHOD",
            "name": "getScoreboard()",
            "comment": {
              "body": "Gets the Scoreboard displayed to this player",
              "tags": "Returns The current scoreboard seen by this player.",
              "plain": "Gets the Scoreboard displayed to this player\n@return The current scoreboard seen by this player"
            }
          },
          {
            "kind": "METHOD",
            "name": "getSpectatorTarget()",
            "comment": {
              "body": "Gets the entity which is followed by the camera when in\n \u003ca href\u003d\"org/bukkit/GameMode.html#SPECTATOR\"\u003e\u003ccode\u003eGameMode.SPECTATOR\u003c/code\u003e\u003c/a\u003e.",
              "tags": "Returns the followed entity, or null if not in spectator mode or not\n following a specific entity..",
              "plain": "Gets the entity which is followed by the camera when in\n {@link GameMode#SPECTATOR}.\n@return the followed entity, or null if not in spectator mode or not\n following a specific entity."
            }
          },
          {
            "kind": "METHOD",
            "name": "getStatistic(org.bukkit.Statistic)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "statistic"
              }
            ],
            "comment": {
              "body": "Gets the value of the given statistic for this player.",
              "tags": "Returns the value of the given statistic.",
              "plain": "Gets the value of the given statistic for this player.\n@param statistic Statistic to check\n@return the value of the given statistic\n@throws IllegalArgumentException if statistic is null\n@throws IllegalArgumentException if the statistic requires an\n     additional parameter"
            }
          },
          {
            "kind": "METHOD",
            "name": "getStatistic(org.bukkit.Statistic,org.bukkit.Material)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "material"
              },
              {
                "kind": "PARAMETER",
                "name": "statistic"
              }
            ],
            "comment": {
              "body": "Gets the value of the given statistic for this player.",
              "tags": "Returns the value of the given statistic.",
              "plain": "Gets the value of the given statistic for this player.\n@param statistic Statistic to check\n@param material Material offset of the statistic\n@return the value of the given statistic\n@throws IllegalArgumentException if statistic is null\n@throws IllegalArgumentException if material is null\n@throws IllegalArgumentException if the given parameter is not valid\n     for the statistic"
            }
          },
          {
            "kind": "METHOD",
            "name": "getStatistic(org.bukkit.Statistic,org.bukkit.entity.EntityType)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "entityType"
              },
              {
                "kind": "PARAMETER",
                "name": "statistic"
              }
            ],
            "comment": {
              "body": "Gets the value of the given statistic for this player.",
              "tags": "Returns the value of the given statistic.",
              "plain": "Gets the value of the given statistic for this player.\n@param statistic Statistic to check\n@param entityType EntityType offset of the statistic\n@return the value of the given statistic\n@throws IllegalArgumentException if statistic is null\n@throws IllegalArgumentException if entityType is null\n@throws IllegalArgumentException if the given parameter is not valid\n     for the statistic"
            }
          },
          {
            "kind": "METHOD",
            "name": "getTotalExperience()",
            "comment": {
              "body": "Gets the players total experience points.\n \u003cbr\u003e\n This refers to the total amount of experience the player has collected\n over time and is only displayed as the player\u0027s \"score\" upon dying.",
              "tags": "Returns Current total experience points.",
              "plain": "Gets the players total experience points.\n \u003cbr\u003e\n This refers to the total amount of experience the player has collected\n over time and is only displayed as the player\u0027s \"score\" upon dying.\n@return Current total experience points"
            }
          },
          {
            "kind": "METHOD",
            "name": "getViewDistance()",
            "comment": {
              "body": "Gets the view distance for this player",
              "tags": "Returns the player\u0027s view distance.",
              "plain": "Gets the view distance for this player\n@return the player\u0027s view distance"
            }
          },
          {
            "kind": "METHOD",
            "name": "getWalkSpeed()",
            "comment": {
              "body": "Gets the current allowed speed that a client can walk.",
              "tags": "Returns The current allowed speed, from -1 to 1.",
              "plain": "Gets the current allowed speed that a client can walk.\n@return The current allowed speed, from -1 to 1"
            }
          },
          {
            "kind": "METHOD",
            "name": "giveExp(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "amount"
              }
            ],
            "comment": {
              "body": "Gives the player the amount of experience specified.",
              "plain": "Gives the player the amount of experience specified.\n@param amount Exp amount to give"
            }
          },
          {
            "kind": "METHOD",
            "name": "giveExp(int,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "amount"
              },
              {
                "kind": "PARAMETER",
                "name": "applyMending"
              }
            ],
            "comment": {
              "body": "Gives the player the amount of experience specified.",
              "plain": "Gives the player the amount of experience specified.\n@param amount Exp amount to give\n@param applyMending Mend players items with mending, with same behavior as picking up orbs. calls {@link #applyMending(int)}"
            }
          },
          {
            "kind": "METHOD",
            "name": "giveExpLevels(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "amount"
              }
            ],
            "comment": {
              "body": "Gives the player the amount of experience levels specified. Levels can\n be taken by specifying a negative amount.",
              "plain": "Gives the player the amount of experience levels specified. Levels can\n be taken by specifying a negative amount.\n@param amount amount of experience levels to give or take"
            }
          },
          {
            "kind": "METHOD",
            "name": "hasAchievement(org.bukkit.Achievement)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "achievement"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Gets whether this player has the given achievement.",
              "tags": "Returns whether the player has the achievement.",
              "plain": "Gets whether this player has the given achievement.\n@param achievement the achievement to check\n@return whether the player has the achievement\n@throws IllegalArgumentException if achievement is null\n@deprecated future versions of Minecraft do not have achievements"
            }
          },
          {
            "kind": "METHOD",
            "name": "hasResourcePack()",
            "comment": {
              "tags": "Returns true if the last resource pack status received from this player\n         was \u003ca href\u003d\"org/bukkit/event/player/PlayerResourcePackStatusEvent.Status.html#SUCCESSFULLY_LOADED\"\u003e\u003ccode\u003ePlayerResourcePackStatusEvent.Status.SUCCESSFULLY_LOADED\u003c/code\u003e\u003c/a\u003e.",
              "plain": "@return true if the last resource pack status received from this player\n         was {@link org.bukkit.event.player.PlayerResourcePackStatusEvent.Status#SUCCESSFULLY_LOADED}"
            }
          },
          {
            "kind": "METHOD",
            "name": "hidePlayer(org.bukkit.entity.Player)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "player"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Hides a player from this player",
              "plain": "Hides a player from this player\n@param player Player to hide\n@deprecated see {@link #hidePlayer(Plugin, Player)}"
            }
          },
          {
            "kind": "METHOD",
            "name": "hidePlayer(org.bukkit.plugin.Plugin,org.bukkit.entity.Player)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "player"
              },
              {
                "kind": "PARAMETER",
                "name": "plugin"
              }
            ],
            "comment": {
              "body": "Hides a player from this player",
              "plain": "Hides a player from this player\n@param plugin Plugin that wants to hide the player\n@param player Player to hide"
            }
          },
          {
            "kind": "METHOD",
            "name": "hideTitle()",
            "comment": {
              "body": "Hide any title that is currently visible to the player",
              "plain": "Hide any title that is currently visible to the player"
            }
          },
          {
            "kind": "METHOD",
            "name": "incrementStatistic(org.bukkit.Statistic)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "statistic"
              }
            ],
            "comment": {
              "body": "Increments the given statistic for this player.\n \u003cp\u003e\n This is equivalent to the following code:\n \u003ccode\u003eincrementStatistic(Statistic, 1)\u003c/code\u003e",
              "plain": "Increments the given statistic for this player.\n \u003cp\u003e\n This is equivalent to the following code:\n \u003ccode\u003eincrementStatistic(Statistic, 1)\u003c/code\u003e\n@param statistic Statistic to increment\n@throws IllegalArgumentException if statistic is null\n@throws IllegalArgumentException if the statistic requires an\n     additional parameter"
            }
          },
          {
            "kind": "METHOD",
            "name": "incrementStatistic(org.bukkit.Statistic,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "amount"
              },
              {
                "kind": "PARAMETER",
                "name": "statistic"
              }
            ],
            "comment": {
              "body": "Increments the given statistic for this player.",
              "plain": "Increments the given statistic for this player.\n@param statistic Statistic to increment\n@param amount Amount to increment this statistic by\n@throws IllegalArgumentException if statistic is null\n@throws IllegalArgumentException if amount is negative\n@throws IllegalArgumentException if the statistic requires an\n     additional parameter"
            }
          },
          {
            "kind": "METHOD",
            "name": "incrementStatistic(org.bukkit.Statistic,org.bukkit.Material)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "material"
              },
              {
                "kind": "PARAMETER",
                "name": "statistic"
              }
            ],
            "comment": {
              "body": "Increments the given statistic for this player for the given material.\n \u003cp\u003e\n This is equivalent to the following code:\n \u003ccode\u003eincrementStatistic(Statistic, Material, 1)\u003c/code\u003e",
              "plain": "Increments the given statistic for this player for the given material.\n \u003cp\u003e\n This is equivalent to the following code:\n \u003ccode\u003eincrementStatistic(Statistic, Material, 1)\u003c/code\u003e\n@param statistic Statistic to increment\n@param material Material to offset the statistic with\n@throws IllegalArgumentException if statistic is null\n@throws IllegalArgumentException if material is null\n@throws IllegalArgumentException if the given parameter is not valid\n     for the statistic"
            }
          },
          {
            "kind": "METHOD",
            "name": "incrementStatistic(org.bukkit.Statistic,org.bukkit.Material,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "amount"
              },
              {
                "kind": "PARAMETER",
                "name": "material"
              },
              {
                "kind": "PARAMETER",
                "name": "statistic"
              }
            ],
            "comment": {
              "body": "Increments the given statistic for this player for the given material.",
              "plain": "Increments the given statistic for this player for the given material.\n@param statistic Statistic to increment\n@param material Material to offset the statistic with\n@param amount Amount to increment this statistic by\n@throws IllegalArgumentException if statistic is null\n@throws IllegalArgumentException if material is null\n@throws IllegalArgumentException if amount is negative\n@throws IllegalArgumentException if the given parameter is not valid\n     for the statistic"
            }
          },
          {
            "kind": "METHOD",
            "name": "incrementStatistic(org.bukkit.Statistic,org.bukkit.entity.EntityType)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "entityType"
              },
              {
                "kind": "PARAMETER",
                "name": "statistic"
              }
            ],
            "comment": {
              "body": "Increments the given statistic for this player for the given entity.\n \u003cp\u003e\n This is equivalent to the following code:\n \u003ccode\u003eincrementStatistic(Statistic, EntityType, 1)\u003c/code\u003e",
              "plain": "Increments the given statistic for this player for the given entity.\n \u003cp\u003e\n This is equivalent to the following code:\n \u003ccode\u003eincrementStatistic(Statistic, EntityType, 1)\u003c/code\u003e\n@param statistic Statistic to increment\n@param entityType EntityType to offset the statistic with\n@throws IllegalArgumentException if statistic is null\n@throws IllegalArgumentException if entityType is null\n@throws IllegalArgumentException if the given parameter is not valid\n     for the statistic"
            }
          },
          {
            "kind": "METHOD",
            "name": "incrementStatistic(org.bukkit.Statistic,org.bukkit.entity.EntityType,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "amount"
              },
              {
                "kind": "PARAMETER",
                "name": "entityType"
              },
              {
                "kind": "PARAMETER",
                "name": "statistic"
              }
            ],
            "comment": {
              "body": "Increments the given statistic for this player for the given entity.",
              "plain": "Increments the given statistic for this player for the given entity.\n@param statistic Statistic to increment\n@param entityType EntityType to offset the statistic with\n@param amount Amount to increment this statistic by\n@throws IllegalArgumentException if statistic is null\n@throws IllegalArgumentException if entityType is null\n@throws IllegalArgumentException if amount is negative\n@throws IllegalArgumentException if the given parameter is not valid\n     for the statistic"
            }
          },
          {
            "kind": "METHOD",
            "name": "isFlying()",
            "comment": {
              "body": "Checks to see if this player is currently flying or not.",
              "tags": "Returns True if the player is flying, else false..",
              "plain": "Checks to see if this player is currently flying or not.\n@return True if the player is flying, else false."
            }
          },
          {
            "kind": "METHOD",
            "name": "isHealthScaled()",
            "comment": {
              "body": "Gets if the client is displayed a \u0027scaled\u0027 health, that is, health on a\n scale from 0-\u003ca href\u003d\"org/bukkit/entity/Player.html#getHealthScale()\"\u003e\u003ccode\u003ePlayer.getHealthScale()\u003c/code\u003e\u003c/a\u003e.",
              "tags": "Returns if client health display is scaled.",
              "plain": "Gets if the client is displayed a \u0027scaled\u0027 health, that is, health on a\n scale from 0-{@link #getHealthScale()}.\n@return if client health display is scaled\n@see Player#setHealthScaled(boolean)"
            }
          },
          {
            "kind": "METHOD",
            "name": "isPlayerTimeRelative()",
            "comment": {
              "body": "Returns true if the player\u0027s time is relative to the server time,\n otherwise the player\u0027s time is absolute and will not change its current\n time unless done so with setPlayerTime().",
              "tags": "Returns true if the player\u0027s time is relative to the server time..",
              "plain": "Returns true if the player\u0027s time is relative to the server time,\n otherwise the player\u0027s time is absolute and will not change its current\n time unless done so with setPlayerTime().\n@return true if the player\u0027s time is relative to the server time."
            }
          },
          {
            "kind": "METHOD",
            "name": "isSleepingIgnored()",
            "comment": {
              "body": "Returns whether the player is sleeping ignored.",
              "tags": "Returns Whether player is ignoring sleep..",
              "plain": "Returns whether the player is sleeping ignored.\n@return Whether player is ignoring sleep."
            }
          },
          {
            "kind": "METHOD",
            "name": "isSneaking()",
            "comment": {
              "body": "Returns if the player is in sneak mode",
              "tags": "Returns true if player is in sneak mode.",
              "plain": "Returns if the player is in sneak mode\n@return true if player is in sneak mode"
            }
          },
          {
            "kind": "METHOD",
            "name": "isSprinting()",
            "comment": {
              "body": "Gets whether the player is sprinting or not.",
              "tags": "Returns true if player is sprinting..",
              "plain": "Gets whether the player is sprinting or not.\n@return true if player is sprinting."
            }
          },
          {
            "kind": "METHOD",
            "name": "kickPlayer(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "message"
              }
            ],
            "comment": {
              "body": "Kicks player with custom kick message.",
              "plain": "Kicks player with custom kick message.\n@param message kick message"
            }
          },
          {
            "kind": "METHOD",
            "name": "loadData()",
            "comment": {
              "body": "Loads the players current location, health, inventory, motion, and\n other information from the username.dat file, in the world/player\n folder.\n \u003cp\u003e\n Note: This will overwrite the players current inventory, health,\n motion, etc, with the state from the saved dat file.",
              "plain": "Loads the players current location, health, inventory, motion, and\n other information from the username.dat file, in the world/player\n folder.\n \u003cp\u003e\n Note: This will overwrite the players current inventory, health,\n motion, etc, with the state from the saved dat file."
            }
          },
          {
            "kind": "CLASS",
            "name": "org.bukkit.entity.Player.Spigot",
            "children": [
              {
                "kind": "CONSTRUCTOR",
                "name": "Spigot()"
              },
              {
                "kind": "METHOD",
                "name": "getCollidesWithEntities()",
                "deprecated": {
                  "deprecated": "true"
                },
                "comment": {
                  "body": "Gets whether the player collides with entities",
                  "tags": "Returns the player\u0027s collision toggle state.",
                  "plain": "Gets whether the player collides with entities\n@return the player\u0027s collision toggle state\n@deprecated see {@link LivingEntity#isCollidable()}"
                }
              },
              {
                "kind": "METHOD",
                "name": "getHiddenPlayers()",
                "comment": {
                  "body": "Gets all players hidden with \u003ca href\u003d\"org/bukkit/entity/Player.html#hidePlayer(org.bukkit.entity.Player)\"\u003e\u003ccode\u003ePlayer.hidePlayer(org.bukkit.entity.Player)\u003c/code\u003e\u003c/a\u003e.",
                  "tags": "Returns a Set with all hidden players.",
                  "plain": "Gets all players hidden with {@link #hidePlayer(org.bukkit.entity.Player)}.\n@return a Set with all hidden players"
                }
              },
              {
                "kind": "METHOD",
                "name": "getLocale()",
                "deprecated": {
                  "deprecated": "true"
                },
                "comment": {
                  "body": "Gets player locale language.",
                  "tags": "Returns the player\u0027s client language settings.",
                  "plain": "Gets player locale language.\n@return the player\u0027s client language settings\n@deprecated Use {@link Player#getLocale()}"
                }
              },
              {
                "kind": "METHOD",
                "name": "getPing()"
              },
              {
                "kind": "METHOD",
                "name": "getRawAddress()",
                "comment": {
                  "body": "Gets the connection address of this player, regardless of whether it\n has been spoofed or not.",
                  "tags": "Returns the player\u0027s connection address.",
                  "plain": "Gets the connection address of this player, regardless of whether it\n has been spoofed or not.\n@return the player\u0027s connection address"
                }
              },
              {
                "kind": "METHOD",
                "name": "playEffect(org.bukkit.Location,org.bukkit.Effect,int,int,float,float,float,float,int,int)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "data"
                  },
                  {
                    "kind": "PARAMETER",
                    "name": "effect"
                  },
                  {
                    "kind": "PARAMETER",
                    "name": "id"
                  },
                  {
                    "kind": "PARAMETER",
                    "name": "location"
                  },
                  {
                    "kind": "PARAMETER",
                    "name": "offsetX"
                  },
                  {
                    "kind": "PARAMETER",
                    "name": "offsetY"
                  },
                  {
                    "kind": "PARAMETER",
                    "name": "offsetZ"
                  },
                  {
                    "kind": "PARAMETER",
                    "name": "particleCount"
                  },
                  {
                    "kind": "PARAMETER",
                    "name": "radius"
                  },
                  {
                    "kind": "PARAMETER",
                    "name": "speed"
                  }
                ],
                "deprecated": {
                  "deprecated": "true"
                }
              },
              {
                "kind": "METHOD",
                "name": "respawn()",
                "comment": {
                  "body": "Respawns the player if dead.",
                  "plain": "Respawns the player if dead."
                }
              },
              {
                "kind": "METHOD",
                "name": "sendMessage(net.md_5.bungee.api.ChatMessageType,net.md_5.bungee.api.chat.BaseComponent)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "component"
                  },
                  {
                    "kind": "PARAMETER",
                    "name": "position"
                  }
                ],
                "deprecated": {
                  "deprecated": "true"
                },
                "comment": {
                  "body": "Sends the component to the specified screen position of this player",
                  "plain": "Sends the component to the specified screen position of this player\n@deprecated This is unlikely the API you want to use. See {@link #sendActionBar(String)} for a more proper Action Bar API. This deprecated API may send unsafe items to the client.\n@param position the screen position\n@param component the components to send"
                }
              },
              {
                "kind": "METHOD",
                "name": "sendMessage(net.md_5.bungee.api.ChatMessageType,net.md_5.bungee.api.chat.BaseComponent...)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "components"
                  },
                  {
                    "kind": "PARAMETER",
                    "name": "position"
                  }
                ],
                "deprecated": {
                  "deprecated": "true"
                },
                "comment": {
                  "body": "Sends an array of components as a single message to the specified screen position of this player",
                  "plain": "Sends an array of components as a single message to the specified screen position of this player\n@deprecated This is unlikely the API you want to use. See {@link #sendActionBar(String)} for a more proper Action Bar API. This deprecated API may send unsafe items to the client.\n@param position the screen position\n@param components the components to send"
                }
              },
              {
                "kind": "METHOD",
                "name": "sendMessage(net.md_5.bungee.api.chat.BaseComponent)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "component"
                  }
                ]
              },
              {
                "kind": "METHOD",
                "name": "sendMessage(net.md_5.bungee.api.chat.BaseComponent...)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "components"
                  }
                ]
              },
              {
                "kind": "METHOD",
                "name": "setCollidesWithEntities(boolean)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "collides"
                  }
                ],
                "deprecated": {
                  "deprecated": "true"
                },
                "comment": {
                  "body": "Sets whether the player collides with entities",
                  "plain": "Sets whether the player collides with entities\n@param collides whether the player should collide with entities or\n not.\n@deprecated {@link LivingEntity#setCollidable(boolean)}"
                }
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "performCommand(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "command"
              }
            ],
            "comment": {
              "body": "Makes the player perform the given command",
              "tags": "Returns true if the command was successful, otherwise false.",
              "plain": "Makes the player perform the given command\n@param command Command to perform\n@return true if the command was successful, otherwise false"
            }
          },
          {
            "kind": "METHOD",
            "name": "playEffect(org.bukkit.Location,org.bukkit.Effect,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "effect"
              },
              {
                "kind": "PARAMETER",
                "name": "loc"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Plays an effect to just this player.",
              "plain": "Plays an effect to just this player.\n@param loc the location to play the effect at\n@param effect the {@link Effect}\n@param data a data bit needed for some effects\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "playNote(org.bukkit.Location,byte,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "instrument"
              },
              {
                "kind": "PARAMETER",
                "name": "loc"
              },
              {
                "kind": "PARAMETER",
                "name": "note"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Play a note for a player at a location. This requires a note block\n at the particular location (as far as the client is concerned). This\n will not work without a note block. This will not work with cake.",
              "plain": "Play a note for a player at a location. This requires a note block\n at the particular location (as far as the client is concerned). This\n will not work without a note block. This will not work with cake.\n@param loc The location of a note block.\n@param instrument The instrument ID.\n@param note The note ID.\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "playNote(org.bukkit.Location,org.bukkit.Instrument,org.bukkit.Note)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "instrument"
              },
              {
                "kind": "PARAMETER",
                "name": "loc"
              },
              {
                "kind": "PARAMETER",
                "name": "note"
              }
            ],
            "comment": {
              "body": "Play a note for a player at a location. This requires a note block\n at the particular location (as far as the client is concerned). This\n will not work without a note block. This will not work with cake.",
              "plain": "Play a note for a player at a location. This requires a note block\n at the particular location (as far as the client is concerned). This\n will not work without a note block. This will not work with cake.\n@param loc The location of a note block\n@param instrument The instrument\n@param note The note"
            }
          },
          {
            "kind": "METHOD",
            "name": "playSound(org.bukkit.Location,java.lang.String,float,float)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "location"
              },
              {
                "kind": "PARAMETER",
                "name": "pitch"
              },
              {
                "kind": "PARAMETER",
                "name": "sound"
              },
              {
                "kind": "PARAMETER",
                "name": "volume"
              }
            ],
            "comment": {
              "body": "Play a sound for a player at the location.\n \u003cp\u003e\n This function will fail silently if Location or Sound are null. No\n sound will be heard by the player if their client does not have the\n respective sound for the value passed.",
              "plain": "Play a sound for a player at the location.\n \u003cp\u003e\n This function will fail silently if Location or Sound are null. No\n sound will be heard by the player if their client does not have the\n respective sound for the value passed.\n@param location the location to play the sound\n@param sound the internal sound name to play\n@param volume the volume of the sound\n@param pitch the pitch of the sound"
            }
          },
          {
            "kind": "METHOD",
            "name": "playSound(org.bukkit.Location,java.lang.String,org.bukkit.SoundCategory,float,float)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "category"
              },
              {
                "kind": "PARAMETER",
                "name": "location"
              },
              {
                "kind": "PARAMETER",
                "name": "pitch"
              },
              {
                "kind": "PARAMETER",
                "name": "sound"
              },
              {
                "kind": "PARAMETER",
                "name": "volume"
              }
            ],
            "comment": {
              "body": "Play a sound for a player at the location.\n \u003cp\u003e\n This function will fail silently if Location or Sound are null. No sound\n will be heard by the player if their client does not have the respective\n sound for the value passed.",
              "plain": "Play a sound for a player at the location.\n \u003cp\u003e\n This function will fail silently if Location or Sound are null. No sound\n will be heard by the player if their client does not have the respective\n sound for the value passed.\n@param location the location to play the sound\n@param sound the internal sound name to play\n@param category The category of the sound\n@param volume the volume of the sound\n@param pitch the pitch of the sound"
            }
          },
          {
            "kind": "METHOD",
            "name": "playSound(org.bukkit.Location,org.bukkit.Sound,float,float)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "location"
              },
              {
                "kind": "PARAMETER",
                "name": "pitch"
              },
              {
                "kind": "PARAMETER",
                "name": "sound"
              },
              {
                "kind": "PARAMETER",
                "name": "volume"
              }
            ],
            "comment": {
              "body": "Play a sound for a player at the location.\n \u003cp\u003e\n This function will fail silently if Location or Sound are null.",
              "plain": "Play a sound for a player at the location.\n \u003cp\u003e\n This function will fail silently if Location or Sound are null.\n@param location The location to play the sound\n@param sound The sound to play\n@param volume The volume of the sound\n@param pitch The pitch of the sound"
            }
          },
          {
            "kind": "METHOD",
            "name": "playSound(org.bukkit.Location,org.bukkit.Sound,org.bukkit.SoundCategory,float,float)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "category"
              },
              {
                "kind": "PARAMETER",
                "name": "location"
              },
              {
                "kind": "PARAMETER",
                "name": "pitch"
              },
              {
                "kind": "PARAMETER",
                "name": "sound"
              },
              {
                "kind": "PARAMETER",
                "name": "volume"
              }
            ],
            "comment": {
              "body": "Play a sound for a player at the location.\n \u003cp\u003e\n This function will fail silently if Location or Sound are null.",
              "plain": "Play a sound for a player at the location.\n \u003cp\u003e\n This function will fail silently if Location or Sound are null.\n@param location The location to play the sound\n@param sound The sound to play\n@param category The category of the sound\n@param volume The volume of the sound\n@param pitch The pitch of the sound"
            }
          },
          {
            "kind": "METHOD",
            "name": "removeAchievement(org.bukkit.Achievement)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "achievement"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Removes the given achievement and any children achievements that the\n player has.",
              "plain": "Removes the given achievement and any children achievements that the\n player has.\n@param achievement Achievement to remove\n@throws IllegalArgumentException if achievement is null\n@deprecated future versions of Minecraft do not have achievements"
            }
          },
          {
            "kind": "METHOD",
            "name": "resetPlayerTime()",
            "comment": {
              "body": "Restores the normal condition where the player\u0027s time is synchronized\n with the server time.\n \u003cp\u003e\n Equivalent to calling setPlayerTime(0, true).",
              "plain": "Restores the normal condition where the player\u0027s time is synchronized\n with the server time.\n \u003cp\u003e\n Equivalent to calling setPlayerTime(0, true)."
            }
          },
          {
            "kind": "METHOD",
            "name": "resetPlayerWeather()",
            "comment": {
              "body": "Restores the normal condition where the player\u0027s weather is controlled\n by server conditions.",
              "plain": "Restores the normal condition where the player\u0027s weather is controlled\n by server conditions."
            }
          },
          {
            "kind": "METHOD",
            "name": "resetTitle()",
            "comment": {
              "body": "Resets the title displayed to the player. This will clear the displayed\n title / subtitle and reset timings to their default values.",
              "plain": "Resets the title displayed to the player. This will clear the displayed\n title / subtitle and reset timings to their default values."
            }
          },
          {
            "kind": "METHOD",
            "name": "saveData()",
            "comment": {
              "body": "Saves the players current location, health, inventory, motion, and\n other information into the username.dat file, in the world/player\n folder",
              "plain": "Saves the players current location, health, inventory, motion, and\n other information into the username.dat file, in the world/player\n folder"
            }
          },
          {
            "kind": "METHOD",
            "name": "sendActionBar(char,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "alternateChar"
              },
              {
                "kind": "PARAMETER",
                "name": "message"
              }
            ],
            "comment": {
              "body": "Sends an Action Bar message to the client.\n\n Use supplied alternative character to the section symbol to represent legacy color codes.",
              "plain": "Sends an Action Bar message to the client.\n\n Use supplied alternative character to the section symbol to represent legacy color codes.\n@param alternateChar Alternate symbol such as \u0027\u0026amp;\u0027\n@param message The message to send"
            }
          },
          {
            "kind": "METHOD",
            "name": "sendActionBar(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "message"
              }
            ],
            "comment": {
              "body": "Sends an Action Bar message to the client.\n\n Use Section symbols for legacy color codes to send formatting.",
              "plain": "Sends an Action Bar message to the client.\n\n Use Section symbols for legacy color codes to send formatting.\n@param message The message to send"
            }
          },
          {
            "kind": "METHOD",
            "name": "sendBlockChange(org.bukkit.Location,int,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "loc"
              },
              {
                "kind": "PARAMETER",
                "name": "material"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Send a block change. This fakes a block change packet for a user at a\n certain location. This will not actually change the world in any way.",
              "plain": "Send a block change. This fakes a block change packet for a user at a\n certain location. This will not actually change the world in any way.\n@param loc The location of the changed block\n@param material The new block ID\n@param data The block data\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "sendBlockChange(org.bukkit.Location,org.bukkit.Material,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "loc"
              },
              {
                "kind": "PARAMETER",
                "name": "material"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Send a block change. This fakes a block change packet for a user at a\n certain location. This will not actually change the world in any way.",
              "plain": "Send a block change. This fakes a block change packet for a user at a\n certain location. This will not actually change the world in any way.\n@param loc The location of the changed block\n@param material The new block\n@param data The block data\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "sendChunkChange(org.bukkit.Location,int,int,int,byte[])",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "loc"
              },
              {
                "kind": "PARAMETER",
                "name": "sx"
              },
              {
                "kind": "PARAMETER",
                "name": "sy"
              },
              {
                "kind": "PARAMETER",
                "name": "sz"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Send a chunk change. This fakes a chunk change packet for a user at a\n certain location. The updated cuboid must be entirely within a single\n chunk. This will not actually change the world in any way.\n \u003cp\u003e\n At least one of the dimensions of the cuboid must be even. The size of\n the data buffer must be 2.5*sx*sy*sz and formatted in accordance with\n the Packet51 format.",
              "tags": "Returns true if the chunk change packet was sent.",
              "plain": "Send a chunk change. This fakes a chunk change packet for a user at a\n certain location. The updated cuboid must be entirely within a single\n chunk. This will not actually change the world in any way.\n \u003cp\u003e\n At least one of the dimensions of the cuboid must be even. The size of\n the data buffer must be 2.5*sx*sy*sz and formatted in accordance with\n the Packet51 format.\n@param loc The location of the cuboid\n@param sx The x size of the cuboid\n@param sy The y size of the cuboid\n@param sz The z size of the cuboid\n@param data The data to be sent\n@return true if the chunk change packet was sent\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "sendMap(org.bukkit.map.MapView)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "map"
              }
            ],
            "comment": {
              "body": "Render a map and send it to the player in its entirety. This may be\n used when streaming the map in the normal manner is not desirable.",
              "plain": "Render a map and send it to the player in its entirety. This may be\n used when streaming the map in the normal manner is not desirable.\n@param map The map to be sent"
            }
          },
          {
            "kind": "METHOD",
            "name": "sendMessage(net.md_5.bungee.api.ChatMessageType,net.md_5.bungee.api.chat.BaseComponent...)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "components"
              },
              {
                "kind": "PARAMETER",
                "name": "position"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Sends an array of components as a single message to the specified screen position of this player",
              "plain": "Sends an array of components as a single message to the specified screen position of this player\n@deprecated This is unlikely the API you want to use. See {@link #sendActionBar(String)} for a more proper Action Bar API. This deprecated API may send unsafe items to the client.\n@param position the screen position\n@param components the components to send"
            }
          },
          {
            "kind": "METHOD",
            "name": "sendMessage(net.md_5.bungee.api.chat.BaseComponent)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "component"
              }
            ],
            "comment": {
              "body": "Sends the component to the player",
              "plain": "Sends the component to the player\n@param component the components to send"
            }
          },
          {
            "kind": "METHOD",
            "name": "sendMessage(net.md_5.bungee.api.chat.BaseComponent...)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "components"
              }
            ],
            "comment": {
              "body": "Sends an array of components as a single message to the player",
              "plain": "Sends an array of components as a single message to the player\n@param components the components to send"
            }
          },
          {
            "kind": "METHOD",
            "name": "sendRawMessage(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "message"
              }
            ],
            "comment": {
              "body": "Sends this sender a message raw",
              "plain": "Sends this sender a message raw\n@param message Message to be displayed"
            }
          },
          {
            "kind": "METHOD",
            "name": "sendSignChange(org.bukkit.Location,java.lang.String[])",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "lines"
              },
              {
                "kind": "PARAMETER",
                "name": "loc"
              }
            ],
            "comment": {
              "body": "Send a sign change. This fakes a sign change packet for a user at\n a certain location. This will not actually change the world in any way.\n This method will use a sign at the location\u0027s block or a faked sign\n sent via \u003ca href\u003d\"org/bukkit/entity/Player.html#sendBlockChange(org.bukkit.Location,int,byte)\"\u003e\u003ccode\u003ePlayer.sendBlockChange(org.bukkit.Location, int, byte)\u003c/code\u003e\u003c/a\u003e or\n \u003ca href\u003d\"org/bukkit/entity/Player.html#sendBlockChange(org.bukkit.Location,org.bukkit.Material,byte)\"\u003e\u003ccode\u003ePlayer.sendBlockChange(org.bukkit.Location, org.bukkit.Material, byte)\u003c/code\u003e\u003c/a\u003e.\n \u003cp\u003e\n If the client does not have a sign at the given location it will\n display an error message to the user.",
              "plain": "Send a sign change. This fakes a sign change packet for a user at\n a certain location. This will not actually change the world in any way.\n This method will use a sign at the location\u0027s block or a faked sign\n sent via {@link #sendBlockChange(org.bukkit.Location, int, byte)} or\n {@link #sendBlockChange(org.bukkit.Location, org.bukkit.Material, byte)}.\n \u003cp\u003e\n If the client does not have a sign at the given location it will\n display an error message to the user.\n@param loc the location of the sign\n@param lines the new text on the sign or null to clear it\n@throws IllegalArgumentException if location is null\n@throws IllegalArgumentException if lines is non-null and has a length less than 4"
            }
          },
          {
            "kind": "METHOD",
            "name": "sendTitle(com.destroystokyo.paper.Title)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "title"
              }
            ],
            "comment": {
              "body": "Show the title to the player, overriding any previously displayed title.\n\n \u003cp\u003eThis method overrides any previous title, use \u003ca href\u003d\"org/bukkit/entity/Player.html#updateTitle(com.destroystokyo.paper.Title)\"\u003e\u003ccode\u003ePlayer.updateTitle(Title)\u003c/code\u003e\u003c/a\u003e to change the existing one.\u003c/p\u003e",
              "plain": "Show the title to the player, overriding any previously displayed title.\n\n \u003cp\u003eThis method overrides any previous title, use {@link #updateTitle(Title)} to change the existing one.\u003c/p\u003e\n@param title the title to send\n@throws NullPointerException if the title is null"
            }
          },
          {
            "kind": "METHOD",
            "name": "sendTitle(java.lang.String,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "subtitle"
              },
              {
                "kind": "PARAMETER",
                "name": "title"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Sends a title and a subtitle message to the player. If either of these\n values are null, they will not be sent and the display will remain\n unchanged. If they are empty strings, the display will be updated as\n such. If the strings contain a new line, only the first line will be\n sent. The titles will be displayed with the client\u0027s default timings.",
              "plain": "Sends a title and a subtitle message to the player. If either of these\n values are null, they will not be sent and the display will remain\n unchanged. If they are empty strings, the display will be updated as\n such. If the strings contain a new line, only the first line will be\n sent. The titles will be displayed with the client\u0027s default timings.\n@param title Title text\n@param subtitle Subtitle text\n@deprecated API behavior subject to change"
            }
          },
          {
            "kind": "METHOD",
            "name": "sendTitle(java.lang.String,java.lang.String,int,int,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "fadeIn"
              },
              {
                "kind": "PARAMETER",
                "name": "fadeOut"
              },
              {
                "kind": "PARAMETER",
                "name": "stay"
              },
              {
                "kind": "PARAMETER",
                "name": "subtitle"
              },
              {
                "kind": "PARAMETER",
                "name": "title"
              }
            ],
            "comment": {
              "body": "Sends a title and a subtitle message to the player. If either of these\n values are null, they will not be sent and the display will remain\n unchanged. If they are empty strings, the display will be updated as\n such. If the strings contain a new line, only the first line will be\n sent. All timings values may take a value of -1 to indicate that they\n will use the last value sent (or the defaults if no title has been\n displayed).",
              "plain": "Sends a title and a subtitle message to the player. If either of these\n values are null, they will not be sent and the display will remain\n unchanged. If they are empty strings, the display will be updated as\n such. If the strings contain a new line, only the first line will be\n sent. All timings values may take a value of -1 to indicate that they\n will use the last value sent (or the defaults if no title has been\n displayed).\n@param title Title text\n@param subtitle Subtitle text\n@param fadeIn time in ticks for titles to fade in. Defaults to 10.\n@param stay time in ticks for titles to stay. Defaults to 70.\n@param fadeOut time in ticks for titles to fade out. Defaults to 20."
            }
          },
          {
            "kind": "METHOD",
            "name": "setAffectsSpawning(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "affects"
              }
            ],
            "comment": {
              "body": "Set whether the player can affect mob spawning",
              "plain": "Set whether the player can affect mob spawning\n@param affects Whether the player can affect mob spawning"
            }
          },
          {
            "kind": "METHOD",
            "name": "setAllowFlight(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "flight"
              }
            ],
            "comment": {
              "body": "Sets if the Player is allowed to fly via jump key double-tap like in\n creative mode.",
              "plain": "Sets if the Player is allowed to fly via jump key double-tap like in\n creative mode.\n@param flight If flight should be allowed."
            }
          },
          {
            "kind": "METHOD",
            "name": "setBedSpawnLocation(org.bukkit.Location)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "location"
              }
            ],
            "comment": {
              "body": "Sets the Location where the player will spawn at their bed.",
              "plain": "Sets the Location where the player will spawn at their bed.\n@param location where to set the respawn location"
            }
          },
          {
            "kind": "METHOD",
            "name": "setBedSpawnLocation(org.bukkit.Location,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "force"
              },
              {
                "kind": "PARAMETER",
                "name": "location"
              }
            ],
            "comment": {
              "body": "Sets the Location where the player will spawn at their bed.",
              "plain": "Sets the Location where the player will spawn at their bed.\n@param location where to set the respawn location\n@param force whether to forcefully set the respawn location even if a\n     valid bed is not present"
            }
          },
          {
            "kind": "METHOD",
            "name": "setCompassTarget(org.bukkit.Location)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "loc"
              }
            ],
            "comment": {
              "body": "Set the target of the player\u0027s compass.",
              "plain": "Set the target of the player\u0027s compass.\n@param loc Location to point to"
            }
          },
          {
            "kind": "METHOD",
            "name": "setDisplayName(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ],
            "comment": {
              "body": "Sets the \"friendly\" name to display of this player. This may include\n color.\n \u003cp\u003e\n Note that this name will not be displayed in game, only in chat and\n places defined by plugins.",
              "plain": "Sets the \"friendly\" name to display of this player. This may include\n color.\n \u003cp\u003e\n Note that this name will not be displayed in game, only in chat and\n places defined by plugins.\n@param name The new display name."
            }
          },
          {
            "kind": "METHOD",
            "name": "setExhaustion(float)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "value"
              }
            ],
            "comment": {
              "body": "Sets the players current exhaustion level",
              "plain": "Sets the players current exhaustion level\n@param value Exhaustion level"
            }
          },
          {
            "kind": "METHOD",
            "name": "setExp(float)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "exp"
              }
            ],
            "comment": {
              "body": "Sets the players current experience points towards the next level\n \u003cp\u003e\n This is a percentage value. 0 is \"no progress\" and 1 is \"next level\".",
              "plain": "Sets the players current experience points towards the next level\n \u003cp\u003e\n This is a percentage value. 0 is \"no progress\" and 1 is \"next level\".\n@param exp New experience points"
            }
          },
          {
            "kind": "METHOD",
            "name": "setFlySpeed(float)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "value"
              }
            ],
            "comment": {
              "body": "Sets the speed at which a client will fly. Negative values indicate\n reverse directions.",
              "plain": "Sets the speed at which a client will fly. Negative values indicate\n reverse directions.\n@param value The new speed, from -1 to 1.\n@throws IllegalArgumentException If new speed is less than -1 or\n     greater than 1"
            }
          },
          {
            "kind": "METHOD",
            "name": "setFlying(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "value"
              }
            ],
            "comment": {
              "body": "Makes this player start or stop flying.",
              "plain": "Makes this player start or stop flying.\n@param value True to fly."
            }
          },
          {
            "kind": "METHOD",
            "name": "setFoodLevel(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "value"
              }
            ],
            "comment": {
              "body": "Sets the players current food level",
              "plain": "Sets the players current food level\n@param value New food level"
            }
          },
          {
            "kind": "METHOD",
            "name": "setHealthScale(double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "scale"
              }
            ],
            "comment": {
              "body": "Sets the number to scale health to for the client; this will also\n \u003ca href\u003d\"org/bukkit/entity/Player.html#setHealthScaled(boolean)\"\u003e\u003ccode\u003esetHealthScaled(true)\u003c/code\u003e\u003c/a\u003e.\n \u003cp\u003e\n Displayed health follows a simple formula \u003ccode\u003edisplayedHealth \u003d\n getHealth() / getMaxHealth() * getHealthScale()\u003c/code\u003e.",
              "plain": "Sets the number to scale health to for the client; this will also\n {@link #setHealthScaled(boolean) setHealthScaled(true)}.\n \u003cp\u003e\n Displayed health follows a simple formula \u003ccode\u003edisplayedHealth \u003d\n getHealth() / getMaxHealth() * getHealthScale()\u003c/code\u003e.\n@param scale the number to scale health to\n@throws IllegalArgumentException if scale is \u0026lt;0\n@throws IllegalArgumentException if scale is {@link Double#NaN}\n@throws IllegalArgumentException if scale is too high"
            }
          },
          {
            "kind": "METHOD",
            "name": "setHealthScaled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "scale"
              }
            ],
            "comment": {
              "body": "Sets if the client is displayed a \u0027scaled\u0027 health, that is, health on a\n scale from 0-\u003ca href\u003d\"org/bukkit/entity/Player.html#getHealthScale()\"\u003e\u003ccode\u003ePlayer.getHealthScale()\u003c/code\u003e\u003c/a\u003e.\n \u003cp\u003e\n Displayed health follows a simple formula \u003ccode\u003edisplayedHealth \u003d\n getHealth() / getMaxHealth() * getHealthScale()\u003c/code\u003e.",
              "plain": "Sets if the client is displayed a \u0027scaled\u0027 health, that is, health on a\n scale from 0-{@link #getHealthScale()}.\n \u003cp\u003e\n Displayed health follows a simple formula \u003ccode\u003edisplayedHealth \u003d\n getHealth() / getMaxHealth() * getHealthScale()\u003c/code\u003e.\n@param scale if the client health display is scaled"
            }
          },
          {
            "kind": "METHOD",
            "name": "setLevel(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "level"
              }
            ],
            "comment": {
              "body": "Sets the players current experience level",
              "plain": "Sets the players current experience level\n@param level New experience level"
            }
          },
          {
            "kind": "METHOD",
            "name": "setPlayerListHeaderFooter(net.md_5.bungee.api.chat.BaseComponent,net.md_5.bungee.api.chat.BaseComponent)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "footer"
              },
              {
                "kind": "PARAMETER",
                "name": "header"
              }
            ],
            "comment": {
              "body": "Set the text displayed in the player list header and footer for this player",
              "plain": "Set the text displayed in the player list header and footer for this player\n@param header content for the top of the player list\n@param footer content for the bottom of the player list"
            }
          },
          {
            "kind": "METHOD",
            "name": "setPlayerListHeaderFooter(net.md_5.bungee.api.chat.BaseComponent[],net.md_5.bungee.api.chat.BaseComponent[])",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "footer"
              },
              {
                "kind": "PARAMETER",
                "name": "header"
              }
            ],
            "comment": {
              "body": "Set the text displayed in the player list header and footer for this player",
              "plain": "Set the text displayed in the player list header and footer for this player\n@param header content for the top of the player list\n@param footer content for the bottom of the player list"
            }
          },
          {
            "kind": "METHOD",
            "name": "setPlayerListName(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ],
            "comment": {
              "body": "Sets the name that is shown on the in-game player list.\n \u003cp\u003e\n The name cannot be longer than 16 characters, but \u003ca href\u003d\"org/bukkit/ChatColor.html\" title\u003d\"enum in org.bukkit\"\u003e\u003ccode\u003eChatColor\u003c/code\u003e\u003c/a\u003e is\n supported.\n \u003cp\u003e\n If the value is null, the name will be identical to \u003ca href\u003d\"org/bukkit/entity/HumanEntity.html#getName()\"\u003e\u003ccode\u003eHumanEntity.getName()\u003c/code\u003e\u003c/a\u003e.\n \u003cp\u003e\n This name is case sensitive and unique, two names with different casing\n will appear as two different people. If a player joins afterwards with\n a name that conflicts with a player\u0027s custom list name, the joining\n player\u0027s player list name will have a random number appended to it (1-2\n characters long in the default implementation). If the joining player\u0027s\n name is 15 or 16 characters long, part of the name will be truncated at\n the end to allow the addition of the two digits.",
              "plain": "Sets the name that is shown on the in-game player list.\n \u003cp\u003e\n The name cannot be longer than 16 characters, but {@link ChatColor} is\n supported.\n \u003cp\u003e\n If the value is null, the name will be identical to {@link #getName()}.\n \u003cp\u003e\n This name is case sensitive and unique, two names with different casing\n will appear as two different people. If a player joins afterwards with\n a name that conflicts with a player\u0027s custom list name, the joining\n player\u0027s player list name will have a random number appended to it (1-2\n characters long in the default implementation). If the joining player\u0027s\n name is 15 or 16 characters long, part of the name will be truncated at\n the end to allow the addition of the two digits.\n@param name new player list name\n@throws IllegalArgumentException if the name is already used by someone\n     else\n@throws IllegalArgumentException if the length of the name is too long"
            }
          },
          {
            "kind": "METHOD",
            "name": "setPlayerProfile(com.destroystokyo.paper.profile.PlayerProfile)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "profile"
              }
            ],
            "comment": {
              "body": "Changes the PlayerProfile for this player. This will cause this player\n to be reregistered to all clients that can currently see this player",
              "plain": "Changes the PlayerProfile for this player. This will cause this player\n to be reregistered to all clients that can currently see this player\n@param profile The new profile to use"
            }
          },
          {
            "kind": "METHOD",
            "name": "setPlayerTime(long,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "relative"
              },
              {
                "kind": "PARAMETER",
                "name": "time"
              }
            ],
            "comment": {
              "body": "Sets the current time on the player\u0027s client. When relative is true the\n player\u0027s time will be kept synchronized to its world time with the\n specified offset.\n \u003cp\u003e\n When using non relative time the player\u0027s time will stay fixed at the\n specified time parameter. It\u0027s up to the caller to continue updating\n the player\u0027s time. To restore player time to normal use\n resetPlayerTime().",
              "plain": "Sets the current time on the player\u0027s client. When relative is true the\n player\u0027s time will be kept synchronized to its world time with the\n specified offset.\n \u003cp\u003e\n When using non relative time the player\u0027s time will stay fixed at the\n specified time parameter. It\u0027s up to the caller to continue updating\n the player\u0027s time. To restore player time to normal use\n resetPlayerTime().\n@param time The current player\u0027s perceived time or the player\u0027s time\n     offset from the server time.\n@param relative When true the player time is kept relative to its world\n     time."
            }
          },
          {
            "kind": "METHOD",
            "name": "setPlayerWeather(org.bukkit.WeatherType)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "comment": {
              "body": "Sets the type of weather the player will see.  When used, the weather\n status of the player is locked until \u003ca href\u003d\"org/bukkit/entity/Player.html#resetPlayerWeather()\"\u003e\u003ccode\u003ePlayer.resetPlayerWeather()\u003c/code\u003e\u003c/a\u003e is\n used.",
              "plain": "Sets the type of weather the player will see.  When used, the weather\n status of the player is locked until {@link #resetPlayerWeather()} is\n used.\n@param type The WeatherType enum type the player should experience"
            }
          },
          {
            "kind": "METHOD",
            "name": "setResourcePack(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "url"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Request that the player\u0027s client download and switch resource packs.\n \u003cp\u003e\n The player\u0027s client will download the new resource pack asynchronously\n in the background, and will automatically switch to it once the\n download is complete. If the client has downloaded and cached the same\n resource pack in the past, it will perform a file size check against\n the response content to determine if the resource pack has changed and\n needs to be downloaded again. When this request is sent for the very\n first time from a given server, the client will first display a\n confirmation GUI to the player before proceeding with the download.\n \u003cp\u003e\n Notes:\n \u003cul\u003e\n \u003cli\u003ePlayers can disable server resources on their client, in which\n     case this method will have no affect on them. Use the\n     \u003ca href\u003d\"org/bukkit/event/player/PlayerResourcePackStatusEvent.html\" title\u003d\"class in org.bukkit.event.player\"\u003e\u003ccode\u003ePlayerResourcePackStatusEvent\u003c/code\u003e\u003c/a\u003e to figure out whether or not\n     the player loaded the pack!\n \u003cli\u003eThere is no concept of resetting resource packs back to default\n     within Minecraft, so players will have to relog to do so or you\n     have to send an empty pack.\n \u003cli\u003eThe request is send with \"null\" as the hash. This might result\n     in newer versions not loading the pack correctly.\n \u003c/ul\u003e",
              "plain": "Request that the player\u0027s client download and switch resource packs.\n \u003cp\u003e\n The player\u0027s client will download the new resource pack asynchronously\n in the background, and will automatically switch to it once the\n download is complete. If the client has downloaded and cached the same\n resource pack in the past, it will perform a file size check against\n the response content to determine if the resource pack has changed and\n needs to be downloaded again. When this request is sent for the very\n first time from a given server, the client will first display a\n confirmation GUI to the player before proceeding with the download.\n \u003cp\u003e\n Notes:\n \u003cul\u003e\n \u003cli\u003ePlayers can disable server resources on their client, in which\n     case this method will have no affect on them. Use the\n     {@link PlayerResourcePackStatusEvent} to figure out whether or not\n     the player loaded the pack!\n \u003cli\u003eThere is no concept of resetting resource packs back to default\n     within Minecraft, so players will have to relog to do so or you\n     have to send an empty pack.\n \u003cli\u003eThe request is send with \"null\" as the hash. This might result\n     in newer versions not loading the pack correctly.\n \u003c/ul\u003e\n@param url The URL from which the client will download the resource\n     pack. The string must contain only US-ASCII characters and should\n     be encoded as per RFC 1738.\n@throws IllegalArgumentException Thrown if the URL is null.\n@throws IllegalArgumentException Thrown if the URL is too long. The\n     length restriction is an implementation specific arbitrary value.\n@deprecated use {@link #setResourcePack(String, String)}"
            }
          },
          {
            "kind": "METHOD",
            "name": "setResourcePack(java.lang.String,byte[])",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "hash"
              },
              {
                "kind": "PARAMETER",
                "name": "url"
              }
            ],
            "comment": {
              "body": "Request that the player\u0027s client download and switch resource packs.\n \u003cp\u003e\n The player\u0027s client will download the new resource pack asynchronously\n in the background, and will automatically switch to it once the\n download is complete. If the client has downloaded and cached a\n resource pack with the same hash in the past it will not download but\n directly apply the cached pack. When this request is sent for the very\n first time from a given server, the client will first display a\n confirmation GUI to the player before proceeding with the download.\n \u003cp\u003e\n Notes:\n \u003cul\u003e\n \u003cli\u003ePlayers can disable server resources on their client, in which\n     case this method will have no affect on them. Use the\n     \u003ca href\u003d\"org/bukkit/event/player/PlayerResourcePackStatusEvent.html\" title\u003d\"class in org.bukkit.event.player\"\u003e\u003ccode\u003ePlayerResourcePackStatusEvent\u003c/code\u003e\u003c/a\u003e to figure out whether or not\n     the player loaded the pack!\n \u003cli\u003eThere is no concept of resetting resource packs back to default\n     within Minecraft, so players will have to relog to do so or you\n     have to send an empty pack.\n \u003c/ul\u003e",
              "plain": "Request that the player\u0027s client download and switch resource packs.\n \u003cp\u003e\n The player\u0027s client will download the new resource pack asynchronously\n in the background, and will automatically switch to it once the\n download is complete. If the client has downloaded and cached a\n resource pack with the same hash in the past it will not download but\n directly apply the cached pack. When this request is sent for the very\n first time from a given server, the client will first display a\n confirmation GUI to the player before proceeding with the download.\n \u003cp\u003e\n Notes:\n \u003cul\u003e\n \u003cli\u003ePlayers can disable server resources on their client, in which\n     case this method will have no affect on them. Use the\n     {@link PlayerResourcePackStatusEvent} to figure out whether or not\n     the player loaded the pack!\n \u003cli\u003eThere is no concept of resetting resource packs back to default\n     within Minecraft, so players will have to relog to do so or you\n     have to send an empty pack.\n \u003c/ul\u003e\n@param url The URL from which the client will download the resource\n     pack. The string must contain only US-ASCII characters and should\n     be encoded as per RFC 1738.\n@param hash The sha1 hash sum of the resource pack file which is used\n     to apply a cached version of the pack directly without downloading\n     if it is available. Hast to be 20 bytes long!\n@throws IllegalArgumentException Thrown if the URL is null.\n@throws IllegalArgumentException Thrown if the URL is too long. The\n     length restriction is an implementation specific arbitrary value.\n@throws IllegalArgumentException Thrown if the hash is null.\n@throws IllegalArgumentException Thrown if the hash is not 20 bytes\n     long."
            }
          },
          {
            "kind": "METHOD",
            "name": "setResourcePack(java.lang.String,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "hash"
              },
              {
                "kind": "PARAMETER",
                "name": "url"
              }
            ],
            "comment": {
              "body": "Request that the player\u0027s client download and switch resource packs.\n \u003cp\u003e\n The player\u0027s client will download the new resource pack asynchronously\n in the background, and will automatically switch to it once the\n download is complete. If the client has downloaded and cached the same\n resource pack in the past, it will perform a quick timestamp check\n over the network to determine if the resource pack has changed and\n needs to be downloaded again. When this request is sent for the very\n first time from a given server, the client will first display a\n confirmation GUI to the player before proceeding with the download.\n \u003cp\u003e\n Notes:\n \u003cul\u003e\n \u003cli\u003ePlayers can disable server resources on their client, in which\n     case this method will have no affect on them.\n \u003cli\u003eThere is no concept of resetting resource packs back to default\n     within Minecraft, so players will have to relog to do so.\n \u003c/ul\u003e",
              "plain": "Request that the player\u0027s client download and switch resource packs.\n \u003cp\u003e\n The player\u0027s client will download the new resource pack asynchronously\n in the background, and will automatically switch to it once the\n download is complete. If the client has downloaded and cached the same\n resource pack in the past, it will perform a quick timestamp check\n over the network to determine if the resource pack has changed and\n needs to be downloaded again. When this request is sent for the very\n first time from a given server, the client will first display a\n confirmation GUI to the player before proceeding with the download.\n \u003cp\u003e\n Notes:\n \u003cul\u003e\n \u003cli\u003ePlayers can disable server resources on their client, in which\n     case this method will have no affect on them.\n \u003cli\u003eThere is no concept of resetting resource packs back to default\n     within Minecraft, so players will have to relog to do so.\n \u003c/ul\u003e\n@param url The URL from which the client will download the resource\n     pack. The string must contain only US-ASCII characters and should\n     be encoded as per RFC 1738.\n@param hash A 40 character hexadecimal and lowercase SHA-1 digest of\n     the resource pack file.\n@throws IllegalArgumentException Thrown if the URL is null.\n@throws IllegalArgumentException Thrown if the URL is too long. The\n     length restriction is an implementation specific arbitrary value."
            }
          },
          {
            "kind": "METHOD",
            "name": "setSaturation(float)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "value"
              }
            ],
            "comment": {
              "body": "Sets the players current saturation level",
              "plain": "Sets the players current saturation level\n@param value Saturation level"
            }
          },
          {
            "kind": "METHOD",
            "name": "setScoreboard(org.bukkit.scoreboard.Scoreboard)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "scoreboard"
              }
            ],
            "comment": {
              "body": "Sets the player\u0027s visible Scoreboard.",
              "plain": "Sets the player\u0027s visible Scoreboard.\n@param scoreboard New Scoreboard for the player\n@throws IllegalArgumentException if scoreboard is null\n@throws IllegalArgumentException if scoreboard was not created by the\n     {@link org.bukkit.scoreboard.ScoreboardManager scoreboard manager}\n@throws IllegalStateException if this is a player that is not logged\n     yet or has logged out"
            }
          },
          {
            "kind": "METHOD",
            "name": "setSleepingIgnored(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "isSleeping"
              }
            ],
            "comment": {
              "body": "Sets whether the player is ignored as not sleeping. If everyone is\n either sleeping or has this flag set, then time will advance to the\n next day. If everyone has this flag set but no one is actually in bed,\n then nothing will happen.",
              "plain": "Sets whether the player is ignored as not sleeping. If everyone is\n either sleeping or has this flag set, then time will advance to the\n next day. If everyone has this flag set but no one is actually in bed,\n then nothing will happen.\n@param isSleeping Whether to ignore."
            }
          },
          {
            "kind": "METHOD",
            "name": "setSneaking(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "sneak"
              }
            ],
            "comment": {
              "body": "Sets the sneak mode the player",
              "plain": "Sets the sneak mode the player\n@param sneak true if player should appear sneaking"
            }
          },
          {
            "kind": "METHOD",
            "name": "setSpectatorTarget(org.bukkit.entity.Entity)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "entity"
              }
            ],
            "comment": {
              "body": "Sets the entity which is followed by the camera when in\n \u003ca href\u003d\"org/bukkit/GameMode.html#SPECTATOR\"\u003e\u003ccode\u003eGameMode.SPECTATOR\u003c/code\u003e\u003c/a\u003e.",
              "plain": "Sets the entity which is followed by the camera when in\n {@link GameMode#SPECTATOR}.\n@param entity the entity to follow or null to reset\n@throws IllegalStateException if the player is not in\n {@link GameMode#SPECTATOR}"
            }
          },
          {
            "kind": "METHOD",
            "name": "setSprinting(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "sprinting"
              }
            ],
            "comment": {
              "body": "Sets whether the player is sprinting or not.",
              "plain": "Sets whether the player is sprinting or not.\n@param sprinting true if the player should be sprinting"
            }
          },
          {
            "kind": "METHOD",
            "name": "setStatistic(org.bukkit.Statistic,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "newValue"
              },
              {
                "kind": "PARAMETER",
                "name": "statistic"
              }
            ],
            "comment": {
              "body": "Sets the given statistic for this player.",
              "plain": "Sets the given statistic for this player.\n@param statistic Statistic to set\n@param newValue The value to set this statistic to\n@throws IllegalArgumentException if statistic is null\n@throws IllegalArgumentException if newValue is negative\n@throws IllegalArgumentException if the statistic requires an\n     additional parameter"
            }
          },
          {
            "kind": "METHOD",
            "name": "setStatistic(org.bukkit.Statistic,org.bukkit.Material,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "material"
              },
              {
                "kind": "PARAMETER",
                "name": "newValue"
              },
              {
                "kind": "PARAMETER",
                "name": "statistic"
              }
            ],
            "comment": {
              "body": "Sets the given statistic for this player for the given material.",
              "plain": "Sets the given statistic for this player for the given material.\n@param statistic Statistic to set\n@param material Material to offset the statistic with\n@param newValue The value to set this statistic to\n@throws IllegalArgumentException if statistic is null\n@throws IllegalArgumentException if material is null\n@throws IllegalArgumentException if newValue is negative\n@throws IllegalArgumentException if the given parameter is not valid\n     for the statistic"
            }
          },
          {
            "kind": "METHOD",
            "name": "setStatistic(org.bukkit.Statistic,org.bukkit.entity.EntityType,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "entityType"
              },
              {
                "kind": "PARAMETER",
                "name": "newValue"
              },
              {
                "kind": "PARAMETER",
                "name": "statistic"
              }
            ],
            "comment": {
              "body": "Sets the given statistic for this player for the given entity.",
              "plain": "Sets the given statistic for this player for the given entity.\n@param statistic Statistic to set\n@param entityType EntityType to offset the statistic with\n@param newValue The value to set this statistic to\n@throws IllegalArgumentException if statistic is null\n@throws IllegalArgumentException if entityType is null\n@throws IllegalArgumentException if newValue is negative\n@throws IllegalArgumentException if the given parameter is not valid\n     for the statistic"
            }
          },
          {
            "kind": "METHOD",
            "name": "setSubtitle(net.md_5.bungee.api.chat.BaseComponent)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "subtitle"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Update the subtitle of titles displayed to the player",
              "plain": "Update the subtitle of titles displayed to the player\n@param subtitle Subtitle to set\n@deprecated Use {@link #updateTitle(Title)}"
            }
          },
          {
            "kind": "METHOD",
            "name": "setSubtitle(net.md_5.bungee.api.chat.BaseComponent[])",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "subtitle"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Update the subtitle of titles displayed to the player",
              "plain": "Update the subtitle of titles displayed to the player\n@param subtitle Subtitle to set\n@deprecated Use {@link #updateTitle(Title)}"
            }
          },
          {
            "kind": "METHOD",
            "name": "setTexturePack(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "url"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Request that the player\u0027s client download and switch texture packs.\n \u003cp\u003e\n The player\u0027s client will download the new texture pack asynchronously\n in the background, and will automatically switch to it once the\n download is complete. If the client has downloaded and cached the same\n texture pack in the past, it will perform a file size check against\n the response content to determine if the texture pack has changed and\n needs to be downloaded again. When this request is sent for the very\n first time from a given server, the client will first display a\n confirmation GUI to the player before proceeding with the download.\n \u003cp\u003e\n Notes:\n \u003cul\u003e\n \u003cli\u003ePlayers can disable server textures on their client, in which\n     case this method will have no affect on them. Use the\n     \u003ca href\u003d\"org/bukkit/event/player/PlayerResourcePackStatusEvent.html\" title\u003d\"class in org.bukkit.event.player\"\u003e\u003ccode\u003ePlayerResourcePackStatusEvent\u003c/code\u003e\u003c/a\u003e to figure out whether or not\n     the player loaded the pack!\n \u003cli\u003eThere is no concept of resetting texture packs back to default\n     within Minecraft, so players will have to relog to do so or you\n     have to send an empty pack.\n \u003cli\u003eThe request is send with \"null\" as the hash. This might result\n     in newer versions not loading the pack correctly.\n \u003c/ul\u003e",
              "plain": "Request that the player\u0027s client download and switch texture packs.\n \u003cp\u003e\n The player\u0027s client will download the new texture pack asynchronously\n in the background, and will automatically switch to it once the\n download is complete. If the client has downloaded and cached the same\n texture pack in the past, it will perform a file size check against\n the response content to determine if the texture pack has changed and\n needs to be downloaded again. When this request is sent for the very\n first time from a given server, the client will first display a\n confirmation GUI to the player before proceeding with the download.\n \u003cp\u003e\n Notes:\n \u003cul\u003e\n \u003cli\u003ePlayers can disable server textures on their client, in which\n     case this method will have no affect on them. Use the\n     {@link PlayerResourcePackStatusEvent} to figure out whether or not\n     the player loaded the pack!\n \u003cli\u003eThere is no concept of resetting texture packs back to default\n     within Minecraft, so players will have to relog to do so or you\n     have to send an empty pack.\n \u003cli\u003eThe request is send with \"null\" as the hash. This might result\n     in newer versions not loading the pack correctly.\n \u003c/ul\u003e\n@param url The URL from which the client will download the texture\n     pack. The string must contain only US-ASCII characters and should\n     be encoded as per RFC 1738.\n@throws IllegalArgumentException Thrown if the URL is null.\n@throws IllegalArgumentException Thrown if the URL is too long.\n@deprecated Minecraft no longer uses textures packs. Instead you\n     should use {@link #setResourcePack(String)}."
            }
          },
          {
            "kind": "METHOD",
            "name": "setTitleTimes(int,int,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "fadeInTicks"
              },
              {
                "kind": "PARAMETER",
                "name": "fadeOutTicks"
              },
              {
                "kind": "PARAMETER",
                "name": "stayTicks"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Update the times for titles displayed to the player",
              "plain": "Update the times for titles displayed to the player\n@param fadeInTicks ticks to fade-in\n@param stayTicks ticks to stay visible\n@param fadeOutTicks ticks to fade-out\n@deprecated Use {@link #updateTitle(Title)}"
            }
          },
          {
            "kind": "METHOD",
            "name": "setTotalExperience(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "exp"
              }
            ],
            "comment": {
              "body": "Sets the players current experience points.\n \u003cbr\u003e\n This refers to the total amount of experience the player has collected\n over time and is only displayed as the player\u0027s \"score\" upon dying.",
              "plain": "Sets the players current experience points.\n \u003cbr\u003e\n This refers to the total amount of experience the player has collected\n over time and is only displayed as the player\u0027s \"score\" upon dying.\n@param exp New total experience points"
            }
          },
          {
            "kind": "METHOD",
            "name": "setViewDistance(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "viewDistance"
              }
            ],
            "comment": {
              "body": "Sets the view distance for this player",
              "plain": "Sets the view distance for this player\n@param viewDistance the player\u0027s view distance"
            }
          },
          {
            "kind": "METHOD",
            "name": "setWalkSpeed(float)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "value"
              }
            ],
            "comment": {
              "body": "Sets the speed at which a client will walk. Negative values indicate\n reverse directions.",
              "plain": "Sets the speed at which a client will walk. Negative values indicate\n reverse directions.\n@param value The new speed, from -1 to 1.\n@throws IllegalArgumentException If new speed is less than -1 or\n     greater than 1"
            }
          },
          {
            "kind": "METHOD",
            "name": "showPlayer(org.bukkit.entity.Player)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "player"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Allows this player to see a player that was previously hidden",
              "plain": "Allows this player to see a player that was previously hidden\n@param player Player to show\n@deprecated see {@link #showPlayer(Plugin, Player)}"
            }
          },
          {
            "kind": "METHOD",
            "name": "showPlayer(org.bukkit.plugin.Plugin,org.bukkit.entity.Player)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "player"
              },
              {
                "kind": "PARAMETER",
                "name": "plugin"
              }
            ],
            "comment": {
              "body": "Allows this player to see a player that was previously hidden. If\n another another plugin had hidden the player too, then the player will\n remain hidden until the other plugin calls this method too.",
              "plain": "Allows this player to see a player that was previously hidden. If\n another another plugin had hidden the player too, then the player will\n remain hidden until the other plugin calls this method too.\n@param plugin Plugin that wants to show the player\n@param player Player to show"
            }
          },
          {
            "kind": "METHOD",
            "name": "showTitle(net.md_5.bungee.api.chat.BaseComponent)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "title"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Show the given title to the player, along with the last subtitle set, using the last set times",
              "plain": "Show the given title to the player, along with the last subtitle set, using the last set times\n@param title Title to set\n@deprecated Use {@link #sendTitle(Title)} or {@link #updateTitle(Title)}"
            }
          },
          {
            "kind": "METHOD",
            "name": "showTitle(net.md_5.bungee.api.chat.BaseComponent,net.md_5.bungee.api.chat.BaseComponent,int,int,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "fadeInTicks"
              },
              {
                "kind": "PARAMETER",
                "name": "fadeOutTicks"
              },
              {
                "kind": "PARAMETER",
                "name": "stayTicks"
              },
              {
                "kind": "PARAMETER",
                "name": "subtitle"
              },
              {
                "kind": "PARAMETER",
                "name": "title"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Show the given title and subtitle to the player using the given times",
              "plain": "Show the given title and subtitle to the player using the given times\n@param title big text\n@param subtitle little text under it\n@param fadeInTicks ticks to fade-in\n@param stayTicks ticks to stay visible\n@param fadeOutTicks ticks to fade-out\n@deprecated Use {@link #sendTitle(Title)} or {@link #updateTitle(Title)}"
            }
          },
          {
            "kind": "METHOD",
            "name": "showTitle(net.md_5.bungee.api.chat.BaseComponent[])",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "title"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Show the given title to the player, along with the last subtitle set, using the last set times",
              "plain": "Show the given title to the player, along with the last subtitle set, using the last set times\n@param title Title to set\n@deprecated Use {@link #sendTitle(Title)} or {@link #updateTitle(Title)}"
            }
          },
          {
            "kind": "METHOD",
            "name": "showTitle(net.md_5.bungee.api.chat.BaseComponent[],net.md_5.bungee.api.chat.BaseComponent[],int,int,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "fadeInTicks"
              },
              {
                "kind": "PARAMETER",
                "name": "fadeOutTicks"
              },
              {
                "kind": "PARAMETER",
                "name": "stayTicks"
              },
              {
                "kind": "PARAMETER",
                "name": "subtitle"
              },
              {
                "kind": "PARAMETER",
                "name": "title"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Show the given title and subtitle to the player using the given times",
              "plain": "Show the given title and subtitle to the player using the given times\n@param title big text\n@param subtitle little text under it\n@param fadeInTicks ticks to fade-in\n@param stayTicks ticks to stay visible\n@param fadeOutTicks ticks to fade-out\n@deprecated Use {@link #sendTitle(Title)} or {@link #updateTitle(Title)}"
            }
          },
          {
            "kind": "METHOD",
            "name": "spawnParticle(org.bukkit.Particle,double,double,double,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "count"
              },
              {
                "kind": "PARAMETER",
                "name": "particle"
              },
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "y"
              },
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ],
            "comment": {
              "body": "Spawns the particle (the number of times specified by count)\n at the target location.",
              "plain": "Spawns the particle (the number of times specified by count)\n at the target location.\n@param particle the particle to spawn\n@param x the position on the x axis to spawn at\n@param y the position on the y axis to spawn at\n@param z the position on the z axis to spawn at\n@param count the number of particles"
            }
          },
          {
            "kind": "METHOD",
            "name": "spawnParticle(org.bukkit.Particle,double,double,double,int,double,double,double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "count"
              },
              {
                "kind": "PARAMETER",
                "name": "offsetX"
              },
              {
                "kind": "PARAMETER",
                "name": "offsetY"
              },
              {
                "kind": "PARAMETER",
                "name": "offsetZ"
              },
              {
                "kind": "PARAMETER",
                "name": "particle"
              },
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "y"
              },
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ],
            "comment": {
              "body": "Spawns the particle (the number of times specified by count)\n at the target location. The position of each particle will be\n randomized positively and negatively by the offset parameters\n on each axis.",
              "plain": "Spawns the particle (the number of times specified by count)\n at the target location. The position of each particle will be\n randomized positively and negatively by the offset parameters\n on each axis.\n@param particle the particle to spawn\n@param x the position on the x axis to spawn at\n@param y the position on the y axis to spawn at\n@param z the position on the z axis to spawn at\n@param count the number of particles\n@param offsetX the maximum random offset on the X axis\n@param offsetY the maximum random offset on the Y axis\n@param offsetZ the maximum random offset on the Z axis"
            }
          },
          {
            "kind": "METHOD",
            "name": "spawnParticle(org.bukkit.Particle,double,double,double,int,double,double,double,double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "count"
              },
              {
                "kind": "PARAMETER",
                "name": "extra"
              },
              {
                "kind": "PARAMETER",
                "name": "offsetX"
              },
              {
                "kind": "PARAMETER",
                "name": "offsetY"
              },
              {
                "kind": "PARAMETER",
                "name": "offsetZ"
              },
              {
                "kind": "PARAMETER",
                "name": "particle"
              },
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "y"
              },
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ],
            "comment": {
              "body": "Spawns the particle (the number of times specified by count)\n at the target location. The position of each particle will be\n randomized positively and negatively by the offset parameters\n on each axis.",
              "plain": "Spawns the particle (the number of times specified by count)\n at the target location. The position of each particle will be\n randomized positively and negatively by the offset parameters\n on each axis.\n@param particle the particle to spawn\n@param x the position on the x axis to spawn at\n@param y the position on the y axis to spawn at\n@param z the position on the z axis to spawn at\n@param count the number of particles\n@param offsetX the maximum random offset on the X axis\n@param offsetY the maximum random offset on the Y axis\n@param offsetZ the maximum random offset on the Z axis\n@param extra the extra data for this particle, depends on the\n              particle used (normally speed)"
            }
          },
          {
            "kind": "METHOD",
            "name": "spawnParticle(org.bukkit.Particle,org.bukkit.Location,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "count"
              },
              {
                "kind": "PARAMETER",
                "name": "location"
              },
              {
                "kind": "PARAMETER",
                "name": "particle"
              }
            ],
            "comment": {
              "body": "Spawns the particle (the number of times specified by count)\n at the target location.",
              "plain": "Spawns the particle (the number of times specified by count)\n at the target location.\n@param particle the particle to spawn\n@param location the location to spawn at\n@param count the number of particles"
            }
          },
          {
            "kind": "METHOD",
            "name": "spawnParticle(org.bukkit.Particle,org.bukkit.Location,int,double,double,double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "count"
              },
              {
                "kind": "PARAMETER",
                "name": "location"
              },
              {
                "kind": "PARAMETER",
                "name": "offsetX"
              },
              {
                "kind": "PARAMETER",
                "name": "offsetY"
              },
              {
                "kind": "PARAMETER",
                "name": "offsetZ"
              },
              {
                "kind": "PARAMETER",
                "name": "particle"
              }
            ],
            "comment": {
              "body": "Spawns the particle (the number of times specified by count)\n at the target location. The position of each particle will be\n randomized positively and negatively by the offset parameters\n on each axis.",
              "plain": "Spawns the particle (the number of times specified by count)\n at the target location. The position of each particle will be\n randomized positively and negatively by the offset parameters\n on each axis.\n@param particle the particle to spawn\n@param location the location to spawn at\n@param count the number of particles\n@param offsetX the maximum random offset on the X axis\n@param offsetY the maximum random offset on the Y axis\n@param offsetZ the maximum random offset on the Z axis"
            }
          },
          {
            "kind": "METHOD",
            "name": "spawnParticle(org.bukkit.Particle,org.bukkit.Location,int,double,double,double,double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "count"
              },
              {
                "kind": "PARAMETER",
                "name": "extra"
              },
              {
                "kind": "PARAMETER",
                "name": "location"
              },
              {
                "kind": "PARAMETER",
                "name": "offsetX"
              },
              {
                "kind": "PARAMETER",
                "name": "offsetY"
              },
              {
                "kind": "PARAMETER",
                "name": "offsetZ"
              },
              {
                "kind": "PARAMETER",
                "name": "particle"
              }
            ],
            "comment": {
              "body": "Spawns the particle (the number of times specified by count)\n at the target location. The position of each particle will be\n randomized positively and negatively by the offset parameters\n on each axis.",
              "plain": "Spawns the particle (the number of times specified by count)\n at the target location. The position of each particle will be\n randomized positively and negatively by the offset parameters\n on each axis.\n@param particle the particle to spawn\n@param location the location to spawn at\n@param count the number of particles\n@param offsetX the maximum random offset on the X axis\n@param offsetY the maximum random offset on the Y axis\n@param offsetZ the maximum random offset on the Z axis\n@param extra the extra data for this particle, depends on the\n              particle used (normally speed)"
            }
          },
          {
            "kind": "METHOD",
            "name": "spigot()"
          },
          {
            "kind": "METHOD",
            "name": "stopSound(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "sound"
              }
            ],
            "comment": {
              "body": "Stop the specified sound from playing.",
              "plain": "Stop the specified sound from playing.\n@param sound the sound to stop"
            }
          },
          {
            "kind": "METHOD",
            "name": "stopSound(java.lang.String,org.bukkit.SoundCategory)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "category"
              },
              {
                "kind": "PARAMETER",
                "name": "sound"
              }
            ],
            "comment": {
              "body": "Stop the specified sound from playing.",
              "plain": "Stop the specified sound from playing.\n@param sound the sound to stop\n@param category the category of the sound"
            }
          },
          {
            "kind": "METHOD",
            "name": "stopSound(org.bukkit.Sound)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "sound"
              }
            ],
            "comment": {
              "body": "Stop the specified sound from playing.",
              "plain": "Stop the specified sound from playing.\n@param sound the sound to stop"
            }
          },
          {
            "kind": "METHOD",
            "name": "stopSound(org.bukkit.Sound,org.bukkit.SoundCategory)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "category"
              },
              {
                "kind": "PARAMETER",
                "name": "sound"
              }
            ],
            "comment": {
              "body": "Stop the specified sound from playing.",
              "plain": "Stop the specified sound from playing.\n@param sound the sound to stop\n@param category the category of the sound"
            }
          },
          {
            "kind": "METHOD",
            "name": "updateInventory()",
            "comment": {
              "body": "Forces an update of the player\u0027s entire inventory.",
              "plain": "Forces an update of the player\u0027s entire inventory."
            }
          },
          {
            "kind": "METHOD",
            "name": "updateTitle(com.destroystokyo.paper.Title)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "title"
              }
            ],
            "comment": {
              "body": "Show the title to the player, overriding any previously displayed title.\n\n \u003cp\u003eThis method doesn\u0027t override previous titles, but changes their values.\u003c/p\u003e",
              "plain": "Show the title to the player, overriding any previously displayed title.\n\n \u003cp\u003eThis method doesn\u0027t override previous titles, but changes their values.\u003c/p\u003e\n@param title the title to send\n@throws NullPointerException if title is null"
            }
          }
        ],
        "comment": {
          "body": "Represents a player, connected or not",
          "plain": "Represents a player, connected or not"
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.PolarBear",
        "comment": {
          "body": "Represents a polar bear.",
          "plain": "Represents a polar bear."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.Projectile",
        "children": [
          {
            "kind": "METHOD",
            "name": "doesBounce()",
            "comment": {
              "body": "Determine if this projectile should bounce or not when it hits.\n \u003cp\u003e\n If a small fireball does not bounce it will set the target on fire.",
              "tags": "Returns true if it should bounce..",
              "plain": "Determine if this projectile should bounce or not when it hits.\n \u003cp\u003e\n If a small fireball does not bounce it will set the target on fire.\n@return true if it should bounce."
            }
          },
          {
            "kind": "METHOD",
            "name": "getShooter()",
            "comment": {
              "body": "Retrieve the shooter of this projectile.",
              "tags": "Returns the \u003ca href\u003d\"org/bukkit/projectiles/ProjectileSource.html\" title\u003d\"interface in org.bukkit.projectiles\"\u003e\u003ccode\u003eProjectileSource\u003c/code\u003e\u003c/a\u003e that shot this projectile.",
              "plain": "Retrieve the shooter of this projectile.\n@return the {@link ProjectileSource} that shot this projectile"
            }
          },
          {
            "kind": "METHOD",
            "name": "setBounce(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "doesBounce"
              }
            ],
            "comment": {
              "body": "Set whether or not this projectile should bounce or not when it hits\n something.",
              "plain": "Set whether or not this projectile should bounce or not when it hits\n something.\n@param doesBounce whether or not it should bounce."
            }
          },
          {
            "kind": "METHOD",
            "name": "setShooter(org.bukkit.projectiles.ProjectileSource)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "source"
              }
            ],
            "comment": {
              "body": "Set the shooter of this projectile.",
              "plain": "Set the shooter of this projectile.\n@param source the {@link ProjectileSource} that shot this projectile"
            }
          }
        ],
        "comment": {
          "body": "Represents a shootable entity.",
          "plain": "Represents a shootable entity."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.Rabbit",
        "children": [
          {
            "kind": "METHOD",
            "name": "getRabbitType()",
            "comment": {
              "tags": "Returns The type of rabbit..",
              "plain": "@return The type of rabbit."
            }
          },
          {
            "kind": "ENUM",
            "name": "org.bukkit.entity.Rabbit.Type",
            "children": [
              {
                "kind": "ENUM_CONSTANT",
                "name": "BLACK",
                "comment": {
                  "body": "Black rabbit.",
                  "plain": "Black rabbit."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "BLACK_AND_WHITE",
                "comment": {
                  "body": "Black with white patches, or white with black patches?",
                  "plain": "Black with white patches, or white with black patches?"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "BROWN",
                "comment": {
                  "body": "Chocolate colored rabbit.",
                  "plain": "Chocolate colored rabbit."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "GOLD",
                "comment": {
                  "body": "Golden bunny.",
                  "plain": "Golden bunny."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "SALT_AND_PEPPER",
                "comment": {
                  "body": "Salt and pepper colored, whatever that means.",
                  "plain": "Salt and pepper colored, whatever that means."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "THE_KILLER_BUNNY",
                "comment": {
                  "body": "Rabbit with pure white fur, blood red horizontal eyes, and is hostile to players.",
                  "plain": "Rabbit with pure white fur, blood red horizontal eyes, and is hostile to players."
                }
              },
              {
                "kind": "CONSTRUCTOR",
                "name": "Type()"
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "WHITE",
                "comment": {
                  "body": "Pure white rabbit.",
                  "plain": "Pure white rabbit."
                }
              },
              {
                "kind": "METHOD",
                "name": "valueOf(java.lang.String)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "name"
                  }
                ]
              },
              {
                "kind": "METHOD",
                "name": "values()"
              }
            ],
            "comment": {
              "body": "Represents the various types a Rabbit might be.",
              "plain": "Represents the various types a Rabbit might be."
            }
          },
          {
            "kind": "METHOD",
            "name": "setRabbitType(org.bukkit.entity.Rabbit.Type)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "comment": {
              "plain": "@param type Sets the type of rabbit for this entity."
            }
          }
        ]
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.Sheep",
        "children": [
          {
            "kind": "METHOD",
            "name": "isSheared()",
            "comment": {
              "tags": "Returns Whether the sheep is sheared..",
              "plain": "@return Whether the sheep is sheared."
            }
          },
          {
            "kind": "METHOD",
            "name": "setSheared(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "flag"
              }
            ],
            "comment": {
              "plain": "@param flag Whether to shear the sheep"
            }
          }
        ],
        "comment": {
          "body": "Represents a Sheep.",
          "plain": "Represents a Sheep."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.Shulker"
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.ShulkerBullet",
        "children": [
          {
            "kind": "METHOD",
            "name": "getTarget()",
            "comment": {
              "body": "Retrieve the target of this bullet.",
              "tags": "Returns the targeted entity.",
              "plain": "Retrieve the target of this bullet.\n@return the targeted entity"
            }
          },
          {
            "kind": "METHOD",
            "name": "setTarget(org.bukkit.entity.Entity)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "target"
              }
            ],
            "comment": {
              "body": "Sets the target of this bullet",
              "plain": "Sets the target of this bullet\n@param target the entity to target"
            }
          }
        ]
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.Silverfish",
        "comment": {
          "body": "Represents a Silverfish.",
          "plain": "Represents a Silverfish."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.Sittable",
        "children": [
          {
            "kind": "METHOD",
            "name": "isSitting()",
            "comment": {
              "body": "Checks if this animal is sitting",
              "tags": "Returns true if sitting.",
              "plain": "Checks if this animal is sitting\n@return true if sitting"
            }
          },
          {
            "kind": "METHOD",
            "name": "setSitting(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "sitting"
              }
            ],
            "comment": {
              "body": "Sets if this animal is sitting. Will remove any path that the animal\n was following beforehand.",
              "plain": "Sets if this animal is sitting. Will remove any path that the animal\n was following beforehand.\n@param sitting true if sitting"
            }
          }
        ],
        "comment": {
          "body": "An animal that can sit still.",
          "plain": "An animal that can sit still."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.Skeleton",
        "children": [
          {
            "kind": "METHOD",
            "name": "getSkeletonType()",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Gets the current type of this skeleton.",
              "tags": "Returns Current type.",
              "plain": "Gets the current type of this skeleton.\n@return Current type\n@deprecated should check what class instance this is"
            }
          },
          {
            "kind": "ENUM",
            "name": "org.bukkit.entity.Skeleton.SkeletonType",
            "children": [
              {
                "kind": "ENUM_CONSTANT",
                "name": "NORMAL",
                "comment": {
                  "body": "Standard skeleton type.",
                  "plain": "Standard skeleton type."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "STRAY",
                "comment": {
                  "body": "Stray skeleton. Generally found in ice biomes. Shoots tipped arrows.",
                  "plain": "Stray skeleton. Generally found in ice biomes. Shoots tipped arrows."
                }
              },
              {
                "kind": "CONSTRUCTOR",
                "name": "SkeletonType()"
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "WITHER",
                "comment": {
                  "body": "Wither skeleton. Generally found in Nether fortresses.",
                  "plain": "Wither skeleton. Generally found in Nether fortresses."
                }
              },
              {
                "kind": "METHOD",
                "name": "valueOf(java.lang.String)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "name"
                  }
                ]
              },
              {
                "kind": "METHOD",
                "name": "values()"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            }
          },
          {
            "kind": "METHOD",
            "name": "setSkeletonType(org.bukkit.entity.Skeleton.SkeletonType)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type Type to set\n@deprecated Must spawn a new subtype variant"
            }
          }
        ],
        "comment": {
          "body": "Represents a Skeleton.",
          "plain": "Represents a Skeleton."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.SkeletonHorse",
        "comment": {
          "body": "Represents a SkeletonHorse - variant of \u003ca href\u003d\"org/bukkit/entity/AbstractHorse.html\" title\u003d\"interface in org.bukkit.entity\"\u003e\u003ccode\u003eAbstractHorse\u003c/code\u003e\u003c/a\u003e.",
          "plain": "Represents a SkeletonHorse - variant of {@link AbstractHorse}."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.Slime",
        "children": [
          {
            "kind": "METHOD",
            "name": "getSize()",
            "comment": {
              "tags": "Returns The size of the slime.",
              "plain": "@return The size of the slime"
            }
          },
          {
            "kind": "METHOD",
            "name": "getTarget()",
            "comment": {
              "body": "Get the \u003ca href\u003d\"org/bukkit/entity/LivingEntity.html\" title\u003d\"interface in org.bukkit.entity\"\u003e\u003ccode\u003eLivingEntity\u003c/code\u003e\u003c/a\u003e this slime is currently targeting.",
              "tags": "Returns the current target, or null if no target exists..",
              "plain": "Get the {@link LivingEntity} this slime is currently targeting.\n@return the current target, or null if no target exists."
            }
          },
          {
            "kind": "METHOD",
            "name": "setSize(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "sz"
              }
            ],
            "comment": {
              "plain": "@param sz The new size of the slime."
            }
          },
          {
            "kind": "METHOD",
            "name": "setTarget(org.bukkit.entity.LivingEntity)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "target"
              }
            ],
            "comment": {
              "body": "Set the \u003ca href\u003d\"org/bukkit/entity/LivingEntity.html\" title\u003d\"interface in org.bukkit.entity\"\u003e\u003ccode\u003eLivingEntity\u003c/code\u003e\u003c/a\u003e target for this slime. Set to null to clear\n the target.",
              "plain": "Set the {@link LivingEntity} target for this slime. Set to null to clear\n the target.\n@param target the entity to target"
            }
          }
        ],
        "comment": {
          "body": "Represents a Slime.",
          "plain": "Represents a Slime."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.SmallFireball",
        "comment": {
          "body": "Represents a small \u003ca href\u003d\"org/bukkit/entity/Fireball.html\" title\u003d\"interface in org.bukkit.entity\"\u003e\u003ccode\u003eFireball\u003c/code\u003e\u003c/a\u003e",
          "plain": "Represents a small {@link Fireball}"
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.Snowball",
        "comment": {
          "body": "Represents a snowball.",
          "plain": "Represents a snowball."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.Snowman",
        "children": [
          {
            "kind": "METHOD",
            "name": "isDerp()",
            "comment": {
              "body": "Gets whether this snowman is in \"derp mode\", meaning it is not wearing a\n pumpkin.",
              "tags": "Returns True if the snowman is bald, false if it is wearing a pumpkin.",
              "plain": "Gets whether this snowman is in \"derp mode\", meaning it is not wearing a\n pumpkin.\n@return True if the snowman is bald, false if it is wearing a pumpkin"
            }
          },
          {
            "kind": "METHOD",
            "name": "setDerp(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "derpMode"
              }
            ],
            "comment": {
              "body": "Sets whether this snowman is in \"derp mode\", meaning it is not wearing a\n pumpkin. NOTE: This value is not persisted to disk and will therefore\n reset when the chunk is reloaded.",
              "plain": "Sets whether this snowman is in \"derp mode\", meaning it is not wearing a\n pumpkin. NOTE: This value is not persisted to disk and will therefore\n reset when the chunk is reloaded.\n@param derpMode True to remove the pumpkin, false to add a pumpkin"
            }
          }
        ],
        "comment": {
          "body": "Represents a snowman entity",
          "plain": "Represents a snowman entity"
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.SpectralArrow",
        "children": [
          {
            "kind": "METHOD",
            "name": "getGlowingTicks()",
            "comment": {
              "body": "Returns the amount of time that this arrow will apply\n the glowing effect for.",
              "tags": "Returns the glowing effect ticks.",
              "plain": "Returns the amount of time that this arrow will apply\n the glowing effect for.\n@return the glowing effect ticks"
            }
          },
          {
            "kind": "METHOD",
            "name": "setGlowingTicks(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "duration"
              }
            ],
            "comment": {
              "body": "Sets the amount of time to apply the glowing effect for.",
              "plain": "Sets the amount of time to apply the glowing effect for.\n@param duration the glowing effect ticks"
            }
          }
        ],
        "comment": {
          "body": "Represents a spectral arrow.",
          "plain": "Represents a spectral arrow."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.Spellcaster",
        "children": [
          {
            "kind": "METHOD",
            "name": "getSpell()",
            "comment": {
              "body": "Gets the \u003ca href\u003d\"org/bukkit/entity/Spellcaster.Spell.html\" title\u003d\"enum in org.bukkit.entity\"\u003e\u003ccode\u003eSpellcaster.Spell\u003c/code\u003e\u003c/a\u003e the entity is currently using.",
              "tags": "Returns the current spell.",
              "plain": "Gets the {@link Spell} the entity is currently using.\n@return the current spell"
            }
          },
          {
            "kind": "ENUM",
            "name": "org.bukkit.entity.Spellcaster.Spell",
            "children": [
              {
                "kind": "ENUM_CONSTANT",
                "name": "BLINDNESS",
                "comment": {
                  "body": "The spell that makes the target blind.",
                  "plain": "The spell that makes the target blind."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "DISAPPEAR",
                "comment": {
                  "body": "The spell that makes the casting entity invisible.",
                  "plain": "The spell that makes the casting entity invisible."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "FANGS",
                "comment": {
                  "body": "The spell that summons Fangs.",
                  "plain": "The spell that summons Fangs."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "NONE",
                "comment": {
                  "body": "No spell is being used..",
                  "plain": "No spell is being used.."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "SUMMON_VEX",
                "comment": {
                  "body": "The spell that summons Vexes.",
                  "plain": "The spell that summons Vexes."
                }
              },
              {
                "kind": "CONSTRUCTOR",
                "name": "Spell()"
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "WOLOLO",
                "comment": {
                  "body": "The \"wololo\" spell.",
                  "plain": "The \"wololo\" spell."
                }
              },
              {
                "kind": "METHOD",
                "name": "valueOf(java.lang.String)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "name"
                  }
                ]
              },
              {
                "kind": "METHOD",
                "name": "values()"
              }
            ],
            "comment": {
              "body": "Represents the current spell the entity is using.",
              "plain": "Represents the current spell the entity is using."
            }
          },
          {
            "kind": "METHOD",
            "name": "setSpell(org.bukkit.entity.Spellcaster.Spell)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "spell"
              }
            ],
            "comment": {
              "body": "Sets the \u003ca href\u003d\"org/bukkit/entity/Spellcaster.Spell.html\" title\u003d\"enum in org.bukkit.entity\"\u003e\u003ccode\u003eSpellcaster.Spell\u003c/code\u003e\u003c/a\u003e the entity is currently using.",
              "plain": "Sets the {@link Spell} the entity is currently using.\n@param spell the spell the entity should be using"
            }
          }
        ],
        "comment": {
          "body": "Represents a spell casting \"Illager\".",
          "plain": "Represents a spell casting \"Illager\"."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.Spider",
        "comment": {
          "body": "Represents a Spider.",
          "plain": "Represents a Spider."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.SplashPotion",
        "comment": {
          "body": "Represents a thrown splash potion bottle",
          "plain": "Represents a thrown splash potion bottle"
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.Squid",
        "comment": {
          "body": "Represents a Squid.",
          "plain": "Represents a Squid."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.Stray",
        "comment": {
          "body": "Represents a Stray - variant of \u003ca href\u003d\"org/bukkit/entity/Skeleton.html\" title\u003d\"interface in org.bukkit.entity\"\u003e\u003ccode\u003eSkeleton\u003c/code\u003e\u003c/a\u003e.",
          "plain": "Represents a Stray - variant of {@link Skeleton}."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.TNTPrimed",
        "children": [
          {
            "kind": "METHOD",
            "name": "getFuseTicks()",
            "comment": {
              "body": "Retrieve the number of ticks until the explosion of this TNTPrimed\n entity",
              "tags": "Returns the number of ticks until this TNTPrimed explodes.",
              "plain": "Retrieve the number of ticks until the explosion of this TNTPrimed\n entity\n@return the number of ticks until this TNTPrimed explodes"
            }
          },
          {
            "kind": "METHOD",
            "name": "getSource()",
            "comment": {
              "body": "Gets the source of this primed TNT. The source is the entity\n responsible for the creation of this primed TNT. (I.E. player ignites\n TNT with flint and steel.) Take note that this can be null if there is\n no suitable source. (created by the \u003ca href\u003d\"org/bukkit/World.html#spawn(org.bukkit.Location,java.lang.Class)\"\u003e\u003ccode\u003eWorld.spawn(Location, Class)\u003c/code\u003e\u003c/a\u003e method, for example.)\n \u003cp\u003e\n The source will become null if the chunk this primed TNT is in is\n unloaded then reloaded. The source entity may be invalid if for example\n it has since died or been unloaded. Callers should check\n \u003ca href\u003d\"org/bukkit/entity/Entity.html#isValid()\"\u003e\u003ccode\u003eEntity.isValid()\u003c/code\u003e\u003c/a\u003e.",
              "tags": "Returns the source of this primed TNT.",
              "plain": "Gets the source of this primed TNT. The source is the entity\n responsible for the creation of this primed TNT. (I.E. player ignites\n TNT with flint and steel.) Take note that this can be null if there is\n no suitable source. (created by the {@link org.bukkit.World#spawn(Location, Class)} method, for example.)\n \u003cp\u003e\n The source will become null if the chunk this primed TNT is in is\n unloaded then reloaded. The source entity may be invalid if for example\n it has since died or been unloaded. Callers should check\n {@link Entity#isValid()}.\n@return the source of this primed TNT"
            }
          },
          {
            "kind": "METHOD",
            "name": "getSourceLoc()",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Gets the source block location of the TNTPrimed",
              "tags": "Returns the source block location the TNTPrimed was spawned from.",
              "plain": "Gets the source block location of the TNTPrimed\n@return the source block location the TNTPrimed was spawned from\n@deprecated replaced by {@link Entity#getOrigin()}"
            }
          },
          {
            "kind": "METHOD",
            "name": "setFuseTicks(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "fuseTicks"
              }
            ],
            "comment": {
              "body": "Set the number of ticks until the TNT blows up after being primed.",
              "plain": "Set the number of ticks until the TNT blows up after being primed.\n@param fuseTicks The fuse ticks"
            }
          }
        ],
        "comment": {
          "body": "Represents a Primed TNT.",
          "plain": "Represents a Primed TNT."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.Tameable",
        "children": [
          {
            "kind": "METHOD",
            "name": "getOwner()",
            "comment": {
              "body": "Gets the current owning AnimalTamer",
              "tags": "Returns the owning AnimalTamer, or null if not owned.",
              "plain": "Gets the current owning AnimalTamer\n@see #getOwnerUniqueId() Recommended to use UUID version instead of this for performance.\n This method will cause OfflinePlayer to be loaded from disk if the owner is not online.\n@return the owning AnimalTamer, or null if not owned"
            }
          },
          {
            "kind": "METHOD",
            "name": "getOwnerUniqueId()",
            "comment": {
              "body": "Gets the owners UUID",
              "tags": "Returns the owners UUID, or null if not owned.",
              "plain": "Gets the owners UUID\n@return the owners UUID, or null if not owned"
            }
          },
          {
            "kind": "METHOD",
            "name": "isTamed()",
            "comment": {
              "body": "Check if this is tamed\n \u003cp\u003e\n If something is tamed then a player can not tame it through normal\n methods, even if it does not belong to anyone in particular.",
              "tags": "Returns true if this has been tamed.",
              "plain": "Check if this is tamed\n \u003cp\u003e\n If something is tamed then a player can not tame it through normal\n methods, even if it does not belong to anyone in particular.\n@return true if this has been tamed"
            }
          },
          {
            "kind": "METHOD",
            "name": "setOwner(org.bukkit.entity.AnimalTamer)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "tamer"
              }
            ],
            "comment": {
              "body": "Set this to be owned by given AnimalTamer.\n \u003cp\u003e\n If the owner is not null, this will be tamed and will have any current\n path it is following removed. If the owner is set to null, this will be\n untamed, and the current owner removed.",
              "plain": "Set this to be owned by given AnimalTamer.\n \u003cp\u003e\n If the owner is not null, this will be tamed and will have any current\n path it is following removed. If the owner is set to null, this will be\n untamed, and the current owner removed.\n@param tamer the AnimalTamer who should own this"
            }
          },
          {
            "kind": "METHOD",
            "name": "setTamed(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "tame"
              }
            ],
            "comment": {
              "body": "Sets if this has been tamed. Not necessary if the method setOwner has\n been used, as it tames automatically.\n \u003cp\u003e\n If something is tamed then a player can not tame it through normal\n methods, even if it does not belong to anyone in particular.",
              "plain": "Sets if this has been tamed. Not necessary if the method setOwner has\n been used, as it tames automatically.\n \u003cp\u003e\n If something is tamed then a player can not tame it through normal\n methods, even if it does not belong to anyone in particular.\n@param tame true if tame"
            }
          }
        ]
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.ThrownExpBottle",
        "comment": {
          "body": "Represents a thrown Experience bottle.",
          "plain": "Represents a thrown Experience bottle."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.ThrownPotion",
        "children": [
          {
            "kind": "METHOD",
            "name": "getEffects()",
            "comment": {
              "body": "Returns the effects that are applied by this potion.",
              "tags": "Returns The potion effects.",
              "plain": "Returns the effects that are applied by this potion.\n@return The potion effects"
            }
          },
          {
            "kind": "METHOD",
            "name": "getItem()",
            "comment": {
              "body": "Returns a copy of the ItemStack for this thrown potion.\n \u003cp\u003e\n Altering this copy will not alter the thrown potion directly. If you want\n to alter the thrown potion, you must use the \u003ca href\u003d\"org/bukkit/entity/ThrownPotion.html#setItem(org.bukkit.inventory.ItemStack)\"\u003e\u003ccode\u003esetItemStack\u003c/code\u003e\u003c/a\u003e method.",
              "tags": "Returns A copy of the ItemStack for this thrown potion..",
              "plain": "Returns a copy of the ItemStack for this thrown potion.\n \u003cp\u003e\n Altering this copy will not alter the thrown potion directly. If you want\n to alter the thrown potion, you must use the {@link #setItem(ItemStack) setItemStack} method.\n@return A copy of the ItemStack for this thrown potion."
            }
          },
          {
            "kind": "METHOD",
            "name": "setItem(org.bukkit.inventory.ItemStack)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "item"
              }
            ],
            "comment": {
              "body": "Set the ItemStack for this thrown potion.\n \u003cp\u003e\n The ItemStack must be of type \u003ca href\u003d\"org/bukkit/Material.html#SPLASH_POTION\"\u003e\u003ccode\u003eMaterial.SPLASH_POTION\u003c/code\u003e\u003c/a\u003e\n or \u003ca href\u003d\"org/bukkit/Material.html#LINGERING_POTION\"\u003e\u003ccode\u003eMaterial.LINGERING_POTION\u003c/code\u003e\u003c/a\u003e, otherwise an exception\n is thrown.",
              "plain": "Set the ItemStack for this thrown potion.\n \u003cp\u003e\n The ItemStack must be of type {@link org.bukkit.Material#SPLASH_POTION}\n or {@link org.bukkit.Material#LINGERING_POTION}, otherwise an exception\n is thrown.\n@param item New ItemStack"
            }
          }
        ],
        "comment": {
          "body": "Represents a thrown potion bottle",
          "plain": "Represents a thrown potion bottle"
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.TippedArrow",
        "children": [
          {
            "kind": "METHOD",
            "name": "addCustomEffect(org.bukkit.potion.PotionEffect,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "effect"
              },
              {
                "kind": "PARAMETER",
                "name": "overwrite"
              }
            ],
            "comment": {
              "body": "Adds a custom potion effect to this arrow.",
              "tags": "Returns true if the effect was added as a result of this call.",
              "plain": "Adds a custom potion effect to this arrow.\n@param effect the potion effect to add\n@param overwrite true if any existing effect of the same type should be\n overwritten\n@return true if the effect was added as a result of this call"
            }
          },
          {
            "kind": "METHOD",
            "name": "clearCustomEffects()",
            "comment": {
              "body": "Removes all custom potion effects from this arrow.",
              "plain": "Removes all custom potion effects from this arrow.\n@throws IllegalArgumentException if this operation would leave the Arrow\n in a state with no Custom Effects and PotionType.UNCRAFTABLE"
            }
          },
          {
            "kind": "METHOD",
            "name": "getBasePotionData()",
            "comment": {
              "body": "Returns the potion data about the base potion",
              "tags": "Returns a PotionData object.",
              "plain": "Returns the potion data about the base potion\n@return a PotionData object"
            }
          },
          {
            "kind": "METHOD",
            "name": "getColor()",
            "comment": {
              "body": "Gets the color of this arrow.",
              "tags": "Returns arrow color.",
              "plain": "Gets the color of this arrow.\n@return arrow color"
            }
          },
          {
            "kind": "METHOD",
            "name": "getCustomEffects()",
            "comment": {
              "body": "Gets an immutable list containing all custom potion effects applied to\n this arrow.\n \u003cp\u003e\n Plugins should check that hasCustomEffects() returns true before calling\n this method.",
              "tags": "Returns the immutable list of custom potion effects.",
              "plain": "Gets an immutable list containing all custom potion effects applied to\n this arrow.\n \u003cp\u003e\n Plugins should check that hasCustomEffects() returns true before calling\n this method.\n@return the immutable list of custom potion effects"
            }
          },
          {
            "kind": "METHOD",
            "name": "hasCustomEffect(org.bukkit.potion.PotionEffectType)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "comment": {
              "body": "Checks for a specific custom potion effect type on this arrow.",
              "tags": "Returns true if the potion has this effect.",
              "plain": "Checks for a specific custom potion effect type on this arrow.\n@param type the potion effect type to check for\n@return true if the potion has this effect"
            }
          },
          {
            "kind": "METHOD",
            "name": "hasCustomEffects()",
            "comment": {
              "body": "Checks for the presence of custom potion effects.",
              "tags": "Returns true if custom potion effects are applied.",
              "plain": "Checks for the presence of custom potion effects.\n@return true if custom potion effects are applied"
            }
          },
          {
            "kind": "METHOD",
            "name": "removeCustomEffect(org.bukkit.potion.PotionEffectType)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "comment": {
              "body": "Removes a custom potion effect from this arrow.",
              "tags": "Returns true if the an effect was removed as a result of this call.",
              "plain": "Removes a custom potion effect from this arrow.\n@param type the potion effect type to remove\n@return true if the an effect was removed as a result of this call\n@throws IllegalArgumentException if this operation would leave the Arrow\n in a state with no Custom Effects and PotionType.UNCRAFTABLE"
            }
          },
          {
            "kind": "METHOD",
            "name": "setBasePotionData(org.bukkit.potion.PotionData)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              }
            ],
            "comment": {
              "body": "Sets the underlying potion data",
              "plain": "Sets the underlying potion data\n@param data PotionData to set the base potion state to"
            }
          },
          {
            "kind": "METHOD",
            "name": "setColor(org.bukkit.Color)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "color"
              }
            ],
            "comment": {
              "body": "Sets the color of this arrow. Will be applied as a tint to its particles.",
              "plain": "Sets the color of this arrow. Will be applied as a tint to its particles.\n@param color arrow color"
            }
          }
        ]
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.Vehicle",
        "children": [
          {
            "kind": "METHOD",
            "name": "getVelocity()",
            "comment": {
              "body": "Gets the vehicle\u0027s velocity.",
              "tags": "Returns velocity vector.",
              "plain": "Gets the vehicle\u0027s velocity.\n@return velocity vector"
            }
          },
          {
            "kind": "METHOD",
            "name": "setVelocity(org.bukkit.util.Vector)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "vel"
              }
            ],
            "comment": {
              "body": "Sets the vehicle\u0027s velocity.",
              "plain": "Sets the vehicle\u0027s velocity.\n@param vel velocity vector"
            }
          }
        ],
        "comment": {
          "body": "Represents a vehicle entity.",
          "plain": "Represents a vehicle entity."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.Vex",
        "children": [
          {
            "kind": "METHOD",
            "name": "getOwner()",
            "comment": {
              "tags": "Returns What Entity (most likely an Evoker, but not guaranteed) summoned this Vex.",
              "plain": "@return What Entity (most likely an Evoker, but not guaranteed) summoned this Vex"
            }
          }
        ],
        "comment": {
          "body": "Represents a Vex.",
          "plain": "Represents a Vex."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.Villager",
        "children": [
          {
            "kind": "METHOD",
            "name": "getCareer()",
            "comment": {
              "body": "Get the current \u003ca href\u003d\"org/bukkit/entity/Villager.Career.html\" title\u003d\"enum in org.bukkit.entity\"\u003e\u003ccode\u003eVillager.Career\u003c/code\u003e\u003c/a\u003e for this Villager.",
              "tags": "Returns the \u003ca href\u003d\"org/bukkit/entity/Villager.Career.html\" title\u003d\"enum in org.bukkit.entity\"\u003e\u003ccode\u003eVillager.Career\u003c/code\u003e\u003c/a\u003e.",
              "plain": "Get the current {@link Career} for this Villager.\n@return the {@link Career}"
            }
          },
          {
            "kind": "METHOD",
            "name": "getInventory()",
            "comment": {
              "body": "Gets this villager\u0027s inventory.\n \u003cbr\u003e\n Note that this inventory is not the Merchant inventory, rather, it is the\n items that a villager might have collected (from harvesting crops, etc.)\n\n Get the object\u0027s inventory.",
              "plain": "Gets this villager\u0027s inventory.\n \u003cbr\u003e\n Note that this inventory is not the Merchant inventory, rather, it is the\n items that a villager might have collected (from harvesting crops, etc.)\n\n {@inheritDoc}"
            }
          },
          {
            "kind": "METHOD",
            "name": "getProfession()",
            "comment": {
              "body": "Gets the current profession of this villager.",
              "tags": "Returns Current profession..",
              "plain": "Gets the current profession of this villager.\n@return Current profession."
            }
          },
          {
            "kind": "METHOD",
            "name": "getRiches()",
            "comment": {
              "body": "Gets this villager\u0027s riches, the number of emeralds this villager has\n been given.",
              "tags": "Returns the villager\u0027s riches.",
              "plain": "Gets this villager\u0027s riches, the number of emeralds this villager has\n been given.\n@return the villager\u0027s riches"
            }
          },
          {
            "kind": "ENUM",
            "name": "org.bukkit.entity.Villager.Career",
            "children": [
              {
                "kind": "ENUM_CONSTANT",
                "name": "ARMORER",
                "comment": {
                  "body": "Armorers primarily trade for iron armor, chainmail armor, and\n sometimes diamond armor.",
                  "plain": "Armorers primarily trade for iron armor, chainmail armor, and\n sometimes diamond armor."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "BUTCHER",
                "comment": {
                  "body": "Butchers primarily trade for raw and cooked food.",
                  "plain": "Butchers primarily trade for raw and cooked food."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "CARTOGRAPHER",
                "comment": {
                  "body": "Cartographers primarily trade for explorer maps and some paper.",
                  "plain": "Cartographers primarily trade for explorer maps and some paper."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "CLERIC",
                "comment": {
                  "body": "Clerics primarily trade for rotten flesh, gold ingot, redstone,\n lapis, ender pearl, glowstone, and bottle o\u0027 enchanting.",
                  "plain": "Clerics primarily trade for rotten flesh, gold ingot, redstone,\n lapis, ender pearl, glowstone, and bottle o\u0027 enchanting."
                }
              },
              {
                "kind": "CONSTRUCTOR",
                "name": "Career(org.bukkit.entity.Villager.Profession)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "profession"
                  }
                ]
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "FARMER",
                "comment": {
                  "body": "Farmers primarily trade for food-related items.",
                  "plain": "Farmers primarily trade for food-related items."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "FISHERMAN",
                "comment": {
                  "body": "Fisherman primarily trade for fish, as well as possibly selling\n string and/or coal.",
                  "plain": "Fisherman primarily trade for fish, as well as possibly selling\n string and/or coal."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "FLETCHER",
                "comment": {
                  "body": "Fletchers primarily trade for string, bows, and arrows.",
                  "plain": "Fletchers primarily trade for string, bows, and arrows."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "LEATHERWORKER",
                "comment": {
                  "body": "Leatherworkers primarily trade for leather, and leather armor, as\n well as saddles.",
                  "plain": "Leatherworkers primarily trade for leather, and leather armor, as\n well as saddles."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "LIBRARIAN",
                "comment": {
                  "body": "Librarians primarily trade for paper, books, and enchanted books.",
                  "plain": "Librarians primarily trade for paper, books, and enchanted books."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "NITWIT",
                "comment": {
                  "body": "Nitwit villagers do not do anything. They do not have any trades by\n default.",
                  "plain": "Nitwit villagers do not do anything. They do not have any trades by\n default."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "SHEPHERD",
                "comment": {
                  "body": "Shepherds primarily trade for wool items, and shears.",
                  "plain": "Shepherds primarily trade for wool items, and shears."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "TOOL_SMITH",
                "comment": {
                  "body": "Tool smiths primarily trade for iron and diamond tools.",
                  "plain": "Tool smiths primarily trade for iron and diamond tools."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "WEAPON_SMITH",
                "comment": {
                  "body": "Weapon smiths primarily trade for iron and diamond weapons, sometimes\n enchanted.",
                  "plain": "Weapon smiths primarily trade for iron and diamond weapons, sometimes\n enchanted."
                }
              },
              {
                "kind": "FIELD",
                "name": "careerMap"
              },
              {
                "kind": "METHOD",
                "name": "getCareers(org.bukkit.entity.Villager.Profession)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "profession"
                  }
                ],
                "comment": {
                  "body": "Get an immutable list of \u003ca href\u003d\"org/bukkit/entity/Villager.Career.html\" title\u003d\"enum in org.bukkit.entity\"\u003e\u003ccode\u003eVillager.Career\u003c/code\u003e\u003c/a\u003es that can be used with a\n given \u003ca href\u003d\"org/bukkit/entity/Villager.Profession.html\" title\u003d\"enum in org.bukkit.entity\"\u003e\u003ccode\u003eVillager.Profession\u003c/code\u003e\u003c/a\u003e",
                  "tags": "Returns an immutable list of Careers that can be used by a\n profession, or an empty map if the profession was not found.",
                  "plain": "Get an immutable list of {@link Career}s that can be used with a\n given {@link Profession}\n@param profession the profession to get careers for\n@return an immutable list of Careers that can be used by a\n profession, or an empty map if the profession was not found"
                }
              },
              {
                "kind": "METHOD",
                "name": "getProfession()",
                "comment": {
                  "body": "Get the \u003ca href\u003d\"org/bukkit/entity/Villager.Profession.html\" title\u003d\"enum in org.bukkit.entity\"\u003e\u003ccode\u003eVillager.Profession\u003c/code\u003e\u003c/a\u003e this \u003ca href\u003d\"org/bukkit/entity/Villager.Career.html\" title\u003d\"enum in org.bukkit.entity\"\u003e\u003ccode\u003eVillager.Career\u003c/code\u003e\u003c/a\u003e belongs to.",
                  "tags": "Returns the \u003ca href\u003d\"org/bukkit/entity/Villager.Profession.html\" title\u003d\"enum in org.bukkit.entity\"\u003e\u003ccode\u003eVillager.Profession\u003c/code\u003e\u003c/a\u003e..",
                  "plain": "Get the {@link Profession} this {@link Career} belongs to.\n@return the {@link Profession}."
                }
              },
              {
                "kind": "FIELD",
                "name": "profession"
              },
              {
                "kind": "METHOD",
                "name": "valueOf(java.lang.String)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "name"
                  }
                ]
              },
              {
                "kind": "METHOD",
                "name": "values()"
              }
            ],
            "comment": {
              "body": "The Career of this Villager.\n Each \u003ca href\u003d\"org/bukkit/entity/Villager.Profession.html\" title\u003d\"enum in org.bukkit.entity\"\u003e\u003ccode\u003eVillager.Profession\u003c/code\u003e\u003c/a\u003e has a set of careers it is applicable to. Each\n career dictates the trading options that are generated.",
              "plain": "The Career of this Villager.\n Each {@link Profession} has a set of careers it is applicable to. Each\n career dictates the trading options that are generated."
            }
          },
          {
            "kind": "ENUM",
            "name": "org.bukkit.entity.Villager.Profession",
            "children": [
              {
                "kind": "ENUM_CONSTANT",
                "name": "BLACKSMITH",
                "comment": {
                  "body": "Blacksmith profession. Wears a black apron.",
                  "plain": "Blacksmith profession. Wears a black apron."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "BUTCHER",
                "comment": {
                  "body": "Butcher profession. Wears a white apron.",
                  "plain": "Butcher profession. Wears a white apron."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "FARMER",
                "comment": {
                  "body": "Farmer profession. Wears a brown robe.",
                  "plain": "Farmer profession. Wears a brown robe."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "HUSK",
                "deprecated": {
                  "deprecated": "true"
                },
                "comment": {
                  "body": "Husk. \u003cb\u003eReserved for Zombies\u003c/b\u003e",
                  "plain": "Husk. \u003cb\u003eReserved for Zombies\u003c/b\u003e\n@deprecated Unused"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "LIBRARIAN",
                "comment": {
                  "body": "Librarian profession. Wears a white robe.",
                  "plain": "Librarian profession. Wears a white robe."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "NITWIT",
                "comment": {
                  "body": "Nitwit profession. Wears a green apron, cannot trade.",
                  "plain": "Nitwit profession. Wears a green apron, cannot trade."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "NORMAL",
                "deprecated": {
                  "deprecated": "true"
                },
                "comment": {
                  "body": "Normal. \u003cb\u003eReserved for Zombies.\u003c/b\u003e",
                  "plain": "Normal. \u003cb\u003eReserved for Zombies.\u003c/b\u003e\n@deprecated Unused"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "PRIEST",
                "comment": {
                  "body": "Priest profession. Wears a purple robe.",
                  "plain": "Priest profession. Wears a purple robe."
                }
              },
              {
                "kind": "CONSTRUCTOR",
                "name": "Profession(boolean)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "zombie"
                  }
                ]
              },
              {
                "kind": "METHOD",
                "name": "getCareers()",
                "comment": {
                  "body": "Get an immutable list of \u003ca href\u003d\"org/bukkit/entity/Villager.Career.html\" title\u003d\"enum in org.bukkit.entity\"\u003e\u003ccode\u003eVillager.Career\u003c/code\u003e\u003c/a\u003e belonging to this Profession.",
                  "tags": "Returns an immutable list of careers for this profession, or an empty\n map if this Profession has no careers..",
                  "plain": "Get an immutable list of {@link Career} belonging to this Profession.\n@return an immutable list of careers for this profession, or an empty\n map if this Profession has no careers."
                }
              },
              {
                "kind": "METHOD",
                "name": "isZombie()",
                "deprecated": {
                  "deprecated": "true"
                },
                "comment": {
                  "body": "Returns if this profession can only be used by zombies.",
                  "tags": "Returns zombie profession status.",
                  "plain": "Returns if this profession can only be used by zombies.\n@return zombie profession status\n@deprecated Unused"
                }
              },
              {
                "kind": "METHOD",
                "name": "valueOf(java.lang.String)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "name"
                  }
                ]
              },
              {
                "kind": "METHOD",
                "name": "values()"
              },
              {
                "kind": "FIELD",
                "name": "zombie"
              }
            ],
            "comment": {
              "body": "Represents the various different Villager professions there may be.\n Villagers have different trading options depending on their profession,",
              "plain": "Represents the various different Villager professions there may be.\n Villagers have different trading options depending on their profession,"
            }
          },
          {
            "kind": "METHOD",
            "name": "setCareer(org.bukkit.entity.Villager.Career)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "career"
              }
            ],
            "comment": {
              "body": "Set the new \u003ca href\u003d\"org/bukkit/entity/Villager.Career.html\" title\u003d\"enum in org.bukkit.entity\"\u003e\u003ccode\u003eVillager.Career\u003c/code\u003e\u003c/a\u003e for this Villager.\n This method will reset the villager\u0027s trades to the new career.",
              "plain": "Set the new {@link Career} for this Villager.\n This method will reset the villager\u0027s trades to the new career.\n@param career the new career, or null to clear the career to a random one\n@throws IllegalArgumentException when the new {@link Career} cannot be\n used with this Villager\u0027s current {@link Profession}."
            }
          },
          {
            "kind": "METHOD",
            "name": "setCareer(org.bukkit.entity.Villager.Career,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "career"
              },
              {
                "kind": "PARAMETER",
                "name": "resetTrades"
              }
            ],
            "comment": {
              "body": "Set the new \u003ca href\u003d\"org/bukkit/entity/Villager.Career.html\" title\u003d\"enum in org.bukkit.entity\"\u003e\u003ccode\u003eVillager.Career\u003c/code\u003e\u003c/a\u003e for this Villager.",
              "plain": "Set the new {@link Career} for this Villager.\n@param career the new career, or null to clear the career to a random one\n@param resetTrades true to reset this Villager\u0027s trades to the new\n career\u0027s (if any)\n@throws IllegalArgumentException when the new {@link Career} cannot be\n used with this Villager\u0027s current {@link Profession}."
            }
          },
          {
            "kind": "METHOD",
            "name": "setProfession(org.bukkit.entity.Villager.Profession)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "profession"
              }
            ],
            "comment": {
              "body": "Sets the new profession of this villager.",
              "plain": "Sets the new profession of this villager.\n@param profession New profession."
            }
          },
          {
            "kind": "METHOD",
            "name": "setRiches(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "riches"
              }
            ],
            "comment": {
              "body": "Sets this villager\u0027s riches.",
              "plain": "Sets this villager\u0027s riches.\n@see Villager#getRiches()\n@param riches the new riches"
            }
          }
        ],
        "comment": {
          "body": "Represents a villager NPC",
          "plain": "Represents a villager NPC"
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.Vindicator",
        "comment": {
          "body": "Represents a Vindicator.",
          "plain": "Represents a Vindicator."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.WaterMob",
        "comment": {
          "body": "Represents a Water Mob",
          "plain": "Represents a Water Mob"
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.Weather",
        "comment": {
          "body": "Represents a Weather related entity, such as a storm",
          "plain": "Represents a Weather related entity, such as a storm"
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.Witch",
        "comment": {
          "body": "Represents a Witch",
          "plain": "Represents a Witch"
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.Wither",
        "comment": {
          "body": "Represents a Wither boss",
          "plain": "Represents a Wither boss"
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.WitherSkeleton",
        "comment": {
          "body": "Represents a WitherSkeleton - variant of \u003ca href\u003d\"org/bukkit/entity/Skeleton.html\" title\u003d\"interface in org.bukkit.entity\"\u003e\u003ccode\u003eSkeleton\u003c/code\u003e\u003c/a\u003e.",
          "plain": "Represents a WitherSkeleton - variant of {@link Skeleton}."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.WitherSkull",
        "children": [
          {
            "kind": "METHOD",
            "name": "isCharged()",
            "comment": {
              "body": "Gets whether or not the wither skull is charged.",
              "tags": "Returns whether the wither skull is charged.",
              "plain": "Gets whether or not the wither skull is charged.\n@return whether the wither skull is charged"
            }
          },
          {
            "kind": "METHOD",
            "name": "setCharged(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "charged"
              }
            ],
            "comment": {
              "body": "Sets the charged status of the wither skull.",
              "plain": "Sets the charged status of the wither skull.\n@param charged whether it should be charged"
            }
          }
        ],
        "comment": {
          "body": "Represents a wither skull \u003ca href\u003d\"org/bukkit/entity/Fireball.html\" title\u003d\"interface in org.bukkit.entity\"\u003e\u003ccode\u003eFireball\u003c/code\u003e\u003c/a\u003e.",
          "plain": "Represents a wither skull {@link Fireball}."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.Wolf",
        "children": [
          {
            "kind": "METHOD",
            "name": "getCollarColor()",
            "comment": {
              "body": "Get the collar color of this wolf",
              "tags": "Returns the color of the collar.",
              "plain": "Get the collar color of this wolf\n@return the color of the collar"
            }
          },
          {
            "kind": "METHOD",
            "name": "isAngry()",
            "comment": {
              "body": "Checks if this wolf is angry",
              "tags": "Returns Anger true if angry.",
              "plain": "Checks if this wolf is angry\n@return Anger true if angry"
            }
          },
          {
            "kind": "METHOD",
            "name": "setAngry(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "angry"
              }
            ],
            "comment": {
              "body": "Sets the anger of this wolf.\n \u003cp\u003e\n An angry wolf can not be fed or tamed, and will actively look for\n targets to attack.",
              "plain": "Sets the anger of this wolf.\n \u003cp\u003e\n An angry wolf can not be fed or tamed, and will actively look for\n targets to attack.\n@param angry true if angry"
            }
          },
          {
            "kind": "METHOD",
            "name": "setCollarColor(org.bukkit.DyeColor)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "color"
              }
            ],
            "comment": {
              "body": "Set the collar color of this wolf",
              "plain": "Set the collar color of this wolf\n@param color the color to apply"
            }
          }
        ],
        "comment": {
          "body": "Represents a Wolf",
          "plain": "Represents a Wolf"
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.Zombie",
        "children": [
          {
            "kind": "METHOD",
            "name": "getVillagerProfession()",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "tags": "Returns profession.",
              "plain": "@return profession\n@see ZombieVillager#getVillagerProfession()"
            }
          },
          {
            "kind": "METHOD",
            "name": "isBaby()",
            "comment": {
              "body": "Gets whether the zombie is a baby",
              "tags": "Returns Whether the zombie is a baby.",
              "plain": "Gets whether the zombie is a baby\n@return Whether the zombie is a baby"
            }
          },
          {
            "kind": "METHOD",
            "name": "isVillager()",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Gets whether the zombie is a villager",
              "tags": "Returns Whether the zombie is a villager.",
              "plain": "Gets whether the zombie is a villager\n@return Whether the zombie is a villager\n@deprecated check if instanceof {@link ZombieVillager}."
            }
          },
          {
            "kind": "METHOD",
            "name": "setBaby(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "flag"
              }
            ],
            "comment": {
              "body": "Sets whether the zombie is a baby",
              "plain": "Sets whether the zombie is a baby\n@param flag Whether the zombie is a baby"
            }
          },
          {
            "kind": "METHOD",
            "name": "setVillager(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "flag"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param flag Sets whether the Zombie is a villager\n@deprecated must spawn {@link ZombieVillager}."
            }
          },
          {
            "kind": "METHOD",
            "name": "setVillagerProfession(org.bukkit.entity.Villager.Profession)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "profession"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param profession Sets the ZombieVillager\u0027s profession\n@see ZombieVillager#getVillagerProfession()"
            }
          }
        ],
        "comment": {
          "body": "Represents a Zombie.",
          "plain": "Represents a Zombie."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.ZombieHorse",
        "comment": {
          "body": "Represents a ZombieHorse - variant of \u003ca href\u003d\"org/bukkit/entity/AbstractHorse.html\" title\u003d\"interface in org.bukkit.entity\"\u003e\u003ccode\u003eAbstractHorse\u003c/code\u003e\u003c/a\u003e.",
          "plain": "Represents a ZombieHorse - variant of {@link AbstractHorse}."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.ZombieVillager",
        "children": [
          {
            "kind": "METHOD",
            "name": "getVillagerProfession()",
            "comment": {
              "body": "Returns the villager profession of this zombie.",
              "tags": "Returns the profession or null.",
              "plain": "Returns the villager profession of this zombie.\n@return the profession or null"
            }
          },
          {
            "kind": "METHOD",
            "name": "setVillagerProfession(org.bukkit.entity.Villager.Profession)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "profession"
              }
            ],
            "comment": {
              "body": "Sets the villager profession of this zombie.",
              "plain": "Sets the villager profession of this zombie."
            }
          }
        ],
        "comment": {
          "body": "Represents a \u003ca href\u003d\"org/bukkit/entity/Zombie.html\" title\u003d\"interface in org.bukkit.entity\"\u003e\u003ccode\u003eZombie\u003c/code\u003e\u003c/a\u003e which was once a \u003ca href\u003d\"org/bukkit/entity/Villager.html\" title\u003d\"interface in org.bukkit.entity\"\u003e\u003ccode\u003eVillager\u003c/code\u003e\u003c/a\u003e.",
          "plain": "Represents a {@link Zombie} which was once a {@link Villager}."
        }
      }
    ]
  },
  {
    "kind": "PACKAGE",
    "name": "org.bukkit.entity.minecart",
    "children": [
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.minecart.CommandMinecart",
        "children": [
          {
            "kind": "METHOD",
            "name": "getCommand()",
            "comment": {
              "body": "Gets the command that this CommandMinecart will run when activated.\n This will never return null.  If the CommandMinecart does not have a\n command, an empty String will be returned instead.",
              "tags": "Returns Command that this CommandMinecart will run when powered..",
              "plain": "Gets the command that this CommandMinecart will run when activated.\n This will never return null.  If the CommandMinecart does not have a\n command, an empty String will be returned instead.\n@return Command that this CommandMinecart will run when powered."
            }
          },
          {
            "kind": "METHOD",
            "name": "setCommand(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "command"
              }
            ],
            "comment": {
              "body": "Sets the command that this CommandMinecart will run when activated.\n Setting the command to null is the same as setting it to an empty\n String.",
              "plain": "Sets the command that this CommandMinecart will run when activated.\n Setting the command to null is the same as setting it to an empty\n String.\n@param command Command that this CommandMinecart will run when\n     activated."
            }
          },
          {
            "kind": "METHOD",
            "name": "setName(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ],
            "comment": {
              "body": "Sets the name of this CommandMinecart.  The name is used with commands\n that this CommandMinecart executes.  Setting the name to null is the\n same as setting it to \"@\".",
              "plain": "Sets the name of this CommandMinecart.  The name is used with commands\n that this CommandMinecart executes.  Setting the name to null is the\n same as setting it to \"@\".\n@param name New name for this CommandMinecart."
            }
          }
        ]
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.minecart.ExplosiveMinecart",
        "comment": {
          "body": "Represents a Minecart with TNT inside it that can explode when triggered.",
          "plain": "Represents a Minecart with TNT inside it that can explode when triggered."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.minecart.HopperMinecart",
        "children": [
          {
            "kind": "METHOD",
            "name": "isEnabled()",
            "comment": {
              "body": "Checks whether or not this Minecart will pick up \n items into its inventory.",
              "tags": "Returns true if the Minecart will pick up items.",
              "plain": "Checks whether or not this Minecart will pick up \n items into its inventory.\n@return true if the Minecart will pick up items"
            }
          },
          {
            "kind": "METHOD",
            "name": "setEnabled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "enabled"
              }
            ],
            "comment": {
              "body": "Sets whether this Minecart will pick up items.",
              "plain": "Sets whether this Minecart will pick up items.\n@param enabled new enabled state"
            }
          }
        ],
        "comment": {
          "body": "Represents a Minecart with a Hopper inside it",
          "plain": "Represents a Minecart with a Hopper inside it"
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.minecart.PoweredMinecart",
        "comment": {
          "body": "Represents a powered minecart. A powered minecart moves on its own when a\n player deposits \u003ca href\u003d\"org/bukkit/Material.html#COAL\"\u003e\u003ccode\u003efuel\u003c/code\u003e\u003c/a\u003e.",
          "plain": "Represents a powered minecart. A powered minecart moves on its own when a\n player deposits {@link org.bukkit.Material#COAL fuel}."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.minecart.RideableMinecart",
        "comment": {
          "body": "Represents a minecart that can have certain \u003ca href\u003d\"org/bukkit/entity/Entity.html\" title\u003d\"interface in org.bukkit.entity\"\u003e\u003ccode\u003eentities\u003c/code\u003e\u003c/a\u003e as passengers. Normal passengers\n include all \u003ca href\u003d\"org/bukkit/entity/LivingEntity.html\" title\u003d\"interface in org.bukkit.entity\"\u003e\u003ccode\u003eliving entities\u003c/code\u003e\u003c/a\u003e with\n the exception of \u003ca href\u003d\"org/bukkit/entity/IronGolem.html\" title\u003d\"interface in org.bukkit.entity\"\u003e\u003ccode\u003eiron golems\u003c/code\u003e\u003c/a\u003e.\n Non-player entities that meet normal passenger criteria automatically\n mount these minecarts when close enough.",
          "plain": "Represents a minecart that can have certain {@link org.bukkit.entity.Entity entities} as passengers. Normal passengers\n include all {@link org.bukkit.entity.LivingEntity living entities} with\n the exception of {@link org.bukkit.entity.IronGolem iron golems}.\n Non-player entities that meet normal passenger criteria automatically\n mount these minecarts when close enough."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.minecart.SpawnerMinecart",
        "comment": {
          "body": "Represents a Minecart with an \u003ca href\u003d\"org/bukkit/block/CreatureSpawner.html\" title\u003d\"interface in org.bukkit.block\"\u003e\u003ccode\u003eentity spawner\u003c/code\u003e\u003c/a\u003e inside it.",
          "plain": "Represents a Minecart with an {@link org.bukkit.block.CreatureSpawner entity spawner} inside it."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.entity.minecart.StorageMinecart",
        "comment": {
          "body": "Represents a minecart with a chest. These types of \u003ca href\u003d\"org/bukkit/entity/Minecart.html\" title\u003d\"interface in org.bukkit.entity\"\u003e\u003ccode\u003eminecarts\u003c/code\u003e\u003c/a\u003e have their own inventory that can be accessed using methods\n from the \u003ca href\u003d\"org/bukkit/inventory/InventoryHolder.html\" title\u003d\"interface in org.bukkit.inventory\"\u003e\u003ccode\u003eInventoryHolder\u003c/code\u003e\u003c/a\u003e interface.",
          "plain": "Represents a minecart with a chest. These types of {@link Minecart minecarts} have their own inventory that can be accessed using methods\n from the {@link InventoryHolder} interface."
        }
      }
    ]
  },
  {
    "kind": "PACKAGE",
    "name": "org.bukkit.event",
    "children": [
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.event.Cancellable",
        "children": [
          {
            "kind": "METHOD",
            "name": "isCancelled()",
            "comment": {
              "body": "Gets the cancellation state of this event. A cancelled event will not\n be executed in the server, but will still pass to other plugins",
              "tags": "Returns true if this event is cancelled.",
              "plain": "Gets the cancellation state of this event. A cancelled event will not\n be executed in the server, but will still pass to other plugins\n@return true if this event is cancelled"
            }
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ],
            "comment": {
              "body": "Sets the cancellation state of this event. A cancelled event will not\n be executed in the server, but will still pass to other plugins.",
              "plain": "Sets the cancellation state of this event. A cancelled event will not\n be executed in the server, but will still pass to other plugins.\n@param cancel true if you wish to cancel this event"
            }
          }
        ]
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.Event",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "Event()",
            "comment": {
              "body": "The default constructor is defined for cleaner code. This constructor\n assumes the event is synchronous.",
              "plain": "The default constructor is defined for cleaner code. This constructor\n assumes the event is synchronous."
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Event(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "isAsync"
              }
            ],
            "comment": {
              "body": "This constructor is used to explicitly declare an event as synchronous\n or asynchronous.",
              "plain": "This constructor is used to explicitly declare an event as synchronous\n or asynchronous.\n@param isAsync true indicates the event will fire asynchronously, false\n     by default from default constructor"
            }
          },
          {
            "kind": "FIELD",
            "name": "async"
          },
          {
            "kind": "METHOD",
            "name": "callEvent()",
            "comment": {
              "body": "Calls the event and tests if cancelled.",
              "tags": "Returns false if event was cancelled, if cancellable. otherwise true..",
              "plain": "Calls the event and tests if cancelled.\n@return false if event was cancelled, if cancellable. otherwise true."
            }
          },
          {
            "kind": "METHOD",
            "name": "getEventName()",
            "comment": {
              "body": "Convenience method for providing a user-friendly identifier. By\n default, it is the event\u0027s class\u0027s \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/lang/Class.html#getSimpleName()\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003esimple name\u003c/a\u003e.",
              "tags": "Returns name of this event.",
              "plain": "Convenience method for providing a user-friendly identifier. By\n default, it is the event\u0027s class\u0027s {@linkplain Class#getSimpleName() simple name}.\n@return name of this event"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "isAsynchronous()",
            "comment": {
              "body": "Any custom event that should not by synchronized with other events must\n use the specific constructor. These are the caveats of using an\n asynchronous event:\n \u003cul\u003e\n \u003cli\u003eThe event is never fired from inside code triggered by a\n     synchronous event. Attempting to do so results in an \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003e\u003ccode\u003eIllegalStateException\u003c/code\u003e\u003c/a\u003e.\n \u003cli\u003eHowever, asynchronous event handlers may fire synchronous or\n     asynchronous events\n \u003cli\u003eThe event may be fired multiple times simultaneously and in any\n     order.\n \u003cli\u003eAny newly registered or unregistered handler is ignored after an\n     event starts execution.\n \u003cli\u003eThe handlers for this event may block for any length of time.\n \u003cli\u003eSome implementations may selectively declare a specific event use\n     as asynchronous. This behavior should be clearly defined.\n \u003cli\u003eAsynchronous calls are not calculated in the plugin timing system.\n \u003c/ul\u003e",
              "tags": "Returns false by default, true if the event fires asynchronously.",
              "plain": "Any custom event that should not by synchronized with other events must\n use the specific constructor. These are the caveats of using an\n asynchronous event:\n \u003cul\u003e\n \u003cli\u003eThe event is never fired from inside code triggered by a\n     synchronous event. Attempting to do so results in an {@link java.lang.IllegalStateException}.\n \u003cli\u003eHowever, asynchronous event handlers may fire synchronous or\n     asynchronous events\n \u003cli\u003eThe event may be fired multiple times simultaneously and in any\n     order.\n \u003cli\u003eAny newly registered or unregistered handler is ignored after an\n     event starts execution.\n \u003cli\u003eThe handlers for this event may block for any length of time.\n \u003cli\u003eSome implementations may selectively declare a specific event use\n     as asynchronous. This behavior should be clearly defined.\n \u003cli\u003eAsynchronous calls are not calculated in the plugin timing system.\n \u003c/ul\u003e\n@return false by default, true if the event fires asynchronously"
            }
          },
          {
            "kind": "FIELD",
            "name": "name"
          },
          {
            "kind": "ENUM",
            "name": "org.bukkit.event.Event.Result",
            "children": [
              {
                "kind": "ENUM_CONSTANT",
                "name": "ALLOW",
                "comment": {
                  "body": "Allow / Force the event. The action indicated by the event will\n take place if possible, even if the server would not normally allow\n the action. Some actions may not be allowed.",
                  "plain": "Allow / Force the event. The action indicated by the event will\n take place if possible, even if the server would not normally allow\n the action. Some actions may not be allowed."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "DEFAULT",
                "comment": {
                  "body": "Neither deny nor allow the event. The server will proceed with its\n normal handling.",
                  "plain": "Neither deny nor allow the event. The server will proceed with its\n normal handling."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "DENY",
                "comment": {
                  "body": "Deny the event. Depending on the event, the action indicated by the\n event will either not take place or will be reverted. Some actions\n may not be denied.",
                  "plain": "Deny the event. Depending on the event, the action indicated by the\n event will either not take place or will be reverted. Some actions\n may not be denied."
                }
              },
              {
                "kind": "CONSTRUCTOR",
                "name": "Result()"
              },
              {
                "kind": "METHOD",
                "name": "valueOf(java.lang.String)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "name"
                  }
                ]
              },
              {
                "kind": "METHOD",
                "name": "values()"
              }
            ]
          }
        ],
        "comment": {
          "body": "Represents an event.\n\n All events require a static method named getHandlerList() which returns the same \u003ca href\u003d\"org/bukkit/event/HandlerList.html\" title\u003d\"class in org.bukkit.event\"\u003e\u003ccode\u003eHandlerList\u003c/code\u003e\u003c/a\u003e as \u003ca href\u003d\"org/bukkit/event/Event.html#getHandlers()\"\u003e\u003ccode\u003eEvent.getHandlers()\u003c/code\u003e\u003c/a\u003e.",
          "plain": "Represents an event.\n\n All events require a static method named getHandlerList() which returns the same {@link HandlerList} as {@link #getHandlers()}.\n@see PluginManager#callEvent(Event)\n@see PluginManager#registerEvents(Listener,Plugin)"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.EventException",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "EventException()",
            "comment": {
              "body": "Constructs a new EventException",
              "plain": "Constructs a new EventException"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "EventException(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "message"
              }
            ],
            "comment": {
              "body": "Constructs a new EventException with the given message",
              "plain": "Constructs a new EventException with the given message\n@param message The message"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "EventException(java.lang.Throwable)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "throwable"
              }
            ],
            "comment": {
              "body": "Constructs a new EventException based on the given Exception",
              "plain": "Constructs a new EventException based on the given Exception\n@param throwable Exception that triggered this Exception"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "EventException(java.lang.Throwable,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cause"
              },
              {
                "kind": "PARAMETER",
                "name": "message"
              }
            ],
            "comment": {
              "body": "Constructs a new EventException with the given message",
              "plain": "Constructs a new EventException with the given message\n@param cause The exception that caused this\n@param message The message"
            }
          },
          {
            "kind": "FIELD",
            "name": "cause"
          },
          {
            "kind": "METHOD",
            "name": "getCause()",
            "comment": {
              "body": "If applicable, returns the Exception that triggered this Exception",
              "tags": "Returns Inner exception, or null if one does not exist.",
              "plain": "If applicable, returns the Exception that triggered this Exception\n@return Inner exception, or null if one does not exist"
            }
          },
          {
            "kind": "FIELD",
            "name": "serialVersionUID"
          }
        ]
      },
      {
        "kind": "ANNOTATION_TYPE",
        "name": "org.bukkit.event.EventHandler",
        "children": [
          {
            "kind": "METHOD",
            "name": "ignoreCancelled()",
            "comment": {
              "body": "Define if the handler ignores a cancelled event.\n \u003cp\u003e\n If ignoreCancelled is true and the event is cancelled, the method is\n not called. Otherwise, the method is always called.",
              "tags": "Returns whether cancelled events should be ignored.",
              "plain": "Define if the handler ignores a cancelled event.\n \u003cp\u003e\n If ignoreCancelled is true and the event is cancelled, the method is\n not called. Otherwise, the method is always called.\n@return whether cancelled events should be ignored"
            }
          },
          {
            "kind": "METHOD",
            "name": "priority()",
            "comment": {
              "body": "Define the priority of the event.\n \u003cp\u003e\n First priority to the last priority executed:\n \u003col\u003e\n \u003cli\u003eLOWEST\n \u003cli\u003eLOW\n \u003cli\u003eNORMAL\n \u003cli\u003eHIGH\n \u003cli\u003eHIGHEST\n \u003cli\u003eMONITOR\n \u003c/ol\u003e",
              "tags": "Returns the priority.",
              "plain": "Define the priority of the event.\n \u003cp\u003e\n First priority to the last priority executed:\n \u003col\u003e\n \u003cli\u003eLOWEST\n \u003cli\u003eLOW\n \u003cli\u003eNORMAL\n \u003cli\u003eHIGH\n \u003cli\u003eHIGHEST\n \u003cli\u003eMONITOR\n \u003c/ol\u003e\n@return the priority"
            }
          }
        ],
        "comment": {
          "body": "An annotation to mark methods as being event handler methods",
          "plain": "An annotation to mark methods as being event handler methods"
        }
      },
      {
        "kind": "ENUM",
        "name": "org.bukkit.event.EventPriority",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "EventPriority(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "slot"
              }
            ]
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "HIGH",
            "comment": {
              "body": "Event call is of high importance",
              "plain": "Event call is of high importance"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "HIGHEST",
            "comment": {
              "body": "Event call is critical and must have the final say in what happens\n to the event",
              "plain": "Event call is critical and must have the final say in what happens\n to the event"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "LOW",
            "comment": {
              "body": "Event call is of low importance",
              "plain": "Event call is of low importance"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "LOWEST",
            "comment": {
              "body": "Event call is of very low importance and should be ran first, to allow\n other plugins to further customise the outcome",
              "plain": "Event call is of very low importance and should be ran first, to allow\n other plugins to further customise the outcome"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "MONITOR",
            "comment": {
              "body": "Event is listened to purely for monitoring the outcome of an event.\n \u003cp\u003e\n No modifications to the event should be made under this priority",
              "plain": "Event is listened to purely for monitoring the outcome of an event.\n \u003cp\u003e\n No modifications to the event should be made under this priority"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "NORMAL",
            "comment": {
              "body": "Event call is neither important nor unimportant, and may be ran\n normally",
              "plain": "Event call is neither important nor unimportant, and may be ran\n normally"
            }
          },
          {
            "kind": "METHOD",
            "name": "getSlot()"
          },
          {
            "kind": "FIELD",
            "name": "slot"
          },
          {
            "kind": "METHOD",
            "name": "valueOf(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "values()"
          }
        ],
        "comment": {
          "body": "Represents an event\u0027s priority in execution",
          "plain": "Represents an event\u0027s priority in execution"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.HandlerList",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "HandlerList()",
            "comment": {
              "body": "Create a new handler list and initialize using EventPriority.\n \u003cp\u003e\n The HandlerList is then added to meta-list for use in bakeAll()",
              "plain": "Create a new handler list and initialize using EventPriority.\n \u003cp\u003e\n The HandlerList is then added to meta-list for use in bakeAll()"
            }
          },
          {
            "kind": "FIELD",
            "name": "allLists",
            "comment": {
              "body": "List of all HandlerLists which have been created, for use in bakeAll()",
              "plain": "List of all HandlerLists which have been created, for use in bakeAll()"
            }
          },
          {
            "kind": "METHOD",
            "name": "bake()",
            "comment": {
              "body": "Bake HashMap and ArrayLists to 2d array - does nothing if not necessary",
              "plain": "Bake HashMap and ArrayLists to 2d array - does nothing if not necessary"
            }
          },
          {
            "kind": "METHOD",
            "name": "bakeAll()",
            "comment": {
              "body": "Bake all handler lists. Best used just after all normal event\n registration is complete, ie just after all plugins are loaded if\n you\u0027re using fevents in a plugin system.",
              "plain": "Bake all handler lists. Best used just after all normal event\n registration is complete, ie just after all plugins are loaded if\n you\u0027re using fevents in a plugin system."
            }
          },
          {
            "kind": "METHOD",
            "name": "getHandlerLists()",
            "comment": {
              "body": "Get a list of all handler lists for every event type",
              "tags": "Returns the list of all handler lists.",
              "plain": "Get a list of all handler lists for every event type\n@return the list of all handler lists"
            }
          },
          {
            "kind": "METHOD",
            "name": "getRegisteredListeners()",
            "comment": {
              "body": "Get the baked registered listeners associated with this handler list",
              "tags": "Returns the array of registered listeners.",
              "plain": "Get the baked registered listeners associated with this handler list\n@return the array of registered listeners"
            }
          },
          {
            "kind": "METHOD",
            "name": "getRegisteredListeners(org.bukkit.plugin.Plugin)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "plugin"
              }
            ],
            "comment": {
              "body": "Get a specific plugin\u0027s registered listeners associated with this\n handler list",
              "tags": "Returns the list of registered listeners.",
              "plain": "Get a specific plugin\u0027s registered listeners associated with this\n handler list\n@param plugin the plugin to get the listeners of\n@return the list of registered listeners"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers",
            "comment": {
              "body": "Handler array. This field being an array is the key to this system\u0027s\n speed.",
              "plain": "Handler array. This field being an array is the key to this system\u0027s\n speed."
            }
          },
          {
            "kind": "FIELD",
            "name": "handlerslots",
            "comment": {
              "body": "Dynamic handler lists. These are changed using register() and\n unregister() and are automatically baked to the handlers array any time\n they have changed.",
              "plain": "Dynamic handler lists. These are changed using register() and\n unregister() and are automatically baked to the handlers array any time\n they have changed."
            }
          },
          {
            "kind": "METHOD",
            "name": "register(org.bukkit.plugin.RegisteredListener)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "listener"
              }
            ],
            "comment": {
              "body": "Register a new listener in this handler list",
              "plain": "Register a new listener in this handler list\n@param listener listener to register"
            }
          },
          {
            "kind": "METHOD",
            "name": "registerAll(java.util.Collection\u003corg.bukkit.plugin.RegisteredListener\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "listeners"
              }
            ],
            "comment": {
              "body": "Register a collection of new listeners in this handler list",
              "plain": "Register a collection of new listeners in this handler list\n@param listeners listeners to register"
            }
          },
          {
            "kind": "METHOD",
            "name": "unregister(org.bukkit.event.Listener)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "listener"
              }
            ],
            "comment": {
              "body": "Remove a specific listener from this handler",
              "plain": "Remove a specific listener from this handler\n@param listener listener to remove"
            }
          },
          {
            "kind": "METHOD",
            "name": "unregister(org.bukkit.plugin.Plugin)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "plugin"
              }
            ],
            "comment": {
              "body": "Remove a specific plugin\u0027s listeners from this handler",
              "plain": "Remove a specific plugin\u0027s listeners from this handler\n@param plugin plugin to remove"
            }
          },
          {
            "kind": "METHOD",
            "name": "unregister(org.bukkit.plugin.RegisteredListener)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "listener"
              }
            ],
            "comment": {
              "body": "Remove a listener from a specific order slot",
              "plain": "Remove a listener from a specific order slot\n@param listener listener to remove"
            }
          },
          {
            "kind": "METHOD",
            "name": "unregisterAll()",
            "comment": {
              "body": "Unregister all listeners from all handler lists.",
              "plain": "Unregister all listeners from all handler lists."
            }
          },
          {
            "kind": "METHOD",
            "name": "unregisterAll(org.bukkit.event.Listener)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "listener"
              }
            ],
            "comment": {
              "body": "Unregister a specific listener from all handler lists.",
              "plain": "Unregister a specific listener from all handler lists.\n@param listener listener to unregister"
            }
          },
          {
            "kind": "METHOD",
            "name": "unregisterAll(org.bukkit.plugin.Plugin)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "plugin"
              }
            ],
            "comment": {
              "body": "Unregister a specific plugin\u0027s listeners from all handler lists.",
              "plain": "Unregister a specific plugin\u0027s listeners from all handler lists.\n@param plugin plugin to unregister"
            }
          }
        ],
        "comment": {
          "body": "A list of event handlers, stored per-event. Based on lahwran\u0027s fevents.",
          "plain": "A list of event handlers, stored per-event. Based on lahwran\u0027s fevents."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.event.Listener",
        "comment": {
          "body": "Simple interface for tagging all EventListeners",
          "plain": "Simple interface for tagging all EventListeners"
        }
      }
    ]
  },
  {
    "kind": "PACKAGE",
    "name": "org.bukkit.event.block",
    "children": [
      {
        "kind": "ENUM",
        "name": "org.bukkit.event.block.Action",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "Action()"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "LEFT_CLICK_AIR",
            "comment": {
              "body": "Left-clicking the air",
              "plain": "Left-clicking the air"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "LEFT_CLICK_BLOCK",
            "comment": {
              "body": "Left-clicking a block",
              "plain": "Left-clicking a block"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "PHYSICAL",
            "comment": {
              "body": "Stepping onto or into a block (Ass-pressure)\n\n Examples:\n \u003cul\u003e\n \u003cli\u003eJumping on soil\n \u003cli\u003eStanding on pressure plate\n \u003cli\u003eTriggering redstone ore\n \u003cli\u003eTriggering tripwire\n \u003c/ul\u003e",
              "plain": "Stepping onto or into a block (Ass-pressure)\n\n Examples:\n \u003cul\u003e\n \u003cli\u003eJumping on soil\n \u003cli\u003eStanding on pressure plate\n \u003cli\u003eTriggering redstone ore\n \u003cli\u003eTriggering tripwire\n \u003c/ul\u003e"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "RIGHT_CLICK_AIR",
            "comment": {
              "body": "Right-clicking the air",
              "plain": "Right-clicking the air"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "RIGHT_CLICK_BLOCK",
            "comment": {
              "body": "Right-clicking a block",
              "plain": "Right-clicking a block"
            }
          },
          {
            "kind": "METHOD",
            "name": "valueOf(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "values()"
          }
        ]
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.block.BlockBreakEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "BlockBreakEvent(org.bukkit.block.Block,org.bukkit.entity.Player)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "player"
              },
              {
                "kind": "PARAMETER",
                "name": "theBlock"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "cancel"
          },
          {
            "kind": "FIELD",
            "name": "dropItems"
          },
          {
            "kind": "METHOD",
            "name": "getPlayer()",
            "comment": {
              "body": "Gets the Player that is breaking the block involved in this event.",
              "tags": "Returns The Player that is breaking the block involved in this event.",
              "plain": "Gets the Player that is breaking the block involved in this event.\n@return The Player that is breaking the block involved in this event"
            }
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "METHOD",
            "name": "isDropItems()",
            "comment": {
              "body": "Gets whether or not the block will drop items.",
              "tags": "Returns Whether or not the block will drop items.",
              "plain": "Gets whether or not the block will drop items.\n@return Whether or not the block will drop items"
            }
          },
          {
            "kind": "FIELD",
            "name": "player"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "setDropItems(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "dropItems"
              }
            ],
            "comment": {
              "body": "Sets whether or not the block will drop items as it normally would.",
              "plain": "Sets whether or not the block will drop items as it normally would.\n@param dropItems Whether or not the block will drop items"
            }
          }
        ],
        "comment": {
          "body": "Called when a block is broken by a player.\n \u003cp\u003e\n If you wish to have the block drop experience, you must set the experience\n value above 0. By default, experience will be set in the event if:\n \u003col\u003e\n \u003cli\u003eThe player is not in creative or adventure mode\n \u003cli\u003eThe player can loot the block (ie: does not destroy it completely, by\n     using the correct tool)\n \u003cli\u003eThe player does not have silk touch\n \u003cli\u003eThe block drops experience in vanilla Minecraft\n \u003c/ol\u003e\n \u003cp\u003e\n Note:\n Plugins wanting to simulate a traditional block drop should set the block\n to air and utilize their own methods for determining what the default drop\n for the block being broken is and what to do about it, if anything.\n \u003cp\u003e\n If a Block Break event is cancelled, the block will not break and\n experience will not drop.",
          "plain": "Called when a block is broken by a player.\n \u003cp\u003e\n If you wish to have the block drop experience, you must set the experience\n value above 0. By default, experience will be set in the event if:\n \u003col\u003e\n \u003cli\u003eThe player is not in creative or adventure mode\n \u003cli\u003eThe player can loot the block (ie: does not destroy it completely, by\n     using the correct tool)\n \u003cli\u003eThe player does not have silk touch\n \u003cli\u003eThe block drops experience in vanilla Minecraft\n \u003c/ol\u003e\n \u003cp\u003e\n Note:\n Plugins wanting to simulate a traditional block drop should set the block\n to air and utilize their own methods for determining what the default drop\n for the block being broken is and what to do about it, if anything.\n \u003cp\u003e\n If a Block Break event is cancelled, the block will not break and\n experience will not drop."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.block.BlockBurnEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "BlockBurnEvent(org.bukkit.block.Block)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "block"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "BlockBurnEvent(org.bukkit.block.Block,org.bukkit.block.Block)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "block"
              },
              {
                "kind": "PARAMETER",
                "name": "ignitingBlock"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "cancelled"
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getIgnitingBlock()",
            "comment": {
              "body": "Gets the block which ignited this block.",
              "tags": "Returns The Block that ignited and burned this block, or null if no\n source block exists.",
              "plain": "Gets the block which ignited this block.\n@return The Block that ignited and burned this block, or null if no\n source block exists"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "FIELD",
            "name": "ignitingBlock"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          }
        ],
        "comment": {
          "body": "Called when a block is destroyed as a result of being burnt by fire.\n \u003cp\u003e\n If a Block Burn event is cancelled, the block will not be destroyed as a\n result of being burnt by fire.",
          "plain": "Called when a block is destroyed as a result of being burnt by fire.\n \u003cp\u003e\n If a Block Burn event is cancelled, the block will not be destroyed as a\n result of being burnt by fire."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.block.BlockCanBuildEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "BlockCanBuildEvent(org.bukkit.block.Block,int,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "block"
              },
              {
                "kind": "PARAMETER",
                "name": "canBuild"
              },
              {
                "kind": "PARAMETER",
                "name": "id"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@deprecated Magic value\n@param block the block involved in this event\n@param id the id of the block to place\n@param canBuild whether we can build"
            }
          },
          {
            "kind": "FIELD",
            "name": "buildable"
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getMaterial()",
            "comment": {
              "body": "Gets the Material that we are trying to place.",
              "tags": "Returns The Material that we are trying to place.",
              "plain": "Gets the Material that we are trying to place.\n@return The Material that we are trying to place"
            }
          },
          {
            "kind": "METHOD",
            "name": "getMaterialId()",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Gets the Material ID for the Material that we are trying to place.",
              "tags": "Returns The Material ID for the Material that we are trying to place.",
              "plain": "Gets the Material ID for the Material that we are trying to place.\n@return The Material ID for the Material that we are trying to place\n@deprecated Magic value"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isBuildable()",
            "comment": {
              "body": "Gets whether or not the block can be built here.\n \u003cp\u003e\n By default, returns Minecraft\u0027s answer on whether the block can be\n built here or not.",
              "tags": "Returns boolean whether or not the block can be built.",
              "plain": "Gets whether or not the block can be built here.\n \u003cp\u003e\n By default, returns Minecraft\u0027s answer on whether the block can be\n built here or not.\n@return boolean whether or not the block can be built"
            }
          },
          {
            "kind": "FIELD",
            "name": "material",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "setBuildable(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ],
            "comment": {
              "body": "Sets whether the block can be built here or not.",
              "plain": "Sets whether the block can be built here or not.\n@param cancel true if you want to allow the block to be built here\n     despite Minecraft\u0027s default behaviour"
            }
          }
        ],
        "comment": {
          "body": "Called when we try to place a block, to see if we can build it here or not.\n \u003cp\u003e\n Note:\n \u003cul\u003e\n \u003cli\u003eThe Block returned by getBlock() is the block we are trying to place\n     on, not the block we are trying to place.\n \u003cli\u003eIf you want to figure out what is being placed, use \u003ca href\u003d\"org/bukkit/event/block/BlockCanBuildEvent.html#getMaterial()\"\u003e\u003ccode\u003eBlockCanBuildEvent.getMaterial()\u003c/code\u003e\u003c/a\u003e or \u003ca href\u003d\"org/bukkit/event/block/BlockCanBuildEvent.html#getMaterialId()\"\u003e\u003ccode\u003eBlockCanBuildEvent.getMaterialId()\u003c/code\u003e\u003c/a\u003e instead.\n \u003c/ul\u003e",
          "plain": "Called when we try to place a block, to see if we can build it here or not.\n \u003cp\u003e\n Note:\n \u003cul\u003e\n \u003cli\u003eThe Block returned by getBlock() is the block we are trying to place\n     on, not the block we are trying to place.\n \u003cli\u003eIf you want to figure out what is being placed, use {@link #getMaterial()} or {@link #getMaterialId()} instead.\n \u003c/ul\u003e"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.block.BlockDamageEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "BlockDamageEvent(org.bukkit.entity.Player,org.bukkit.block.Block,org.bukkit.inventory.ItemStack,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "block"
              },
              {
                "kind": "PARAMETER",
                "name": "instaBreak"
              },
              {
                "kind": "PARAMETER",
                "name": "itemInHand"
              },
              {
                "kind": "PARAMETER",
                "name": "player"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "cancel"
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getInstaBreak()",
            "comment": {
              "body": "Gets if the block is set to instantly break when damaged by the player.",
              "tags": "Returns true if the block should instantly break when damaged by the\n     player.",
              "plain": "Gets if the block is set to instantly break when damaged by the player.\n@return true if the block should instantly break when damaged by the\n     player"
            }
          },
          {
            "kind": "METHOD",
            "name": "getItemInHand()",
            "comment": {
              "body": "Gets the ItemStack for the item currently in the player\u0027s hand.",
              "tags": "Returns The ItemStack for the item currently in the player\u0027s hand.",
              "plain": "Gets the ItemStack for the item currently in the player\u0027s hand.\n@return The ItemStack for the item currently in the player\u0027s hand"
            }
          },
          {
            "kind": "METHOD",
            "name": "getPlayer()",
            "comment": {
              "body": "Gets the player damaging the block involved in this event.",
              "tags": "Returns The player damaging the block involved in this event.",
              "plain": "Gets the player damaging the block involved in this event.\n@return The player damaging the block involved in this event"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "FIELD",
            "name": "instaBreak"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "FIELD",
            "name": "itemstack"
          },
          {
            "kind": "FIELD",
            "name": "player"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "setInstaBreak(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "bool"
              }
            ],
            "comment": {
              "body": "Sets if the block should instantly break when damaged by the player.",
              "plain": "Sets if the block should instantly break when damaged by the player.\n@param bool true if you want the block to instantly break when damaged\n     by the player"
            }
          }
        ],
        "comment": {
          "body": "Called when a block is damaged by a player.\n \u003cp\u003e\n If a Block Damage event is cancelled, the block will not be damaged.",
          "plain": "Called when a block is damaged by a player.\n \u003cp\u003e\n If a Block Damage event is cancelled, the block will not be damaged."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.block.BlockDispenseEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "BlockDispenseEvent(org.bukkit.block.Block,org.bukkit.inventory.ItemStack,org.bukkit.util.Vector)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "block"
              },
              {
                "kind": "PARAMETER",
                "name": "dispensed"
              },
              {
                "kind": "PARAMETER",
                "name": "velocity"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "cancelled"
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getItem()",
            "comment": {
              "body": "Gets the item that is being dispensed. Modifying the returned item will\n have no effect, you must use \u003ca href\u003d\"org/bukkit/event/block/BlockDispenseEvent.html#setItem(org.bukkit.inventory.ItemStack)\"\u003e\u003ccode\u003eBlockDispenseEvent.setItem(org.bukkit.inventory.ItemStack)\u003c/code\u003e\u003c/a\u003e instead.",
              "tags": "Returns An ItemStack for the item being dispensed.",
              "plain": "Gets the item that is being dispensed. Modifying the returned item will\n have no effect, you must use {@link #setItem(org.bukkit.inventory.ItemStack)} instead.\n@return An ItemStack for the item being dispensed"
            }
          },
          {
            "kind": "METHOD",
            "name": "getVelocity()",
            "comment": {
              "body": "Gets the velocity.\n \u003cp\u003e\n Note: Modifying the returned Vector will not change the velocity, you\n must use \u003ca href\u003d\"org/bukkit/event/block/BlockDispenseEvent.html#setVelocity(org.bukkit.util.Vector)\"\u003e\u003ccode\u003eBlockDispenseEvent.setVelocity(org.bukkit.util.Vector)\u003c/code\u003e\u003c/a\u003e instead.",
              "tags": "Returns A Vector for the dispensed item\u0027s velocity.",
              "plain": "Gets the velocity.\n \u003cp\u003e\n Note: Modifying the returned Vector will not change the velocity, you\n must use {@link #setVelocity(org.bukkit.util.Vector)} instead.\n@return A Vector for the dispensed item\u0027s velocity"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "FIELD",
            "name": "item"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "setItem(org.bukkit.inventory.ItemStack)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "item"
              }
            ],
            "comment": {
              "body": "Sets the item being dispensed.",
              "plain": "Sets the item being dispensed.\n@param item the item being dispensed"
            }
          },
          {
            "kind": "METHOD",
            "name": "setVelocity(org.bukkit.util.Vector)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "vel"
              }
            ],
            "comment": {
              "body": "Sets the velocity of the item being dispensed.",
              "plain": "Sets the velocity of the item being dispensed.\n@param vel the velocity of the item being dispensed"
            }
          },
          {
            "kind": "FIELD",
            "name": "velocity"
          }
        ],
        "comment": {
          "body": "Called when an item is dispensed from a block.\n \u003cp\u003e\n If a Block Dispense event is cancelled, the block will not dispense the\n item.",
          "plain": "Called when an item is dispensed from a block.\n \u003cp\u003e\n If a Block Dispense event is cancelled, the block will not dispense the\n item."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.block.BlockEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "BlockEvent(org.bukkit.block.Block)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "theBlock"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "block"
          },
          {
            "kind": "METHOD",
            "name": "getBlock()",
            "comment": {
              "body": "Gets the block involved in this event.",
              "tags": "Returns The Block which block is involved in this event.",
              "plain": "Gets the block involved in this event.\n@return The Block which block is involved in this event"
            }
          }
        ],
        "comment": {
          "body": "Represents a block related event.",
          "plain": "Represents a block related event."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.block.BlockExpEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "BlockExpEvent(org.bukkit.block.Block,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "block"
              },
              {
                "kind": "PARAMETER",
                "name": "exp"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "exp"
          },
          {
            "kind": "METHOD",
            "name": "getExpToDrop()",
            "comment": {
              "body": "Get the experience dropped by the block after the event has processed",
              "tags": "Returns The experience to drop.",
              "plain": "Get the experience dropped by the block after the event has processed\n@return The experience to drop"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "setExpToDrop(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "exp"
              }
            ],
            "comment": {
              "body": "Set the amount of experience dropped by the block after the event has\n processed",
              "plain": "Set the amount of experience dropped by the block after the event has\n processed\n@param exp 1 or higher to drop experience, else nothing will drop"
            }
          }
        ],
        "comment": {
          "body": "An event that\u0027s called when a block yields experience.",
          "plain": "An event that\u0027s called when a block yields experience."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.block.BlockExplodeEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "BlockExplodeEvent(org.bukkit.block.Block,java.util.List\u003corg.bukkit.block.Block\u003e,float)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "blocks"
              },
              {
                "kind": "PARAMETER",
                "name": "what"
              },
              {
                "kind": "PARAMETER",
                "name": "yield"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "blockList()",
            "comment": {
              "body": "Returns the list of blocks that would have been removed or were removed\n from the explosion event.",
              "tags": "Returns All blown-up blocks.",
              "plain": "Returns the list of blocks that would have been removed or were removed\n from the explosion event.\n@return All blown-up blocks"
            }
          },
          {
            "kind": "FIELD",
            "name": "blocks"
          },
          {
            "kind": "FIELD",
            "name": "cancel"
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getYield()",
            "comment": {
              "body": "Returns the percentage of blocks to drop from this explosion",
              "tags": "Returns The yield..",
              "plain": "Returns the percentage of blocks to drop from this explosion\n@return The yield."
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "setYield(float)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "yield"
              }
            ],
            "comment": {
              "body": "Sets the percentage of blocks to drop from this explosion",
              "plain": "Sets the percentage of blocks to drop from this explosion\n@param yield The new yield percentage"
            }
          },
          {
            "kind": "FIELD",
            "name": "yield"
          }
        ],
        "comment": {
          "body": "Called when a block explodes",
          "plain": "Called when a block explodes"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.block.BlockFadeEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "BlockFadeEvent(org.bukkit.block.Block,org.bukkit.block.BlockState)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "block"
              },
              {
                "kind": "PARAMETER",
                "name": "newState"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "cancelled"
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getNewState()",
            "comment": {
              "body": "Gets the state of the block that will be fading, melting or\n disappearing.",
              "tags": "Returns The block state of the block that will be fading, melting or\n     disappearing.",
              "plain": "Gets the state of the block that will be fading, melting or\n disappearing.\n@return The block state of the block that will be fading, melting or\n     disappearing"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "FIELD",
            "name": "newState"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          }
        ],
        "comment": {
          "body": "Called when a block fades, melts or disappears based on world conditions\n \u003cp\u003e\n Examples:\n \u003cul\u003e\n \u003cli\u003eSnow melting due to being near a light source.\n \u003cli\u003eIce melting due to being near a light source.\n \u003cli\u003eFire burning out after time, without destroying fuel block.\n \u003c/ul\u003e\n \u003cp\u003e\n If a Block Fade event is cancelled, the block will not fade, melt or\n disappear.",
          "plain": "Called when a block fades, melts or disappears based on world conditions\n \u003cp\u003e\n Examples:\n \u003cul\u003e\n \u003cli\u003eSnow melting due to being near a light source.\n \u003cli\u003eIce melting due to being near a light source.\n \u003cli\u003eFire burning out after time, without destroying fuel block.\n \u003c/ul\u003e\n \u003cp\u003e\n If a Block Fade event is cancelled, the block will not fade, melt or\n disappear."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.block.BlockFormEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "BlockFormEvent(org.bukkit.block.Block,org.bukkit.block.BlockState)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "block"
              },
              {
                "kind": "PARAMETER",
                "name": "newState"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          }
        ],
        "comment": {
          "body": "Called when a block is formed or spreads based on world conditions.\n \u003cp\u003e\n Use \u003ca href\u003d\"org/bukkit/event/block/BlockSpreadEvent.html\" title\u003d\"class in org.bukkit.event.block\"\u003e\u003ccode\u003eBlockSpreadEvent\u003c/code\u003e\u003c/a\u003e to catch blocks that actually spread and don\u0027t\n just \"randomly\" form.\n \u003cp\u003e\n Examples:\n \u003cul\u003e\n \u003cli\u003eSnow forming due to a snow storm.\n \u003cli\u003eIce forming in a snowy Biome like Taiga or Tundra.\n \u003cli\u003e Obsidian / Cobblestone forming due to contact with water.\n \u003cli\u003e Concrete forming due to mixing of concrete powder and water.\n \u003c/ul\u003e\n \u003cp\u003e\n If a Block Form event is cancelled, the block will not be formed.",
          "plain": "Called when a block is formed or spreads based on world conditions.\n \u003cp\u003e\n Use {@link BlockSpreadEvent} to catch blocks that actually spread and don\u0027t\n just \"randomly\" form.\n \u003cp\u003e\n Examples:\n \u003cul\u003e\n \u003cli\u003eSnow forming due to a snow storm.\n \u003cli\u003eIce forming in a snowy Biome like Taiga or Tundra.\n \u003cli\u003e Obsidian / Cobblestone forming due to contact with water.\n \u003cli\u003e Concrete forming due to mixing of concrete powder and water.\n \u003c/ul\u003e\n \u003cp\u003e\n If a Block Form event is cancelled, the block will not be formed.\n@see BlockSpreadEvent"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.block.BlockFromToEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "BlockFromToEvent(org.bukkit.block.Block,org.bukkit.block.Block)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "block"
              },
              {
                "kind": "PARAMETER",
                "name": "toBlock"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "BlockFromToEvent(org.bukkit.block.Block,org.bukkit.block.BlockFace)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "block"
              },
              {
                "kind": "PARAMETER",
                "name": "face"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "cancel"
          },
          {
            "kind": "FIELD",
            "name": "face"
          },
          {
            "kind": "METHOD",
            "name": "getFace()",
            "comment": {
              "body": "Gets the BlockFace that the block is moving to.",
              "tags": "Returns The BlockFace that the block is moving to.",
              "plain": "Gets the BlockFace that the block is moving to.\n@return The BlockFace that the block is moving to"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getToBlock()",
            "comment": {
              "body": "Convenience method for getting the faced Block.",
              "tags": "Returns The faced Block.",
              "plain": "Convenience method for getting the faced Block.\n@return The faced Block"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "to"
          }
        ],
        "comment": {
          "body": "Represents events with a source block and a destination block, currently\n only applies to liquid (lava and water) and teleporting dragon eggs.\n \u003cp\u003e\n If a Block From To event is cancelled, the block will not move (the liquid\n will not flow).",
          "plain": "Represents events with a source block and a destination block, currently\n only applies to liquid (lava and water) and teleporting dragon eggs.\n \u003cp\u003e\n If a Block From To event is cancelled, the block will not move (the liquid\n will not flow)."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.block.BlockGrowEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "BlockGrowEvent(org.bukkit.block.Block,org.bukkit.block.BlockState)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "block"
              },
              {
                "kind": "PARAMETER",
                "name": "newState"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "cancelled"
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getNewState()",
            "comment": {
              "body": "Gets the state of the block where it will form or spread to.",
              "tags": "Returns The block state for this events block.",
              "plain": "Gets the state of the block where it will form or spread to.\n@return The block state for this events block"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "FIELD",
            "name": "newState"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          }
        ],
        "comment": {
          "body": "Called when a block grows naturally in the world.\n \u003cp\u003e\n Examples:\n \u003cul\u003e\n \u003cli\u003eWheat\n \u003cli\u003eSugar Cane\n \u003cli\u003eCactus\n \u003cli\u003eWatermelon\n \u003cli\u003ePumpkin\n \u003c/ul\u003e\n \u003cp\u003e\n If a Block Grow event is cancelled, the block will not grow.",
          "plain": "Called when a block grows naturally in the world.\n \u003cp\u003e\n Examples:\n \u003cul\u003e\n \u003cli\u003eWheat\n \u003cli\u003eSugar Cane\n \u003cli\u003eCactus\n \u003cli\u003eWatermelon\n \u003cli\u003ePumpkin\n \u003c/ul\u003e\n \u003cp\u003e\n If a Block Grow event is cancelled, the block will not grow."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.block.BlockIgniteEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "BlockIgniteEvent(org.bukkit.block.Block,org.bukkit.event.block.BlockIgniteEvent.IgniteCause,org.bukkit.block.Block)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cause"
              },
              {
                "kind": "PARAMETER",
                "name": "ignitingBlock"
              },
              {
                "kind": "PARAMETER",
                "name": "theBlock"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "BlockIgniteEvent(org.bukkit.block.Block,org.bukkit.event.block.BlockIgniteEvent.IgniteCause,org.bukkit.entity.Entity)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cause"
              },
              {
                "kind": "PARAMETER",
                "name": "ignitingEntity"
              },
              {
                "kind": "PARAMETER",
                "name": "theBlock"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "BlockIgniteEvent(org.bukkit.block.Block,org.bukkit.event.block.BlockIgniteEvent.IgniteCause,org.bukkit.entity.Entity,org.bukkit.block.Block)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cause"
              },
              {
                "kind": "PARAMETER",
                "name": "ignitingBlock"
              },
              {
                "kind": "PARAMETER",
                "name": "ignitingEntity"
              },
              {
                "kind": "PARAMETER",
                "name": "theBlock"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "cancel"
          },
          {
            "kind": "FIELD",
            "name": "cause"
          },
          {
            "kind": "METHOD",
            "name": "getCause()",
            "comment": {
              "body": "Gets the cause of block ignite.",
              "tags": "Returns An IgniteCause value detailing the cause of block ignition.",
              "plain": "Gets the cause of block ignite.\n@return An IgniteCause value detailing the cause of block ignition"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getIgnitingBlock()",
            "comment": {
              "body": "Gets the block which ignited this block",
              "tags": "Returns The Block that placed/ignited the fire block, or null if not ignited by a Block..",
              "plain": "Gets the block which ignited this block\n@return The Block that placed/ignited the fire block, or null if not ignited by a Block."
            }
          },
          {
            "kind": "METHOD",
            "name": "getIgnitingEntity()",
            "comment": {
              "body": "Gets the entity who ignited this block",
              "tags": "Returns The Entity that placed/ignited the fire block, or null if not ignited by a Entity..",
              "plain": "Gets the entity who ignited this block\n@return The Entity that placed/ignited the fire block, or null if not ignited by a Entity."
            }
          },
          {
            "kind": "METHOD",
            "name": "getPlayer()",
            "comment": {
              "body": "Gets the player who ignited this block",
              "tags": "Returns The Player that placed/ignited the fire block, or null if not ignited by a Player..",
              "plain": "Gets the player who ignited this block\n@return The Player that placed/ignited the fire block, or null if not ignited by a Player."
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "FIELD",
            "name": "ignitingBlock"
          },
          {
            "kind": "FIELD",
            "name": "ignitingEntity"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "ENUM",
            "name": "org.bukkit.event.block.BlockIgniteEvent.IgniteCause",
            "children": [
              {
                "kind": "ENUM_CONSTANT",
                "name": "ENDER_CRYSTAL",
                "comment": {
                  "body": "Block ignition caused by an Ender Crystal.",
                  "plain": "Block ignition caused by an Ender Crystal."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "EXPLOSION",
                "comment": {
                  "body": "Block ignition caused by explosion.",
                  "plain": "Block ignition caused by explosion."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "FIREBALL",
                "comment": {
                  "body": "Block ignition caused by an entity using a fireball.",
                  "plain": "Block ignition caused by an entity using a fireball."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "FLINT_AND_STEEL",
                "comment": {
                  "body": "Block ignition caused by a player or dispenser using flint-and-steel.",
                  "plain": "Block ignition caused by a player or dispenser using flint-and-steel."
                }
              },
              {
                "kind": "CONSTRUCTOR",
                "name": "IgniteCause()"
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "LAVA",
                "comment": {
                  "body": "Block ignition caused by lava.",
                  "plain": "Block ignition caused by lava."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "LIGHTNING",
                "comment": {
                  "body": "Block ignition caused by lightning.",
                  "plain": "Block ignition caused by lightning."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "SPREAD",
                "comment": {
                  "body": "Block ignition caused by dynamic spreading of fire.",
                  "plain": "Block ignition caused by dynamic spreading of fire."
                }
              },
              {
                "kind": "METHOD",
                "name": "valueOf(java.lang.String)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "name"
                  }
                ]
              },
              {
                "kind": "METHOD",
                "name": "values()"
              }
            ],
            "comment": {
              "body": "An enum to specify the cause of the ignite",
              "plain": "An enum to specify the cause of the ignite"
            }
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          }
        ],
        "comment": {
          "body": "Called when a block is ignited. If you want to catch when a Player places\n fire, you need to use \u003ca href\u003d\"org/bukkit/event/block/BlockPlaceEvent.html\" title\u003d\"class in org.bukkit.event.block\"\u003e\u003ccode\u003eBlockPlaceEvent\u003c/code\u003e\u003c/a\u003e.\n \u003cp\u003e\n If a Block Ignite event is cancelled, the block will not be ignited.",
          "plain": "Called when a block is ignited. If you want to catch when a Player places\n fire, you need to use {@link BlockPlaceEvent}.\n \u003cp\u003e\n If a Block Ignite event is cancelled, the block will not be ignited."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.block.BlockMultiPlaceEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "BlockMultiPlaceEvent(java.util.List\u003corg.bukkit.block.BlockState\u003e,org.bukkit.block.Block,org.bukkit.inventory.ItemStack,org.bukkit.entity.Player,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "canBuild"
              },
              {
                "kind": "PARAMETER",
                "name": "clicked"
              },
              {
                "kind": "PARAMETER",
                "name": "itemInHand"
              },
              {
                "kind": "PARAMETER",
                "name": "states"
              },
              {
                "kind": "PARAMETER",
                "name": "thePlayer"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getReplacedBlockStates()",
            "comment": {
              "body": "Gets a list of blockstates for all blocks which were replaced by the\n placement of the new blocks. Most of these blocks will just have a\n Material type of AIR.",
              "tags": "Returns immutable list of replaced BlockStates.",
              "plain": "Gets a list of blockstates for all blocks which were replaced by the\n placement of the new blocks. Most of these blocks will just have a\n Material type of AIR.\n@return immutable list of replaced BlockStates"
            }
          },
          {
            "kind": "FIELD",
            "name": "states"
          }
        ],
        "comment": {
          "body": "Fired when a single block placement action of a player triggers the\n creation of multiple blocks(e.g. placing a bed block). The block returned\n by \u003ca href\u003d\"org/bukkit/event/block/BlockPlaceEvent.html#getBlockPlaced()\"\u003e\u003ccode\u003eBlockPlaceEvent.getBlockPlaced()\u003c/code\u003e\u003c/a\u003e and its related methods is the block where\n the placed block would exist if the placement only affected a single\n block.",
          "plain": "Fired when a single block placement action of a player triggers the\n creation of multiple blocks(e.g. placing a bed block). The block returned\n by {@link #getBlockPlaced()} and its related methods is the block where\n the placed block would exist if the placement only affected a single\n block."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.block.BlockPhysicsEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "BlockPhysicsEvent(org.bukkit.block.Block,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "block"
              },
              {
                "kind": "PARAMETER",
                "name": "changed"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@deprecated Magic value\n@param block the block involved in this event\n@param changed the changed block\u0027s type id"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "BlockPhysicsEvent(org.bukkit.block.Block,int,int,int,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "block"
              },
              {
                "kind": "PARAMETER",
                "name": "changed"
              },
              {
                "kind": "PARAMETER",
                "name": "sourceX"
              },
              {
                "kind": "PARAMETER",
                "name": "sourceY"
              },
              {
                "kind": "PARAMETER",
                "name": "sourceZ"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@deprecated Magic value\n@param block the block involved in this event\n@param changed the changed block\u0027s type id\n@param sourceX the x of the source block\n@param sourceY the y of the source block\n@param sourceZ the z of the source block"
            }
          },
          {
            "kind": "FIELD",
            "name": "cancel"
          },
          {
            "kind": "FIELD",
            "name": "changed"
          },
          {
            "kind": "METHOD",
            "name": "getChangedType()",
            "comment": {
              "body": "Gets the type of block that changed, causing this event",
              "tags": "Returns Changed block\u0027s type.",
              "plain": "Gets the type of block that changed, causing this event\n@return Changed block\u0027s type"
            }
          },
          {
            "kind": "METHOD",
            "name": "getChangedTypeId()",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Gets the type of block that changed, causing this event",
              "tags": "Returns Changed block\u0027s type id.",
              "plain": "Gets the type of block that changed, causing this event\n@return Changed block\u0027s type id\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getSourceBlock()",
            "comment": {
              "body": "Gets the source block, causing this event",
              "tags": "Returns Source block.",
              "plain": "Gets the source block, causing this event\n@return Source block"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "sourceBlock"
          },
          {
            "kind": "FIELD",
            "name": "sourceX"
          },
          {
            "kind": "FIELD",
            "name": "sourceY"
          },
          {
            "kind": "FIELD",
            "name": "sourceZ"
          }
        ],
        "comment": {
          "body": "Thrown when a block physics check is called",
          "plain": "Thrown when a block physics check is called"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.block.BlockPistonEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "BlockPistonEvent(org.bukkit.block.Block,org.bukkit.block.BlockFace)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "block"
              },
              {
                "kind": "PARAMETER",
                "name": "direction"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "cancelled"
          },
          {
            "kind": "FIELD",
            "name": "direction"
          },
          {
            "kind": "METHOD",
            "name": "getDirection()",
            "comment": {
              "body": "Return the direction in which the piston will operate.",
              "tags": "Returns direction of the piston.",
              "plain": "Return the direction in which the piston will operate.\n@return direction of the piston"
            }
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "METHOD",
            "name": "isSticky()",
            "comment": {
              "body": "Returns true if the Piston in the event is sticky.",
              "tags": "Returns stickiness of the piston.",
              "plain": "Returns true if the Piston in the event is sticky.\n@return stickiness of the piston"
            }
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancelled"
              }
            ]
          }
        ],
        "comment": {
          "body": "Called when a piston block is triggered",
          "plain": "Called when a piston block is triggered"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.block.BlockPistonExtendEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "BlockPistonExtendEvent(org.bukkit.block.Block,int,org.bukkit.block.BlockFace)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "block"
              },
              {
                "kind": "PARAMETER",
                "name": "direction"
              },
              {
                "kind": "PARAMETER",
                "name": "length"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "BlockPistonExtendEvent(org.bukkit.block.Block,java.util.List\u003corg.bukkit.block.Block\u003e,org.bukkit.block.BlockFace)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "block"
              },
              {
                "kind": "PARAMETER",
                "name": "blocks"
              },
              {
                "kind": "PARAMETER",
                "name": "direction"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "blocks"
          },
          {
            "kind": "METHOD",
            "name": "getBlocks()",
            "comment": {
              "body": "Get an immutable list of the blocks which will be moved by the\n extending.",
              "tags": "Returns Immutable list of the moved blocks..",
              "plain": "Get an immutable list of the blocks which will be moved by the\n extending.\n@return Immutable list of the moved blocks."
            }
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getLength()",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Get the amount of blocks which will be moved while extending.",
              "tags": "Returns the amount of moving blocks.",
              "plain": "Get the amount of blocks which will be moved while extending.\n@return the amount of moving blocks\n@deprecated slime blocks make the value of this method\n          inaccurate due to blocks being pushed at the side"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "FIELD",
            "name": "length"
          }
        ],
        "comment": {
          "body": "Called when a piston extends",
          "plain": "Called when a piston extends"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.block.BlockPistonRetractEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "BlockPistonRetractEvent(org.bukkit.block.Block,java.util.List\u003corg.bukkit.block.Block\u003e,org.bukkit.block.BlockFace)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "block"
              },
              {
                "kind": "PARAMETER",
                "name": "blocks"
              },
              {
                "kind": "PARAMETER",
                "name": "direction"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "blocks"
          },
          {
            "kind": "METHOD",
            "name": "getBlocks()",
            "comment": {
              "body": "Get an immutable list of the blocks which will be moved by the\n extending.",
              "tags": "Returns Immutable list of the moved blocks..",
              "plain": "Get an immutable list of the blocks which will be moved by the\n extending.\n@return Immutable list of the moved blocks."
            }
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getRetractLocation()",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Gets the location where the possible moving block might be if the\n retracting piston is sticky.",
              "tags": "Returns The possible location of the possibly moving block..",
              "plain": "Gets the location where the possible moving block might be if the\n retracting piston is sticky.\n@return The possible location of the possibly moving block."
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          }
        ],
        "comment": {
          "body": "Called when a piston retracts",
          "plain": "Called when a piston retracts"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.block.BlockPlaceEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "BlockPlaceEvent(org.bukkit.block.Block,org.bukkit.block.BlockState,org.bukkit.block.Block,org.bukkit.inventory.ItemStack,org.bukkit.entity.Player,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "canBuild"
              },
              {
                "kind": "PARAMETER",
                "name": "itemInHand"
              },
              {
                "kind": "PARAMETER",
                "name": "placedAgainst"
              },
              {
                "kind": "PARAMETER",
                "name": "placedBlock"
              },
              {
                "kind": "PARAMETER",
                "name": "replacedBlockState"
              },
              {
                "kind": "PARAMETER",
                "name": "thePlayer"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "BlockPlaceEvent(org.bukkit.block.Block,org.bukkit.block.BlockState,org.bukkit.block.Block,org.bukkit.inventory.ItemStack,org.bukkit.entity.Player,boolean,org.bukkit.inventory.EquipmentSlot)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "canBuild"
              },
              {
                "kind": "PARAMETER",
                "name": "hand"
              },
              {
                "kind": "PARAMETER",
                "name": "itemInHand"
              },
              {
                "kind": "PARAMETER",
                "name": "placedAgainst"
              },
              {
                "kind": "PARAMETER",
                "name": "placedBlock"
              },
              {
                "kind": "PARAMETER",
                "name": "replacedBlockState"
              },
              {
                "kind": "PARAMETER",
                "name": "thePlayer"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "canBuild"
          },
          {
            "kind": "METHOD",
            "name": "canBuild()",
            "comment": {
              "body": "Gets the value whether the player would be allowed to build here.\n Defaults to spawn if the server was going to stop them (such as, the\n player is in Spawn). Note that this is an entirely different check\n than BLOCK_CANBUILD, as this refers to a player, not universe-physics\n rule like cactus on dirt.",
              "tags": "Returns boolean whether the server would allow a player to build here.",
              "plain": "Gets the value whether the player would be allowed to build here.\n Defaults to spawn if the server was going to stop them (such as, the\n player is in Spawn). Note that this is an entirely different check\n than BLOCK_CANBUILD, as this refers to a player, not universe-physics\n rule like cactus on dirt.\n@return boolean whether the server would allow a player to build here"
            }
          },
          {
            "kind": "FIELD",
            "name": "cancel"
          },
          {
            "kind": "METHOD",
            "name": "getBlockAgainst()",
            "comment": {
              "body": "Gets the block that this block was placed against",
              "tags": "Returns Block the block that the new block was placed against.",
              "plain": "Gets the block that this block was placed against\n@return Block the block that the new block was placed against"
            }
          },
          {
            "kind": "METHOD",
            "name": "getBlockPlaced()",
            "comment": {
              "body": "Clarity method for getting the placed block. Not really needed except\n for reasons of clarity.",
              "tags": "Returns The Block that was placed.",
              "plain": "Clarity method for getting the placed block. Not really needed except\n for reasons of clarity.\n@return The Block that was placed"
            }
          },
          {
            "kind": "METHOD",
            "name": "getBlockReplacedState()",
            "comment": {
              "body": "Gets the BlockState for the block which was replaced. Material type air\n mostly.",
              "tags": "Returns The BlockState for the block which was replaced..",
              "plain": "Gets the BlockState for the block which was replaced. Material type air\n mostly.\n@return The BlockState for the block which was replaced."
            }
          },
          {
            "kind": "METHOD",
            "name": "getHand()",
            "comment": {
              "body": "Gets the hand which placed the block",
              "tags": "Returns Main or off-hand, depending on which hand was used to place the block.",
              "plain": "Gets the hand which placed the block\n@return Main or off-hand, depending on which hand was used to place the block"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getItemInHand()",
            "comment": {
              "body": "Gets the item in the player\u0027s hand when they placed the block.",
              "tags": "Returns The ItemStack for the item in the player\u0027s hand when they\n     placed the block.",
              "plain": "Gets the item in the player\u0027s hand when they placed the block.\n@return The ItemStack for the item in the player\u0027s hand when they\n     placed the block"
            }
          },
          {
            "kind": "METHOD",
            "name": "getPlayer()",
            "comment": {
              "body": "Gets the player who placed the block involved in this event.",
              "tags": "Returns The Player who placed the block involved in this event.",
              "plain": "Gets the player who placed the block involved in this event.\n@return The Player who placed the block involved in this event"
            }
          },
          {
            "kind": "FIELD",
            "name": "hand"
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "FIELD",
            "name": "itemInHand"
          },
          {
            "kind": "FIELD",
            "name": "placedAgainst"
          },
          {
            "kind": "FIELD",
            "name": "player"
          },
          {
            "kind": "FIELD",
            "name": "replacedBlockState"
          },
          {
            "kind": "METHOD",
            "name": "setBuild(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "canBuild"
              }
            ],
            "comment": {
              "body": "Sets the canBuild state of this event. Set to true if you want the\n player to be able to build.",
              "plain": "Sets the canBuild state of this event. Set to true if you want the\n player to be able to build.\n@param canBuild true if you want the player to be able to build"
            }
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          }
        ],
        "comment": {
          "body": "Called when a block is placed by a player.\n \u003cp\u003e\n If a Block Place event is cancelled, the block will not be placed.",
          "plain": "Called when a block is placed by a player.\n \u003cp\u003e\n If a Block Place event is cancelled, the block will not be placed."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.block.BlockRedstoneEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "BlockRedstoneEvent(org.bukkit.block.Block,int,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "block"
              },
              {
                "kind": "PARAMETER",
                "name": "newCurrent"
              },
              {
                "kind": "PARAMETER",
                "name": "oldCurrent"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getNewCurrent()",
            "comment": {
              "body": "Gets the new current of this block",
              "tags": "Returns The new current.",
              "plain": "Gets the new current of this block\n@return The new current"
            }
          },
          {
            "kind": "METHOD",
            "name": "getOldCurrent()",
            "comment": {
              "body": "Gets the old current of this block",
              "tags": "Returns The previous current.",
              "plain": "Gets the old current of this block\n@return The previous current"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "FIELD",
            "name": "newCurrent"
          },
          {
            "kind": "FIELD",
            "name": "oldCurrent"
          },
          {
            "kind": "METHOD",
            "name": "setNewCurrent(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "newCurrent"
              }
            ],
            "comment": {
              "body": "Sets the new current of this block",
              "plain": "Sets the new current of this block\n@param newCurrent The new current to set"
            }
          }
        ],
        "comment": {
          "body": "Called when a redstone current changes",
          "plain": "Called when a redstone current changes"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.block.BlockSpreadEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "BlockSpreadEvent(org.bukkit.block.Block,org.bukkit.block.Block,org.bukkit.block.BlockState)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "block"
              },
              {
                "kind": "PARAMETER",
                "name": "newState"
              },
              {
                "kind": "PARAMETER",
                "name": "source"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getSource()",
            "comment": {
              "body": "Gets the source block involved in this event.",
              "tags": "Returns the Block for the source block involved in this event..",
              "plain": "Gets the source block involved in this event.\n@return the Block for the source block involved in this event."
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "FIELD",
            "name": "source"
          }
        ],
        "comment": {
          "body": "Called when a block spreads based on world conditions.\n \u003cp\u003e\n Use \u003ca href\u003d\"org/bukkit/event/block/BlockFormEvent.html\" title\u003d\"class in org.bukkit.event.block\"\u003e\u003ccode\u003eBlockFormEvent\u003c/code\u003e\u003c/a\u003e to catch blocks that \"randomly\" form instead of\n actually spread.\n \u003cp\u003e\n Examples:\n \u003cul\u003e\n \u003cli\u003eMushrooms spreading.\n \u003cli\u003eFire spreading.\n \u003c/ul\u003e\n \u003cp\u003e\n If a Block Spread event is cancelled, the block will not spread.",
          "plain": "Called when a block spreads based on world conditions.\n \u003cp\u003e\n Use {@link BlockFormEvent} to catch blocks that \"randomly\" form instead of\n actually spread.\n \u003cp\u003e\n Examples:\n \u003cul\u003e\n \u003cli\u003eMushrooms spreading.\n \u003cli\u003eFire spreading.\n \u003c/ul\u003e\n \u003cp\u003e\n If a Block Spread event is cancelled, the block will not spread.\n@see BlockFormEvent"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.block.CauldronLevelChangeEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "CauldronLevelChangeEvent(org.bukkit.block.Block,org.bukkit.entity.Entity,org.bukkit.event.block.CauldronLevelChangeEvent.ChangeReason,int,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "block"
              },
              {
                "kind": "PARAMETER",
                "name": "entity"
              },
              {
                "kind": "PARAMETER",
                "name": "newLevel"
              },
              {
                "kind": "PARAMETER",
                "name": "oldLevel"
              },
              {
                "kind": "PARAMETER",
                "name": "reason"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "cancelled"
          },
          {
            "kind": "FIELD",
            "name": "entity"
          },
          {
            "kind": "METHOD",
            "name": "getEntity()",
            "comment": {
              "body": "Get entity which did this. May be null.",
              "tags": "Returns acting entity.",
              "plain": "Get entity which did this. May be null.\n@return acting entity"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getNewLevel()"
          },
          {
            "kind": "METHOD",
            "name": "getOldLevel()"
          },
          {
            "kind": "METHOD",
            "name": "getReason()"
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "FIELD",
            "name": "newLevel"
          },
          {
            "kind": "FIELD",
            "name": "oldLevel"
          },
          {
            "kind": "ENUM",
            "name": "org.bukkit.event.block.CauldronLevelChangeEvent.ChangeReason",
            "children": [
              {
                "kind": "ENUM_CONSTANT",
                "name": "ARMOR_WASH",
                "comment": {
                  "body": "Player cleaning their armor.",
                  "plain": "Player cleaning their armor."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "BANNER_WASH",
                "comment": {
                  "body": "Player cleaning their banner.",
                  "plain": "Player cleaning their banner."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "BOTTLE_EMPTY",
                "comment": {
                  "body": "Player filling the cauldron by emptying their bottle.",
                  "plain": "Player filling the cauldron by emptying their bottle."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "BOTTLE_FILL",
                "comment": {
                  "body": "Player emptying the cauldron by filling their bottle.",
                  "plain": "Player emptying the cauldron by filling their bottle."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "BUCKET_EMPTY",
                "comment": {
                  "body": "Player filling the cauldron by emptying their bucket.",
                  "plain": "Player filling the cauldron by emptying their bucket."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "BUCKET_FILL",
                "comment": {
                  "body": "Player emptying the cauldron by filling their bucket.",
                  "plain": "Player emptying the cauldron by filling their bucket."
                }
              },
              {
                "kind": "CONSTRUCTOR",
                "name": "ChangeReason()"
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "EVAPORATE",
                "comment": {
                  "body": "Evaporating due to biome dryness.",
                  "plain": "Evaporating due to biome dryness."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "EXTINGUISH",
                "comment": {
                  "body": "Entity being extinguished.",
                  "plain": "Entity being extinguished."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "UNKNOWN",
                "comment": {
                  "body": "Unknown.",
                  "plain": "Unknown."
                }
              },
              {
                "kind": "METHOD",
                "name": "valueOf(java.lang.String)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "name"
                  }
                ]
              },
              {
                "kind": "METHOD",
                "name": "values()"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "reason"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancelled"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "setNewLevel(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "newLevel"
              }
            ]
          }
        ]
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.block.EntityBlockFormEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "EntityBlockFormEvent(org.bukkit.entity.Entity,org.bukkit.block.Block,org.bukkit.block.BlockState)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "block"
              },
              {
                "kind": "PARAMETER",
                "name": "blockstate"
              },
              {
                "kind": "PARAMETER",
                "name": "entity"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "entity"
          },
          {
            "kind": "METHOD",
            "name": "getEntity()",
            "comment": {
              "body": "Get the entity that formed the block.",
              "tags": "Returns Entity involved in event.",
              "plain": "Get the entity that formed the block.\n@return Entity involved in event"
            }
          }
        ],
        "comment": {
          "body": "Called when a block is formed by entities.\n \u003cp\u003e\n Examples:\n \u003cul\u003e\n \u003cli\u003eSnow formed by a \u003ca href\u003d\"org/bukkit/entity/Snowman.html\" title\u003d\"interface in org.bukkit.entity\"\u003e\u003ccode\u003eSnowman\u003c/code\u003e\u003c/a\u003e.\n \u003cli\u003eFrosted Ice formed by the Frost Walker enchantment.\n \u003c/ul\u003e",
          "plain": "Called when a block is formed by entities.\n \u003cp\u003e\n Examples:\n \u003cul\u003e\n \u003cli\u003eSnow formed by a {@link org.bukkit.entity.Snowman}.\n \u003cli\u003eFrosted Ice formed by the Frost Walker enchantment.\n \u003c/ul\u003e"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.block.LeavesDecayEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "LeavesDecayEvent(org.bukkit.block.Block)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "block"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "cancel"
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          }
        ],
        "comment": {
          "body": "Called when leaves are decaying naturally.\n \u003cp\u003e\n If a Leaves Decay event is cancelled, the leaves will not decay.",
          "plain": "Called when leaves are decaying naturally.\n \u003cp\u003e\n If a Leaves Decay event is cancelled, the leaves will not decay."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.block.NotePlayEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "NotePlayEvent(org.bukkit.block.Block,org.bukkit.Instrument,org.bukkit.Note)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "block"
              },
              {
                "kind": "PARAMETER",
                "name": "instrument"
              },
              {
                "kind": "PARAMETER",
                "name": "note"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "cancelled"
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getInstrument()",
            "comment": {
              "body": "Gets the \u003ca href\u003d\"org/bukkit/Instrument.html\" title\u003d\"enum in org.bukkit\"\u003e\u003ccode\u003eInstrument\u003c/code\u003e\u003c/a\u003e to be used.",
              "tags": "Returns the Instrument;.",
              "plain": "Gets the {@link Instrument} to be used.\n@return the Instrument;"
            }
          },
          {
            "kind": "METHOD",
            "name": "getNote()",
            "comment": {
              "body": "Gets the \u003ca href\u003d\"org/bukkit/Note.html\" title\u003d\"class in org.bukkit\"\u003e\u003ccode\u003eNote\u003c/code\u003e\u003c/a\u003e to be played.",
              "tags": "Returns the Note..",
              "plain": "Gets the {@link Note} to be played.\n@return the Note."
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "FIELD",
            "name": "instrument"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "FIELD",
            "name": "note"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "setInstrument(org.bukkit.Instrument)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "instrument"
              }
            ],
            "comment": {
              "body": "Overrides the \u003ca href\u003d\"org/bukkit/Instrument.html\" title\u003d\"enum in org.bukkit\"\u003e\u003ccode\u003eInstrument\u003c/code\u003e\u003c/a\u003e to be used.",
              "plain": "Overrides the {@link Instrument} to be used.\n@param instrument the Instrument. Has no effect if null."
            }
          },
          {
            "kind": "METHOD",
            "name": "setNote(org.bukkit.Note)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "note"
              }
            ],
            "comment": {
              "body": "Overrides the \u003ca href\u003d\"org/bukkit/Note.html\" title\u003d\"class in org.bukkit\"\u003e\u003ccode\u003eNote\u003c/code\u003e\u003c/a\u003e to be played.",
              "plain": "Overrides the {@link Note} to be played.\n@param note the Note. Has no effect if null."
            }
          }
        ],
        "comment": {
          "body": "Called when a note block is being played through player interaction or a\n redstone current.",
          "plain": "Called when a note block is being played through player interaction or a\n redstone current."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.block.SignChangeEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "SignChangeEvent(org.bukkit.block.Block,org.bukkit.entity.Player,java.lang.String[])",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "theBlock"
              },
              {
                "kind": "PARAMETER",
                "name": "theLines"
              },
              {
                "kind": "PARAMETER",
                "name": "thePlayer"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "cancel"
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getLine(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "index"
              }
            ],
            "comment": {
              "body": "Gets a single line of text from the sign involved in this event.",
              "tags": "Returns the String containing the line of text associated with the\n     provided index.",
              "plain": "Gets a single line of text from the sign involved in this event.\n@param index index of the line to get\n@return the String containing the line of text associated with the\n     provided index\n@throws IndexOutOfBoundsException thrown when the provided index is {@literal \u003e 3\n     or \u003c 0}"
            }
          },
          {
            "kind": "METHOD",
            "name": "getLines()",
            "comment": {
              "body": "Gets all of the lines of text from the sign involved in this event.",
              "tags": "Returns the String array for the sign\u0027s lines new text.",
              "plain": "Gets all of the lines of text from the sign involved in this event.\n@return the String array for the sign\u0027s lines new text"
            }
          },
          {
            "kind": "METHOD",
            "name": "getPlayer()",
            "comment": {
              "body": "Gets the player changing the sign involved in this event.",
              "tags": "Returns the Player involved in this event.",
              "plain": "Gets the player changing the sign involved in this event.\n@return the Player involved in this event"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "FIELD",
            "name": "lines"
          },
          {
            "kind": "FIELD",
            "name": "player"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "setLine(int,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "index"
              },
              {
                "kind": "PARAMETER",
                "name": "line"
              }
            ],
            "comment": {
              "body": "Sets a single line for the sign involved in this event",
              "plain": "Sets a single line for the sign involved in this event\n@param index index of the line to set\n@param line text to set\n@throws IndexOutOfBoundsException thrown when the provided index is {@literal \u003e 3\n     or \u003c 0}"
            }
          }
        ],
        "comment": {
          "body": "Called when a sign is changed by a player.\n \u003cp\u003e\n If a Sign Change event is cancelled, the sign will not be changed.",
          "plain": "Called when a sign is changed by a player.\n \u003cp\u003e\n If a Sign Change event is cancelled, the sign will not be changed."
        }
      }
    ]
  },
  {
    "kind": "PACKAGE",
    "name": "org.bukkit.event.command",
    "children": [
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.command.UnknownCommandEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "UnknownCommandEvent(org.bukkit.command.CommandSender,java.lang.String,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "commandLine"
              },
              {
                "kind": "PARAMETER",
                "name": "message"
              },
              {
                "kind": "PARAMETER",
                "name": "sender"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "commandLine"
          },
          {
            "kind": "METHOD",
            "name": "getCommandLine()",
            "comment": {
              "body": "Gets the command that was send\n \u003cp\u003e",
              "tags": "Returns Command sent.",
              "plain": "Gets the command that was send\n \u003cp\u003e\n@return Command sent"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getMessage()",
            "comment": {
              "body": "Gets message that will be returned\n \u003cp\u003e",
              "tags": "Returns Unknown command message.",
              "plain": "Gets message that will be returned\n \u003cp\u003e\n@return Unknown command message"
            }
          },
          {
            "kind": "METHOD",
            "name": "getSender()",
            "comment": {
              "body": "Gets the CommandSender or ConsoleCommandSender\n \u003cp\u003e",
              "tags": "Returns Sender of the command.",
              "plain": "Gets the CommandSender or ConsoleCommandSender\n \u003cp\u003e\n@return Sender of the command"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "FIELD",
            "name": "message"
          },
          {
            "kind": "FIELD",
            "name": "sender"
          },
          {
            "kind": "METHOD",
            "name": "setMessage(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "message"
              }
            ],
            "comment": {
              "body": "Sets message that will be returned\n \u003cp\u003e\n Set to null to avoid any message being sent",
              "plain": "Sets message that will be returned\n \u003cp\u003e\n Set to null to avoid any message being sent\n@param message the message to be returned, or null"
            }
          }
        ],
        "comment": {
          "body": "Thrown when a player executes a command that is not defined",
          "plain": "Thrown when a player executes a command that is not defined"
        }
      }
    ]
  },
  {
    "kind": "PACKAGE",
    "name": "org.bukkit.event.enchantment",
    "children": [
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.enchantment.EnchantItemEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "EnchantItemEvent(org.bukkit.entity.Player,org.bukkit.inventory.InventoryView,org.bukkit.block.Block,org.bukkit.inventory.ItemStack,int,java.util.Map\u003corg.bukkit.enchantments.Enchantment,java.lang.Integer\u003e,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "enchanter"
              },
              {
                "kind": "PARAMETER",
                "name": "enchants"
              },
              {
                "kind": "PARAMETER",
                "name": "i"
              },
              {
                "kind": "PARAMETER",
                "name": "item"
              },
              {
                "kind": "PARAMETER",
                "name": "level"
              },
              {
                "kind": "PARAMETER",
                "name": "table"
              },
              {
                "kind": "PARAMETER",
                "name": "view"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "button"
          },
          {
            "kind": "FIELD",
            "name": "cancelled"
          },
          {
            "kind": "FIELD",
            "name": "enchanter"
          },
          {
            "kind": "FIELD",
            "name": "enchants"
          },
          {
            "kind": "METHOD",
            "name": "getEnchantBlock()",
            "comment": {
              "body": "Gets the block being used to enchant the item",
              "tags": "Returns the block used for enchanting.",
              "plain": "Gets the block being used to enchant the item\n@return the block used for enchanting"
            }
          },
          {
            "kind": "METHOD",
            "name": "getEnchanter()",
            "comment": {
              "body": "Gets the player enchanting the item",
              "tags": "Returns enchanting player.",
              "plain": "Gets the player enchanting the item\n@return enchanting player"
            }
          },
          {
            "kind": "METHOD",
            "name": "getEnchantsToAdd()",
            "comment": {
              "body": "Get map of enchantment (levels, keyed by type) to be added to item\n (modify map returned to change values). Note: Any enchantments not\n allowed for the item will be ignored",
              "tags": "Returns map of enchantment levels, keyed by enchantment.",
              "plain": "Get map of enchantment (levels, keyed by type) to be added to item\n (modify map returned to change values). Note: Any enchantments not\n allowed for the item will be ignored\n@return map of enchantment levels, keyed by enchantment"
            }
          },
          {
            "kind": "METHOD",
            "name": "getExpLevelCost()",
            "comment": {
              "body": "Get cost in exp levels of the enchantment",
              "tags": "Returns experience level cost.",
              "plain": "Get cost in exp levels of the enchantment\n@return experience level cost"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getItem()",
            "comment": {
              "body": "Gets the item to be enchanted (can be modified)",
              "tags": "Returns ItemStack of item.",
              "plain": "Gets the item to be enchanted (can be modified)\n@return ItemStack of item"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "FIELD",
            "name": "item"
          },
          {
            "kind": "FIELD",
            "name": "level"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "setExpLevelCost(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "level"
              }
            ],
            "comment": {
              "body": "Set cost in exp levels of the enchantment",
              "plain": "Set cost in exp levels of the enchantment\n@param level - cost in levels"
            }
          },
          {
            "kind": "FIELD",
            "name": "table"
          },
          {
            "kind": "METHOD",
            "name": "whichButton()",
            "comment": {
              "body": "Which button was pressed to initiate the enchanting.",
              "tags": "Returns The button index (0, 1, or 2)..",
              "plain": "Which button was pressed to initiate the enchanting.\n@return The button index (0, 1, or 2)."
            }
          }
        ],
        "comment": {
          "body": "Called when an ItemStack is successfully enchanted (currently at\n enchantment table)",
          "plain": "Called when an ItemStack is successfully enchanted (currently at\n enchantment table)"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.enchantment.PrepareItemEnchantEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PrepareItemEnchantEvent(org.bukkit.entity.Player,org.bukkit.inventory.InventoryView,org.bukkit.block.Block,org.bukkit.inventory.ItemStack,org.bukkit.enchantments.EnchantmentOffer[],int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "bonus"
              },
              {
                "kind": "PARAMETER",
                "name": "enchanter"
              },
              {
                "kind": "PARAMETER",
                "name": "item"
              },
              {
                "kind": "PARAMETER",
                "name": "offers"
              },
              {
                "kind": "PARAMETER",
                "name": "table"
              },
              {
                "kind": "PARAMETER",
                "name": "view"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "bonus"
          },
          {
            "kind": "FIELD",
            "name": "cancelled"
          },
          {
            "kind": "FIELD",
            "name": "enchanter"
          },
          {
            "kind": "METHOD",
            "name": "getEnchantBlock()",
            "comment": {
              "body": "Gets the block being used to enchant the item",
              "tags": "Returns the block used for enchanting.",
              "plain": "Gets the block being used to enchant the item\n@return the block used for enchanting"
            }
          },
          {
            "kind": "METHOD",
            "name": "getEnchanter()",
            "comment": {
              "body": "Gets the player enchanting the item",
              "tags": "Returns enchanting player.",
              "plain": "Gets the player enchanting the item\n@return enchanting player"
            }
          },
          {
            "kind": "METHOD",
            "name": "getEnchantmentBonus()",
            "comment": {
              "body": "Get enchantment bonus in effect - corresponds to number of bookshelves",
              "tags": "Returns enchantment bonus.",
              "plain": "Get enchantment bonus in effect - corresponds to number of bookshelves\n@return enchantment bonus"
            }
          },
          {
            "kind": "METHOD",
            "name": "getExpLevelCostsOffered()",
            "comment": {
              "body": "Get a list of offered experience level costs of the enchantment.",
              "tags": "Returns experience level costs offered.",
              "plain": "Get a list of offered experience level costs of the enchantment.\n@return experience level costs offered\n@deprecated Use {@link #getOffers()} instead of this method"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getItem()",
            "comment": {
              "body": "Gets the item to be enchanted.",
              "tags": "Returns ItemStack of item.",
              "plain": "Gets the item to be enchanted.\n@return ItemStack of item"
            }
          },
          {
            "kind": "METHOD",
            "name": "getOffers()",
            "comment": {
              "body": "Get a list of available \u003ca href\u003d\"org/bukkit/enchantments/EnchantmentOffer.html\" title\u003d\"class in org.bukkit.enchantments\"\u003e\u003ccode\u003eEnchantmentOffer\u003c/code\u003e\u003c/a\u003e for the player. You can\n modify the values to change the available offers for the player. An offer\n may be null, if there isn\u0027t a enchantment offer at a specific slot. There\n are 3 slots in the enchantment table available to modify.",
              "tags": "Returns list of available enchantment offers.",
              "plain": "Get a list of available {@link EnchantmentOffer} for the player. You can\n modify the values to change the available offers for the player. An offer\n may be null, if there isn\u0027t a enchantment offer at a specific slot. There\n are 3 slots in the enchantment table available to modify.\n@return list of available enchantment offers"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "FIELD",
            "name": "item"
          },
          {
            "kind": "FIELD",
            "name": "offers"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "table"
          }
        ],
        "comment": {
          "body": "Called when an ItemStack is inserted in an enchantment table - can be\n called multiple times",
          "plain": "Called when an ItemStack is inserted in an enchantment table - can be\n called multiple times"
        }
      }
    ]
  },
  {
    "kind": "PACKAGE",
    "name": "org.bukkit.event.entity",
    "children": [
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.entity.AreaEffectCloudApplyEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "AreaEffectCloudApplyEvent(org.bukkit.entity.AreaEffectCloud,java.util.List\u003corg.bukkit.entity.LivingEntity\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "affectedEntities"
              },
              {
                "kind": "PARAMETER",
                "name": "entity"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "affectedEntities"
          },
          {
            "kind": "METHOD",
            "name": "getAffectedEntities()",
            "comment": {
              "body": "Retrieves a mutable list of the effected entities\n \u003cp\u003e\n It is important to note that not every entity in this list\n is guaranteed to be effected.  The cloud may die during the\n application of its effects due to the depletion of \u003ca href\u003d\"org/bukkit/entity/AreaEffectCloud.html#getDurationOnUse()\"\u003e\u003ccode\u003eAreaEffectCloud.getDurationOnUse()\u003c/code\u003e\u003c/a\u003e\n or \u003ca href\u003d\"org/bukkit/entity/AreaEffectCloud.html#getRadiusOnUse()\"\u003e\u003ccode\u003eAreaEffectCloud.getRadiusOnUse()\u003c/code\u003e\u003c/a\u003e",
              "tags": "Returns the affected entity list.",
              "plain": "Retrieves a mutable list of the effected entities\n \u003cp\u003e\n It is important to note that not every entity in this list\n is guaranteed to be effected.  The cloud may die during the\n application of its effects due to the depletion of {@link AreaEffectCloud#getDurationOnUse()}\n or {@link AreaEffectCloud#getRadiusOnUse()}\n@return the affected entity list"
            }
          },
          {
            "kind": "METHOD",
            "name": "getEntity()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          }
        ],
        "comment": {
          "body": "Called when a lingering potion applies it\u0027s effects. Happens\n once every 5 ticks",
          "plain": "Called when a lingering potion applies it\u0027s effects. Happens\n once every 5 ticks"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.entity.CreatureSpawnEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "CreatureSpawnEvent(org.bukkit.entity.LivingEntity,org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "spawnReason"
              },
              {
                "kind": "PARAMETER",
                "name": "spawnee"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getEntity()"
          },
          {
            "kind": "METHOD",
            "name": "getSpawnReason()",
            "comment": {
              "body": "Gets the reason for why the creature is being spawned.",
              "tags": "Returns A SpawnReason value detailing the reason for the creature being\n     spawned.",
              "plain": "Gets the reason for why the creature is being spawned.\n@return A SpawnReason value detailing the reason for the creature being\n     spawned"
            }
          },
          {
            "kind": "ENUM",
            "name": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason",
            "children": [
              {
                "kind": "ENUM_CONSTANT",
                "name": "BREEDING",
                "comment": {
                  "body": "When an animal breeds to create a child",
                  "plain": "When an animal breeds to create a child"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "BUILD_IRONGOLEM",
                "comment": {
                  "body": "When an iron golem is spawned by being built",
                  "plain": "When an iron golem is spawned by being built"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "BUILD_SNOWMAN",
                "comment": {
                  "body": "When a snowman is spawned by being built",
                  "plain": "When a snowman is spawned by being built"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "BUILD_WITHER",
                "comment": {
                  "body": "When a wither boss is spawned by being built",
                  "plain": "When a wither boss is spawned by being built"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "CHUNK_GEN",
                "comment": {
                  "body": "When a creature spawns due to chunk generation",
                  "plain": "When a creature spawns due to chunk generation"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "CURED",
                "comment": {
                  "body": "When a villager is cured from infection",
                  "plain": "When a villager is cured from infection"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "CUSTOM",
                "comment": {
                  "body": "When a creature is spawned by plugins",
                  "plain": "When a creature is spawned by plugins"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "DEFAULT",
                "comment": {
                  "body": "When an entity is missing a SpawnReason",
                  "plain": "When an entity is missing a SpawnReason"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "DISPENSE_EGG",
                "comment": {
                  "body": "When a creature is spawned by a dispenser dispensing an egg",
                  "plain": "When a creature is spawned by a dispenser dispensing an egg"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "EGG",
                "comment": {
                  "body": "When a creature spawns from an egg",
                  "plain": "When a creature spawns from an egg"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "ENDER_PEARL",
                "comment": {
                  "body": "When an entity is spawned as a result of ender pearl usage",
                  "plain": "When an entity is spawned as a result of ender pearl usage"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "INFECTION",
                "comment": {
                  "body": "When a zombie infects a villager",
                  "plain": "When a zombie infects a villager"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "JOCKEY",
                "comment": {
                  "body": "When an entity spawns as a jockey of another entity (mostly spider\n jockeys)",
                  "plain": "When an entity spawns as a jockey of another entity (mostly spider\n jockeys)"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "LIGHTNING",
                "comment": {
                  "body": "When a creature spawns because of a lightning strike",
                  "plain": "When a creature spawns because of a lightning strike"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "MOUNT",
                "comment": {
                  "body": "When an entity spawns as a mount of another entity (mostly chicken\n jockeys)",
                  "plain": "When an entity spawns as a mount of another entity (mostly chicken\n jockeys)"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "NATURAL",
                "comment": {
                  "body": "When something spawns from natural means",
                  "plain": "When something spawns from natural means"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "NETHER_PORTAL",
                "comment": {
                  "body": "When a creature is spawned by nether portal",
                  "plain": "When a creature is spawned by nether portal"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "OCELOT_BABY",
                "comment": {
                  "body": "When an ocelot has a baby spawned along with them",
                  "plain": "When an ocelot has a baby spawned along with them"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "REINFORCEMENTS",
                "comment": {
                  "body": "When an entity calls for reinforcements",
                  "plain": "When an entity calls for reinforcements"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "SHOULDER_ENTITY",
                "comment": {
                  "body": "When an entity is spawned as a result of the entity it is being\n perched on jumping or being damaged",
                  "plain": "When an entity is spawned as a result of the entity it is being\n perched on jumping or being damaged"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "SILVERFISH_BLOCK",
                "comment": {
                  "body": "When a silverfish spawns from a block",
                  "plain": "When a silverfish spawns from a block"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "SLIME_SPLIT",
                "comment": {
                  "body": "When a slime splits",
                  "plain": "When a slime splits"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "SPAWNER",
                "comment": {
                  "body": "When a creature spawns from a spawner",
                  "plain": "When a creature spawns from a spawner"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "SPAWNER_EGG",
                "comment": {
                  "body": "When a creature spawns from a Spawner Egg",
                  "plain": "When a creature spawns from a Spawner Egg"
                }
              },
              {
                "kind": "CONSTRUCTOR",
                "name": "SpawnReason()"
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "TRAP",
                "comment": {
                  "body": "When an entity spawns as a trap for players approaching",
                  "plain": "When an entity spawns as a trap for players approaching"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "VILLAGE_DEFENSE",
                "comment": {
                  "body": "When an iron golem is spawned to defend a village",
                  "plain": "When an iron golem is spawned to defend a village"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "VILLAGE_INVASION",
                "comment": {
                  "body": "When a zombie is spawned to invade a village",
                  "plain": "When a zombie is spawned to invade a village"
                }
              },
              {
                "kind": "METHOD",
                "name": "valueOf(java.lang.String)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "name"
                  }
                ]
              },
              {
                "kind": "METHOD",
                "name": "values()"
              }
            ],
            "comment": {
              "body": "An enum to specify the type of spawning",
              "plain": "An enum to specify the type of spawning"
            }
          },
          {
            "kind": "FIELD",
            "name": "spawnReason"
          }
        ],
        "comment": {
          "body": "Called when a creature is spawned into a world.\n \u003cp\u003e\n If a Creature Spawn event is cancelled, the creature will not spawn.",
          "plain": "Called when a creature is spawned into a world.\n \u003cp\u003e\n If a Creature Spawn event is cancelled, the creature will not spawn."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.entity.CreeperPowerEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "CreeperPowerEvent(org.bukkit.entity.Creeper,org.bukkit.entity.LightningStrike,org.bukkit.event.entity.CreeperPowerEvent.PowerCause)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "bolt"
              },
              {
                "kind": "PARAMETER",
                "name": "cause"
              },
              {
                "kind": "PARAMETER",
                "name": "creeper"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "CreeperPowerEvent(org.bukkit.entity.Creeper,org.bukkit.event.entity.CreeperPowerEvent.PowerCause)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cause"
              },
              {
                "kind": "PARAMETER",
                "name": "creeper"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "bolt"
          },
          {
            "kind": "FIELD",
            "name": "canceled"
          },
          {
            "kind": "FIELD",
            "name": "cause"
          },
          {
            "kind": "METHOD",
            "name": "getCause()",
            "comment": {
              "body": "Gets the cause of the creeper being (un)powered.",
              "tags": "Returns A PowerCause value detailing the cause of change in power..",
              "plain": "Gets the cause of the creeper being (un)powered.\n@return A PowerCause value detailing the cause of change in power."
            }
          },
          {
            "kind": "METHOD",
            "name": "getEntity()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getLightning()",
            "comment": {
              "body": "Gets the lightning bolt which is striking the Creeper.",
              "tags": "Returns The Entity for the lightning bolt which is striking the Creeper.",
              "plain": "Gets the lightning bolt which is striking the Creeper.\n@return The Entity for the lightning bolt which is striking the Creeper"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "ENUM",
            "name": "org.bukkit.event.entity.CreeperPowerEvent.PowerCause",
            "children": [
              {
                "kind": "ENUM_CONSTANT",
                "name": "LIGHTNING",
                "comment": {
                  "body": "Power change caused by a lightning bolt\n \u003cp\u003e\n Powered state: true",
                  "plain": "Power change caused by a lightning bolt\n \u003cp\u003e\n Powered state: true"
                }
              },
              {
                "kind": "CONSTRUCTOR",
                "name": "PowerCause()"
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "SET_OFF",
                "comment": {
                  "body": "Power change caused by something else (probably a plugin)\n \u003cp\u003e\n Powered state: false",
                  "plain": "Power change caused by something else (probably a plugin)\n \u003cp\u003e\n Powered state: false"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "SET_ON",
                "comment": {
                  "body": "Power change caused by something else (probably a plugin)\n \u003cp\u003e\n Powered state: true",
                  "plain": "Power change caused by something else (probably a plugin)\n \u003cp\u003e\n Powered state: true"
                }
              },
              {
                "kind": "METHOD",
                "name": "valueOf(java.lang.String)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "name"
                  }
                ]
              },
              {
                "kind": "METHOD",
                "name": "values()"
              }
            ],
            "comment": {
              "body": "An enum to specify the cause of the change in power",
              "plain": "An enum to specify the cause of the change in power"
            }
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          }
        ],
        "comment": {
          "body": "Called when a Creeper is struck by lightning.\n \u003cp\u003e\n If a Creeper Power event is cancelled, the Creeper will not be powered.",
          "plain": "Called when a Creeper is struck by lightning.\n \u003cp\u003e\n If a Creeper Power event is cancelled, the Creeper will not be powered."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.entity.EnderDragonChangePhaseEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "EnderDragonChangePhaseEvent(org.bukkit.entity.EnderDragon,org.bukkit.entity.EnderDragon.Phase,org.bukkit.entity.EnderDragon.Phase)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "currentPhase"
              },
              {
                "kind": "PARAMETER",
                "name": "enderDragon"
              },
              {
                "kind": "PARAMETER",
                "name": "newPhase"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "cancel"
          },
          {
            "kind": "FIELD",
            "name": "currentPhase"
          },
          {
            "kind": "METHOD",
            "name": "getCurrentPhase()",
            "comment": {
              "body": "Gets the current phase that the dragon is in. This method will return null \n when a dragon is first spawned and hasn\u0027t yet been assigned a phase.",
              "tags": "Returns the current dragon phase.",
              "plain": "Gets the current phase that the dragon is in. This method will return null \n when a dragon is first spawned and hasn\u0027t yet been assigned a phase.\n@return the current dragon phase"
            }
          },
          {
            "kind": "METHOD",
            "name": "getEntity()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getNewPhase()",
            "comment": {
              "body": "Gets the new phase that the dragon will switch to.",
              "tags": "Returns the new dragon phase.",
              "plain": "Gets the new phase that the dragon will switch to.\n@return the new dragon phase"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "FIELD",
            "name": "newPhase"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "setNewPhase(org.bukkit.entity.EnderDragon.Phase)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "newPhase"
              }
            ],
            "comment": {
              "body": "Sets the new phase for the ender dragon.",
              "plain": "Sets the new phase for the ender dragon.\n@param newPhase the new dragon phase"
            }
          }
        ],
        "comment": {
          "body": "Called when an EnderDragon switches controller phase.",
          "plain": "Called when an EnderDragon switches controller phase."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.entity.EntityAirChangeEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "EntityAirChangeEvent(org.bukkit.entity.Entity,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "amount"
              },
              {
                "kind": "PARAMETER",
                "name": "what"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "amount"
          },
          {
            "kind": "FIELD",
            "name": "cancelled"
          },
          {
            "kind": "METHOD",
            "name": "getAmount()",
            "comment": {
              "body": "Gets the amount of air the entity has left (measured in ticks).",
              "tags": "Returns amount of air remaining.",
              "plain": "Gets the amount of air the entity has left (measured in ticks).\n@return amount of air remaining"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "METHOD",
            "name": "setAmount(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "amount"
              }
            ],
            "comment": {
              "body": "Sets the amount of air remaining for the entity (measured in ticks.",
              "plain": "Sets the amount of air remaining for the entity (measured in ticks.\n@param amount amount of air remaining"
            }
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancelled"
              }
            ]
          }
        ],
        "comment": {
          "body": "Called when the amount of air an entity has remaining changes.",
          "plain": "Called when the amount of air an entity has remaining changes."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.entity.EntityBreakDoorEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "EntityBreakDoorEvent(org.bukkit.entity.LivingEntity,org.bukkit.block.Block)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "entity"
              },
              {
                "kind": "PARAMETER",
                "name": "targetBlock"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getEntity()"
          }
        ],
        "comment": {
          "body": "Called when an \u003ca href\u003d\"org/bukkit/entity/Entity.html\" title\u003d\"interface in org.bukkit.entity\"\u003e\u003ccode\u003eEntity\u003c/code\u003e\u003c/a\u003e breaks a door\n \u003cp\u003e\n Cancelling the event will cause the event to be delayed",
          "plain": "Called when an {@link Entity} breaks a door\n \u003cp\u003e\n Cancelling the event will cause the event to be delayed"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.entity.EntityBreedEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "EntityBreedEvent(org.bukkit.entity.LivingEntity,org.bukkit.entity.LivingEntity,org.bukkit.entity.LivingEntity,org.bukkit.entity.LivingEntity,org.bukkit.inventory.ItemStack,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "bredWith"
              },
              {
                "kind": "PARAMETER",
                "name": "breeder"
              },
              {
                "kind": "PARAMETER",
                "name": "child"
              },
              {
                "kind": "PARAMETER",
                "name": "experience"
              },
              {
                "kind": "PARAMETER",
                "name": "father"
              },
              {
                "kind": "PARAMETER",
                "name": "mother"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "bredWith"
          },
          {
            "kind": "FIELD",
            "name": "breeder"
          },
          {
            "kind": "FIELD",
            "name": "cancel"
          },
          {
            "kind": "FIELD",
            "name": "experience"
          },
          {
            "kind": "FIELD",
            "name": "father"
          },
          {
            "kind": "METHOD",
            "name": "getBredWith()",
            "comment": {
              "body": "The ItemStack that was used to initiate breeding, if present.",
              "tags": "Returns ItemStack used to initiate breeding..",
              "plain": "The ItemStack that was used to initiate breeding, if present.\n@return ItemStack used to initiate breeding."
            }
          },
          {
            "kind": "METHOD",
            "name": "getBreeder()",
            "comment": {
              "body": "Gets the Entity responsible for breeding. Breeder is null for spontaneous\n conception.",
              "tags": "Returns The Entity who initiated breeding..",
              "plain": "Gets the Entity responsible for breeding. Breeder is null for spontaneous\n conception.\n@return The Entity who initiated breeding."
            }
          },
          {
            "kind": "METHOD",
            "name": "getEntity()"
          },
          {
            "kind": "METHOD",
            "name": "getExperience()",
            "comment": {
              "body": "Get the amount of experience granted by breeding.",
              "tags": "Returns experience amount.",
              "plain": "Get the amount of experience granted by breeding.\n@return experience amount"
            }
          },
          {
            "kind": "METHOD",
            "name": "getFather()",
            "comment": {
              "body": "Gets the other parent of the newly born entity.",
              "tags": "Returns the other parent.",
              "plain": "Gets the other parent of the newly born entity.\n@return the other parent"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getMother()",
            "comment": {
              "body": "Gets the parent creating this entity.",
              "tags": "Returns The \"birth\" parent.",
              "plain": "Gets the parent creating this entity.\n@return The \"birth\" parent"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "FIELD",
            "name": "mother"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "setExperience(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "experience"
              }
            ],
            "comment": {
              "body": "Set the amount of experience granted by breeding.",
              "plain": "Set the amount of experience granted by breeding.\n@param experience experience amount"
            }
          }
        ],
        "comment": {
          "body": "Called when one Entity breeds with another Entity.",
          "plain": "Called when one Entity breeds with another Entity."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.entity.EntityChangeBlockEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "EntityChangeBlockEvent(org.bukkit.entity.Entity,org.bukkit.block.Block,org.bukkit.Material,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "block"
              },
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "to"
              },
              {
                "kind": "PARAMETER",
                "name": "what"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param what the Entity causing the change\n@param block the block (before the change)\n@param to the future material being changed to\n@param data the future block data\n@deprecated Magic value"
            }
          },
          {
            "kind": "FIELD",
            "name": "block"
          },
          {
            "kind": "FIELD",
            "name": "cancel"
          },
          {
            "kind": "FIELD",
            "name": "data"
          },
          {
            "kind": "METHOD",
            "name": "getBlock()",
            "comment": {
              "body": "Gets the block the entity is changing",
              "tags": "Returns the block that is changing.",
              "plain": "Gets the block the entity is changing\n@return the block that is changing"
            }
          },
          {
            "kind": "METHOD",
            "name": "getData()",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Gets the data for the block that would be changed into",
              "tags": "Returns the data for the block that would be changed into.",
              "plain": "Gets the data for the block that would be changed into\n@return the data for the block that would be changed into\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getTo()",
            "comment": {
              "body": "Gets the Material that the block is changing into",
              "tags": "Returns the material that the block is changing into.",
              "plain": "Gets the Material that the block is changing into\n@return the material that the block is changing into"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "to"
          }
        ],
        "comment": {
          "body": "Called when any Entity, excluding players, changes a block.",
          "plain": "Called when any Entity, excluding players, changes a block."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.entity.EntityCombustByBlockEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "EntityCombustByBlockEvent(org.bukkit.block.Block,org.bukkit.entity.Entity,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "combustee"
              },
              {
                "kind": "PARAMETER",
                "name": "combuster"
              },
              {
                "kind": "PARAMETER",
                "name": "duration"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "combuster"
          },
          {
            "kind": "METHOD",
            "name": "getCombuster()",
            "comment": {
              "body": "The combuster can be lava or a block that is on fire.\n \u003cp\u003e\n WARNING: block may be null.",
              "tags": "Returns the Block that set the combustee alight..",
              "plain": "The combuster can be lava or a block that is on fire.\n \u003cp\u003e\n WARNING: block may be null.\n@return the Block that set the combustee alight."
            }
          }
        ],
        "comment": {
          "body": "Called when a block causes an entity to combust.",
          "plain": "Called when a block causes an entity to combust."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.entity.EntityCombustByEntityEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "EntityCombustByEntityEvent(org.bukkit.entity.Entity,org.bukkit.entity.Entity,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "combustee"
              },
              {
                "kind": "PARAMETER",
                "name": "combuster"
              },
              {
                "kind": "PARAMETER",
                "name": "duration"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "combuster"
          },
          {
            "kind": "METHOD",
            "name": "getCombuster()",
            "comment": {
              "body": "Get the entity that caused the combustion event.",
              "tags": "Returns the Entity that set the combustee alight..",
              "plain": "Get the entity that caused the combustion event.\n@return the Entity that set the combustee alight."
            }
          }
        ],
        "comment": {
          "body": "Called when an entity causes another entity to combust.",
          "plain": "Called when an entity causes another entity to combust."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.entity.EntityCombustEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "EntityCombustEvent(org.bukkit.entity.Entity,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "combustee"
              },
              {
                "kind": "PARAMETER",
                "name": "duration"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "cancel"
          },
          {
            "kind": "FIELD",
            "name": "duration"
          },
          {
            "kind": "METHOD",
            "name": "getDuration()",
            "comment": {
              "tags": "Returns the amount of time (in seconds) the combustee should be alight\n     for.",
              "plain": "@return the amount of time (in seconds) the combustee should be alight\n     for"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "setDuration(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "duration"
              }
            ],
            "comment": {
              "body": "The number of seconds the combustee should be alight for.\n \u003cp\u003e\n This value will only ever increase the combustion time, not decrease\n existing combustion times.",
              "plain": "The number of seconds the combustee should be alight for.\n \u003cp\u003e\n This value will only ever increase the combustion time, not decrease\n existing combustion times.\n@param duration the time in seconds to be alight for."
            }
          }
        ],
        "comment": {
          "body": "Called when an entity combusts.\n \u003cp\u003e\n If an Entity Combust event is cancelled, the entity will not combust.",
          "plain": "Called when an entity combusts.\n \u003cp\u003e\n If an Entity Combust event is cancelled, the entity will not combust."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.entity.EntityCreatePortalEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "EntityCreatePortalEvent(org.bukkit.entity.LivingEntity,java.util.List\u003corg.bukkit.block.BlockState\u003e,org.bukkit.PortalType)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "blocks"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              },
              {
                "kind": "PARAMETER",
                "name": "what"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "blocks"
          },
          {
            "kind": "FIELD",
            "name": "cancelled"
          },
          {
            "kind": "METHOD",
            "name": "getBlocks()",
            "comment": {
              "body": "Gets a list of all blocks associated with the portal.",
              "tags": "Returns List of blocks that will be changed..",
              "plain": "Gets a list of all blocks associated with the portal.\n@return List of blocks that will be changed."
            }
          },
          {
            "kind": "METHOD",
            "name": "getEntity()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getPortalType()",
            "comment": {
              "body": "Gets the type of portal that is trying to be created.",
              "tags": "Returns Type of portal..",
              "plain": "Gets the type of portal that is trying to be created.\n@return Type of portal."
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "type"
          }
        ],
        "comment": {
          "body": "Thrown when a Living Entity creates a portal in a world.",
          "plain": "Thrown when a Living Entity creates a portal in a world."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.entity.EntityDamageByBlockEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "EntityDamageByBlockEvent(org.bukkit.block.Block,org.bukkit.entity.Entity,org.bukkit.event.entity.EntityDamageEvent.DamageCause,double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cause"
              },
              {
                "kind": "PARAMETER",
                "name": "damage"
              },
              {
                "kind": "PARAMETER",
                "name": "damagee"
              },
              {
                "kind": "PARAMETER",
                "name": "damager"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "EntityDamageByBlockEvent(org.bukkit.block.Block,org.bukkit.entity.Entity,org.bukkit.event.entity.EntityDamageEvent.DamageCause,java.util.Map\u003corg.bukkit.event.entity.EntityDamageEvent.DamageModifier,java.lang.Double\u003e,java.util.Map\u003corg.bukkit.event.entity.EntityDamageEvent.DamageModifier,? extends com.google.common.base.Function\u003c? super java.lang.Double,java.lang.Double\u003e\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cause"
              },
              {
                "kind": "PARAMETER",
                "name": "damagee"
              },
              {
                "kind": "PARAMETER",
                "name": "damager"
              },
              {
                "kind": "PARAMETER",
                "name": "modifierFunctions"
              },
              {
                "kind": "PARAMETER",
                "name": "modifiers"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "damager"
          },
          {
            "kind": "METHOD",
            "name": "getDamager()",
            "comment": {
              "body": "Returns the block that damaged the player.",
              "tags": "Returns Block that damaged the player.",
              "plain": "Returns the block that damaged the player.\n@return Block that damaged the player"
            }
          }
        ],
        "comment": {
          "body": "Called when an entity is damaged by a block",
          "plain": "Called when an entity is damaged by a block"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.entity.EntityDamageByEntityEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "EntityDamageByEntityEvent(org.bukkit.entity.Entity,org.bukkit.entity.Entity,org.bukkit.event.entity.EntityDamageEvent.DamageCause,double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cause"
              },
              {
                "kind": "PARAMETER",
                "name": "damage"
              },
              {
                "kind": "PARAMETER",
                "name": "damagee"
              },
              {
                "kind": "PARAMETER",
                "name": "damager"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "EntityDamageByEntityEvent(org.bukkit.entity.Entity,org.bukkit.entity.Entity,org.bukkit.event.entity.EntityDamageEvent.DamageCause,java.util.Map\u003corg.bukkit.event.entity.EntityDamageEvent.DamageModifier,java.lang.Double\u003e,java.util.Map\u003corg.bukkit.event.entity.EntityDamageEvent.DamageModifier,? extends com.google.common.base.Function\u003c? super java.lang.Double,java.lang.Double\u003e\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cause"
              },
              {
                "kind": "PARAMETER",
                "name": "damagee"
              },
              {
                "kind": "PARAMETER",
                "name": "damager"
              },
              {
                "kind": "PARAMETER",
                "name": "modifierFunctions"
              },
              {
                "kind": "PARAMETER",
                "name": "modifiers"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "damager"
          },
          {
            "kind": "METHOD",
            "name": "getDamager()",
            "comment": {
              "body": "Returns the entity that damaged the defender.",
              "tags": "Returns Entity that damaged the defender..",
              "plain": "Returns the entity that damaged the defender.\n@return Entity that damaged the defender."
            }
          }
        ],
        "comment": {
          "body": "Called when an entity is damaged by an entity",
          "plain": "Called when an entity is damaged by an entity"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.entity.EntityDamageEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "EntityDamageEvent(org.bukkit.entity.Entity,org.bukkit.event.entity.EntityDamageEvent.DamageCause,double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cause"
              },
              {
                "kind": "PARAMETER",
                "name": "damage"
              },
              {
                "kind": "PARAMETER",
                "name": "damagee"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "EntityDamageEvent(org.bukkit.entity.Entity,org.bukkit.event.entity.EntityDamageEvent.DamageCause,java.util.Map\u003corg.bukkit.event.entity.EntityDamageEvent.DamageModifier,java.lang.Double\u003e,java.util.Map\u003corg.bukkit.event.entity.EntityDamageEvent.DamageModifier,? extends com.google.common.base.Function\u003c? super java.lang.Double,java.lang.Double\u003e\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cause"
              },
              {
                "kind": "PARAMETER",
                "name": "damagee"
              },
              {
                "kind": "PARAMETER",
                "name": "modifierFunctions"
              },
              {
                "kind": "PARAMETER",
                "name": "modifiers"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "MODIFIERS"
          },
          {
            "kind": "FIELD",
            "name": "ZERO"
          },
          {
            "kind": "FIELD",
            "name": "cancelled"
          },
          {
            "kind": "FIELD",
            "name": "cause"
          },
          {
            "kind": "METHOD",
            "name": "getCause()",
            "comment": {
              "body": "Gets the cause of the damage.",
              "tags": "Returns A DamageCause value detailing the cause of the damage..",
              "plain": "Gets the cause of the damage.\n@return A DamageCause value detailing the cause of the damage."
            }
          },
          {
            "kind": "METHOD",
            "name": "getDamage()",
            "comment": {
              "body": "Gets the raw amount of damage caused by the event",
              "tags": "Returns The raw amount of damage caused by the event.",
              "plain": "Gets the raw amount of damage caused by the event\n@return The raw amount of damage caused by the event\n@see DamageModifier#BASE"
            }
          },
          {
            "kind": "METHOD",
            "name": "getDamage(org.bukkit.event.entity.EntityDamageEvent.DamageModifier)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "comment": {
              "body": "Gets the damage change for some modifier",
              "tags": "Returns The raw amount of damage caused by the event.",
              "plain": "Gets the damage change for some modifier\n@param type the damage modifier\n@return The raw amount of damage caused by the event\n@throws IllegalArgumentException if type is null\n@see DamageModifier#BASE"
            }
          },
          {
            "kind": "METHOD",
            "name": "getFinalDamage()",
            "comment": {
              "body": "Gets the amount of damage caused by the event after all damage\n reduction is applied.",
              "tags": "Returns the amount of damage caused by the event.",
              "plain": "Gets the amount of damage caused by the event after all damage\n reduction is applied.\n@return the amount of damage caused by the event"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getOriginalDamage(org.bukkit.event.entity.EntityDamageEvent.DamageModifier)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "comment": {
              "body": "Gets the original damage for the specified modifier, as defined at this\n event\u0027s construction.",
              "tags": "Returns the original damage.",
              "plain": "Gets the original damage for the specified modifier, as defined at this\n event\u0027s construction.\n@param type the modifier\n@return the original damage\n@throws IllegalArgumentException if type is null"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isApplicable(org.bukkit.event.entity.EntityDamageEvent.DamageModifier)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "comment": {
              "body": "This checks to see if a particular modifier is valid for this event\u0027s\n caller, such that, \u003ca href\u003d\"org/bukkit/event/entity/EntityDamageEvent.html#setDamage(org.bukkit.event.entity.EntityDamageEvent.DamageModifier,double)\"\u003e\u003ccode\u003eEntityDamageEvent.setDamage(DamageModifier, double)\u003c/code\u003e\u003c/a\u003e will not\n throw an \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003e\u003ccode\u003eUnsupportedOperationException\u003c/code\u003e\u003c/a\u003e.\n \u003cp\u003e\n \u003ca href\u003d\"org/bukkit/event/entity/EntityDamageEvent.DamageModifier.html#BASE\"\u003e\u003ccode\u003eEntityDamageEvent.DamageModifier.BASE\u003c/code\u003e\u003c/a\u003e is always applicable.",
              "tags": "Returns true if the modifier is supported by the caller, false otherwise.",
              "plain": "This checks to see if a particular modifier is valid for this event\u0027s\n caller, such that, {@link #setDamage(DamageModifier, double)} will not\n throw an {@link UnsupportedOperationException}.\n \u003cp\u003e\n {@link DamageModifier#BASE} is always applicable.\n@param type the modifier\n@return true if the modifier is supported by the caller, false otherwise\n@throws IllegalArgumentException if type is null"
            }
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "FIELD",
            "name": "modifierFunctions"
          },
          {
            "kind": "FIELD",
            "name": "modifiers"
          },
          {
            "kind": "ENUM",
            "name": "org.bukkit.event.entity.EntityDamageEvent.DamageCause",
            "children": [
              {
                "kind": "ENUM_CONSTANT",
                "name": "BLOCK_EXPLOSION",
                "comment": {
                  "body": "Damage caused by being in the area when a block explodes.\n \u003cp\u003e\n Damage: variable",
                  "plain": "Damage caused by being in the area when a block explodes.\n \u003cp\u003e\n Damage: variable"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "CONTACT",
                "comment": {
                  "body": "Damage caused when an entity contacts a block such as a Cactus.\n \u003cp\u003e\n Damage: 1 (Cactus)",
                  "plain": "Damage caused when an entity contacts a block such as a Cactus.\n \u003cp\u003e\n Damage: 1 (Cactus)"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "CRAMMING",
                "comment": {
                  "body": "Damage caused when an entity is colliding with too many entities due\n to the maxEntityCramming game rule.\n \u003cp\u003e\n Damage: 6",
                  "plain": "Damage caused when an entity is colliding with too many entities due\n to the maxEntityCramming game rule.\n \u003cp\u003e\n Damage: 6"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "CUSTOM",
                "comment": {
                  "body": "Custom damage.\n \u003cp\u003e\n Damage: variable",
                  "plain": "Custom damage.\n \u003cp\u003e\n Damage: variable"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "DRAGON_BREATH",
                "comment": {
                  "body": "Damage caused by a dragon breathing fire.\n \u003cp\u003e\n Damage: variable",
                  "plain": "Damage caused by a dragon breathing fire.\n \u003cp\u003e\n Damage: variable"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "DROWNING",
                "comment": {
                  "body": "Damage caused by running out of air while in water\n \u003cp\u003e\n Damage: 2",
                  "plain": "Damage caused by running out of air while in water\n \u003cp\u003e\n Damage: 2"
                }
              },
              {
                "kind": "CONSTRUCTOR",
                "name": "DamageCause()"
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "ENTITY_ATTACK",
                "comment": {
                  "body": "Damage caused when an entity attacks another entity.\n \u003cp\u003e\n Damage: variable",
                  "plain": "Damage caused when an entity attacks another entity.\n \u003cp\u003e\n Damage: variable"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "ENTITY_EXPLOSION",
                "comment": {
                  "body": "Damage caused by being in the area when an entity, such as a\n Creeper, explodes.\n \u003cp\u003e\n Damage: variable",
                  "plain": "Damage caused by being in the area when an entity, such as a\n Creeper, explodes.\n \u003cp\u003e\n Damage: variable"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "ENTITY_SWEEP_ATTACK",
                "comment": {
                  "body": "Damage caused when an entity attacks another entity in a sweep attack.\n \u003cp\u003e\n Damage: variable",
                  "plain": "Damage caused when an entity attacks another entity in a sweep attack.\n \u003cp\u003e\n Damage: variable"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "FALL",
                "comment": {
                  "body": "Damage caused when an entity falls a distance greater than 3 blocks\n \u003cp\u003e\n Damage: fall height - 3.0",
                  "plain": "Damage caused when an entity falls a distance greater than 3 blocks\n \u003cp\u003e\n Damage: fall height - 3.0"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "FALLING_BLOCK",
                "comment": {
                  "body": "Damage caused by being hit by a falling block which deals damage\n \u003cp\u003e\n \u003cb\u003eNote:\u003c/b\u003e Not every block deals damage\n \u003cp\u003e\n Damage: variable",
                  "plain": "Damage caused by being hit by a falling block which deals damage\n \u003cp\u003e\n \u003cb\u003eNote:\u003c/b\u003e Not every block deals damage\n \u003cp\u003e\n Damage: variable"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "FIRE",
                "comment": {
                  "body": "Damage caused by direct exposure to fire\n \u003cp\u003e\n Damage: 1",
                  "plain": "Damage caused by direct exposure to fire\n \u003cp\u003e\n Damage: 1"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "FIRE_TICK",
                "comment": {
                  "body": "Damage caused due to burns caused by fire\n \u003cp\u003e\n Damage: 1",
                  "plain": "Damage caused due to burns caused by fire\n \u003cp\u003e\n Damage: 1"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "FLY_INTO_WALL",
                "comment": {
                  "body": "Damage caused when an entity runs into a wall.\n \u003cp\u003e\n Damage: variable",
                  "plain": "Damage caused when an entity runs into a wall.\n \u003cp\u003e\n Damage: variable"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "HOT_FLOOR",
                "comment": {
                  "body": "Damage caused when an entity steps on \u003ca href\u003d\"org/bukkit/Material.html#MAGMA\"\u003e\u003ccode\u003eMaterial.MAGMA\u003c/code\u003e\u003c/a\u003e.\n \u003cp\u003e\n Damage: 1",
                  "plain": "Damage caused when an entity steps on {@link Material#MAGMA}.\n \u003cp\u003e\n Damage: 1"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "LAVA",
                "comment": {
                  "body": "Damage caused by direct exposure to lava\n \u003cp\u003e\n Damage: 4",
                  "plain": "Damage caused by direct exposure to lava\n \u003cp\u003e\n Damage: 4"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "LIGHTNING",
                "comment": {
                  "body": "Damage caused by being struck by lightning\n \u003cp\u003e\n Damage: 5",
                  "plain": "Damage caused by being struck by lightning\n \u003cp\u003e\n Damage: 5"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "MAGIC",
                "comment": {
                  "body": "Damage caused by being hit by a damage potion or spell\n \u003cp\u003e\n Damage: variable",
                  "plain": "Damage caused by being hit by a damage potion or spell\n \u003cp\u003e\n Damage: variable"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "MELTING",
                "comment": {
                  "body": "Damage caused due to a snowman melting\n \u003cp\u003e\n Damage: 1",
                  "plain": "Damage caused due to a snowman melting\n \u003cp\u003e\n Damage: 1"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "POISON",
                "comment": {
                  "body": "Damage caused due to an ongoing poison effect\n \u003cp\u003e\n Damage: 1",
                  "plain": "Damage caused due to an ongoing poison effect\n \u003cp\u003e\n Damage: 1"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "PROJECTILE",
                "comment": {
                  "body": "Damage caused when attacked by a projectile.\n \u003cp\u003e\n Damage: variable",
                  "plain": "Damage caused when attacked by a projectile.\n \u003cp\u003e\n Damage: variable"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "STARVATION",
                "comment": {
                  "body": "Damage caused by starving due to having an empty hunger bar\n \u003cp\u003e\n Damage: 1",
                  "plain": "Damage caused by starving due to having an empty hunger bar\n \u003cp\u003e\n Damage: 1"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "SUFFOCATION",
                "comment": {
                  "body": "Damage caused by being put in a block\n \u003cp\u003e\n Damage: 1",
                  "plain": "Damage caused by being put in a block\n \u003cp\u003e\n Damage: 1"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "SUICIDE",
                "comment": {
                  "body": "Damage caused by committing suicide using the command \"/kill\"\n \u003cp\u003e\n Damage: 1000",
                  "plain": "Damage caused by committing suicide using the command \"/kill\"\n \u003cp\u003e\n Damage: 1000"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "THORNS",
                "comment": {
                  "body": "Damage caused in retaliation to another attack by the Thorns\n enchantment.\n \u003cp\u003e\n Damage: 1-4 (Thorns)",
                  "plain": "Damage caused in retaliation to another attack by the Thorns\n enchantment.\n \u003cp\u003e\n Damage: 1-4 (Thorns)"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "VOID",
                "comment": {
                  "body": "Damage caused by falling into the void\n \u003cp\u003e\n Damage: 4 for players",
                  "plain": "Damage caused by falling into the void\n \u003cp\u003e\n Damage: 4 for players"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "WITHER",
                "comment": {
                  "body": "Damage caused by Wither potion effect",
                  "plain": "Damage caused by Wither potion effect"
                }
              },
              {
                "kind": "METHOD",
                "name": "valueOf(java.lang.String)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "name"
                  }
                ]
              },
              {
                "kind": "METHOD",
                "name": "values()"
              }
            ],
            "comment": {
              "body": "An enum to specify the cause of the damage",
              "plain": "An enum to specify the cause of the damage"
            }
          },
          {
            "kind": "ENUM",
            "name": "org.bukkit.event.entity.EntityDamageEvent.DamageModifier",
            "children": [
              {
                "kind": "ENUM_CONSTANT",
                "name": "ABSORPTION",
                "comment": {
                  "body": "This represents the damage reduction caused by the absorption potion\n effect.",
                  "plain": "This represents the damage reduction caused by the absorption potion\n effect."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "ARMOR",
                "comment": {
                  "body": "This represents the damage reduction caused by wearing armor.",
                  "plain": "This represents the damage reduction caused by wearing armor."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "BASE",
                "comment": {
                  "body": "This represents the amount of damage being done, also known as the\n raw \u003ca href\u003d\"org/bukkit/event/entity/EntityDamageEvent.html#getDamage()\"\u003e\u003ccode\u003eEntityDamageEvent.getDamage()\u003c/code\u003e\u003c/a\u003e.",
                  "plain": "This represents the amount of damage being done, also known as the\n raw {@link EntityDamageEvent#getDamage()}."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "BLOCKING",
                "comment": {
                  "body": "This represents  the damage reduction caused by blocking, only present for\n \u003ca href\u003d\"org/bukkit/entity/Player.html\" title\u003d\"interface in org.bukkit.entity\"\u003e\u003ccode\u003ePlayers\u003c/code\u003e\u003c/a\u003e.",
                  "plain": "This represents  the damage reduction caused by blocking, only present for\n {@link Player Players}."
                }
              },
              {
                "kind": "CONSTRUCTOR",
                "name": "DamageModifier()"
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "HARD_HAT",
                "comment": {
                  "body": "This represents the damage reduced by a wearing a helmet when hit\n by a falling block.",
                  "plain": "This represents the damage reduced by a wearing a helmet when hit\n by a falling block."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "MAGIC",
                "comment": {
                  "body": "This represents the damage reduction caused by the combination of:\n \u003cul\u003e\n \u003cli\u003e\n     Armor enchantments\n \u003c/li\u003e\u003cli\u003e\n     Witch\u0027s potion resistance\n \u003c/li\u003e\n \u003c/ul\u003e",
                  "plain": "This represents the damage reduction caused by the combination of:\n \u003cul\u003e\n \u003cli\u003e\n     Armor enchantments\n \u003c/li\u003e\u003cli\u003e\n     Witch\u0027s potion resistance\n \u003c/li\u003e\n \u003c/ul\u003e"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "RESISTANCE",
                "comment": {
                  "body": "This represents the damage reduction caused by the Resistance potion effect.",
                  "plain": "This represents the damage reduction caused by the Resistance potion effect."
                }
              },
              {
                "kind": "METHOD",
                "name": "valueOf(java.lang.String)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "name"
                  }
                ]
              },
              {
                "kind": "METHOD",
                "name": "values()"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "An enum to specify the types of modifier",
              "plain": "An enum to specify the types of modifier\n@deprecated This API is responsible for a large number of implementation\n problems and is in general unsustainable to maintain. It is likely to be\n removed very soon in a subsequent release. Please see\n https://www.spigotmc.org/threads/194446/ for more information."
            }
          },
          {
            "kind": "FIELD",
            "name": "originals"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "setDamage(double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "damage"
              }
            ],
            "comment": {
              "body": "Sets the raw amount of damage caused by the event.\n \u003cp\u003e\n For compatibility this also recalculates the modifiers and scales\n them by the difference between the modifier for the previous damage\n value and the new one.",
              "plain": "Sets the raw amount of damage caused by the event.\n \u003cp\u003e\n For compatibility this also recalculates the modifiers and scales\n them by the difference between the modifier for the previous damage\n value and the new one.\n@param damage The raw amount of damage caused by the event"
            }
          },
          {
            "kind": "METHOD",
            "name": "setDamage(org.bukkit.event.entity.EntityDamageEvent.DamageModifier,double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "damage"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "comment": {
              "body": "Sets the damage for the specified modifier.",
              "plain": "Sets the damage for the specified modifier.\n@param type the damage modifier\n@param damage the scalar value of the damage\u0027s modifier\n@see #getFinalDamage()\n@throws IllegalArgumentException if type is null\n@throws UnsupportedOperationException if the caller does not support\n     the particular DamageModifier, or to rephrase, when {@link #isApplicable(DamageModifier)} returns false"
            }
          }
        ],
        "comment": {
          "body": "Stores data for damage events",
          "plain": "Stores data for damage events"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.entity.EntityDeathEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "EntityDeathEvent(org.bukkit.entity.LivingEntity,java.util.List\u003corg.bukkit.inventory.ItemStack\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "drops"
              },
              {
                "kind": "PARAMETER",
                "name": "entity"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "EntityDeathEvent(org.bukkit.entity.LivingEntity,java.util.List\u003corg.bukkit.inventory.ItemStack\u003e,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "droppedExp"
              },
              {
                "kind": "PARAMETER",
                "name": "drops"
              },
              {
                "kind": "PARAMETER",
                "name": "what"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "cancelled"
          },
          {
            "kind": "FIELD",
            "name": "deathSound"
          },
          {
            "kind": "FIELD",
            "name": "deathSoundCategory"
          },
          {
            "kind": "FIELD",
            "name": "deathSoundPitch"
          },
          {
            "kind": "FIELD",
            "name": "deathSoundVolume"
          },
          {
            "kind": "FIELD",
            "name": "dropExp"
          },
          {
            "kind": "FIELD",
            "name": "drops"
          },
          {
            "kind": "METHOD",
            "name": "getDeathSound()",
            "comment": {
              "body": "Get the sound that the entity makes when dying",
              "tags": "Returns The sound that the entity makes.",
              "plain": "Get the sound that the entity makes when dying\n@return The sound that the entity makes"
            }
          },
          {
            "kind": "METHOD",
            "name": "getDeathSoundCategory()",
            "comment": {
              "body": "Get the sound category that the death sound should play in",
              "tags": "Returns The sound category.",
              "plain": "Get the sound category that the death sound should play in\n@return The sound category"
            }
          },
          {
            "kind": "METHOD",
            "name": "getDeathSoundPitch()",
            "comment": {
              "body": "Get the pitch that the death sound will play with.",
              "tags": "Returns The pitch the death sound will play with.",
              "plain": "Get the pitch that the death sound will play with.\n@return The pitch the death sound will play with"
            }
          },
          {
            "kind": "METHOD",
            "name": "getDeathSoundVolume()",
            "comment": {
              "body": "Get the volume that the death sound will play at.",
              "tags": "Returns The volume the death sound will play at.",
              "plain": "Get the volume that the death sound will play at.\n@return The volume the death sound will play at"
            }
          },
          {
            "kind": "METHOD",
            "name": "getDroppedExp()",
            "comment": {
              "body": "Gets how much EXP should be dropped from this death.\n \u003cp\u003e\n This does not indicate how much EXP should be taken from the entity in\n question, merely how much should be created after its death.",
              "tags": "Returns Amount of EXP to drop..",
              "plain": "Gets how much EXP should be dropped from this death.\n \u003cp\u003e\n This does not indicate how much EXP should be taken from the entity in\n question, merely how much should be created after its death.\n@return Amount of EXP to drop."
            }
          },
          {
            "kind": "METHOD",
            "name": "getDrops()",
            "comment": {
              "body": "Gets all the items which will drop when the entity dies",
              "tags": "Returns Items to drop when the entity dies.",
              "plain": "Gets all the items which will drop when the entity dies\n@return Items to drop when the entity dies"
            }
          },
          {
            "kind": "METHOD",
            "name": "getEntity()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getReviveHealth()",
            "comment": {
              "body": "Get the amount of health that the entity should revive with after cancelling the event.\n Set to the entity\u0027s max health by default.",
              "tags": "Returns The amount of health.",
              "plain": "Get the amount of health that the entity should revive with after cancelling the event.\n Set to the entity\u0027s max health by default.\n@return The amount of health"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "FIELD",
            "name": "reviveHealth"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "setDeathSound(org.bukkit.Sound)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "sound"
              }
            ],
            "comment": {
              "body": "Set the sound that the entity makes when dying",
              "plain": "Set the sound that the entity makes when dying\n@param sound The sound that the entity should make when dying"
            }
          },
          {
            "kind": "METHOD",
            "name": "setDeathSoundCategory(org.bukkit.SoundCategory)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "soundCategory"
              }
            ],
            "comment": {
              "body": "Set the sound category that the death sound should play in.",
              "plain": "Set the sound category that the death sound should play in.\n@param soundCategory The sound category"
            }
          },
          {
            "kind": "METHOD",
            "name": "setDeathSoundPitch(float)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "pitch"
              }
            ],
            "comment": {
              "body": "GSetet the pitch that the death sound should play with.",
              "plain": "GSetet the pitch that the death sound should play with.\n@param pitch The pitch the death sound should play with"
            }
          },
          {
            "kind": "METHOD",
            "name": "setDeathSoundVolume(float)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "volume"
              }
            ],
            "comment": {
              "body": "Set the volume the death sound should play at. If the event is cancelled this will not play the sound!",
              "plain": "Set the volume the death sound should play at. If the event is cancelled this will not play the sound!\n@param volume The volume the death sound should play at"
            }
          },
          {
            "kind": "METHOD",
            "name": "setDroppedExp(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "exp"
              }
            ],
            "comment": {
              "body": "Sets how much EXP should be dropped from this death.\n \u003cp\u003e\n This does not indicate how much EXP should be taken from the entity in\n question, merely how much should be created after its death.",
              "plain": "Sets how much EXP should be dropped from this death.\n \u003cp\u003e\n This does not indicate how much EXP should be taken from the entity in\n question, merely how much should be created after its death.\n@param exp Amount of EXP to drop."
            }
          },
          {
            "kind": "METHOD",
            "name": "setReviveHealth(double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "reviveHealth"
              }
            ],
            "comment": {
              "body": "Set the amount of health that the entity should revive with after cancelling the event.\n Revive health value must be between 0 (exclusive) and the entity\u0027s max health (inclusive).",
              "plain": "Set the amount of health that the entity should revive with after cancelling the event.\n Revive health value must be between 0 (exclusive) and the entity\u0027s max health (inclusive).\n@param reviveHealth The amount of health\n@throws IllegalArgumentException Thrown if the health is {@literal \u003c\u003d 0 or \u003e} max health"
            }
          },
          {
            "kind": "METHOD",
            "name": "setShouldPlayDeathSound(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "playDeathSound"
              }
            ],
            "comment": {
              "body": "Set whether or not the death sound should play when the entity dies. If the event is cancelled it does not play!",
              "plain": "Set whether or not the death sound should play when the entity dies. If the event is cancelled it does not play!\n@param playDeathSound Enable or disable the death sound"
            }
          },
          {
            "kind": "FIELD",
            "name": "shouldPlayDeathSound"
          },
          {
            "kind": "METHOD",
            "name": "shouldPlayDeathSound()",
            "comment": {
              "body": "Whether or not the death sound should play when the entity dies. If the event is cancelled it does not play!",
              "tags": "Returns Whether or not the death sound should play. Event is called with this set to false if the entity is silent..",
              "plain": "Whether or not the death sound should play when the entity dies. If the event is cancelled it does not play!\n@return Whether or not the death sound should play. Event is called with this set to false if the entity is silent."
            }
          }
        ],
        "comment": {
          "body": "Thrown whenever a LivingEntity dies",
          "plain": "Thrown whenever a LivingEntity dies"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.entity.EntityEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "EntityEvent(org.bukkit.entity.Entity)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "what"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "entity"
          },
          {
            "kind": "METHOD",
            "name": "getEntity()",
            "comment": {
              "body": "Returns the Entity involved in this event",
              "tags": "Returns Entity who is involved in this event.",
              "plain": "Returns the Entity involved in this event\n@return Entity who is involved in this event"
            }
          },
          {
            "kind": "METHOD",
            "name": "getEntityType()",
            "comment": {
              "body": "Gets the EntityType of the Entity involved in this event.",
              "tags": "Returns EntityType of the Entity involved in this event.",
              "plain": "Gets the EntityType of the Entity involved in this event.\n@return EntityType of the Entity involved in this event"
            }
          }
        ],
        "comment": {
          "body": "Represents an Entity-related event",
          "plain": "Represents an Entity-related event"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.entity.EntityExplodeEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "EntityExplodeEvent(org.bukkit.entity.Entity,org.bukkit.Location,java.util.List\u003corg.bukkit.block.Block\u003e,float)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "blocks"
              },
              {
                "kind": "PARAMETER",
                "name": "location"
              },
              {
                "kind": "PARAMETER",
                "name": "what"
              },
              {
                "kind": "PARAMETER",
                "name": "yield"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "blockList()",
            "comment": {
              "body": "Returns the list of blocks that would have been removed or were removed\n from the explosion event.",
              "tags": "Returns All blown-up blocks.",
              "plain": "Returns the list of blocks that would have been removed or were removed\n from the explosion event.\n@return All blown-up blocks"
            }
          },
          {
            "kind": "FIELD",
            "name": "blocks"
          },
          {
            "kind": "FIELD",
            "name": "cancel"
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getLocation()",
            "comment": {
              "body": "Returns the location where the explosion happened.\n \u003cp\u003e\n It is not possible to get this value from the Entity as the Entity no\n longer exists in the world.",
              "tags": "Returns The location of the explosion.",
              "plain": "Returns the location where the explosion happened.\n \u003cp\u003e\n It is not possible to get this value from the Entity as the Entity no\n longer exists in the world.\n@return The location of the explosion"
            }
          },
          {
            "kind": "METHOD",
            "name": "getYield()",
            "comment": {
              "body": "Returns the percentage of blocks to drop from this explosion",
              "tags": "Returns The yield..",
              "plain": "Returns the percentage of blocks to drop from this explosion\n@return The yield."
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "FIELD",
            "name": "location"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "setYield(float)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "yield"
              }
            ],
            "comment": {
              "body": "Sets the percentage of blocks to drop from this explosion",
              "plain": "Sets the percentage of blocks to drop from this explosion\n@param yield The new yield percentage"
            }
          },
          {
            "kind": "FIELD",
            "name": "yield"
          }
        ],
        "comment": {
          "body": "Called when an entity explodes",
          "plain": "Called when an entity explodes"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.entity.EntityInteractEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "EntityInteractEvent(org.bukkit.entity.Entity,org.bukkit.block.Block)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "block"
              },
              {
                "kind": "PARAMETER",
                "name": "entity"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "block"
          },
          {
            "kind": "FIELD",
            "name": "cancelled"
          },
          {
            "kind": "METHOD",
            "name": "getBlock()",
            "comment": {
              "body": "Returns the involved block",
              "tags": "Returns the block clicked with this item..",
              "plain": "Returns the involved block\n@return the block clicked with this item."
            }
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          }
        ],
        "comment": {
          "body": "Called when an entity interacts with an object",
          "plain": "Called when an entity interacts with an object"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.entity.EntityPickupItemEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "EntityPickupItemEvent(org.bukkit.entity.LivingEntity,org.bukkit.entity.Item,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "entity"
              },
              {
                "kind": "PARAMETER",
                "name": "item"
              },
              {
                "kind": "PARAMETER",
                "name": "remaining"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "cancel"
          },
          {
            "kind": "METHOD",
            "name": "getEntity()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getItem()",
            "comment": {
              "body": "Gets the Item picked up by the entity.",
              "tags": "Returns Item.",
              "plain": "Gets the Item picked up by the entity.\n@return Item"
            }
          },
          {
            "kind": "METHOD",
            "name": "getRemaining()",
            "comment": {
              "body": "Gets the amount remaining on the ground, if any",
              "tags": "Returns amount remaining on the ground.",
              "plain": "Gets the amount remaining on the ground, if any\n@return amount remaining on the ground"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "FIELD",
            "name": "item"
          },
          {
            "kind": "FIELD",
            "name": "remaining"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          }
        ],
        "comment": {
          "body": "Thrown when a entity picks an item up from the ground",
          "plain": "Thrown when a entity picks an item up from the ground"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.entity.EntityPortalEnterEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "EntityPortalEnterEvent(org.bukkit.entity.Entity,org.bukkit.Location)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "entity"
              },
              {
                "kind": "PARAMETER",
                "name": "location"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getLocation()",
            "comment": {
              "body": "Gets the portal block the entity is touching",
              "tags": "Returns The portal block the entity is touching.",
              "plain": "Gets the portal block the entity is touching\n@return The portal block the entity is touching"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "FIELD",
            "name": "location"
          }
        ],
        "comment": {
          "body": "Called when an entity comes into contact with a portal",
          "plain": "Called when an entity comes into contact with a portal"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.entity.EntityPortalEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "EntityPortalEvent(org.bukkit.entity.Entity,org.bukkit.Location,org.bukkit.Location,org.bukkit.TravelAgent)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "entity"
              },
              {
                "kind": "PARAMETER",
                "name": "from"
              },
              {
                "kind": "PARAMETER",
                "name": "pta"
              },
              {
                "kind": "PARAMETER",
                "name": "to"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getPortalTravelAgent()",
            "comment": {
              "body": "Gets the Travel Agent used (or not) in this event.",
              "tags": "Returns the Travel Agent used (or not) in this event.",
              "plain": "Gets the Travel Agent used (or not) in this event.\n@return the Travel Agent used (or not) in this event"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "setPortalTravelAgent(org.bukkit.TravelAgent)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "travelAgent"
              }
            ],
            "comment": {
              "body": "Sets the Travel Agent used (or not) in this event.",
              "plain": "Sets the Travel Agent used (or not) in this event.\n@param travelAgent the Travel Agent used (or not) in this event"
            }
          },
          {
            "kind": "FIELD",
            "name": "travelAgent"
          },
          {
            "kind": "FIELD",
            "name": "useTravelAgent"
          },
          {
            "kind": "METHOD",
            "name": "useTravelAgent()",
            "comment": {
              "body": "Gets whether or not the Travel Agent will be used.\n \u003cp\u003e\n If this is set to true, the TravelAgent will try to find a Portal at\n the \u003ca href\u003d\"org/bukkit/event/entity/EntityTeleportEvent.html#getTo()\"\u003e\u003ccode\u003eEntityTeleportEvent.getTo()\u003c/code\u003e\u003c/a\u003e Location, and will try to create one if there is\n none.\n \u003cp\u003e\n If this is set to false, the \u003ca href\u003d\"org/bukkit/event/entity/EntityEvent.html#getEntity()\"\u003e\u003ccode\u003eEntityEvent.getEntity()\u003c/code\u003e\u003c/a\u003e will only be\n teleported to the \u003ca href\u003d\"org/bukkit/event/entity/EntityTeleportEvent.html#getTo()\"\u003e\u003ccode\u003eEntityTeleportEvent.getTo()\u003c/code\u003e\u003c/a\u003e Location.",
              "tags": "Returns whether to use the Travel Agent.",
              "plain": "Gets whether or not the Travel Agent will be used.\n \u003cp\u003e\n If this is set to true, the TravelAgent will try to find a Portal at\n the {@link #getTo()} Location, and will try to create one if there is\n none.\n \u003cp\u003e\n If this is set to false, the {@link #getEntity()} will only be\n teleported to the {@link #getTo()} Location.\n@return whether to use the Travel Agent"
            }
          },
          {
            "kind": "METHOD",
            "name": "useTravelAgent(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "useTravelAgent"
              }
            ],
            "comment": {
              "body": "Sets whether or not the Travel Agent will be used.\n \u003cp\u003e\n If this is set to true, the TravelAgent will try to find a Portal at\n the \u003ca href\u003d\"org/bukkit/event/entity/EntityTeleportEvent.html#getTo()\"\u003e\u003ccode\u003eEntityTeleportEvent.getTo()\u003c/code\u003e\u003c/a\u003e Location, and will try to create one if there is\n none.\n \u003cp\u003e\n If this is set to false, the \u003ca href\u003d\"org/bukkit/event/entity/EntityEvent.html#getEntity()\"\u003e\u003ccode\u003eEntityEvent.getEntity()\u003c/code\u003e\u003c/a\u003e will only be\n teleported to the \u003ca href\u003d\"org/bukkit/event/entity/EntityTeleportEvent.html#getTo()\"\u003e\u003ccode\u003eEntityTeleportEvent.getTo()\u003c/code\u003e\u003c/a\u003e Location.",
              "plain": "Sets whether or not the Travel Agent will be used.\n \u003cp\u003e\n If this is set to true, the TravelAgent will try to find a Portal at\n the {@link #getTo()} Location, and will try to create one if there is\n none.\n \u003cp\u003e\n If this is set to false, the {@link #getEntity()} will only be\n teleported to the {@link #getTo()} Location.\n@param useTravelAgent whether to use the Travel Agent"
            }
          }
        ],
        "comment": {
          "body": "Called when a non-player entity is about to teleport because it is in\n contact with a portal.\n \u003cp\u003e\n For players see \u003ca href\u003d\"org/bukkit/event/player/PlayerPortalEvent.html\" title\u003d\"class in org.bukkit.event.player\"\u003e\u003ccode\u003ePlayerPortalEvent\u003c/code\u003e\u003c/a\u003e",
          "plain": "Called when a non-player entity is about to teleport because it is in\n contact with a portal.\n \u003cp\u003e\n For players see {@link org.bukkit.event.player.PlayerPortalEvent}"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.entity.EntityPortalExitEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "EntityPortalExitEvent(org.bukkit.entity.Entity,org.bukkit.Location,org.bukkit.Location,org.bukkit.util.Vector,org.bukkit.util.Vector)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "after"
              },
              {
                "kind": "PARAMETER",
                "name": "before"
              },
              {
                "kind": "PARAMETER",
                "name": "entity"
              },
              {
                "kind": "PARAMETER",
                "name": "from"
              },
              {
                "kind": "PARAMETER",
                "name": "to"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "after"
          },
          {
            "kind": "FIELD",
            "name": "before"
          },
          {
            "kind": "METHOD",
            "name": "getAfter()",
            "comment": {
              "body": "Gets a copy of the velocity that the entity will have after exiting the\n portal.",
              "tags": "Returns velocity of entity after exiting the portal.",
              "plain": "Gets a copy of the velocity that the entity will have after exiting the\n portal.\n@return velocity of entity after exiting the portal"
            }
          },
          {
            "kind": "METHOD",
            "name": "getBefore()",
            "comment": {
              "body": "Gets a copy of the velocity that the entity has before entering the\n portal.",
              "tags": "Returns velocity of entity before entering the portal.",
              "plain": "Gets a copy of the velocity that the entity has before entering the\n portal.\n@return velocity of entity before entering the portal"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "setAfter(org.bukkit.util.Vector)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "after"
              }
            ],
            "comment": {
              "body": "Sets the velocity that the entity will have after exiting the portal.",
              "plain": "Sets the velocity that the entity will have after exiting the portal.\n@param after the velocity after exiting the portal"
            }
          }
        ],
        "comment": {
          "body": "Called before an entity exits a portal.\n \u003cp\u003e\n This event allows you to modify the velocity of the entity after they have\n successfully exited the portal.",
          "plain": "Called before an entity exits a portal.\n \u003cp\u003e\n This event allows you to modify the velocity of the entity after they have\n successfully exited the portal."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.entity.EntityRegainHealthEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "EntityRegainHealthEvent(org.bukkit.entity.Entity,double,org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "amount"
              },
              {
                "kind": "PARAMETER",
                "name": "entity"
              },
              {
                "kind": "PARAMETER",
                "name": "regainReason"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "EntityRegainHealthEvent(org.bukkit.entity.Entity,double,org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "amount"
              },
              {
                "kind": "PARAMETER",
                "name": "entity"
              },
              {
                "kind": "PARAMETER",
                "name": "isFastRegen"
              },
              {
                "kind": "PARAMETER",
                "name": "regainReason"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "amount"
          },
          {
            "kind": "FIELD",
            "name": "cancelled"
          },
          {
            "kind": "METHOD",
            "name": "getAmount()",
            "comment": {
              "body": "Gets the amount of regained health",
              "tags": "Returns The amount of health regained.",
              "plain": "Gets the amount of regained health\n@return The amount of health regained"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getRegainReason()",
            "comment": {
              "body": "Gets the reason for why the entity is regaining health",
              "tags": "Returns A RegainReason detailing the reason for the entity regaining\n     health.",
              "plain": "Gets the reason for why the entity is regaining health\n@return A RegainReason detailing the reason for the entity regaining\n     health"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "FIELD",
            "name": "isFastRegen"
          },
          {
            "kind": "METHOD",
            "name": "isFastRegen()",
            "comment": {
              "body": "Is this event a result of the fast regeneration mechanic",
              "tags": "Returns Whether the event is the result of a fast regeneration mechanic.",
              "plain": "Is this event a result of the fast regeneration mechanic\n@return Whether the event is the result of a fast regeneration mechanic"
            }
          },
          {
            "kind": "ENUM",
            "name": "org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason",
            "children": [
              {
                "kind": "ENUM_CONSTANT",
                "name": "CUSTOM",
                "comment": {
                  "body": "Any other reason not covered by the reasons above",
                  "plain": "Any other reason not covered by the reasons above"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "EATING",
                "comment": {
                  "body": "When a player regains health from eating consumables",
                  "plain": "When a player regains health from eating consumables"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "ENDER_CRYSTAL",
                "comment": {
                  "body": "When an ender dragon regains health from an ender crystal",
                  "plain": "When an ender dragon regains health from an ender crystal"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "MAGIC",
                "comment": {
                  "body": "When a player is healed by a potion or spell",
                  "plain": "When a player is healed by a potion or spell"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "MAGIC_REGEN",
                "comment": {
                  "body": "When a player is healed over time by a potion or spell",
                  "plain": "When a player is healed over time by a potion or spell"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "REGEN",
                "comment": {
                  "body": "When a player regains health from regenerating due to Peaceful mode\n (difficulty\u003d0)",
                  "plain": "When a player regains health from regenerating due to Peaceful mode\n (difficulty\u003d0)"
                }
              },
              {
                "kind": "CONSTRUCTOR",
                "name": "RegainReason()"
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "SATIATED",
                "comment": {
                  "body": "When a player regains health from regenerating due to their hunger\n being satisfied",
                  "plain": "When a player regains health from regenerating due to their hunger\n being satisfied"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "WITHER",
                "comment": {
                  "body": "When an entity is damaged by the Wither potion effect",
                  "plain": "When an entity is damaged by the Wither potion effect"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "WITHER_SPAWN",
                "comment": {
                  "body": "When a wither is filling its health during spawning",
                  "plain": "When a wither is filling its health during spawning"
                }
              },
              {
                "kind": "METHOD",
                "name": "valueOf(java.lang.String)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "name"
                  }
                ]
              },
              {
                "kind": "METHOD",
                "name": "values()"
              }
            ],
            "comment": {
              "body": "An enum to specify the type of health regaining that is occurring",
              "plain": "An enum to specify the type of health regaining that is occurring"
            }
          },
          {
            "kind": "FIELD",
            "name": "regainReason"
          },
          {
            "kind": "METHOD",
            "name": "setAmount(double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "amount"
              }
            ],
            "comment": {
              "body": "Sets the amount of regained health",
              "plain": "Sets the amount of regained health\n@param amount the amount of health the entity will regain"
            }
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          }
        ],
        "comment": {
          "body": "Stores data for health-regain events",
          "plain": "Stores data for health-regain events"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.entity.EntityResurrectEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "EntityResurrectEvent(org.bukkit.entity.LivingEntity)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "what"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "cancelled"
          },
          {
            "kind": "METHOD",
            "name": "getEntity()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancelled"
              }
            ]
          }
        ],
        "comment": {
          "body": "Called when an entity dies and may have the opportunity to be resurrected.\n Will be called in a cancelled state if the entity does not have a totem\n equipped.",
          "plain": "Called when an entity dies and may have the opportunity to be resurrected.\n Will be called in a cancelled state if the entity does not have a totem\n equipped."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.entity.EntityShootBowEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "EntityShootBowEvent(org.bukkit.entity.LivingEntity,org.bukkit.inventory.ItemStack,org.bukkit.entity.Projectile,float)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "bow"
              },
              {
                "kind": "PARAMETER",
                "name": "force"
              },
              {
                "kind": "PARAMETER",
                "name": "projectile"
              },
              {
                "kind": "PARAMETER",
                "name": "shooter"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "EntityShootBowEvent(org.bukkit.entity.LivingEntity,org.bukkit.inventory.ItemStack,org.bukkit.inventory.ItemStack,org.bukkit.entity.Projectile,float)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "arrowItem"
              },
              {
                "kind": "PARAMETER",
                "name": "bow"
              },
              {
                "kind": "PARAMETER",
                "name": "force"
              },
              {
                "kind": "PARAMETER",
                "name": "projectile"
              },
              {
                "kind": "PARAMETER",
                "name": "shooter"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "arrowItem"
          },
          {
            "kind": "FIELD",
            "name": "bow"
          },
          {
            "kind": "FIELD",
            "name": "cancelled"
          },
          {
            "kind": "FIELD",
            "name": "consumeArrow"
          },
          {
            "kind": "FIELD",
            "name": "force"
          },
          {
            "kind": "METHOD",
            "name": "getArrowItem()"
          },
          {
            "kind": "METHOD",
            "name": "getBow()",
            "comment": {
              "body": "Gets the bow ItemStack used to fire the arrow.",
              "tags": "Returns the bow involved in this event.",
              "plain": "Gets the bow ItemStack used to fire the arrow.\n@return the bow involved in this event"
            }
          },
          {
            "kind": "METHOD",
            "name": "getConsumeArrow()"
          },
          {
            "kind": "METHOD",
            "name": "getEntity()"
          },
          {
            "kind": "METHOD",
            "name": "getForce()",
            "comment": {
              "body": "Gets the force the arrow was launched with",
              "tags": "Returns bow shooting force, up to 1.0.",
              "plain": "Gets the force the arrow was launched with\n@return bow shooting force, up to 1.0"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getProjectile()",
            "comment": {
              "body": "Gets the projectile which will be launched by this event",
              "tags": "Returns the launched projectile.",
              "plain": "Gets the projectile which will be launched by this event\n@return the launched projectile"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "FIELD",
            "name": "projectile"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "setConsumeArrow(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "consumeArrow"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "setProjectile(org.bukkit.entity.Entity)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "projectile"
              }
            ],
            "comment": {
              "body": "Replaces the projectile which will be launched",
              "plain": "Replaces the projectile which will be launched\n@param projectile the new projectile"
            }
          }
        ],
        "comment": {
          "body": "Called when a LivingEntity shoots a bow firing an arrow",
          "plain": "Called when a LivingEntity shoots a bow firing an arrow"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.entity.EntitySpawnEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "EntitySpawnEvent(org.bukkit.entity.Entity)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "spawnee"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "canceled"
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getLocation()",
            "comment": {
              "body": "Gets the location at which the entity is spawning.",
              "tags": "Returns The location at which the entity is spawning.",
              "plain": "Gets the location at which the entity is spawning.\n@return The location at which the entity is spawning"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          }
        ],
        "comment": {
          "body": "Called when an entity is spawned into a world.\n \u003cp\u003e\n If an Entity Spawn event is cancelled, the entity will not spawn.",
          "plain": "Called when an entity is spawned into a world.\n \u003cp\u003e\n If an Entity Spawn event is cancelled, the entity will not spawn."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.entity.EntityTameEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "EntityTameEvent(org.bukkit.entity.LivingEntity,org.bukkit.entity.AnimalTamer)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "entity"
              },
              {
                "kind": "PARAMETER",
                "name": "owner"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "cancelled"
          },
          {
            "kind": "METHOD",
            "name": "getEntity()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getOwner()",
            "comment": {
              "body": "Gets the owning AnimalTamer",
              "tags": "Returns the owning AnimalTamer.",
              "plain": "Gets the owning AnimalTamer\n@return the owning AnimalTamer"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "FIELD",
            "name": "owner"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          }
        ],
        "comment": {
          "body": "Thrown when a LivingEntity is tamed",
          "plain": "Thrown when a LivingEntity is tamed"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.entity.EntityTargetEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "EntityTargetEvent(org.bukkit.entity.Entity,org.bukkit.entity.Entity,org.bukkit.event.entity.EntityTargetEvent.TargetReason)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "entity"
              },
              {
                "kind": "PARAMETER",
                "name": "reason"
              },
              {
                "kind": "PARAMETER",
                "name": "target"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "cancel"
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getReason()",
            "comment": {
              "body": "Returns the reason for the targeting",
              "tags": "Returns The reason.",
              "plain": "Returns the reason for the targeting\n@return The reason"
            }
          },
          {
            "kind": "METHOD",
            "name": "getTarget()",
            "comment": {
              "body": "Get the entity that this is targeting.\n \u003cp\u003e\n This will be null in the case that the event is called when the mob\n forgets its target.",
              "tags": "Returns The entity.",
              "plain": "Get the entity that this is targeting.\n \u003cp\u003e\n This will be null in the case that the event is called when the mob\n forgets its target.\n@return The entity"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "ENUM",
            "name": "org.bukkit.event.entity.EntityTargetEvent.TargetReason",
            "children": [
              {
                "kind": "ENUM_CONSTANT",
                "name": "CLOSEST_ENTITY",
                "comment": {
                  "body": "When the entity doesn\u0027t have a target, so it attacks the nearest\n entity",
                  "plain": "When the entity doesn\u0027t have a target, so it attacks the nearest\n entity"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "CLOSEST_PLAYER",
                "comment": {
                  "body": "When the entity doesn\u0027t have a target, so it attacks the nearest\n player",
                  "plain": "When the entity doesn\u0027t have a target, so it attacks the nearest\n player"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "COLLISION",
                "comment": {
                  "body": "When an entity targets another entity after colliding with it.",
                  "plain": "When an entity targets another entity after colliding with it."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "CUSTOM",
                "comment": {
                  "body": "For custom calls to the event.",
                  "plain": "For custom calls to the event."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "DEFEND_VILLAGE",
                "comment": {
                  "body": "When an entity selects a target while defending a village.",
                  "plain": "When an entity selects a target while defending a village."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "FORGOT_TARGET",
                "comment": {
                  "body": "When the target is forgotten for whatever reason.\n \u003cp\u003e\n Currently only occurs in with spiders when there is a high\n brightness.",
                  "plain": "When the target is forgotten for whatever reason.\n \u003cp\u003e\n Currently only occurs in with spiders when there is a high\n brightness."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "OWNER_ATTACKED_TARGET",
                "comment": {
                  "body": "When the owner of the entity attacks the target attacks, so the\n entity targets it.",
                  "plain": "When the owner of the entity attacks the target attacks, so the\n entity targets it."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "PIG_ZOMBIE_TARGET",
                "comment": {
                  "body": "When the target attacks a fellow pig zombie, so the whole group\n will target him with this reason.",
                  "plain": "When the target attacks a fellow pig zombie, so the whole group\n will target him with this reason."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "RANDOM_TARGET",
                "comment": {
                  "body": "When the entity has no target, so the entity randomly chooses one.",
                  "plain": "When the entity has no target, so the entity randomly chooses one."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "REINFORCEMENT_TARGET",
                "comment": {
                  "body": "When a zombie targeting an entity summons reinforcements, so the reinforcements target the same entity",
                  "plain": "When a zombie targeting an entity summons reinforcements, so the reinforcements target the same entity"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "TARGET_ATTACKED_ENTITY",
                "comment": {
                  "body": "When the target attacks the entity, so entity targets it",
                  "plain": "When the target attacks the entity, so entity targets it"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "TARGET_ATTACKED_NEARBY_ENTITY",
                "comment": {
                  "body": "When the target attacks a nearby entity of the same type, so the entity targets it",
                  "plain": "When the target attacks a nearby entity of the same type, so the entity targets it"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "TARGET_ATTACKED_OWNER",
                "comment": {
                  "body": "When the target attacks the owner of the entity, so the entity\n targets it.",
                  "plain": "When the target attacks the owner of the entity, so the entity\n targets it."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "TARGET_DIED",
                "comment": {
                  "body": "When the entity\u0027s target has died, and so it no longer targets it",
                  "plain": "When the entity\u0027s target has died, and so it no longer targets it"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "TEMPT",
                "comment": {
                  "body": "When another entity tempts this entity by having a desired item such\n as wheat in it\u0027s hand.",
                  "plain": "When another entity tempts this entity by having a desired item such\n as wheat in it\u0027s hand."
                }
              },
              {
                "kind": "CONSTRUCTOR",
                "name": "TargetReason()"
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "UNKNOWN",
                "comment": {
                  "body": "A currently unknown reason for the entity changing target.",
                  "plain": "A currently unknown reason for the entity changing target."
                }
              },
              {
                "kind": "METHOD",
                "name": "valueOf(java.lang.String)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "name"
                  }
                ]
              },
              {
                "kind": "METHOD",
                "name": "values()"
              }
            ],
            "comment": {
              "body": "An enum to specify the reason for the targeting",
              "plain": "An enum to specify the reason for the targeting"
            }
          },
          {
            "kind": "FIELD",
            "name": "reason"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "setTarget(org.bukkit.entity.Entity)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "target"
              }
            ],
            "comment": {
              "body": "Set the entity that you want the mob to target instead.\n \u003cp\u003e\n It is possible to be null, null will cause the entity to be\n target-less.\n \u003cp\u003e\n This is different from cancelling the event. Cancelling the event will\n cause the entity to keep an original target, while setting to be null\n will cause the entity to be reset.",
              "plain": "Set the entity that you want the mob to target instead.\n \u003cp\u003e\n It is possible to be null, null will cause the entity to be\n target-less.\n \u003cp\u003e\n This is different from cancelling the event. Cancelling the event will\n cause the entity to keep an original target, while setting to be null\n will cause the entity to be reset.\n@param target The entity to target"
            }
          },
          {
            "kind": "FIELD",
            "name": "target"
          }
        ],
        "comment": {
          "body": "Called when a creature targets or untargets another entity",
          "plain": "Called when a creature targets or untargets another entity"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.entity.EntityTargetLivingEntityEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "EntityTargetLivingEntityEvent(org.bukkit.entity.Entity,org.bukkit.entity.LivingEntity,org.bukkit.event.entity.EntityTargetEvent.TargetReason)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "entity"
              },
              {
                "kind": "PARAMETER",
                "name": "reason"
              },
              {
                "kind": "PARAMETER",
                "name": "target"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getTarget()"
          },
          {
            "kind": "METHOD",
            "name": "setTarget(org.bukkit.entity.Entity)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "target"
              }
            ],
            "comment": {
              "body": "Set the Entity that you want the mob to target.\n \u003cp\u003e\n It is possible to be null, null will cause the entity to be\n target-less.\n \u003cp\u003e\n Must be a LivingEntity, or null.",
              "plain": "Set the Entity that you want the mob to target.\n \u003cp\u003e\n It is possible to be null, null will cause the entity to be\n target-less.\n \u003cp\u003e\n Must be a LivingEntity, or null.\n@param target The entity to target"
            }
          }
        ],
        "comment": {
          "body": "Called when an Entity targets a \u003ca href\u003d\"org/bukkit/entity/LivingEntity.html\" title\u003d\"interface in org.bukkit.entity\"\u003e\u003ccode\u003eLivingEntity\u003c/code\u003e\u003c/a\u003e and can only target\n LivingEntity\u0027s.",
          "plain": "Called when an Entity targets a {@link LivingEntity} and can only target\n LivingEntity\u0027s."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.entity.EntityTeleportEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "EntityTeleportEvent(org.bukkit.entity.Entity,org.bukkit.Location,org.bukkit.Location)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "from"
              },
              {
                "kind": "PARAMETER",
                "name": "to"
              },
              {
                "kind": "PARAMETER",
                "name": "what"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "cancel"
          },
          {
            "kind": "FIELD",
            "name": "from"
          },
          {
            "kind": "METHOD",
            "name": "getFrom()",
            "comment": {
              "body": "Gets the location that this entity moved from",
              "tags": "Returns Location this entity moved from.",
              "plain": "Gets the location that this entity moved from\n@return Location this entity moved from"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getTo()",
            "comment": {
              "body": "Gets the location that this entity moved to",
              "tags": "Returns Location the entity moved to.",
              "plain": "Gets the location that this entity moved to\n@return Location the entity moved to"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "setFrom(org.bukkit.Location)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "from"
              }
            ],
            "comment": {
              "body": "Sets the location that this entity moved from",
              "plain": "Sets the location that this entity moved from\n@param from New location this entity moved from"
            }
          },
          {
            "kind": "METHOD",
            "name": "setTo(org.bukkit.Location)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "to"
              }
            ],
            "comment": {
              "body": "Sets the location that this entity moved to",
              "plain": "Sets the location that this entity moved to\n@param to New Location this entity moved to"
            }
          },
          {
            "kind": "FIELD",
            "name": "to"
          }
        ],
        "comment": {
          "body": "Thrown when a non-player entity (such as an Enderman) tries to teleport\n from one location to another.",
          "plain": "Thrown when a non-player entity (such as an Enderman) tries to teleport\n from one location to another."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.entity.EntityToggleGlideEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "EntityToggleGlideEvent(org.bukkit.entity.LivingEntity,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "isGliding"
              },
              {
                "kind": "PARAMETER",
                "name": "who"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "cancel"
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "FIELD",
            "name": "isGliding"
          },
          {
            "kind": "METHOD",
            "name": "isGliding()"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          }
        ],
        "comment": {
          "body": "Sent when an entity\u0027s gliding status is toggled with an Elytra.\n Examples of when this event would be called:\n \u003cul\u003e\n     \u003cli\u003ePlayer presses the jump key while in midair and using an Elytra\u003c/li\u003e\n     \u003cli\u003ePlayer lands on ground while they are gliding (with an Elytra)\u003c/li\u003e\n \u003c/ul\u003e\n This can be visually estimated by the animation in which a player turns horizontal.",
          "plain": "Sent when an entity\u0027s gliding status is toggled with an Elytra.\n Examples of when this event would be called:\n \u003cul\u003e\n     \u003cli\u003ePlayer presses the jump key while in midair and using an Elytra\u003c/li\u003e\n     \u003cli\u003ePlayer lands on ground while they are gliding (with an Elytra)\u003c/li\u003e\n \u003c/ul\u003e\n This can be visually estimated by the animation in which a player turns horizontal."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.entity.EntityUnleashEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "EntityUnleashEvent(org.bukkit.entity.Entity,org.bukkit.event.entity.EntityUnleashEvent.UnleashReason)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "entity"
              },
              {
                "kind": "PARAMETER",
                "name": "reason"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getReason()",
            "comment": {
              "body": "Returns the reason for the unleashing.",
              "tags": "Returns The reason.",
              "plain": "Returns the reason for the unleashing.\n@return The reason"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "ENUM",
            "name": "org.bukkit.event.entity.EntityUnleashEvent.UnleashReason",
            "children": [
              {
                "kind": "ENUM_CONSTANT",
                "name": "DISTANCE",
                "comment": {
                  "body": "When the entity\u0027s leashholder is more than 10 blocks away",
                  "plain": "When the entity\u0027s leashholder is more than 10 blocks away"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "HOLDER_GONE",
                "comment": {
                  "body": "When the entity\u0027s leashholder has died or logged out, and so is\n unleashed",
                  "plain": "When the entity\u0027s leashholder has died or logged out, and so is\n unleashed"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "PLAYER_UNLEASH",
                "comment": {
                  "body": "When the entity\u0027s leashholder attempts to unleash it",
                  "plain": "When the entity\u0027s leashholder attempts to unleash it"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "UNKNOWN"
              },
              {
                "kind": "CONSTRUCTOR",
                "name": "UnleashReason()"
              },
              {
                "kind": "METHOD",
                "name": "valueOf(java.lang.String)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "name"
                  }
                ]
              },
              {
                "kind": "METHOD",
                "name": "values()"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "reason"
          }
        ],
        "comment": {
          "body": "Called immediately prior to an entity being unleashed.",
          "plain": "Called immediately prior to an entity being unleashed."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.entity.ExpBottleEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "ExpBottleEvent(org.bukkit.entity.ThrownExpBottle,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "bottle"
              },
              {
                "kind": "PARAMETER",
                "name": "exp"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "exp"
          },
          {
            "kind": "METHOD",
            "name": "getEntity()"
          },
          {
            "kind": "METHOD",
            "name": "getExperience()",
            "comment": {
              "body": "This method retrieves the amount of experience to be created.\n \u003cp\u003e\n The number indicates a total amount to be divided into orbs.",
              "tags": "Returns the total amount of experience to be created.",
              "plain": "This method retrieves the amount of experience to be created.\n \u003cp\u003e\n The number indicates a total amount to be divided into orbs.\n@return the total amount of experience to be created"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getShowEffect()",
            "comment": {
              "body": "This method indicates if the particle effect should be shown.",
              "tags": "Returns true if the effect will be shown, false otherwise.",
              "plain": "This method indicates if the particle effect should be shown.\n@return true if the effect will be shown, false otherwise"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "setExperience(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "exp"
              }
            ],
            "comment": {
              "body": "This method sets the amount of experience to be created.\n \u003cp\u003e\n The number indicates a total amount to be divided into orbs.",
              "plain": "This method sets the amount of experience to be created.\n \u003cp\u003e\n The number indicates a total amount to be divided into orbs.\n@param exp the total amount of experience to be created"
            }
          },
          {
            "kind": "METHOD",
            "name": "setShowEffect(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "showEffect"
              }
            ],
            "comment": {
              "body": "This method sets if the particle effect will be shown.\n \u003cp\u003e\n This does not change the experience created.",
              "plain": "This method sets if the particle effect will be shown.\n \u003cp\u003e\n This does not change the experience created.\n@param showEffect true indicates the effect will be shown, false\n     indicates no effect will be shown"
            }
          },
          {
            "kind": "FIELD",
            "name": "showEffect"
          }
        ],
        "comment": {
          "body": "Called when a ThrownExpBottle hits and releases experience.",
          "plain": "Called when a ThrownExpBottle hits and releases experience."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.entity.ExplosionPrimeEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "ExplosionPrimeEvent(org.bukkit.entity.Entity,float,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "fire"
              },
              {
                "kind": "PARAMETER",
                "name": "radius"
              },
              {
                "kind": "PARAMETER",
                "name": "what"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "ExplosionPrimeEvent(org.bukkit.entity.Explosive)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "explosive"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "cancel"
          },
          {
            "kind": "FIELD",
            "name": "fire"
          },
          {
            "kind": "METHOD",
            "name": "getFire()",
            "comment": {
              "body": "Gets whether this explosion will create fire or not",
              "tags": "Returns true if this explosion will create fire.",
              "plain": "Gets whether this explosion will create fire or not\n@return true if this explosion will create fire"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getRadius()",
            "comment": {
              "body": "Gets the radius of the explosion",
              "tags": "Returns returns the radius of the explosion.",
              "plain": "Gets the radius of the explosion\n@return returns the radius of the explosion"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "FIELD",
            "name": "radius"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "setFire(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "fire"
              }
            ],
            "comment": {
              "body": "Sets whether this explosion will create fire or not",
              "plain": "Sets whether this explosion will create fire or not\n@param fire true if you want this explosion to create fire"
            }
          },
          {
            "kind": "METHOD",
            "name": "setRadius(float)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "radius"
              }
            ],
            "comment": {
              "body": "Sets the radius of the explosion",
              "plain": "Sets the radius of the explosion\n@param radius the radius of the explosion"
            }
          }
        ],
        "comment": {
          "body": "Called when an entity has made a decision to explode.",
          "plain": "Called when an entity has made a decision to explode."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.entity.FireworkExplodeEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "FireworkExplodeEvent(org.bukkit.entity.Firework)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "what"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "cancel"
          },
          {
            "kind": "METHOD",
            "name": "getEntity()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ],
            "comment": {
              "body": "Set the cancelled state of this event. If the firework explosion is\n cancelled, the firework will still be removed, but no particles will be\n displayed.",
              "plain": "Set the cancelled state of this event. If the firework explosion is\n cancelled, the firework will still be removed, but no particles will be\n displayed.\n@param cancel whether to cancel or not."
            }
          }
        ],
        "comment": {
          "body": "Called when a firework explodes.",
          "plain": "Called when a firework explodes."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.entity.FoodLevelChangeEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "FoodLevelChangeEvent(org.bukkit.entity.HumanEntity,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "level"
              },
              {
                "kind": "PARAMETER",
                "name": "what"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "cancel"
          },
          {
            "kind": "METHOD",
            "name": "getEntity()"
          },
          {
            "kind": "METHOD",
            "name": "getFoodLevel()",
            "comment": {
              "body": "Gets the resultant food level that the entity involved in this event\n should be set to.\n \u003cp\u003e\n Where 20 is a full food bar and 0 is an empty one.",
              "tags": "Returns The resultant food level.",
              "plain": "Gets the resultant food level that the entity involved in this event\n should be set to.\n \u003cp\u003e\n Where 20 is a full food bar and 0 is an empty one.\n@return The resultant food level"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "FIELD",
            "name": "level"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "setFoodLevel(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "level"
              }
            ],
            "comment": {
              "body": "Sets the resultant food level that the entity involved in this event\n should be set to",
              "plain": "Sets the resultant food level that the entity involved in this event\n should be set to\n@param level the resultant food level that the entity involved in this\n     event should be set to"
            }
          }
        ],
        "comment": {
          "body": "Called when a human entity\u0027s food level changes",
          "plain": "Called when a human entity\u0027s food level changes"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.entity.HorseJumpEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "HorseJumpEvent(org.bukkit.entity.AbstractHorse,float)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "horse"
              },
              {
                "kind": "PARAMETER",
                "name": "power"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "cancelled"
          },
          {
            "kind": "METHOD",
            "name": "getEntity()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getPower()",
            "comment": {
              "body": "Gets the power of the jump.\n \u003cp\u003e\n Power is a value that defines how much of the horse\u0027s jump strength\n should be used for the jump. Power is effectively multiplied times\n the horse\u0027s jump strength to determine how high the jump is; 0\n represents no jump strength while 1 represents full jump strength.\n Setting power to a value above 1 will use additional jump strength\n that the horse does not usually have.\n \u003cp\u003e\n Power does not affect how high the horse is capable of jumping, only\n how much of its jumping capability will be used in this jump. To set\n the horse\u0027s overall jump strength, see \u003ca href\u003d\"org/bukkit/entity/AbstractHorse.html#setJumpStrength(double)\"\u003e\u003ccode\u003eAbstractHorse.setJumpStrength(double)\u003c/code\u003e\u003c/a\u003e.",
              "tags": "Returns jump strength.",
              "plain": "Gets the power of the jump.\n \u003cp\u003e\n Power is a value that defines how much of the horse\u0027s jump strength\n should be used for the jump. Power is effectively multiplied times\n the horse\u0027s jump strength to determine how high the jump is; 0\n represents no jump strength while 1 represents full jump strength.\n Setting power to a value above 1 will use additional jump strength\n that the horse does not usually have.\n \u003cp\u003e\n Power does not affect how high the horse is capable of jumping, only\n how much of its jumping capability will be used in this jump. To set\n the horse\u0027s overall jump strength, see {@link AbstractHorse#setJumpStrength(double)}.\n@return jump strength"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "FIELD",
            "name": "power"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@deprecated horse jumping was moved client side."
            }
          },
          {
            "kind": "METHOD",
            "name": "setPower(float)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "power"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Sets the power of the jump.\n \u003cp\u003e\n Jump power can be set to a value above 1.0 which will increase the\n strength of this jump above the horse\u0027s actual jump strength.\n \u003cp\u003e\n Setting the jump power to 0 will result in the jump animation still\n playing, but the horse not leaving the ground. Only canceling this\n event will result in no jump animation at all.",
              "plain": "Sets the power of the jump.\n \u003cp\u003e\n Jump power can be set to a value above 1.0 which will increase the\n strength of this jump above the horse\u0027s actual jump strength.\n \u003cp\u003e\n Setting the jump power to 0 will result in the jump animation still\n playing, but the horse not leaving the ground. Only canceling this\n event will result in no jump animation at all.\n@param power power of the jump\n@deprecated horse jumping was moved client side."
            }
          }
        ],
        "comment": {
          "body": "Called when a horse jumps.",
          "plain": "Called when a horse jumps."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.entity.ItemDespawnEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "ItemDespawnEvent(org.bukkit.entity.Item,org.bukkit.Location)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "despawnee"
              },
              {
                "kind": "PARAMETER",
                "name": "loc"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "canceled"
          },
          {
            "kind": "METHOD",
            "name": "getEntity()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getLocation()",
            "comment": {
              "body": "Gets the location at which the item is despawning.",
              "tags": "Returns The location at which the item is despawning.",
              "plain": "Gets the location at which the item is despawning.\n@return The location at which the item is despawning"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "FIELD",
            "name": "location"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          }
        ],
        "comment": {
          "body": "This event is called when a \u003ca href\u003d\"org/bukkit/entity/Item.html\" title\u003d\"interface in org.bukkit.entity\"\u003e\u003ccode\u003eItem\u003c/code\u003e\u003c/a\u003e is removed from\n the world because it has existed for 5 minutes.\n \u003cp\u003e\n Cancelling the event results in the item being allowed to exist for 5 more\n minutes. This behavior is not guaranteed and may change in future versions.",
          "plain": "This event is called when a {@link org.bukkit.entity.Item} is removed from\n the world because it has existed for 5 minutes.\n \u003cp\u003e\n Cancelling the event results in the item being allowed to exist for 5 more\n minutes. This behavior is not guaranteed and may change in future versions."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.entity.ItemMergeEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "ItemMergeEvent(org.bukkit.entity.Item,org.bukkit.entity.Item)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "item"
              },
              {
                "kind": "PARAMETER",
                "name": "target"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "cancelled"
          },
          {
            "kind": "METHOD",
            "name": "getEntity()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getTarget()",
            "comment": {
              "body": "Gets the Item entity the main Item is being merged into.",
              "tags": "Returns The Item being merged with.",
              "plain": "Gets the Item entity the main Item is being merged into.\n@return The Item being merged with"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancelled"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "target"
          }
        ]
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.entity.ItemSpawnEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "ItemSpawnEvent(org.bukkit.entity.Item)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "spawnee"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "ItemSpawnEvent(org.bukkit.entity.Item,org.bukkit.Location)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "loc"
              },
              {
                "kind": "PARAMETER",
                "name": "spawnee"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            }
          },
          {
            "kind": "METHOD",
            "name": "getEntity()"
          }
        ],
        "comment": {
          "body": "Called when an item is spawned into a world",
          "plain": "Called when an item is spawned into a world"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.entity.LingeringPotionSplashEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "LingeringPotionSplashEvent(org.bukkit.entity.ThrownPotion,org.bukkit.entity.AreaEffectCloud)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "entity"
              },
              {
                "kind": "PARAMETER",
                "name": "potion"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "cancelled"
          },
          {
            "kind": "FIELD",
            "name": "entity"
          },
          {
            "kind": "METHOD",
            "name": "getAreaEffectCloud()",
            "comment": {
              "body": "Gets the AreaEffectCloud spawned",
              "tags": "Returns The spawned AreaEffectCloud.",
              "plain": "Gets the AreaEffectCloud spawned\n@return The spawned AreaEffectCloud"
            }
          },
          {
            "kind": "METHOD",
            "name": "getEntity()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          }
        ],
        "comment": {
          "body": "Called when a splash potion hits an area",
          "plain": "Called when a splash potion hits an area"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.entity.PigZapEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PigZapEvent(org.bukkit.entity.Pig,org.bukkit.entity.LightningStrike,org.bukkit.entity.PigZombie)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "bolt"
              },
              {
                "kind": "PARAMETER",
                "name": "pig"
              },
              {
                "kind": "PARAMETER",
                "name": "pigzombie"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "bolt"
          },
          {
            "kind": "FIELD",
            "name": "canceled"
          },
          {
            "kind": "METHOD",
            "name": "getEntity()"
          },
          {
            "kind": "METHOD",
            "name": "getLightning()",
            "comment": {
              "body": "Gets the bolt which is striking the pig.",
              "tags": "Returns lightning entity.",
              "plain": "Gets the bolt which is striking the pig.\n@return lightning entity"
            }
          },
          {
            "kind": "METHOD",
            "name": "getPigZombie()",
            "comment": {
              "body": "Gets the zombie pig that will replace the pig, provided the event is\n not cancelled first.",
              "tags": "Returns resulting entity.",
              "plain": "Gets the zombie pig that will replace the pig, provided the event is\n not cancelled first.\n@return resulting entity"
            }
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "FIELD",
            "name": "pigzombie"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          }
        ],
        "comment": {
          "body": "Stores data for pigs being zapped",
          "plain": "Stores data for pigs being zapped"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.entity.PlayerDeathEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PlayerDeathEvent(org.bukkit.entity.Player,java.util.List\u003corg.bukkit.inventory.ItemStack\u003e,int,int,int,int,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "deathMessage"
              },
              {
                "kind": "PARAMETER",
                "name": "droppedExp"
              },
              {
                "kind": "PARAMETER",
                "name": "drops"
              },
              {
                "kind": "PARAMETER",
                "name": "newExp"
              },
              {
                "kind": "PARAMETER",
                "name": "newLevel"
              },
              {
                "kind": "PARAMETER",
                "name": "newTotalExp"
              },
              {
                "kind": "PARAMETER",
                "name": "player"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "PlayerDeathEvent(org.bukkit.entity.Player,java.util.List\u003corg.bukkit.inventory.ItemStack\u003e,int,int,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "deathMessage"
              },
              {
                "kind": "PARAMETER",
                "name": "droppedExp"
              },
              {
                "kind": "PARAMETER",
                "name": "drops"
              },
              {
                "kind": "PARAMETER",
                "name": "newExp"
              },
              {
                "kind": "PARAMETER",
                "name": "player"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "PlayerDeathEvent(org.bukkit.entity.Player,java.util.List\u003corg.bukkit.inventory.ItemStack\u003e,int,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "deathMessage"
              },
              {
                "kind": "PARAMETER",
                "name": "droppedExp"
              },
              {
                "kind": "PARAMETER",
                "name": "drops"
              },
              {
                "kind": "PARAMETER",
                "name": "player"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "deathMessage"
          },
          {
            "kind": "METHOD",
            "name": "getDeathMessage()",
            "comment": {
              "body": "Get the death message that will appear to everyone on the server.",
              "tags": "Returns Message to appear to other players on the server..",
              "plain": "Get the death message that will appear to everyone on the server.\n@return Message to appear to other players on the server."
            }
          },
          {
            "kind": "METHOD",
            "name": "getEntity()"
          },
          {
            "kind": "METHOD",
            "name": "getKeepInventory()",
            "comment": {
              "body": "Gets if the Player keeps inventory on death.",
              "tags": "Returns True if the player keeps inventory on death.",
              "plain": "Gets if the Player keeps inventory on death.\n@return True if the player keeps inventory on death"
            }
          },
          {
            "kind": "METHOD",
            "name": "getKeepLevel()",
            "comment": {
              "body": "Gets if the Player should keep all EXP at respawn.\n \u003cp\u003e\n This flag overrides other EXP settings",
              "tags": "Returns True if Player should keep all pre-death exp.",
              "plain": "Gets if the Player should keep all EXP at respawn.\n \u003cp\u003e\n This flag overrides other EXP settings\n@return True if Player should keep all pre-death exp"
            }
          },
          {
            "kind": "METHOD",
            "name": "getNewExp()",
            "comment": {
              "body": "Gets how much EXP the Player should have at respawn.\n \u003cp\u003e\n This does not indicate how much EXP should be dropped, please see\n \u003ca href\u003d\"org/bukkit/event/entity/EntityDeathEvent.html#getDroppedExp()\"\u003e\u003ccode\u003eEntityDeathEvent.getDroppedExp()\u003c/code\u003e\u003c/a\u003e for that.",
              "tags": "Returns New EXP of the respawned player.",
              "plain": "Gets how much EXP the Player should have at respawn.\n \u003cp\u003e\n This does not indicate how much EXP should be dropped, please see\n {@link #getDroppedExp()} for that.\n@return New EXP of the respawned player"
            }
          },
          {
            "kind": "METHOD",
            "name": "getNewLevel()",
            "comment": {
              "body": "Gets the Level the Player should have at respawn.",
              "tags": "Returns New Level of the respawned player.",
              "plain": "Gets the Level the Player should have at respawn.\n@return New Level of the respawned player"
            }
          },
          {
            "kind": "METHOD",
            "name": "getNewTotalExp()",
            "comment": {
              "body": "Gets the Total EXP the Player should have at respawn.",
              "tags": "Returns New Total EXP of the respawned player.",
              "plain": "Gets the Total EXP the Player should have at respawn.\n@return New Total EXP of the respawned player"
            }
          },
          {
            "kind": "FIELD",
            "name": "keepInventory"
          },
          {
            "kind": "FIELD",
            "name": "keepLevel"
          },
          {
            "kind": "FIELD",
            "name": "newExp"
          },
          {
            "kind": "FIELD",
            "name": "newLevel"
          },
          {
            "kind": "FIELD",
            "name": "newTotalExp"
          },
          {
            "kind": "METHOD",
            "name": "setDeathMessage(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "deathMessage"
              }
            ],
            "comment": {
              "body": "Set the death message that will appear to everyone on the server.",
              "plain": "Set the death message that will appear to everyone on the server.\n@param deathMessage Message to appear to other players on the server."
            }
          },
          {
            "kind": "METHOD",
            "name": "setKeepInventory(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "keepInventory"
              }
            ],
            "comment": {
              "body": "Sets if the Player keeps inventory on death.",
              "plain": "Sets if the Player keeps inventory on death.\n@param keepInventory True to keep the inventory"
            }
          },
          {
            "kind": "METHOD",
            "name": "setKeepLevel(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "keepLevel"
              }
            ],
            "comment": {
              "body": "Sets if the Player should keep all EXP at respawn.\n \u003cp\u003e\n This overrides all other EXP settings\n \u003cp\u003e\n This doesn\u0027t prevent prevent the EXP from dropping.\n \u003ca href\u003d\"org/bukkit/event/entity/EntityDeathEvent.html#setDroppedExp(int)\"\u003e\u003ccode\u003eEntityDeathEvent.setDroppedExp(int)\u003c/code\u003e\u003c/a\u003e should be used stop the\n EXP from dropping.",
              "plain": "Sets if the Player should keep all EXP at respawn.\n \u003cp\u003e\n This overrides all other EXP settings\n \u003cp\u003e\n This doesn\u0027t prevent prevent the EXP from dropping.\n {@link #setDroppedExp(int)} should be used stop the\n EXP from dropping.\n@param keepLevel True to keep all current value levels"
            }
          },
          {
            "kind": "METHOD",
            "name": "setNewExp(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "exp"
              }
            ],
            "comment": {
              "body": "Sets how much EXP the Player should have at respawn.\n \u003cp\u003e\n This does not indicate how much EXP should be dropped, please see\n \u003ca href\u003d\"org/bukkit/event/entity/EntityDeathEvent.html#setDroppedExp(int)\"\u003e\u003ccode\u003eEntityDeathEvent.setDroppedExp(int)\u003c/code\u003e\u003c/a\u003e for that.",
              "plain": "Sets how much EXP the Player should have at respawn.\n \u003cp\u003e\n This does not indicate how much EXP should be dropped, please see\n {@link #setDroppedExp(int)} for that.\n@param exp New EXP of the respawned player"
            }
          },
          {
            "kind": "METHOD",
            "name": "setNewLevel(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "level"
              }
            ],
            "comment": {
              "body": "Sets the Level the Player should have at respawn.",
              "plain": "Sets the Level the Player should have at respawn.\n@param level New Level of the respawned player"
            }
          },
          {
            "kind": "METHOD",
            "name": "setNewTotalExp(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "totalExp"
              }
            ],
            "comment": {
              "body": "Sets the Total EXP the Player should have at respawn.",
              "plain": "Sets the Total EXP the Player should have at respawn.\n@param totalExp New Total EXP of the respawned player"
            }
          }
        ],
        "comment": {
          "body": "Thrown whenever a \u003ca href\u003d\"org/bukkit/entity/Player.html\" title\u003d\"interface in org.bukkit.entity\"\u003e\u003ccode\u003ePlayer\u003c/code\u003e\u003c/a\u003e dies",
          "plain": "Thrown whenever a {@link Player} dies"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.entity.PlayerLeashEntityEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PlayerLeashEntityEvent(org.bukkit.entity.Entity,org.bukkit.entity.Entity,org.bukkit.entity.Player)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "leashHolder"
              },
              {
                "kind": "PARAMETER",
                "name": "leasher"
              },
              {
                "kind": "PARAMETER",
                "name": "what"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "cancelled"
          },
          {
            "kind": "FIELD",
            "name": "entity"
          },
          {
            "kind": "METHOD",
            "name": "getEntity()",
            "comment": {
              "body": "Returns the entity being leashed.",
              "tags": "Returns The entity.",
              "plain": "Returns the entity being leashed.\n@return The entity"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getLeashHolder()",
            "comment": {
              "body": "Returns the entity that is holding the leash.",
              "tags": "Returns The leash holder.",
              "plain": "Returns the entity that is holding the leash.\n@return The leash holder"
            }
          },
          {
            "kind": "METHOD",
            "name": "getPlayer()",
            "comment": {
              "body": "Returns the player involved in this event",
              "tags": "Returns Player who is involved in this event.",
              "plain": "Returns the player involved in this event\n@return Player who is involved in this event"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "FIELD",
            "name": "leashHolder"
          },
          {
            "kind": "FIELD",
            "name": "player"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          }
        ],
        "comment": {
          "body": "Called immediately prior to a creature being leashed by a player.",
          "plain": "Called immediately prior to a creature being leashed by a player."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.entity.PotionSplashEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PotionSplashEvent(org.bukkit.entity.ThrownPotion,java.util.Map\u003corg.bukkit.entity.LivingEntity,java.lang.Double\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "affectedEntities"
              },
              {
                "kind": "PARAMETER",
                "name": "potion"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "affectedEntities"
          },
          {
            "kind": "FIELD",
            "name": "cancelled"
          },
          {
            "kind": "METHOD",
            "name": "getAffectedEntities()",
            "comment": {
              "body": "Retrieves a list of all effected entities",
              "tags": "Returns A fresh copy of the affected entity list.",
              "plain": "Retrieves a list of all effected entities\n@return A fresh copy of the affected entity list"
            }
          },
          {
            "kind": "METHOD",
            "name": "getEntity()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getIntensity(org.bukkit.entity.LivingEntity)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "entity"
              }
            ],
            "comment": {
              "body": "Gets the intensity of the potion\u0027s effects for given entity; This\n depends on the distance to the impact center",
              "tags": "Returns intensity relative to maximum effect; 0.0: not affected; 1.0:\n     fully hit by potion effects.",
              "plain": "Gets the intensity of the potion\u0027s effects for given entity; This\n depends on the distance to the impact center\n@param entity Which entity to get intensity for\n@return intensity relative to maximum effect; 0.0: not affected; 1.0:\n     fully hit by potion effects"
            }
          },
          {
            "kind": "METHOD",
            "name": "getPotion()",
            "comment": {
              "body": "Gets the potion which caused this event",
              "tags": "Returns The thrown potion entity.",
              "plain": "Gets the potion which caused this event\n@return The thrown potion entity"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "setIntensity(org.bukkit.entity.LivingEntity,double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "entity"
              },
              {
                "kind": "PARAMETER",
                "name": "intensity"
              }
            ],
            "comment": {
              "body": "Overwrites the intensity for a given entity",
              "plain": "Overwrites the intensity for a given entity\n@param entity For which entity to define a new intensity\n@param intensity relative to maximum effect"
            }
          }
        ],
        "comment": {
          "body": "Called when a splash potion hits an area",
          "plain": "Called when a splash potion hits an area"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.entity.ProjectileHitEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "ProjectileHitEvent(org.bukkit.entity.Projectile)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "projectile"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "ProjectileHitEvent(org.bukkit.entity.Projectile,org.bukkit.block.Block)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "hitBlock"
              },
              {
                "kind": "PARAMETER",
                "name": "projectile"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "ProjectileHitEvent(org.bukkit.entity.Projectile,org.bukkit.entity.Entity)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "hitEntity"
              },
              {
                "kind": "PARAMETER",
                "name": "projectile"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "ProjectileHitEvent(org.bukkit.entity.Projectile,org.bukkit.entity.Entity,org.bukkit.block.Block)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "hitBlock"
              },
              {
                "kind": "PARAMETER",
                "name": "hitEntity"
              },
              {
                "kind": "PARAMETER",
                "name": "projectile"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "ProjectileHitEvent(org.bukkit.entity.Projectile,org.bukkit.entity.Entity,org.bukkit.block.Block,org.bukkit.block.BlockFace)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "hitBlock"
              },
              {
                "kind": "PARAMETER",
                "name": "hitBlockFace"
              },
              {
                "kind": "PARAMETER",
                "name": "hitEntity"
              },
              {
                "kind": "PARAMETER",
                "name": "projectile"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getEntity()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getHitBlock()",
            "comment": {
              "body": "Gets the block that was hit, if it was a block that was hit.",
              "tags": "Returns hit block or else null.",
              "plain": "Gets the block that was hit, if it was a block that was hit.\n@return hit block or else null"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHitBlockFace()",
            "comment": {
              "body": "Gets the face of the block that the projectile has hit.",
              "tags": "Returns hit block face or else null.",
              "plain": "Gets the face of the block that the projectile has hit.\n@return hit block face or else null"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHitEntity()",
            "comment": {
              "body": "Gets the entity that was hit, if it was an entity that was hit.",
              "tags": "Returns hit entity or else null.",
              "plain": "Gets the entity that was hit, if it was an entity that was hit.\n@return hit entity or else null"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "FIELD",
            "name": "hitBlock"
          },
          {
            "kind": "FIELD",
            "name": "hitBlockFace"
          },
          {
            "kind": "FIELD",
            "name": "hitEntity"
          }
        ],
        "comment": {
          "body": "Called when a projectile hits an object",
          "plain": "Called when a projectile hits an object"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.entity.ProjectileLaunchEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "ProjectileLaunchEvent(org.bukkit.entity.Entity)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "what"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "cancelled"
          },
          {
            "kind": "METHOD",
            "name": "getEntity()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          }
        ],
        "comment": {
          "body": "Called when a projectile is launched.",
          "plain": "Called when a projectile is launched."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.entity.SheepDyeWoolEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "SheepDyeWoolEvent(org.bukkit.entity.Sheep,org.bukkit.DyeColor)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "color"
              },
              {
                "kind": "PARAMETER",
                "name": "sheep"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "cancel"
          },
          {
            "kind": "FIELD",
            "name": "color"
          },
          {
            "kind": "METHOD",
            "name": "getColor()",
            "comment": {
              "body": "Gets the DyeColor the sheep is being dyed",
              "tags": "Returns the DyeColor the sheep is being dyed.",
              "plain": "Gets the DyeColor the sheep is being dyed\n@return the DyeColor the sheep is being dyed"
            }
          },
          {
            "kind": "METHOD",
            "name": "getEntity()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "setColor(org.bukkit.DyeColor)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "color"
              }
            ],
            "comment": {
              "body": "Sets the DyeColor the sheep is being dyed",
              "plain": "Sets the DyeColor the sheep is being dyed\n@param color the DyeColor the sheep will be dyed"
            }
          }
        ],
        "comment": {
          "body": "Called when a sheep\u0027s wool is dyed",
          "plain": "Called when a sheep\u0027s wool is dyed"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.entity.SheepRegrowWoolEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "SheepRegrowWoolEvent(org.bukkit.entity.Sheep)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "sheep"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "cancel"
          },
          {
            "kind": "METHOD",
            "name": "getEntity()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          }
        ],
        "comment": {
          "body": "Called when a sheep regrows its wool",
          "plain": "Called when a sheep regrows its wool"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.entity.SlimeSplitEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "SlimeSplitEvent(org.bukkit.entity.Slime,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "count"
              },
              {
                "kind": "PARAMETER",
                "name": "slime"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "cancel"
          },
          {
            "kind": "FIELD",
            "name": "count"
          },
          {
            "kind": "METHOD",
            "name": "getCount()",
            "comment": {
              "body": "Gets the amount of smaller slimes to spawn",
              "tags": "Returns the amount of slimes to spawn.",
              "plain": "Gets the amount of smaller slimes to spawn\n@return the amount of slimes to spawn"
            }
          },
          {
            "kind": "METHOD",
            "name": "getEntity()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "setCount(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "count"
              }
            ],
            "comment": {
              "body": "Sets how many smaller slimes will spawn on the split",
              "plain": "Sets how many smaller slimes will spawn on the split\n@param count the amount of slimes to spawn"
            }
          }
        ],
        "comment": {
          "body": "Called when a Slime splits into smaller Slimes upon death",
          "plain": "Called when a Slime splits into smaller Slimes upon death"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.entity.SpawnerSpawnEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "SpawnerSpawnEvent(org.bukkit.entity.Entity,org.bukkit.block.CreatureSpawner)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "spawnee"
              },
              {
                "kind": "PARAMETER",
                "name": "spawner"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getSpawner()"
          },
          {
            "kind": "FIELD",
            "name": "spawner"
          }
        ],
        "comment": {
          "body": "Called when an entity is spawned into a world by a spawner.\n \u003cp\u003e\n If a Spawner Spawn event is cancelled, the entity will not spawn.",
          "plain": "Called when an entity is spawned into a world by a spawner.\n \u003cp\u003e\n If a Spawner Spawn event is cancelled, the entity will not spawn."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.entity.VillagerAcquireTradeEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "VillagerAcquireTradeEvent(org.bukkit.entity.Villager,org.bukkit.inventory.MerchantRecipe)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "recipe"
              },
              {
                "kind": "PARAMETER",
                "name": "what"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "cancelled"
          },
          {
            "kind": "METHOD",
            "name": "getEntity()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getRecipe()",
            "comment": {
              "body": "Get the recipe to be acquired.",
              "tags": "Returns the new recipe.",
              "plain": "Get the recipe to be acquired.\n@return the new recipe"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "FIELD",
            "name": "recipe"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "setRecipe(org.bukkit.inventory.MerchantRecipe)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "recipe"
              }
            ],
            "comment": {
              "body": "Set the recipe to be acquired.",
              "plain": "Set the recipe to be acquired.\n@param recipe the new recipe"
            }
          }
        ],
        "comment": {
          "body": "Called whenever a villager acquires a new trade.",
          "plain": "Called whenever a villager acquires a new trade."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.entity.VillagerReplenishTradeEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "VillagerReplenishTradeEvent(org.bukkit.entity.Villager,org.bukkit.inventory.MerchantRecipe,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "bonus"
              },
              {
                "kind": "PARAMETER",
                "name": "recipe"
              },
              {
                "kind": "PARAMETER",
                "name": "what"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "bonus"
          },
          {
            "kind": "FIELD",
            "name": "cancelled"
          },
          {
            "kind": "METHOD",
            "name": "getBonus()",
            "comment": {
              "body": "Get the bonus uses added. The maximum uses of the recipe will be\n increased by this number.",
              "tags": "Returns the extra uses added.",
              "plain": "Get the bonus uses added. The maximum uses of the recipe will be\n increased by this number.\n@return the extra uses added"
            }
          },
          {
            "kind": "METHOD",
            "name": "getEntity()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getRecipe()",
            "comment": {
              "body": "Get the recipe to replenish.",
              "tags": "Returns the replenished recipe.",
              "plain": "Get the recipe to replenish.\n@return the replenished recipe"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "FIELD",
            "name": "recipe"
          },
          {
            "kind": "METHOD",
            "name": "setBonus(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "bonus"
              }
            ],
            "comment": {
              "body": "Set the bonus uses added.",
              "plain": "Set the bonus uses added.\n@see VillagerReplenishTradeEvent#getBonus()\n@param bonus the extra uses added"
            }
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "setRecipe(org.bukkit.inventory.MerchantRecipe)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "recipe"
              }
            ],
            "comment": {
              "body": "Set the recipe to replenish.",
              "plain": "Set the recipe to replenish.\n@param recipe the replenished recipe"
            }
          }
        ],
        "comment": {
          "body": "Called when a villager\u0027s trade\u0027s maximum uses is increased, due to a player\u0027s\n trade.",
          "plain": "Called when a villager\u0027s trade\u0027s maximum uses is increased, due to a player\u0027s\n trade.\n@see MerchantRecipe#getMaxUses()"
        }
      }
    ]
  },
  {
    "kind": "PACKAGE",
    "name": "org.bukkit.event.hanging",
    "children": [
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.hanging.HangingBreakByEntityEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "HangingBreakByEntityEvent(org.bukkit.entity.Hanging,org.bukkit.entity.Entity)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "hanging"
              },
              {
                "kind": "PARAMETER",
                "name": "remover"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "HangingBreakByEntityEvent(org.bukkit.entity.Hanging,org.bukkit.entity.Entity,org.bukkit.event.hanging.HangingBreakEvent.RemoveCause)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cause"
              },
              {
                "kind": "PARAMETER",
                "name": "hanging"
              },
              {
                "kind": "PARAMETER",
                "name": "remover"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getRemover()",
            "comment": {
              "body": "Gets the entity that removed the hanging entity",
              "tags": "Returns the entity that removed the hanging entity.",
              "plain": "Gets the entity that removed the hanging entity\n@return the entity that removed the hanging entity"
            }
          },
          {
            "kind": "FIELD",
            "name": "remover"
          }
        ],
        "comment": {
          "body": "Triggered when a hanging entity is removed by an entity",
          "plain": "Triggered when a hanging entity is removed by an entity"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.hanging.HangingBreakEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "HangingBreakEvent(org.bukkit.entity.Hanging,org.bukkit.event.hanging.HangingBreakEvent.RemoveCause)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cause"
              },
              {
                "kind": "PARAMETER",
                "name": "hanging"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "cancelled"
          },
          {
            "kind": "FIELD",
            "name": "cause"
          },
          {
            "kind": "METHOD",
            "name": "getCause()",
            "comment": {
              "body": "Gets the cause for the hanging entity\u0027s removal",
              "tags": "Returns the RemoveCause for the hanging entity\u0027s removal.",
              "plain": "Gets the cause for the hanging entity\u0027s removal\n@return the RemoveCause for the hanging entity\u0027s removal"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "ENUM",
            "name": "org.bukkit.event.hanging.HangingBreakEvent.RemoveCause",
            "children": [
              {
                "kind": "ENUM_CONSTANT",
                "name": "DEFAULT",
                "comment": {
                  "body": "Removed by an uncategorised cause",
                  "plain": "Removed by an uncategorised cause"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "ENTITY",
                "comment": {
                  "body": "Removed by an entity",
                  "plain": "Removed by an entity"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "EXPLOSION",
                "comment": {
                  "body": "Removed by an explosion",
                  "plain": "Removed by an explosion"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "OBSTRUCTION",
                "comment": {
                  "body": "Removed by placing a block on it",
                  "plain": "Removed by placing a block on it"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "PHYSICS",
                "comment": {
                  "body": "Removed by destroying the block behind it, etc",
                  "plain": "Removed by destroying the block behind it, etc"
                }
              },
              {
                "kind": "CONSTRUCTOR",
                "name": "RemoveCause()"
              },
              {
                "kind": "METHOD",
                "name": "valueOf(java.lang.String)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "name"
                  }
                ]
              },
              {
                "kind": "METHOD",
                "name": "values()"
              }
            ],
            "comment": {
              "body": "An enum to specify the cause of the removal",
              "plain": "An enum to specify the cause of the removal"
            }
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          }
        ],
        "comment": {
          "body": "Triggered when a hanging entity is removed",
          "plain": "Triggered when a hanging entity is removed"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.hanging.HangingEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "HangingEvent(org.bukkit.entity.Hanging)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "painting"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getEntity()",
            "comment": {
              "body": "Gets the hanging entity involved in this event.",
              "tags": "Returns the hanging entity.",
              "plain": "Gets the hanging entity involved in this event.\n@return the hanging entity"
            }
          },
          {
            "kind": "FIELD",
            "name": "hanging"
          }
        ],
        "comment": {
          "body": "Represents a hanging entity-related event.",
          "plain": "Represents a hanging entity-related event."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.hanging.HangingPlaceEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "HangingPlaceEvent(org.bukkit.entity.Hanging,org.bukkit.entity.Player,org.bukkit.block.Block,org.bukkit.block.BlockFace)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "block"
              },
              {
                "kind": "PARAMETER",
                "name": "blockFace"
              },
              {
                "kind": "PARAMETER",
                "name": "hanging"
              },
              {
                "kind": "PARAMETER",
                "name": "player"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "block"
          },
          {
            "kind": "FIELD",
            "name": "blockFace"
          },
          {
            "kind": "FIELD",
            "name": "cancelled"
          },
          {
            "kind": "METHOD",
            "name": "getBlock()",
            "comment": {
              "body": "Returns the block that the hanging entity was placed on",
              "tags": "Returns the block that the hanging entity was placed on.",
              "plain": "Returns the block that the hanging entity was placed on\n@return the block that the hanging entity was placed on"
            }
          },
          {
            "kind": "METHOD",
            "name": "getBlockFace()",
            "comment": {
              "body": "Returns the face of the block that the hanging entity was placed on",
              "tags": "Returns the face of the block that the hanging entity was placed on.",
              "plain": "Returns the face of the block that the hanging entity was placed on\n@return the face of the block that the hanging entity was placed on"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getPlayer()",
            "comment": {
              "body": "Returns the player placing the hanging entity",
              "tags": "Returns the player placing the hanging entity.",
              "plain": "Returns the player placing the hanging entity\n@return the player placing the hanging entity"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "FIELD",
            "name": "player"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          }
        ],
        "comment": {
          "body": "Triggered when a hanging entity is created in the world",
          "plain": "Triggered when a hanging entity is created in the world"
        }
      }
    ]
  },
  {
    "kind": "PACKAGE",
    "name": "org.bukkit.event.inventory",
    "children": [
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.inventory.BrewEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "BrewEvent(org.bukkit.block.Block,org.bukkit.inventory.BrewerInventory,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "brewer"
              },
              {
                "kind": "PARAMETER",
                "name": "contents"
              },
              {
                "kind": "PARAMETER",
                "name": "fuelLevel"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "cancelled"
          },
          {
            "kind": "FIELD",
            "name": "contents"
          },
          {
            "kind": "FIELD",
            "name": "fuelLevel"
          },
          {
            "kind": "METHOD",
            "name": "getContents()",
            "comment": {
              "body": "Gets the contents of the Brewing Stand.",
              "tags": "Returns the contents.",
              "plain": "Gets the contents of the Brewing Stand.\n@return the contents"
            }
          },
          {
            "kind": "METHOD",
            "name": "getFuelLevel()",
            "comment": {
              "body": "Gets the remaining fuel level.",
              "tags": "Returns the remaining fuel.",
              "plain": "Gets the remaining fuel level.\n@return the remaining fuel"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          }
        ],
        "comment": {
          "body": "Called when the brewing of the contents inside the Brewing Stand is\n complete.",
          "plain": "Called when the brewing of the contents inside the Brewing Stand is\n complete."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.inventory.BrewingStandFuelEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "BrewingStandFuelEvent(org.bukkit.block.Block,org.bukkit.inventory.ItemStack,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "brewingStand"
              },
              {
                "kind": "PARAMETER",
                "name": "fuel"
              },
              {
                "kind": "PARAMETER",
                "name": "fuelPower"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "cancelled"
          },
          {
            "kind": "FIELD",
            "name": "consuming"
          },
          {
            "kind": "FIELD",
            "name": "fuel"
          },
          {
            "kind": "FIELD",
            "name": "fuelPower"
          },
          {
            "kind": "METHOD",
            "name": "getFuel()",
            "comment": {
              "body": "Gets the ItemStack of the fuel before the amount was subtracted.",
              "tags": "Returns the fuel ItemStack.",
              "plain": "Gets the ItemStack of the fuel before the amount was subtracted.\n@return the fuel ItemStack"
            }
          },
          {
            "kind": "METHOD",
            "name": "getFuelPower()",
            "comment": {
              "body": "Gets the fuel power for this fuel. Each unit of power can fuel one\n brewing operation.",
              "tags": "Returns the fuel power for this fuel.",
              "plain": "Gets the fuel power for this fuel. Each unit of power can fuel one\n brewing operation.\n@return the fuel power for this fuel"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "METHOD",
            "name": "isConsuming()",
            "comment": {
              "body": "Gets whether the brewing stand\u0027s fuel will be reduced / consumed or not.",
              "tags": "Returns whether the fuel will be reduced or not.",
              "plain": "Gets whether the brewing stand\u0027s fuel will be reduced / consumed or not.\n@return whether the fuel will be reduced or not"
            }
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "setConsuming(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "consuming"
              }
            ],
            "comment": {
              "body": "Sets whether the brewing stand\u0027s fuel will be reduced / consumed or not.",
              "plain": "Sets whether the brewing stand\u0027s fuel will be reduced / consumed or not.\n@param consuming whether the fuel will be reduced or not"
            }
          },
          {
            "kind": "METHOD",
            "name": "setFuelPower(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "fuelPower"
              }
            ],
            "comment": {
              "body": "Sets the fuel power for this fuel. Each unit of power can fuel one\n brewing operation.",
              "plain": "Sets the fuel power for this fuel. Each unit of power can fuel one\n brewing operation.\n@param fuelPower the fuel power for this fuel"
            }
          }
        ],
        "comment": {
          "body": "Called when an ItemStack is about to increase the fuel level of a brewing\n stand.",
          "plain": "Called when an ItemStack is about to increase the fuel level of a brewing\n stand."
        }
      },
      {
        "kind": "ENUM",
        "name": "org.bukkit.event.inventory.ClickType",
        "children": [
          {
            "kind": "ENUM_CONSTANT",
            "name": "CONTROL_DROP",
            "comment": {
              "body": "Holding Ctrl while pressing the \"Drop\" key (defaults to Q).",
              "plain": "Holding Ctrl while pressing the \"Drop\" key (defaults to Q)."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "CREATIVE",
            "comment": {
              "body": "Any action done with the Creative inventory open.",
              "plain": "Any action done with the Creative inventory open."
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "ClickType()"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "DOUBLE_CLICK",
            "comment": {
              "body": "Pressing the left mouse button twice in quick succession.",
              "plain": "Pressing the left mouse button twice in quick succession."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "DROP",
            "comment": {
              "body": "The \"Drop\" key (defaults to Q).",
              "plain": "The \"Drop\" key (defaults to Q)."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "LEFT",
            "comment": {
              "body": "The left (or primary) mouse button.",
              "plain": "The left (or primary) mouse button."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "MIDDLE",
            "comment": {
              "body": "The middle mouse button, or a \"scrollwheel click\".",
              "plain": "The middle mouse button, or a \"scrollwheel click\"."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "NUMBER_KEY",
            "comment": {
              "body": "One of the number keys 1-9, correspond to slots on the hotbar.",
              "plain": "One of the number keys 1-9, correspond to slots on the hotbar."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "RIGHT",
            "comment": {
              "body": "The right mouse button.",
              "plain": "The right mouse button."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SHIFT_LEFT",
            "comment": {
              "body": "Holding shift while pressing the left mouse button.",
              "plain": "Holding shift while pressing the left mouse button."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SHIFT_RIGHT",
            "comment": {
              "body": "Holding shift while pressing the right mouse button.",
              "plain": "Holding shift while pressing the right mouse button."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "UNKNOWN",
            "comment": {
              "body": "A type of inventory manipulation not yet recognized by Bukkit.\n \u003cp\u003e\n This is only for transitional purposes on a new Minecraft update, and\n should never be relied upon.\n \u003cp\u003e\n Any ClickType.UNKNOWN is called on a best-effort basis.",
              "plain": "A type of inventory manipulation not yet recognized by Bukkit.\n \u003cp\u003e\n This is only for transitional purposes on a new Minecraft update, and\n should never be relied upon.\n \u003cp\u003e\n Any ClickType.UNKNOWN is called on a best-effort basis."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "WINDOW_BORDER_LEFT",
            "comment": {
              "body": "Clicking the left mouse button on the grey area around the inventory.",
              "plain": "Clicking the left mouse button on the grey area around the inventory."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "WINDOW_BORDER_RIGHT",
            "comment": {
              "body": "Clicking the right mouse button on the grey area around the inventory.",
              "plain": "Clicking the right mouse button on the grey area around the inventory."
            }
          },
          {
            "kind": "METHOD",
            "name": "isCreativeAction()",
            "comment": {
              "body": "Gets whether this ClickType represents an action that can only be\n performed by a Player in creative mode.",
              "tags": "Returns true if this action requires Creative mode.",
              "plain": "Gets whether this ClickType represents an action that can only be\n performed by a Player in creative mode.\n@return true if this action requires Creative mode"
            }
          },
          {
            "kind": "METHOD",
            "name": "isKeyboardClick()",
            "comment": {
              "body": "Gets whether this ClickType represents the pressing of a key on a\n keyboard.",
              "tags": "Returns true if this ClickType represents the pressing of a key.",
              "plain": "Gets whether this ClickType represents the pressing of a key on a\n keyboard.\n@return true if this ClickType represents the pressing of a key"
            }
          },
          {
            "kind": "METHOD",
            "name": "isLeftClick()",
            "comment": {
              "body": "Gets whether this ClickType represents a left click.",
              "tags": "Returns true if this ClickType represents a left click.",
              "plain": "Gets whether this ClickType represents a left click.\n@return true if this ClickType represents a left click"
            }
          },
          {
            "kind": "METHOD",
            "name": "isRightClick()",
            "comment": {
              "body": "Gets whether this ClickType represents a right click.",
              "tags": "Returns true if this ClickType represents a right click.",
              "plain": "Gets whether this ClickType represents a right click.\n@return true if this ClickType represents a right click"
            }
          },
          {
            "kind": "METHOD",
            "name": "isShiftClick()",
            "comment": {
              "body": "Gets whether this ClickType indicates that the shift key was pressed\n down when the click was made.",
              "tags": "Returns true if the action uses Shift..",
              "plain": "Gets whether this ClickType indicates that the shift key was pressed\n down when the click was made.\n@return true if the action uses Shift."
            }
          },
          {
            "kind": "METHOD",
            "name": "valueOf(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "values()"
          }
        ],
        "comment": {
          "body": "What the client did to trigger this action (not the result).",
          "plain": "What the client did to trigger this action (not the result)."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.inventory.CraftItemEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "CraftItemEvent(org.bukkit.inventory.Recipe,org.bukkit.inventory.InventoryView,org.bukkit.event.inventory.InventoryType.SlotType,int,org.bukkit.event.inventory.ClickType,org.bukkit.event.inventory.InventoryAction)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "action"
              },
              {
                "kind": "PARAMETER",
                "name": "click"
              },
              {
                "kind": "PARAMETER",
                "name": "recipe"
              },
              {
                "kind": "PARAMETER",
                "name": "slot"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              },
              {
                "kind": "PARAMETER",
                "name": "what"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "CraftItemEvent(org.bukkit.inventory.Recipe,org.bukkit.inventory.InventoryView,org.bukkit.event.inventory.InventoryType.SlotType,int,org.bukkit.event.inventory.ClickType,org.bukkit.event.inventory.InventoryAction,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "action"
              },
              {
                "kind": "PARAMETER",
                "name": "click"
              },
              {
                "kind": "PARAMETER",
                "name": "key"
              },
              {
                "kind": "PARAMETER",
                "name": "recipe"
              },
              {
                "kind": "PARAMETER",
                "name": "slot"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              },
              {
                "kind": "PARAMETER",
                "name": "what"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getInventory()"
          },
          {
            "kind": "METHOD",
            "name": "getRecipe()",
            "comment": {
              "tags": "Returns A copy of the current recipe on the crafting matrix..",
              "plain": "@return A copy of the current recipe on the crafting matrix."
            }
          },
          {
            "kind": "FIELD",
            "name": "recipe"
          }
        ],
        "comment": {
          "body": "Called when the recipe of an Item is completed inside a crafting matrix.",
          "plain": "Called when the recipe of an Item is completed inside a crafting matrix."
        }
      },
      {
        "kind": "ENUM",
        "name": "org.bukkit.event.inventory.DragType",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "DragType()"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "EVEN",
            "comment": {
              "body": "The cursor is split evenly across all selected slots, not to exceed the\n Material\u0027s max stack size, with the remainder going to the cursor.",
              "plain": "The cursor is split evenly across all selected slots, not to exceed the\n Material\u0027s max stack size, with the remainder going to the cursor."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SINGLE",
            "comment": {
              "body": "One item from the cursor is placed in each selected slot.",
              "plain": "One item from the cursor is placed in each selected slot."
            }
          },
          {
            "kind": "METHOD",
            "name": "valueOf(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "values()"
          }
        ],
        "comment": {
          "body": "Represents the effect of a drag that will be applied to an Inventory in an\n InventoryDragEvent.",
          "plain": "Represents the effect of a drag that will be applied to an Inventory in an\n InventoryDragEvent."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.inventory.FurnaceBurnEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "FurnaceBurnEvent(org.bukkit.block.Block,org.bukkit.inventory.ItemStack,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "burnTime"
              },
              {
                "kind": "PARAMETER",
                "name": "fuel"
              },
              {
                "kind": "PARAMETER",
                "name": "furnace"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "burnTime"
          },
          {
            "kind": "FIELD",
            "name": "burning"
          },
          {
            "kind": "FIELD",
            "name": "cancelled"
          },
          {
            "kind": "FIELD",
            "name": "fuel"
          },
          {
            "kind": "METHOD",
            "name": "getBurnTime()",
            "comment": {
              "body": "Gets the burn time for this fuel",
              "tags": "Returns the burn time for this fuel.",
              "plain": "Gets the burn time for this fuel\n@return the burn time for this fuel"
            }
          },
          {
            "kind": "METHOD",
            "name": "getFuel()",
            "comment": {
              "body": "Gets the fuel ItemStack for this event",
              "tags": "Returns the fuel ItemStack.",
              "plain": "Gets the fuel ItemStack for this event\n@return the fuel ItemStack"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isBurning()",
            "comment": {
              "body": "Gets whether the furnace\u0027s fuel is burning or not.",
              "tags": "Returns whether the furnace\u0027s fuel is burning or not..",
              "plain": "Gets whether the furnace\u0027s fuel is burning or not.\n@return whether the furnace\u0027s fuel is burning or not."
            }
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "METHOD",
            "name": "setBurnTime(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "burnTime"
              }
            ],
            "comment": {
              "body": "Sets the burn time for this fuel",
              "plain": "Sets the burn time for this fuel\n@param burnTime the burn time for this fuel"
            }
          },
          {
            "kind": "METHOD",
            "name": "setBurning(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "burning"
              }
            ],
            "comment": {
              "body": "Sets whether the furnace\u0027s fuel is burning or not.",
              "plain": "Sets whether the furnace\u0027s fuel is burning or not.\n@param burning true if the furnace\u0027s fuel is burning"
            }
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          }
        ],
        "comment": {
          "body": "Called when an ItemStack is successfully burned as fuel in a furnace.",
          "plain": "Called when an ItemStack is successfully burned as fuel in a furnace."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.inventory.FurnaceExtractEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "FurnaceExtractEvent(org.bukkit.entity.Player,org.bukkit.block.Block,org.bukkit.Material,int,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "block"
              },
              {
                "kind": "PARAMETER",
                "name": "exp"
              },
              {
                "kind": "PARAMETER",
                "name": "itemAmount"
              },
              {
                "kind": "PARAMETER",
                "name": "itemType"
              },
              {
                "kind": "PARAMETER",
                "name": "player"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getItemAmount()",
            "comment": {
              "body": "Get the item count being retrieved",
              "tags": "Returns the amount of the item.",
              "plain": "Get the item count being retrieved\n@return the amount of the item"
            }
          },
          {
            "kind": "METHOD",
            "name": "getItemType()",
            "comment": {
              "body": "Get the Material of the item being retrieved",
              "tags": "Returns the material of the item.",
              "plain": "Get the Material of the item being retrieved\n@return the material of the item"
            }
          },
          {
            "kind": "METHOD",
            "name": "getPlayer()",
            "comment": {
              "body": "Get the player that triggered the event",
              "tags": "Returns the relevant player.",
              "plain": "Get the player that triggered the event\n@return the relevant player"
            }
          },
          {
            "kind": "FIELD",
            "name": "itemAmount"
          },
          {
            "kind": "FIELD",
            "name": "itemType"
          },
          {
            "kind": "FIELD",
            "name": "player"
          }
        ],
        "comment": {
          "body": "This event is called when a player takes items out of the furnace",
          "plain": "This event is called when a player takes items out of the furnace"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.inventory.FurnaceSmeltEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "FurnaceSmeltEvent(org.bukkit.block.Block,org.bukkit.inventory.ItemStack,org.bukkit.inventory.ItemStack)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "furnace"
              },
              {
                "kind": "PARAMETER",
                "name": "result"
              },
              {
                "kind": "PARAMETER",
                "name": "source"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "cancelled"
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getResult()",
            "comment": {
              "body": "Gets the resultant ItemStack for this event",
              "tags": "Returns smelting result ItemStack.",
              "plain": "Gets the resultant ItemStack for this event\n@return smelting result ItemStack"
            }
          },
          {
            "kind": "METHOD",
            "name": "getSource()",
            "comment": {
              "body": "Gets the smelted ItemStack for this event",
              "tags": "Returns smelting source ItemStack.",
              "plain": "Gets the smelted ItemStack for this event\n@return smelting source ItemStack"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "FIELD",
            "name": "result"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "setResult(org.bukkit.inventory.ItemStack)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "result"
              }
            ],
            "comment": {
              "body": "Sets the resultant ItemStack for this event",
              "plain": "Sets the resultant ItemStack for this event\n@param result new result ItemStack"
            }
          },
          {
            "kind": "FIELD",
            "name": "source"
          }
        ],
        "comment": {
          "body": "Called when an ItemStack is successfully smelted in a furnace.",
          "plain": "Called when an ItemStack is successfully smelted in a furnace."
        }
      },
      {
        "kind": "ENUM",
        "name": "org.bukkit.event.inventory.InventoryAction",
        "children": [
          {
            "kind": "ENUM_CONSTANT",
            "name": "CLONE_STACK",
            "comment": {
              "body": "A max-size stack of the clicked item is put on the cursor.",
              "plain": "A max-size stack of the clicked item is put on the cursor."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "COLLECT_TO_CURSOR",
            "comment": {
              "body": "The inventory is searched for the same material, and they are put on\n the cursor up to \u003ca href\u003d\"org/bukkit/Material.html#getMaxStackSize()\"\u003e\u003ccode\u003eMaterial.getMaxStackSize()\u003c/code\u003e\u003c/a\u003e.",
              "plain": "The inventory is searched for the same material, and they are put on\n the cursor up to {@link org.bukkit.Material#getMaxStackSize()}."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "DROP_ALL_CURSOR",
            "comment": {
              "body": "The entire cursor item is dropped.",
              "plain": "The entire cursor item is dropped."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "DROP_ALL_SLOT",
            "comment": {
              "body": "The entire clicked slot is dropped.",
              "plain": "The entire clicked slot is dropped."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "DROP_ONE_CURSOR",
            "comment": {
              "body": "One item is dropped from the cursor.",
              "plain": "One item is dropped from the cursor."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "DROP_ONE_SLOT",
            "comment": {
              "body": "One item is dropped from the clicked slot.",
              "plain": "One item is dropped from the clicked slot."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "HOTBAR_MOVE_AND_READD",
            "comment": {
              "body": "The clicked item is moved to the hotbar, and the item currently there\n is re-added to the player\u0027s inventory.",
              "plain": "The clicked item is moved to the hotbar, and the item currently there\n is re-added to the player\u0027s inventory."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "HOTBAR_SWAP",
            "comment": {
              "body": "The clicked slot and the picked hotbar slot are swapped.",
              "plain": "The clicked slot and the picked hotbar slot are swapped."
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "InventoryAction()"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "MOVE_TO_OTHER_INVENTORY",
            "comment": {
              "body": "The item is moved to the opposite inventory if a space is found.",
              "plain": "The item is moved to the opposite inventory if a space is found."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "NOTHING",
            "comment": {
              "body": "Nothing will happen from the click.\n \u003cp\u003e\n There may be cases where nothing will happen and this is value is not\n provided, but it is guaranteed that this value is accurate when given.",
              "plain": "Nothing will happen from the click.\n \u003cp\u003e\n There may be cases where nothing will happen and this is value is not\n provided, but it is guaranteed that this value is accurate when given."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "PICKUP_ALL",
            "comment": {
              "body": "All of the items on the clicked slot are moved to the cursor.",
              "plain": "All of the items on the clicked slot are moved to the cursor."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "PICKUP_HALF",
            "comment": {
              "body": "Half of the items on the clicked slot are moved to the cursor.",
              "plain": "Half of the items on the clicked slot are moved to the cursor."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "PICKUP_ONE",
            "comment": {
              "body": "One of the items on the clicked slot are moved to the cursor.",
              "plain": "One of the items on the clicked slot are moved to the cursor."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "PICKUP_SOME",
            "comment": {
              "body": "Some of the items on the clicked slot are moved to the cursor.",
              "plain": "Some of the items on the clicked slot are moved to the cursor."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "PLACE_ALL",
            "comment": {
              "body": "All of the items on the cursor are moved to the clicked slot.",
              "plain": "All of the items on the cursor are moved to the clicked slot."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "PLACE_ONE",
            "comment": {
              "body": "A single item from the cursor is moved to the clicked slot.",
              "plain": "A single item from the cursor is moved to the clicked slot."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "PLACE_SOME",
            "comment": {
              "body": "Some of the items from the cursor are moved to the clicked slot\n (usually up to the max stack size).",
              "plain": "Some of the items from the cursor are moved to the clicked slot\n (usually up to the max stack size)."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SWAP_WITH_CURSOR",
            "comment": {
              "body": "The clicked item and the cursor are exchanged.",
              "plain": "The clicked item and the cursor are exchanged."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "UNKNOWN",
            "comment": {
              "body": "An unrecognized ClickType.",
              "plain": "An unrecognized ClickType."
            }
          },
          {
            "kind": "METHOD",
            "name": "valueOf(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "values()"
          }
        ],
        "comment": {
          "body": "An estimation of what the result will be.",
          "plain": "An estimation of what the result will be."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.inventory.InventoryClickEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "InventoryClickEvent(org.bukkit.inventory.InventoryView,org.bukkit.event.inventory.InventoryType.SlotType,int,org.bukkit.event.inventory.ClickType,org.bukkit.event.inventory.InventoryAction)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "action"
              },
              {
                "kind": "PARAMETER",
                "name": "click"
              },
              {
                "kind": "PARAMETER",
                "name": "slot"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              },
              {
                "kind": "PARAMETER",
                "name": "view"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "InventoryClickEvent(org.bukkit.inventory.InventoryView,org.bukkit.event.inventory.InventoryType.SlotType,int,org.bukkit.event.inventory.ClickType,org.bukkit.event.inventory.InventoryAction,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "action"
              },
              {
                "kind": "PARAMETER",
                "name": "click"
              },
              {
                "kind": "PARAMETER",
                "name": "key"
              },
              {
                "kind": "PARAMETER",
                "name": "slot"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              },
              {
                "kind": "PARAMETER",
                "name": "view"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "action"
          },
          {
            "kind": "FIELD",
            "name": "click"
          },
          {
            "kind": "FIELD",
            "name": "clickedInventory"
          },
          {
            "kind": "FIELD",
            "name": "current"
          },
          {
            "kind": "METHOD",
            "name": "getAction()",
            "comment": {
              "body": "Gets the InventoryAction that triggered this event.\n \u003cp\u003e\n This action cannot be changed, and represents what the normal outcome\n of the event will be. To change the behavior of this\n InventoryClickEvent, changes must be manually applied.",
              "tags": "Returns the InventoryAction that triggered this event..",
              "plain": "Gets the InventoryAction that triggered this event.\n \u003cp\u003e\n This action cannot be changed, and represents what the normal outcome\n of the event will be. To change the behavior of this\n InventoryClickEvent, changes must be manually applied.\n@return the InventoryAction that triggered this event."
            }
          },
          {
            "kind": "METHOD",
            "name": "getClick()",
            "comment": {
              "body": "Gets the ClickType for this event.\n \u003cp\u003e\n This is insulated against changes to the inventory by other plugins.",
              "tags": "Returns the type of inventory click.",
              "plain": "Gets the ClickType for this event.\n \u003cp\u003e\n This is insulated against changes to the inventory by other plugins.\n@return the type of inventory click"
            }
          },
          {
            "kind": "METHOD",
            "name": "getClickedInventory()",
            "comment": {
              "body": "Gets the inventory that was clicked, or null if outside of window",
              "tags": "Returns The clicked inventory.",
              "plain": "Gets the inventory that was clicked, or null if outside of window\n@return The clicked inventory"
            }
          },
          {
            "kind": "METHOD",
            "name": "getCurrentItem()",
            "comment": {
              "body": "Gets the ItemStack currently in the clicked slot.",
              "tags": "Returns the item in the clicked.",
              "plain": "Gets the ItemStack currently in the clicked slot.\n@return the item in the clicked"
            }
          },
          {
            "kind": "METHOD",
            "name": "getCursor()",
            "comment": {
              "body": "Gets the current ItemStack on the cursor.",
              "tags": "Returns the cursor ItemStack.",
              "plain": "Gets the current ItemStack on the cursor.\n@return the cursor ItemStack"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getHotbarButton()",
            "comment": {
              "body": "If the ClickType is NUMBER_KEY, this method will return the index of\n the pressed key (0-8).",
              "tags": "Returns the number on the key minus 1 (range 0-8); or -1 if not\n     a NUMBER_KEY action.",
              "plain": "If the ClickType is NUMBER_KEY, this method will return the index of\n the pressed key (0-8).\n@return the number on the key minus 1 (range 0-8); or -1 if not\n     a NUMBER_KEY action"
            }
          },
          {
            "kind": "METHOD",
            "name": "getRawSlot()",
            "comment": {
              "body": "The raw slot number clicked, ready for passing to \u003ca href\u003d\"org/bukkit/inventory/InventoryView.html\" title\u003d\"class in org.bukkit.inventory\"\u003e\u003ccode\u003e#getItem(int)\u003c/code\u003e\u003c/a\u003e This slot number is unique for the view.",
              "tags": "Returns the slot number.",
              "plain": "The raw slot number clicked, ready for passing to {@link InventoryView #getItem(int)} This slot number is unique for the view.\n@return the slot number"
            }
          },
          {
            "kind": "METHOD",
            "name": "getSlot()",
            "comment": {
              "body": "The slot number that was clicked, ready for passing to\n \u003ca href\u003d\"org/bukkit/inventory/Inventory.html#getItem(int)\"\u003e\u003ccode\u003eInventory.getItem(int)\u003c/code\u003e\u003c/a\u003e. Note that there may be two slots with\n the same slot number, since a view links two different inventories.",
              "tags": "Returns The slot number..",
              "plain": "The slot number that was clicked, ready for passing to\n {@link Inventory#getItem(int)}. Note that there may be two slots with\n the same slot number, since a view links two different inventories.\n@return The slot number."
            }
          },
          {
            "kind": "METHOD",
            "name": "getSlotType()",
            "comment": {
              "body": "Gets the type of slot that was clicked.",
              "tags": "Returns the slot type.",
              "plain": "Gets the type of slot that was clicked.\n@return the slot type"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "FIELD",
            "name": "hotbarKey"
          },
          {
            "kind": "METHOD",
            "name": "isLeftClick()",
            "comment": {
              "body": "Gets whether or not the ClickType for this event represents a left\n click.",
              "tags": "Returns true if the ClickType uses the left mouse button..",
              "plain": "Gets whether or not the ClickType for this event represents a left\n click.\n@return true if the ClickType uses the left mouse button.\n@see ClickType#isLeftClick()"
            }
          },
          {
            "kind": "METHOD",
            "name": "isRightClick()",
            "comment": {
              "body": "Gets whether or not the ClickType for this event represents a right\n click.",
              "tags": "Returns true if the ClickType uses the right mouse button..",
              "plain": "Gets whether or not the ClickType for this event represents a right\n click.\n@return true if the ClickType uses the right mouse button.\n@see ClickType#isRightClick()"
            }
          },
          {
            "kind": "METHOD",
            "name": "isShiftClick()",
            "comment": {
              "body": "Gets whether the ClickType for this event indicates that the key was\n pressed down when the click was made.",
              "tags": "Returns true if the ClickType uses Shift or Ctrl..",
              "plain": "Gets whether the ClickType for this event indicates that the key was\n pressed down when the click was made.\n@return true if the ClickType uses Shift or Ctrl.\n@see ClickType#isShiftClick()"
            }
          },
          {
            "kind": "FIELD",
            "name": "rawSlot"
          },
          {
            "kind": "METHOD",
            "name": "setCurrentItem(org.bukkit.inventory.ItemStack)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "stack"
              }
            ],
            "comment": {
              "body": "Sets the ItemStack currently in the clicked slot.",
              "plain": "Sets the ItemStack currently in the clicked slot.\n@param stack the item to be placed in the current slot"
            }
          },
          {
            "kind": "METHOD",
            "name": "setCursor(org.bukkit.inventory.ItemStack)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "stack"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Sets the item on the cursor.",
              "plain": "Sets the item on the cursor.\n@param stack the new cursor item\n@deprecated This changes the ItemStack in their hand before any\n     calculations are applied to the Inventory, which has a tendency to\n     create inconsistencies between the Player and the server, and to\n     make unexpected changes in the behavior of the clicked Inventory."
            }
          },
          {
            "kind": "FIELD",
            "name": "slot_type"
          },
          {
            "kind": "FIELD",
            "name": "whichSlot"
          }
        ],
        "comment": {
          "body": "This event is called when a player clicks a slot in an inventory.\n \u003cp\u003e\n Because InventoryClickEvent occurs within a modification of the Inventory,\n not all Inventory related methods are safe to use.\n \u003cp\u003e\n The following should never be invoked by an EventHandler for\n InventoryClickEvent using the HumanEntity or InventoryView associated with\n this event:\n \u003cul\u003e\n \u003cli\u003e\u003ca href\u003d\"org/bukkit/entity/HumanEntity.html#closeInventory()\"\u003e\u003ccode\u003eHumanEntity.closeInventory()\u003c/code\u003e\u003c/a\u003e\n \u003cli\u003e\u003ca href\u003d\"org/bukkit/entity/HumanEntity.html#openInventory(org.bukkit.inventory.Inventory)\"\u003e\u003ccode\u003eHumanEntity.openInventory(Inventory)\u003c/code\u003e\u003c/a\u003e\n \u003cli\u003e\u003ca href\u003d\"org/bukkit/entity/HumanEntity.html#openWorkbench(org.bukkit.Location,boolean)\"\u003e\u003ccode\u003eHumanEntity.openWorkbench(Location, boolean)\u003c/code\u003e\u003c/a\u003e\n \u003cli\u003e\u003ca href\u003d\"org/bukkit/entity/HumanEntity.html#openEnchanting(org.bukkit.Location,boolean)\"\u003e\u003ccode\u003eHumanEntity.openEnchanting(Location, boolean)\u003c/code\u003e\u003c/a\u003e\n \u003cli\u003e\u003ca href\u003d\"org/bukkit/inventory/InventoryView.html#close()\"\u003e\u003ccode\u003eInventoryView.close()\u003c/code\u003e\u003c/a\u003e\n \u003c/ul\u003e\n To invoke one of these methods, schedule a task using \n \u003ca href\u003d\"org/bukkit/scheduler/BukkitScheduler.html#runTask(org.bukkit.plugin.Plugin,java.lang.Runnable)\"\u003e\u003ccode\u003eBukkitScheduler.runTask(Plugin, Runnable)\u003c/code\u003e\u003c/a\u003e, which will run the task\n on the next tick. Also be aware that this is not an exhaustive list, and\n other methods could potentially create issues as well.\n \u003cp\u003e\n Assuming the EntityHuman associated with this event is an instance of a\n Player, manipulating the MaxStackSize or contents of an Inventory will\n require an Invocation of \u003ca href\u003d\"org/bukkit/entity/Player.html#updateInventory()\"\u003e\u003ccode\u003ePlayer.updateInventory()\u003c/code\u003e\u003c/a\u003e.\n \u003cp\u003e\n Modifications to slots that are modified by the results of this\n InventoryClickEvent can be overwritten. To change these slots, this event\n should be cancelled and all desired changes to the inventory applied.\n Alternatively, scheduling a task using \u003ca href\u003d\"org/bukkit/scheduler/BukkitScheduler.html#runTask(org.bukkit.plugin.Plugin,java.lang.Runnable)\"\u003e\u003ccode\u003eBukkitScheduler.runTask(Plugin, Runnable)\u003c/code\u003e\u003c/a\u003e, which would execute the task on the next tick, would\n work as well.",
          "plain": "This event is called when a player clicks a slot in an inventory.\n \u003cp\u003e\n Because InventoryClickEvent occurs within a modification of the Inventory,\n not all Inventory related methods are safe to use.\n \u003cp\u003e\n The following should never be invoked by an EventHandler for\n InventoryClickEvent using the HumanEntity or InventoryView associated with\n this event:\n \u003cul\u003e\n \u003cli\u003e{@link HumanEntity#closeInventory()}\n \u003cli\u003e{@link HumanEntity#openInventory(Inventory)}\n \u003cli\u003e{@link HumanEntity#openWorkbench(Location, boolean)}\n \u003cli\u003e{@link HumanEntity#openEnchanting(Location, boolean)}\n \u003cli\u003e{@link InventoryView#close()}\n \u003c/ul\u003e\n To invoke one of these methods, schedule a task using \n {@link BukkitScheduler#runTask(Plugin, Runnable)}, which will run the task\n on the next tick. Also be aware that this is not an exhaustive list, and\n other methods could potentially create issues as well.\n \u003cp\u003e\n Assuming the EntityHuman associated with this event is an instance of a\n Player, manipulating the MaxStackSize or contents of an Inventory will\n require an Invocation of {@link Player#updateInventory()}.\n \u003cp\u003e\n Modifications to slots that are modified by the results of this\n InventoryClickEvent can be overwritten. To change these slots, this event\n should be cancelled and all desired changes to the inventory applied.\n Alternatively, scheduling a task using {@link BukkitScheduler#runTask(\n Plugin, Runnable)}, which would execute the task on the next tick, would\n work as well."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.inventory.InventoryCloseEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "InventoryCloseEvent(org.bukkit.inventory.InventoryView)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "transaction"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "InventoryCloseEvent(org.bukkit.inventory.InventoryView,org.bukkit.event.inventory.InventoryCloseEvent.Reason)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "reason"
              },
              {
                "kind": "PARAMETER",
                "name": "transaction"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getPlayer()",
            "comment": {
              "body": "Returns the player involved in this event",
              "tags": "Returns Player who is involved in this event.",
              "plain": "Returns the player involved in this event\n@return Player who is involved in this event"
            }
          },
          {
            "kind": "METHOD",
            "name": "getReason()"
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "ENUM",
            "name": "org.bukkit.event.inventory.InventoryCloseEvent.Reason",
            "children": [
              {
                "kind": "ENUM_CONSTANT",
                "name": "CANT_USE",
                "comment": {
                  "body": "Player is no longer permitted to use this inventory",
                  "plain": "Player is no longer permitted to use this inventory"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "DEATH",
                "comment": {
                  "body": "The player died",
                  "plain": "The player died"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "DISCONNECT",
                "comment": {
                  "body": "Closed due to disconnect",
                  "plain": "Closed due to disconnect"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "OPEN_NEW",
                "comment": {
                  "body": "Opening new inventory instead",
                  "plain": "Opening new inventory instead"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "PLAYER",
                "comment": {
                  "body": "Closed",
                  "plain": "Closed"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "PLUGIN",
                "comment": {
                  "body": "Closed by Bukkit API",
                  "plain": "Closed by Bukkit API"
                }
              },
              {
                "kind": "CONSTRUCTOR",
                "name": "Reason()"
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "TELEPORT",
                "comment": {
                  "body": "Player is teleporting",
                  "plain": "Player is teleporting"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "UNKNOWN",
                "comment": {
                  "body": "Unknown reason",
                  "plain": "Unknown reason"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "UNLOADED",
                "comment": {
                  "body": "The chunk the inventory was in was unloaded",
                  "plain": "The chunk the inventory was in was unloaded"
                }
              },
              {
                "kind": "METHOD",
                "name": "valueOf(java.lang.String)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "name"
                  }
                ]
              },
              {
                "kind": "METHOD",
                "name": "values()"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "reason"
          }
        ],
        "comment": {
          "body": "Represents a player related inventory event",
          "plain": "Represents a player related inventory event"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.inventory.InventoryCreativeEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "InventoryCreativeEvent(org.bukkit.inventory.InventoryView,org.bukkit.event.inventory.InventoryType.SlotType,int,org.bukkit.inventory.ItemStack)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "newItem"
              },
              {
                "kind": "PARAMETER",
                "name": "slot"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              },
              {
                "kind": "PARAMETER",
                "name": "what"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getCursor()"
          },
          {
            "kind": "FIELD",
            "name": "item"
          },
          {
            "kind": "METHOD",
            "name": "setCursor(org.bukkit.inventory.ItemStack)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "item"
              }
            ]
          }
        ],
        "comment": {
          "body": "This event is called when a player in creative mode puts down or picks up\n an item in their inventory / hotbar and when they drop items from their\n Inventory while in creative mode.",
          "plain": "This event is called when a player in creative mode puts down or picks up\n an item in their inventory / hotbar and when they drop items from their\n Inventory while in creative mode."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.inventory.InventoryDragEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "InventoryDragEvent(org.bukkit.inventory.InventoryView,org.bukkit.inventory.ItemStack,org.bukkit.inventory.ItemStack,boolean,java.util.Map\u003cjava.lang.Integer,org.bukkit.inventory.ItemStack\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "newCursor"
              },
              {
                "kind": "PARAMETER",
                "name": "oldCursor"
              },
              {
                "kind": "PARAMETER",
                "name": "right"
              },
              {
                "kind": "PARAMETER",
                "name": "slots"
              },
              {
                "kind": "PARAMETER",
                "name": "what"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "addedItems"
          },
          {
            "kind": "FIELD",
            "name": "containerSlots"
          },
          {
            "kind": "METHOD",
            "name": "getCursor()",
            "comment": {
              "body": "Gets the result cursor after the drag is done. The returned value is\n mutable.",
              "tags": "Returns the result cursor.",
              "plain": "Gets the result cursor after the drag is done. The returned value is\n mutable.\n@return the result cursor"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getInventorySlots()",
            "comment": {
              "body": "Gets the slots to be changed in this drag.",
              "tags": "Returns list of converted slot ids, suitable for \u003ca href\u003d\"org/bukkit/inventory/Inventory.html#getItem(int)\"\u003e\u003ccode\u003eInventory.getItem(int)\u003c/code\u003e\u003c/a\u003e..",
              "plain": "Gets the slots to be changed in this drag.\n@return list of converted slot ids, suitable for {@link org.bukkit.inventory.Inventory#getItem(int)}."
            }
          },
          {
            "kind": "METHOD",
            "name": "getNewItems()",
            "comment": {
              "body": "Gets all items to be added to the inventory in this drag.",
              "tags": "Returns map from raw slot id to new ItemStack.",
              "plain": "Gets all items to be added to the inventory in this drag.\n@return map from raw slot id to new ItemStack"
            }
          },
          {
            "kind": "METHOD",
            "name": "getOldCursor()",
            "comment": {
              "body": "Gets an ItemStack representing the cursor prior to any modifications\n as a result of this drag.",
              "tags": "Returns the original cursor.",
              "plain": "Gets an ItemStack representing the cursor prior to any modifications\n as a result of this drag.\n@return the original cursor"
            }
          },
          {
            "kind": "METHOD",
            "name": "getRawSlots()",
            "comment": {
              "body": "Gets the raw slot ids to be changed in this drag.",
              "tags": "Returns list of raw slot ids, suitable for getView().getItem(int).",
              "plain": "Gets the raw slot ids to be changed in this drag.\n@return list of raw slot ids, suitable for getView().getItem(int)"
            }
          },
          {
            "kind": "METHOD",
            "name": "getType()",
            "comment": {
              "body": "Gets the DragType that describes the behavior of ItemStacks placed\n after this InventoryDragEvent.\n \u003cp\u003e\n The ItemStacks and the raw slots that they\u0027re being applied to can be\n found using \u003ca href\u003d\"org/bukkit/event/inventory/InventoryDragEvent.html#getNewItems()\"\u003e\u003ccode\u003eInventoryDragEvent.getNewItems()\u003c/code\u003e\u003c/a\u003e.",
              "tags": "Returns the DragType of this InventoryDragEvent.",
              "plain": "Gets the DragType that describes the behavior of ItemStacks placed\n after this InventoryDragEvent.\n \u003cp\u003e\n The ItemStacks and the raw slots that they\u0027re being applied to can be\n found using {@link #getNewItems()}.\n@return the DragType of this InventoryDragEvent"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "FIELD",
            "name": "newCursor"
          },
          {
            "kind": "FIELD",
            "name": "oldCursor"
          },
          {
            "kind": "METHOD",
            "name": "setCursor(org.bukkit.inventory.ItemStack)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "newCursor"
              }
            ],
            "comment": {
              "body": "Sets the result cursor after the drag is done.\n \u003cp\u003e\n Changing this item stack changes the cursor item. Note that changing\n the affected \"dragged\" slots does not change this ItemStack, nor does\n changing this ItemStack affect the \"dragged\" slots.",
              "plain": "Sets the result cursor after the drag is done.\n \u003cp\u003e\n Changing this item stack changes the cursor item. Note that changing\n the affected \"dragged\" slots does not change this ItemStack, nor does\n changing this ItemStack affect the \"dragged\" slots.\n@param newCursor the new cursor ItemStack"
            }
          },
          {
            "kind": "FIELD",
            "name": "type"
          }
        ],
        "comment": {
          "body": "This event is called when the player drags an item in their cursor across\n the inventory. The ItemStack is distributed across the slots the\n HumanEntity dragged over. The method of distribution is described by the \n DragType returned by \u003ca href\u003d\"org/bukkit/event/inventory/InventoryDragEvent.html#getType()\"\u003e\u003ccode\u003eInventoryDragEvent.getType()\u003c/code\u003e\u003c/a\u003e.\n \u003cp\u003e\n Canceling this event will result in none of the changes described in\n \u003ca href\u003d\"org/bukkit/event/inventory/InventoryDragEvent.html#getNewItems()\"\u003e\u003ccode\u003eInventoryDragEvent.getNewItems()\u003c/code\u003e\u003c/a\u003e being applied to the Inventory.\n \u003cp\u003e\n Because InventoryDragEvent occurs within a modification of the Inventory,\n not all Inventory related methods are safe to use.\n \u003cp\u003e\n The following should never be invoked by an EventHandler for\n InventoryDragEvent using the HumanEntity or InventoryView associated with\n this event.\n \u003cul\u003e\n \u003cli\u003e\u003ca href\u003d\"org/bukkit/entity/HumanEntity.html#closeInventory()\"\u003e\u003ccode\u003eHumanEntity.closeInventory()\u003c/code\u003e\u003c/a\u003e\n \u003cli\u003e\u003ca href\u003d\"org/bukkit/entity/HumanEntity.html#openInventory(org.bukkit.inventory.Inventory)\"\u003e\u003ccode\u003eHumanEntity.openInventory(Inventory)\u003c/code\u003e\u003c/a\u003e\n \u003cli\u003e\u003ca href\u003d\"org/bukkit/entity/HumanEntity.html#openWorkbench(org.bukkit.Location,boolean)\"\u003e\u003ccode\u003eHumanEntity.openWorkbench(Location, boolean)\u003c/code\u003e\u003c/a\u003e\n \u003cli\u003e\u003ca href\u003d\"org/bukkit/entity/HumanEntity.html#openEnchanting(org.bukkit.Location,boolean)\"\u003e\u003ccode\u003eHumanEntity.openEnchanting(Location, boolean)\u003c/code\u003e\u003c/a\u003e\n \u003cli\u003e\u003ca href\u003d\"org/bukkit/inventory/InventoryView.html#close()\"\u003e\u003ccode\u003eInventoryView.close()\u003c/code\u003e\u003c/a\u003e\n \u003c/ul\u003e\n To invoke one of these methods, schedule a task using \n \u003ca href\u003d\"org/bukkit/scheduler/BukkitScheduler.html#runTask(org.bukkit.plugin.Plugin,java.lang.Runnable)\"\u003e\u003ccode\u003eBukkitScheduler.runTask(Plugin, Runnable)\u003c/code\u003e\u003c/a\u003e, which will run the task\n on the next tick.  Also be aware that this is not an exhaustive list, and\n other methods could potentially create issues as well.\n \u003cp\u003e\n Assuming the EntityHuman associated with this event is an instance of a\n Player, manipulating the MaxStackSize or contents of an Inventory will\n require an Invocation of \u003ca href\u003d\"org/bukkit/entity/Player.html#updateInventory()\"\u003e\u003ccode\u003ePlayer.updateInventory()\u003c/code\u003e\u003c/a\u003e.\n \u003cp\u003e\n Any modifications to slots that are modified by the results of this\n InventoryDragEvent will be overwritten. To change these slots, this event\n should be cancelled and the changes applied. Alternatively, scheduling a\n task using \u003ca href\u003d\"org/bukkit/scheduler/BukkitScheduler.html#runTask(org.bukkit.plugin.Plugin,java.lang.Runnable)\"\u003e\u003ccode\u003eBukkitScheduler.runTask(Plugin, Runnable)\u003c/code\u003e\u003c/a\u003e, which would\n execute the task on the next tick, would work as well.",
          "plain": "This event is called when the player drags an item in their cursor across\n the inventory. The ItemStack is distributed across the slots the\n HumanEntity dragged over. The method of distribution is described by the \n DragType returned by {@link #getType()}.\n \u003cp\u003e\n Canceling this event will result in none of the changes described in\n {@link #getNewItems()} being applied to the Inventory.\n \u003cp\u003e\n Because InventoryDragEvent occurs within a modification of the Inventory,\n not all Inventory related methods are safe to use.\n \u003cp\u003e\n The following should never be invoked by an EventHandler for\n InventoryDragEvent using the HumanEntity or InventoryView associated with\n this event.\n \u003cul\u003e\n \u003cli\u003e{@link HumanEntity#closeInventory()}\n \u003cli\u003e{@link HumanEntity#openInventory(Inventory)}\n \u003cli\u003e{@link HumanEntity#openWorkbench(Location, boolean)}\n \u003cli\u003e{@link HumanEntity#openEnchanting(Location, boolean)}\n \u003cli\u003e{@link InventoryView#close()}\n \u003c/ul\u003e\n To invoke one of these methods, schedule a task using \n {@link BukkitScheduler#runTask(Plugin, Runnable)}, which will run the task\n on the next tick.  Also be aware that this is not an exhaustive list, and\n other methods could potentially create issues as well.\n \u003cp\u003e\n Assuming the EntityHuman associated with this event is an instance of a\n Player, manipulating the MaxStackSize or contents of an Inventory will\n require an Invocation of {@link Player#updateInventory()}.\n \u003cp\u003e\n Any modifications to slots that are modified by the results of this\n InventoryDragEvent will be overwritten. To change these slots, this event\n should be cancelled and the changes applied. Alternatively, scheduling a\n task using {@link BukkitScheduler#runTask(Plugin, Runnable)}, which would\n execute the task on the next tick, would work as well."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.inventory.InventoryEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "InventoryEvent(org.bukkit.inventory.InventoryView)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "transaction"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getInventory()",
            "comment": {
              "body": "Gets the primary Inventory involved in this transaction",
              "tags": "Returns The upper inventory..",
              "plain": "Gets the primary Inventory involved in this transaction\n@return The upper inventory."
            }
          },
          {
            "kind": "METHOD",
            "name": "getView()",
            "comment": {
              "body": "Gets the view object itself",
              "tags": "Returns InventoryView.",
              "plain": "Gets the view object itself\n@return InventoryView"
            }
          },
          {
            "kind": "METHOD",
            "name": "getViewers()",
            "comment": {
              "body": "Gets the list of players viewing the primary (upper) inventory involved\n in this event",
              "tags": "Returns A list of people viewing..",
              "plain": "Gets the list of players viewing the primary (upper) inventory involved\n in this event\n@return A list of people viewing."
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "FIELD",
            "name": "transaction"
          }
        ],
        "comment": {
          "body": "Represents a player related inventory event",
          "plain": "Represents a player related inventory event"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.inventory.InventoryInteractEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "InventoryInteractEvent(org.bukkit.inventory.InventoryView)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "transaction"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getResult()",
            "comment": {
              "body": "Gets the \u003ca href\u003d\"org/bukkit/event/Event.Result.html\" title\u003d\"enum in org.bukkit.event\"\u003e\u003ccode\u003eEvent.Result\u003c/code\u003e\u003c/a\u003e of this event. The Result describes the\n behavior that will be applied to the inventory in relation to this\n event.",
              "tags": "Returns the Result of this event..",
              "plain": "Gets the {@link Result} of this event. The Result describes the\n behavior that will be applied to the inventory in relation to this\n event.\n@return the Result of this event."
            }
          },
          {
            "kind": "METHOD",
            "name": "getWhoClicked()",
            "comment": {
              "body": "Gets the player who performed the click.",
              "tags": "Returns The clicking player..",
              "plain": "Gets the player who performed the click.\n@return The clicking player."
            }
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()",
            "comment": {
              "body": "Gets whether or not this event is cancelled. This is based off of the\n Result value returned by \u003ca href\u003d\"org/bukkit/event/inventory/InventoryInteractEvent.html#getResult()\"\u003e\u003ccode\u003eInventoryInteractEvent.getResult()\u003c/code\u003e\u003c/a\u003e.  Result.ALLOW and\n Result.DEFAULT will result in a returned value of false, but\n Result.DENY will result in a returned value of true.\n \u003cp\u003e\n Gets the cancellation state of this event. A cancelled event will not\n be executed in the server, but will still pass to other plugins",
              "tags": "Returns whether the event is cancelled.",
              "plain": "Gets whether or not this event is cancelled. This is based off of the\n Result value returned by {@link #getResult()}.  Result.ALLOW and\n Result.DEFAULT will result in a returned value of false, but\n Result.DENY will result in a returned value of true.\n \u003cp\u003e\n {@inheritDoc}\n@return whether the event is cancelled"
            }
          },
          {
            "kind": "FIELD",
            "name": "result"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "toCancel"
              }
            ],
            "comment": {
              "body": "Proxy method to \u003ca href\u003d\"org/bukkit/event/inventory/InventoryInteractEvent.html#setResult(org.bukkit.event.Event.Result)\"\u003e\u003ccode\u003eInventoryInteractEvent.setResult(Event.Result)\u003c/code\u003e\u003c/a\u003e for the Cancellable\n interface. \u003ca href\u003d\"org/bukkit/event/inventory/InventoryInteractEvent.html#setResult(org.bukkit.event.Event.Result)\"\u003e\u003ccode\u003eInventoryInteractEvent.setResult(Event.Result)\u003c/code\u003e\u003c/a\u003e is preferred, as it allows\n you to specify the Result beyond Result.DENY and Result.ALLOW.\n \u003cp\u003e\n Sets the cancellation state of this event. A cancelled event will not\n be executed in the server, but will still pass to other plugins.",
              "plain": "Proxy method to {@link #setResult(Event.Result)} for the Cancellable\n interface. {@link #setResult(Event.Result)} is preferred, as it allows\n you to specify the Result beyond Result.DENY and Result.ALLOW.\n \u003cp\u003e\n {@inheritDoc}\n@param toCancel result becomes DENY if true, ALLOW if false"
            }
          },
          {
            "kind": "METHOD",
            "name": "setResult(org.bukkit.event.Event.Result)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "newResult"
              }
            ],
            "comment": {
              "body": "Sets the result of this event. This will change whether or not this\n event is considered cancelled.",
              "plain": "Sets the result of this event. This will change whether or not this\n event is considered cancelled.\n@see #isCancelled()\n@param newResult the new {@link Result} for this event"
            }
          }
        ],
        "comment": {
          "body": "An abstract base class for events that describe an interaction between a\n HumanEntity and the contents of an Inventory.",
          "plain": "An abstract base class for events that describe an interaction between a\n HumanEntity and the contents of an Inventory."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.inventory.InventoryMoveItemEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "InventoryMoveItemEvent(org.bukkit.inventory.Inventory,org.bukkit.inventory.ItemStack,org.bukkit.inventory.Inventory,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "destinationInventory"
              },
              {
                "kind": "PARAMETER",
                "name": "didSourceInitiate"
              },
              {
                "kind": "PARAMETER",
                "name": "itemStack"
              },
              {
                "kind": "PARAMETER",
                "name": "sourceInventory"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "calledGetItem"
          },
          {
            "kind": "FIELD",
            "name": "calledSetItem"
          },
          {
            "kind": "FIELD",
            "name": "cancelled"
          },
          {
            "kind": "FIELD",
            "name": "destinationInventory"
          },
          {
            "kind": "FIELD",
            "name": "didSourceInitiate"
          },
          {
            "kind": "METHOD",
            "name": "getDestination()",
            "comment": {
              "body": "Gets the Inventory that the ItemStack is being put into",
              "tags": "Returns Inventory that the ItemStack is being put into.",
              "plain": "Gets the Inventory that the ItemStack is being put into\n@return Inventory that the ItemStack is being put into"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getInitiator()",
            "comment": {
              "body": "Gets the Inventory that initiated the transfer. This will always be\n either the destination or source Inventory.",
              "tags": "Returns Inventory that initiated the transfer.",
              "plain": "Gets the Inventory that initiated the transfer. This will always be\n either the destination or source Inventory.\n@return Inventory that initiated the transfer"
            }
          },
          {
            "kind": "METHOD",
            "name": "getItem()",
            "comment": {
              "body": "Gets the ItemStack being moved; if modified, the original item will not\n be removed from the source inventory.",
              "tags": "Returns ItemStack.",
              "plain": "Gets the ItemStack being moved; if modified, the original item will not\n be removed from the source inventory.\n@return ItemStack"
            }
          },
          {
            "kind": "METHOD",
            "name": "getSource()",
            "comment": {
              "body": "Gets the Inventory that the ItemStack is being taken from",
              "tags": "Returns Inventory that the ItemStack is being taken from.",
              "plain": "Gets the Inventory that the ItemStack is being taken from\n@return Inventory that the ItemStack is being taken from"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "FIELD",
            "name": "itemStack"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "setItem(org.bukkit.inventory.ItemStack)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "itemStack"
              }
            ],
            "comment": {
              "body": "Sets the ItemStack being moved; if this is different from the original\n ItemStack, the original item will not be removed from the source\n inventory.",
              "plain": "Sets the ItemStack being moved; if this is different from the original\n ItemStack, the original item will not be removed from the source\n inventory.\n@param itemStack The ItemStack"
            }
          },
          {
            "kind": "FIELD",
            "name": "sourceInventory"
          }
        ],
        "comment": {
          "body": "Called when some entity or block (e.g. hopper) tries to move items directly\n from one inventory to another.\n \u003cp\u003e\n When this event is called, the initiator may already have removed the item\n from the source inventory and is ready to move it into the destination\n inventory.\n \u003cp\u003e\n If this event is cancelled, the items will be returned to the source\n inventory, if needed.\n \u003cp\u003e\n If this event is not cancelled, the initiator will try to put the ItemStack\n into the destination inventory. If this is not possible and the ItemStack\n has not been modified, the source inventory slot will be restored to its\n former state. Otherwise any additional items will be discarded.",
          "plain": "Called when some entity or block (e.g. hopper) tries to move items directly\n from one inventory to another.\n \u003cp\u003e\n When this event is called, the initiator may already have removed the item\n from the source inventory and is ready to move it into the destination\n inventory.\n \u003cp\u003e\n If this event is cancelled, the items will be returned to the source\n inventory, if needed.\n \u003cp\u003e\n If this event is not cancelled, the initiator will try to put the ItemStack\n into the destination inventory. If this is not possible and the ItemStack\n has not been modified, the source inventory slot will be restored to its\n former state. Otherwise any additional items will be discarded."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.inventory.InventoryOpenEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "InventoryOpenEvent(org.bukkit.inventory.InventoryView)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "transaction"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "cancelled"
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getPlayer()",
            "comment": {
              "body": "Returns the player involved in this event",
              "tags": "Returns Player who is involved in this event.",
              "plain": "Returns the player involved in this event\n@return Player who is involved in this event"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()",
            "comment": {
              "body": "Gets the cancellation state of this event. A cancelled event will not\n be executed in the server, but will still pass to other plugins.\n \u003cp\u003e\n If an inventory open event is cancelled, the inventory screen will not\n show.",
              "tags": "Returns true if this event is cancelled.",
              "plain": "Gets the cancellation state of this event. A cancelled event will not\n be executed in the server, but will still pass to other plugins.\n \u003cp\u003e\n If an inventory open event is cancelled, the inventory screen will not\n show.\n@return true if this event is cancelled"
            }
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ],
            "comment": {
              "body": "Sets the cancellation state of this event. A cancelled event will not\n be executed in the server, but will still pass to other plugins.\n \u003cp\u003e\n If an inventory open event is cancelled, the inventory screen will not\n show.",
              "plain": "Sets the cancellation state of this event. A cancelled event will not\n be executed in the server, but will still pass to other plugins.\n \u003cp\u003e\n If an inventory open event is cancelled, the inventory screen will not\n show.\n@param cancel true if you wish to cancel this event"
            }
          }
        ],
        "comment": {
          "body": "Represents a player related inventory event",
          "plain": "Represents a player related inventory event"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.inventory.InventoryPickupItemEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "InventoryPickupItemEvent(org.bukkit.inventory.Inventory,org.bukkit.entity.Item)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "inventory"
              },
              {
                "kind": "PARAMETER",
                "name": "item"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "cancelled"
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getInventory()",
            "comment": {
              "body": "Gets the Inventory that picked up the item",
              "tags": "Returns Inventory.",
              "plain": "Gets the Inventory that picked up the item\n@return Inventory"
            }
          },
          {
            "kind": "METHOD",
            "name": "getItem()",
            "comment": {
              "body": "Gets the Item entity that was picked up",
              "tags": "Returns Item.",
              "plain": "Gets the Item entity that was picked up\n@return Item"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "FIELD",
            "name": "inventory"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "FIELD",
            "name": "item"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          }
        ],
        "comment": {
          "body": "Called when a hopper or hopper minecart picks up a dropped item.",
          "plain": "Called when a hopper or hopper minecart picks up a dropped item."
        }
      },
      {
        "kind": "ENUM",
        "name": "org.bukkit.event.inventory.InventoryType",
        "children": [
          {
            "kind": "ENUM_CONSTANT",
            "name": "ANVIL",
            "comment": {
              "body": "An anvil inventory, with 2 CRAFTING slots and 1 RESULT slot",
              "plain": "An anvil inventory, with 2 CRAFTING slots and 1 RESULT slot"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BEACON",
            "comment": {
              "body": "A beacon inventory, with 1 CRAFTING slot",
              "plain": "A beacon inventory, with 1 CRAFTING slot"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "BREWING",
            "comment": {
              "body": "A brewing stand inventory, with one FUEL slot and three CRAFTING slots.",
              "plain": "A brewing stand inventory, with one FUEL slot and three CRAFTING slots."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "CHEST",
            "comment": {
              "body": "A chest inventory, with 0, 9, 18, 27, 36, 45, or 54 slots of type\n CONTAINER.",
              "plain": "A chest inventory, with 0, 9, 18, 27, 36, 45, or 54 slots of type\n CONTAINER."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "CRAFTING",
            "comment": {
              "body": "A player\u0027s crafting inventory, with 4 CRAFTING slots and a RESULT slot.\n Also implies that the 4 ARMOR slots are accessible.",
              "plain": "A player\u0027s crafting inventory, with 4 CRAFTING slots and a RESULT slot.\n Also implies that the 4 ARMOR slots are accessible."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "CREATIVE",
            "comment": {
              "body": "The creative mode inventory, with only 9 QUICKBAR slots and nothing\n else. (The actual creative interface with the items is client-side and\n cannot be altered by the server.)",
              "plain": "The creative mode inventory, with only 9 QUICKBAR slots and nothing\n else. (The actual creative interface with the items is client-side and\n cannot be altered by the server.)"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "DISPENSER",
            "comment": {
              "body": "A dispenser inventory, with 9 slots of type CONTAINER.",
              "plain": "A dispenser inventory, with 9 slots of type CONTAINER."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "DROPPER",
            "comment": {
              "body": "A dropper inventory, with 9 slots of type CONTAINER.",
              "plain": "A dropper inventory, with 9 slots of type CONTAINER."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENCHANTING",
            "comment": {
              "body": "An enchantment table inventory, with two CRAFTING slots and three\n enchanting buttons.",
              "plain": "An enchantment table inventory, with two CRAFTING slots and three\n enchanting buttons."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ENDER_CHEST",
            "comment": {
              "body": "The ender chest inventory, with 27 slots.",
              "plain": "The ender chest inventory, with 27 slots."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "FURNACE",
            "comment": {
              "body": "A furnace inventory, with a RESULT slot, a CRAFTING slot, and a FUEL\n slot.",
              "plain": "A furnace inventory, with a RESULT slot, a CRAFTING slot, and a FUEL\n slot."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "HOPPER",
            "comment": {
              "body": "A hopper inventory, with 5 slots of type CONTAINER.",
              "plain": "A hopper inventory, with 5 slots of type CONTAINER."
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "InventoryType(int,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "defaultSize"
              },
              {
                "kind": "PARAMETER",
                "name": "defaultTitle"
              }
            ]
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "MERCHANT",
            "comment": {
              "body": "The merchant inventory, with 2 TRADE-IN slots, and 1 RESULT slot.",
              "plain": "The merchant inventory, with 2 TRADE-IN slots, and 1 RESULT slot."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "PLAYER",
            "comment": {
              "body": "A player\u0027s inventory, with 9 QUICKBAR slots, 27 CONTAINER slots, 4 ARMOR\n slots and 1 offhand slot. The ARMOR and offhand slots may not be visible\n to the player, though.",
              "plain": "A player\u0027s inventory, with 9 QUICKBAR slots, 27 CONTAINER slots, 4 ARMOR\n slots and 1 offhand slot. The ARMOR and offhand slots may not be visible\n to the player, though."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SHULKER_BOX",
            "comment": {
              "body": "A shulker box inventory, with 27 slots of type CONTAINER.",
              "plain": "A shulker box inventory, with 27 slots of type CONTAINER."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "WORKBENCH",
            "comment": {
              "body": "A workbench inventory, with 9 CRAFTING slots and a RESULT slot.",
              "plain": "A workbench inventory, with 9 CRAFTING slots and a RESULT slot."
            }
          },
          {
            "kind": "METHOD",
            "name": "getDefaultSize()"
          },
          {
            "kind": "METHOD",
            "name": "getDefaultTitle()"
          },
          {
            "kind": "ENUM",
            "name": "org.bukkit.event.inventory.InventoryType.SlotType",
            "children": [
              {
                "kind": "ENUM_CONSTANT",
                "name": "ARMOR",
                "comment": {
                  "body": "An armour slot in the player\u0027s inventory.",
                  "plain": "An armour slot in the player\u0027s inventory."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "CONTAINER",
                "comment": {
                  "body": "A regular slot in the container or the player\u0027s inventory; anything\n not covered by the other enum values.",
                  "plain": "A regular slot in the container or the player\u0027s inventory; anything\n not covered by the other enum values."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "CRAFTING",
                "comment": {
                  "body": "A slot in the crafting matrix, or the input slot in a furnace\n inventory, the potion slot in the brewing stand, or the enchanting\n slot.",
                  "plain": "A slot in the crafting matrix, or the input slot in a furnace\n inventory, the potion slot in the brewing stand, or the enchanting\n slot."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "FUEL",
                "comment": {
                  "body": "The fuel slot in a furnace inventory, or the ingredient slot in a\n brewing stand inventory.",
                  "plain": "The fuel slot in a furnace inventory, or the ingredient slot in a\n brewing stand inventory."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "OUTSIDE",
                "comment": {
                  "body": "A pseudo-slot representing the area outside the inventory window.",
                  "plain": "A pseudo-slot representing the area outside the inventory window."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "QUICKBAR",
                "comment": {
                  "body": "A slot in the bottom row or quickbar.",
                  "plain": "A slot in the bottom row or quickbar."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "RESULT",
                "comment": {
                  "body": "A result slot in a furnace or crafting inventory.",
                  "plain": "A result slot in a furnace or crafting inventory."
                }
              },
              {
                "kind": "CONSTRUCTOR",
                "name": "SlotType()"
              },
              {
                "kind": "METHOD",
                "name": "valueOf(java.lang.String)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "name"
                  }
                ]
              },
              {
                "kind": "METHOD",
                "name": "values()"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "size"
          },
          {
            "kind": "FIELD",
            "name": "title"
          },
          {
            "kind": "METHOD",
            "name": "valueOf(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "values()"
          }
        ]
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.inventory.PrepareAnvilEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PrepareAnvilEvent(org.bukkit.inventory.InventoryView,org.bukkit.inventory.ItemStack)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "inventory"
              },
              {
                "kind": "PARAMETER",
                "name": "result"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getInventory()"
          },
          {
            "kind": "METHOD",
            "name": "getResult()",
            "comment": {
              "body": "Get result item, may be null.",
              "tags": "Returns result item.",
              "plain": "Get result item, may be null.\n@return result item"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "FIELD",
            "name": "result"
          },
          {
            "kind": "METHOD",
            "name": "setResult(org.bukkit.inventory.ItemStack)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "result"
              }
            ]
          }
        ],
        "comment": {
          "body": "Called when an item is put in a slot for repair by an anvil.",
          "plain": "Called when an item is put in a slot for repair by an anvil."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.inventory.PrepareItemCraftEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PrepareItemCraftEvent(org.bukkit.inventory.CraftingInventory,org.bukkit.inventory.InventoryView,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "isRepair"
              },
              {
                "kind": "PARAMETER",
                "name": "view"
              },
              {
                "kind": "PARAMETER",
                "name": "what"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getInventory()",
            "comment": {
              "tags": "Returns The crafting inventory on which the recipe was formed..",
              "plain": "@return The crafting inventory on which the recipe was formed."
            }
          },
          {
            "kind": "METHOD",
            "name": "getRecipe()",
            "comment": {
              "body": "Get the recipe that has been formed. If this event was triggered by a\n tool repair, this will be a temporary shapeless recipe representing the\n repair.",
              "tags": "Returns The recipe being crafted..",
              "plain": "Get the recipe that has been formed. If this event was triggered by a\n tool repair, this will be a temporary shapeless recipe representing the\n repair.\n@return The recipe being crafted."
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isRepair()",
            "comment": {
              "body": "Check if this event was triggered by a tool repair operation rather\n than a crafting recipe.",
              "tags": "Returns True if this is a repair..",
              "plain": "Check if this event was triggered by a tool repair operation rather\n than a crafting recipe.\n@return True if this is a repair."
            }
          },
          {
            "kind": "FIELD",
            "name": "matrix"
          },
          {
            "kind": "FIELD",
            "name": "repair"
          }
        ]
      }
    ]
  },
  {
    "kind": "PACKAGE",
    "name": "org.bukkit.event.player",
    "children": [
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.player.AsyncPlayerChatEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "AsyncPlayerChatEvent(boolean,org.bukkit.entity.Player,java.lang.String,java.util.Set\u003corg.bukkit.entity.Player\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "async"
              },
              {
                "kind": "PARAMETER",
                "name": "message"
              },
              {
                "kind": "PARAMETER",
                "name": "players"
              },
              {
                "kind": "PARAMETER",
                "name": "who"
              }
            ],
            "comment": {
              "plain": "@param async This changes the event to a synchronous state.\n@param who the chat sender\n@param message the message sent\n@param players the players to receive the message. This may be a lazy\n     or unmodifiable collection."
            }
          },
          {
            "kind": "FIELD",
            "name": "cancel"
          },
          {
            "kind": "FIELD",
            "name": "format"
          },
          {
            "kind": "METHOD",
            "name": "getFormat()",
            "comment": {
              "body": "Gets the format to use to display this chat message.\n \u003cp\u003e\n When this event finishes execution, the first format parameter is the\n \u003ca href\u003d\"org/bukkit/entity/Player.html#getDisplayName()\"\u003e\u003ccode\u003ePlayer.getDisplayName()\u003c/code\u003e\u003c/a\u003e and the second parameter is \u003ca href\u003d\"org/bukkit/event/player/AsyncPlayerChatEvent.html#getMessage()\"\u003e\u003ccode\u003eAsyncPlayerChatEvent.getMessage()\u003c/code\u003e\u003c/a\u003e",
              "tags": "Returns \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/lang/String.html#format(java.lang.String,java.lang.Object...)\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003e\u003ccode\u003eString.format(String, Object...)\u003c/code\u003e\u003c/a\u003e compatible format\n     string.",
              "plain": "Gets the format to use to display this chat message.\n \u003cp\u003e\n When this event finishes execution, the first format parameter is the\n {@link Player#getDisplayName()} and the second parameter is {@link #getMessage()}\n@return {@link String#format(String, Object...)} compatible format\n     string"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getMessage()",
            "comment": {
              "body": "Gets the message that the player is attempting to send. This message\n will be used with \u003ca href\u003d\"org/bukkit/event/player/AsyncPlayerChatEvent.html#getFormat()\"\u003e\u003ccode\u003eAsyncPlayerChatEvent.getFormat()\u003c/code\u003e\u003c/a\u003e.",
              "tags": "Returns Message the player is attempting to send.",
              "plain": "Gets the message that the player is attempting to send. This message\n will be used with {@link #getFormat()}.\n@return Message the player is attempting to send"
            }
          },
          {
            "kind": "METHOD",
            "name": "getRecipients()",
            "comment": {
              "body": "Gets a set of recipients that this chat message will be displayed to.\n \u003cp\u003e\n The set returned is not guaranteed to be mutable and may auto-populate\n on access. Any listener accessing the returned set should be aware that\n it may reduce performance for a lazy set implementation.\n \u003cp\u003e\n Listeners should be aware that modifying the list may throw \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003e\u003ccode\u003eUnsupportedOperationException\u003c/code\u003e\u003c/a\u003e if the event caller provides an\n unmodifiable set.",
              "tags": "Returns All Players who will see this chat message.",
              "plain": "Gets a set of recipients that this chat message will be displayed to.\n \u003cp\u003e\n The set returned is not guaranteed to be mutable and may auto-populate\n on access. Any listener accessing the returned set should be aware that\n it may reduce performance for a lazy set implementation.\n \u003cp\u003e\n Listeners should be aware that modifying the list may throw {@link UnsupportedOperationException} if the event caller provides an\n unmodifiable set.\n@return All Players who will see this chat message"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "FIELD",
            "name": "message"
          },
          {
            "kind": "FIELD",
            "name": "recipients"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "setFormat(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "format"
              }
            ],
            "comment": {
              "body": "Sets the format to use to display this chat message.\n \u003cp\u003e\n When this event finishes execution, the first format parameter is the\n \u003ca href\u003d\"org/bukkit/entity/Player.html#getDisplayName()\"\u003e\u003ccode\u003ePlayer.getDisplayName()\u003c/code\u003e\u003c/a\u003e and the second parameter is \u003ca href\u003d\"org/bukkit/event/player/AsyncPlayerChatEvent.html#getMessage()\"\u003e\u003ccode\u003eAsyncPlayerChatEvent.getMessage()\u003c/code\u003e\u003c/a\u003e",
              "plain": "Sets the format to use to display this chat message.\n \u003cp\u003e\n When this event finishes execution, the first format parameter is the\n {@link Player#getDisplayName()} and the second parameter is {@link #getMessage()}\n@param format {@link String#format(String, Object...)} compatible\n     format string\n@throws IllegalFormatException if the underlying API throws the\n     exception\n@throws NullPointerException if format is null\n@see String#format(String, Object...)"
            }
          },
          {
            "kind": "METHOD",
            "name": "setMessage(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "message"
              }
            ],
            "comment": {
              "body": "Sets the message that the player will send. This message will be used\n with \u003ca href\u003d\"org/bukkit/event/player/AsyncPlayerChatEvent.html#getFormat()\"\u003e\u003ccode\u003eAsyncPlayerChatEvent.getFormat()\u003c/code\u003e\u003c/a\u003e.",
              "plain": "Sets the message that the player will send. This message will be used\n with {@link #getFormat()}.\n@param message New message that the player will send"
            }
          }
        ],
        "comment": {
          "body": "This event will sometimes fire synchronously, depending on how it was\n triggered.\n \u003cp\u003e\n The constructor provides a boolean to indicate if the event was fired\n synchronously or asynchronously. When asynchronous, this event can be\n called from any thread, sans the main thread, and has limited access to the\n API.\n \u003cp\u003e\n If a player is the direct cause of this event by an incoming packet, this\n event will be asynchronous. If a plugin triggers this event by compelling a\n player to chat, this event will be synchronous.\n \u003cp\u003e\n Care should be taken to check \u003ca href\u003d\"org/bukkit/event/Event.html#isAsynchronous()\"\u003e\u003ccode\u003eEvent.isAsynchronous()\u003c/code\u003e\u003c/a\u003e and treat the event\n appropriately.",
          "plain": "This event will sometimes fire synchronously, depending on how it was\n triggered.\n \u003cp\u003e\n The constructor provides a boolean to indicate if the event was fired\n synchronously or asynchronously. When asynchronous, this event can be\n called from any thread, sans the main thread, and has limited access to the\n API.\n \u003cp\u003e\n If a player is the direct cause of this event by an incoming packet, this\n event will be asynchronous. If a plugin triggers this event by compelling a\n player to chat, this event will be synchronous.\n \u003cp\u003e\n Care should be taken to check {@link #isAsynchronous()} and treat the event\n appropriately."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.player.AsyncPlayerPreLoginEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "AsyncPlayerPreLoginEvent(java.lang.String,java.net.InetAddress)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "ipAddress"
              },
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "AsyncPlayerPreLoginEvent(java.lang.String,java.net.InetAddress,java.util.UUID)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "ipAddress"
              },
              {
                "kind": "PARAMETER",
                "name": "name"
              },
              {
                "kind": "PARAMETER",
                "name": "uniqueId"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "AsyncPlayerPreLoginEvent(java.lang.String,java.net.InetAddress,java.util.UUID,com.destroystokyo.paper.profile.PlayerProfile)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "ipAddress"
              },
              {
                "kind": "PARAMETER",
                "name": "name"
              },
              {
                "kind": "PARAMETER",
                "name": "profile"
              },
              {
                "kind": "PARAMETER",
                "name": "uniqueId"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "allow()",
            "comment": {
              "body": "Allows the player to log in",
              "plain": "Allows the player to log in"
            }
          },
          {
            "kind": "METHOD",
            "name": "disallow(org.bukkit.event.player.AsyncPlayerPreLoginEvent.Result,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "message"
              },
              {
                "kind": "PARAMETER",
                "name": "result"
              }
            ],
            "comment": {
              "body": "Disallows the player from logging in, with the given reason",
              "plain": "Disallows the player from logging in, with the given reason\n@param result New result for disallowing the player\n@param message Kick message to display to the user"
            }
          },
          {
            "kind": "METHOD",
            "name": "disallow(org.bukkit.event.player.PlayerPreLoginEvent.Result,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "message"
              },
              {
                "kind": "PARAMETER",
                "name": "result"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Disallows the player from logging in, with the given reason",
              "plain": "Disallows the player from logging in, with the given reason\n@param result New result for disallowing the player\n@param message Kick message to display to the user\n@deprecated This method uses a deprecated enum from {@link PlayerPreLoginEvent}\n@see #disallow(Result, String)"
            }
          },
          {
            "kind": "METHOD",
            "name": "getAddress()",
            "comment": {
              "body": "Gets the player IP address.",
              "tags": "Returns The IP address.",
              "plain": "Gets the player IP address.\n@return The IP address"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getKickMessage()",
            "comment": {
              "body": "Gets the current kick message that will be used if getResult() !\u003d\n Result.ALLOWED",
              "tags": "Returns Current kick message.",
              "plain": "Gets the current kick message that will be used if getResult() !\u003d\n Result.ALLOWED\n@return Current kick message"
            }
          },
          {
            "kind": "METHOD",
            "name": "getLoginResult()",
            "comment": {
              "body": "Gets the current result of the login, as an enum",
              "tags": "Returns Current Result of the login.",
              "plain": "Gets the current result of the login, as an enum\n@return Current Result of the login"
            }
          },
          {
            "kind": "METHOD",
            "name": "getName()",
            "comment": {
              "body": "Gets the player\u0027s name.",
              "tags": "Returns the player\u0027s name.",
              "plain": "Gets the player\u0027s name.\n@return the player\u0027s name"
            }
          },
          {
            "kind": "METHOD",
            "name": "getPlayerProfile()",
            "comment": {
              "body": "Gets the PlayerProfile of the player logging in",
              "tags": "Returns The Profile.",
              "plain": "Gets the PlayerProfile of the player logging in\n@return The Profile"
            }
          },
          {
            "kind": "METHOD",
            "name": "getResult()",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Gets the current result of the login, as an enum",
              "tags": "Returns Current Result of the login.",
              "plain": "Gets the current result of the login, as an enum\n@return Current Result of the login\n@deprecated This method uses a deprecated enum from {@link PlayerPreLoginEvent}\n@see #getLoginResult()"
            }
          },
          {
            "kind": "METHOD",
            "name": "getUniqueId()",
            "comment": {
              "body": "Gets the player\u0027s unique ID.",
              "tags": "Returns The unique ID.",
              "plain": "Gets the player\u0027s unique ID.\n@return The unique ID"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "FIELD",
            "name": "ipAddress"
          },
          {
            "kind": "FIELD",
            "name": "message"
          },
          {
            "kind": "FIELD",
            "name": "name"
          },
          {
            "kind": "ENUM",
            "name": "org.bukkit.event.player.AsyncPlayerPreLoginEvent.Result",
            "children": [
              {
                "kind": "ENUM_CONSTANT",
                "name": "ALLOWED",
                "comment": {
                  "body": "The player is allowed to log in",
                  "plain": "The player is allowed to log in"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "KICK_BANNED",
                "comment": {
                  "body": "The player is not allowed to log in, due to them being banned",
                  "plain": "The player is not allowed to log in, due to them being banned"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "KICK_FULL",
                "comment": {
                  "body": "The player is not allowed to log in, due to the server being full",
                  "plain": "The player is not allowed to log in, due to the server being full"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "KICK_OTHER",
                "comment": {
                  "body": "The player is not allowed to log in, for reasons undefined",
                  "plain": "The player is not allowed to log in, for reasons undefined"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "KICK_WHITELIST",
                "comment": {
                  "body": "The player is not allowed to log in, due to them not being on the\n white list",
                  "plain": "The player is not allowed to log in, due to them not being on the\n white list"
                }
              },
              {
                "kind": "CONSTRUCTOR",
                "name": "Result()"
              },
              {
                "kind": "METHOD",
                "name": "old()",
                "deprecated": {
                  "deprecated": "true"
                }
              },
              {
                "kind": "METHOD",
                "name": "valueOf(java.lang.String)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "name"
                  }
                ]
              },
              {
                "kind": "METHOD",
                "name": "values()"
              }
            ],
            "comment": {
              "body": "Basic kick reasons for communicating to plugins",
              "plain": "Basic kick reasons for communicating to plugins"
            }
          },
          {
            "kind": "FIELD",
            "name": "profile"
          },
          {
            "kind": "FIELD",
            "name": "result"
          },
          {
            "kind": "METHOD",
            "name": "setKickMessage(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "message"
              }
            ],
            "comment": {
              "body": "Sets the kick message to display if getResult() !\u003d Result.ALLOWED",
              "plain": "Sets the kick message to display if getResult() !\u003d Result.ALLOWED\n@param message New kick message"
            }
          },
          {
            "kind": "METHOD",
            "name": "setLoginResult(org.bukkit.event.player.AsyncPlayerPreLoginEvent.Result)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "result"
              }
            ],
            "comment": {
              "body": "Sets the new result of the login, as an enum",
              "plain": "Sets the new result of the login, as an enum\n@param result New result to set"
            }
          },
          {
            "kind": "METHOD",
            "name": "setPlayerProfile(com.destroystokyo.paper.profile.PlayerProfile)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "profile"
              }
            ],
            "comment": {
              "body": "Changes the PlayerProfile the player will login as",
              "plain": "Changes the PlayerProfile the player will login as\n@param profile The profile to use"
            }
          },
          {
            "kind": "METHOD",
            "name": "setResult(org.bukkit.event.player.PlayerPreLoginEvent.Result)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "result"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Sets the new result of the login, as an enum",
              "plain": "Sets the new result of the login, as an enum\n@param result New result to set\n@deprecated This method uses a deprecated enum from {@link PlayerPreLoginEvent}\n@see #setLoginResult(Result)"
            }
          },
          {
            "kind": "FIELD",
            "name": "uniqueId"
          }
        ],
        "comment": {
          "body": "Stores details for players attempting to log in.\n \u003cp\u003e\n This event is asynchronous, and not run using main thread.",
          "plain": "Stores details for players attempting to log in.\n \u003cp\u003e\n This event is asynchronous, and not run using main thread."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.player.PlayerAchievementAwardedEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PlayerAchievementAwardedEvent(org.bukkit.entity.Player,org.bukkit.Achievement)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "achievement"
              },
              {
                "kind": "PARAMETER",
                "name": "player"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "achievement"
          },
          {
            "kind": "METHOD",
            "name": "getAchievement()",
            "comment": {
              "body": "Gets the Achievement being awarded.",
              "tags": "Returns the achievement being awarded.",
              "plain": "Gets the Achievement being awarded.\n@return the achievement being awarded"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "FIELD",
            "name": "isCancelled"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          }
        ],
        "deprecated": {
          "deprecated": "true"
        },
        "comment": {
          "body": "Called when a player earns an achievement.",
          "plain": "Called when a player earns an achievement.\n@deprecated future versions of Minecraft do not have achievements"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.player.PlayerAdvancementDoneEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PlayerAdvancementDoneEvent(org.bukkit.entity.Player,org.bukkit.advancement.Advancement)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "advancement"
              },
              {
                "kind": "PARAMETER",
                "name": "who"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "advancement"
          },
          {
            "kind": "METHOD",
            "name": "getAdvancement()",
            "comment": {
              "body": "Get the advancement which has been completed.",
              "tags": "Returns completed advancement.",
              "plain": "Get the advancement which has been completed.\n@return completed advancement"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          }
        ],
        "comment": {
          "body": "Called when a player has completed all criteria in an advancement.",
          "plain": "Called when a player has completed all criteria in an advancement."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.player.PlayerAnimationEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PlayerAnimationEvent(org.bukkit.entity.Player)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "player"
              }
            ],
            "comment": {
              "body": "Construct a new PlayerAnimation event",
              "plain": "Construct a new PlayerAnimation event\n@param player The player instance"
            }
          },
          {
            "kind": "FIELD",
            "name": "animationType"
          },
          {
            "kind": "METHOD",
            "name": "getAnimationType()",
            "comment": {
              "body": "Get the type of this animation event",
              "tags": "Returns the animation type.",
              "plain": "Get the type of this animation event\n@return the animation type"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "FIELD",
            "name": "isCancelled"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          }
        ],
        "comment": {
          "body": "Represents a player animation event",
          "plain": "Represents a player animation event"
        }
      },
      {
        "kind": "ENUM",
        "name": "org.bukkit.event.player.PlayerAnimationType",
        "children": [
          {
            "kind": "ENUM_CONSTANT",
            "name": "ARM_SWING"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "PlayerAnimationType()"
          },
          {
            "kind": "METHOD",
            "name": "valueOf(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "values()"
          }
        ],
        "comment": {
          "body": "Different types of player animations",
          "plain": "Different types of player animations"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.player.PlayerArmorStandManipulateEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PlayerArmorStandManipulateEvent(org.bukkit.entity.Player,org.bukkit.entity.ArmorStand,org.bukkit.inventory.ItemStack,org.bukkit.inventory.ItemStack,org.bukkit.inventory.EquipmentSlot)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "armorStandItem"
              },
              {
                "kind": "PARAMETER",
                "name": "clickedEntity"
              },
              {
                "kind": "PARAMETER",
                "name": "playerItem"
              },
              {
                "kind": "PARAMETER",
                "name": "slot"
              },
              {
                "kind": "PARAMETER",
                "name": "who"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "armorStandItem"
          },
          {
            "kind": "METHOD",
            "name": "getArmorStandItem()",
            "comment": {
              "body": "Returns the item held by the armor stand.\n If this Item is null and the player\u0027s Item is also null, there will be no transaction between the player and the armor stand.\n If the Player\u0027s item is null, but the armor stand item is not then the player will obtain the armor stand item.\n In the case that the Player\u0027s item is not null, but the armor stand item is null, the players item will be placed on the armor stand.\n If both items are not null, the items will be swapped.\n In the case that the event is cancelled the original items will remain the same.",
              "tags": "Returns the item held by the armor stand..",
              "plain": "Returns the item held by the armor stand.\n If this Item is null and the player\u0027s Item is also null, there will be no transaction between the player and the armor stand.\n If the Player\u0027s item is null, but the armor stand item is not then the player will obtain the armor stand item.\n In the case that the Player\u0027s item is not null, but the armor stand item is null, the players item will be placed on the armor stand.\n If both items are not null, the items will be swapped.\n In the case that the event is cancelled the original items will remain the same.\n@return the item held by the armor stand."
            }
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getPlayerItem()",
            "comment": {
              "body": "Returns the item held by the player. If this Item is null and the armor stand Item is also null,\n there will be no transaction between the player and the armor stand.\n If the Player\u0027s item is null, but the armor stand item is not then the player will obtain the armor stand item.\n In the case that the Player\u0027s item is not null, but the armor stand item is null, the players item will be placed on the armor stand.\n If both items are not null, the items will be swapped.\n In the case that the event is cancelled the original items will remain the same.",
              "tags": "Returns the item held by the player..",
              "plain": "Returns the item held by the player. If this Item is null and the armor stand Item is also null,\n there will be no transaction between the player and the armor stand.\n If the Player\u0027s item is null, but the armor stand item is not then the player will obtain the armor stand item.\n In the case that the Player\u0027s item is not null, but the armor stand item is null, the players item will be placed on the armor stand.\n If both items are not null, the items will be swapped.\n In the case that the event is cancelled the original items will remain the same.\n@return the item held by the player."
            }
          },
          {
            "kind": "METHOD",
            "name": "getRightClicked()"
          },
          {
            "kind": "METHOD",
            "name": "getSlot()",
            "comment": {
              "body": "Returns the raw item slot of the armor stand in this event.",
              "tags": "Returns the index of the item obtained or placed of the armor stand..",
              "plain": "Returns the raw item slot of the armor stand in this event.\n@return the index of the item obtained or placed of the armor stand."
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "FIELD",
            "name": "playerItem"
          },
          {
            "kind": "FIELD",
            "name": "slot"
          }
        ],
        "comment": {
          "body": "Called when a player interacts with an armor stand and will either swap, retrieve or place an item.",
          "plain": "Called when a player interacts with an armor stand and will either swap, retrieve or place an item."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.player.PlayerAttemptPickupItemEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PlayerAttemptPickupItemEvent(org.bukkit.entity.Player,org.bukkit.entity.Item)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "item"
              },
              {
                "kind": "PARAMETER",
                "name": "player"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "PlayerAttemptPickupItemEvent(org.bukkit.entity.Player,org.bukkit.entity.Item,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "item"
              },
              {
                "kind": "PARAMETER",
                "name": "player"
              },
              {
                "kind": "PARAMETER",
                "name": "remaining"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "flyAtPlayer"
          },
          {
            "kind": "METHOD",
            "name": "getFlyAtPlayer()",
            "comment": {
              "body": "Gets if the item will fly at the player",
              "tags": "Returns True if the item will fly at the player.",
              "plain": "Gets if the item will fly at the player\n@return True if the item will fly at the player"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getItem()",
            "comment": {
              "body": "Gets the Item attempted by the player.",
              "tags": "Returns Item.",
              "plain": "Gets the Item attempted by the player.\n@return Item"
            }
          },
          {
            "kind": "METHOD",
            "name": "getRemaining()",
            "comment": {
              "body": "Gets the amount that will remain on the ground, if any",
              "tags": "Returns amount that will remain on the ground.",
              "plain": "Gets the amount that will remain on the ground, if any\n@return amount that will remain on the ground"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "FIELD",
            "name": "isCancelled"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "FIELD",
            "name": "item"
          },
          {
            "kind": "FIELD",
            "name": "remaining"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "setFlyAtPlayer(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "flyAtPlayer"
              }
            ],
            "comment": {
              "body": "Set if the item will fly at the player\n \u003cp\u003eCancelling the event will set this value to false.\u003c/p\u003e",
              "plain": "Set if the item will fly at the player\n \u003cp\u003eCancelling the event will set this value to false.\u003c/p\u003e\n@param flyAtPlayer True for item to fly at player"
            }
          }
        ],
        "comment": {
          "body": "Thrown when a player attempts to pick an item up from the ground",
          "plain": "Thrown when a player attempts to pick an item up from the ground"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.player.PlayerBedEnterEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PlayerBedEnterEvent(org.bukkit.entity.Player,org.bukkit.block.Block)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "bed"
              },
              {
                "kind": "PARAMETER",
                "name": "who"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "bed"
          },
          {
            "kind": "FIELD",
            "name": "cancel"
          },
          {
            "kind": "METHOD",
            "name": "getBed()",
            "comment": {
              "body": "Returns the bed block involved in this event.",
              "tags": "Returns the bed block involved in this event.",
              "plain": "Returns the bed block involved in this event.\n@return the bed block involved in this event"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          }
        ],
        "comment": {
          "body": "This event is fired when the player is almost about to enter the bed.",
          "plain": "This event is fired when the player is almost about to enter the bed."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.player.PlayerBedLeaveEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PlayerBedLeaveEvent(org.bukkit.entity.Player,org.bukkit.block.Block)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "bed"
              },
              {
                "kind": "PARAMETER",
                "name": "who"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "bed"
          },
          {
            "kind": "METHOD",
            "name": "getBed()",
            "comment": {
              "body": "Returns the bed block involved in this event.",
              "tags": "Returns the bed block involved in this event.",
              "plain": "Returns the bed block involved in this event.\n@return the bed block involved in this event"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          }
        ],
        "comment": {
          "body": "This event is fired when the player is leaving a bed.",
          "plain": "This event is fired when the player is leaving a bed."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.player.PlayerBucketEmptyEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PlayerBucketEmptyEvent(org.bukkit.entity.Player,org.bukkit.block.Block,org.bukkit.block.BlockFace,org.bukkit.Material,org.bukkit.inventory.ItemStack)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "blockClicked"
              },
              {
                "kind": "PARAMETER",
                "name": "blockFace"
              },
              {
                "kind": "PARAMETER",
                "name": "bucket"
              },
              {
                "kind": "PARAMETER",
                "name": "itemInHand"
              },
              {
                "kind": "PARAMETER",
                "name": "who"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          }
        ],
        "comment": {
          "body": "Called when a player empties a bucket",
          "plain": "Called when a player empties a bucket"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.player.PlayerBucketEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PlayerBucketEvent(org.bukkit.entity.Player,org.bukkit.block.Block,org.bukkit.block.BlockFace,org.bukkit.Material,org.bukkit.inventory.ItemStack)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "blockClicked"
              },
              {
                "kind": "PARAMETER",
                "name": "blockFace"
              },
              {
                "kind": "PARAMETER",
                "name": "bucket"
              },
              {
                "kind": "PARAMETER",
                "name": "itemInHand"
              },
              {
                "kind": "PARAMETER",
                "name": "who"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "blockClicked"
          },
          {
            "kind": "FIELD",
            "name": "blockFace"
          },
          {
            "kind": "FIELD",
            "name": "bucket"
          },
          {
            "kind": "FIELD",
            "name": "cancelled"
          },
          {
            "kind": "METHOD",
            "name": "getBlockClicked()",
            "comment": {
              "body": "Return the block clicked",
              "tags": "Returns the clicked block.",
              "plain": "Return the block clicked\n@return the clicked block"
            }
          },
          {
            "kind": "METHOD",
            "name": "getBlockFace()",
            "comment": {
              "body": "Get the face on the clicked block",
              "tags": "Returns the clicked face.",
              "plain": "Get the face on the clicked block\n@return the clicked face"
            }
          },
          {
            "kind": "METHOD",
            "name": "getBucket()",
            "comment": {
              "body": "Returns the bucket used in this event",
              "tags": "Returns the used bucket.",
              "plain": "Returns the bucket used in this event\n@return the used bucket"
            }
          },
          {
            "kind": "METHOD",
            "name": "getItemStack()",
            "comment": {
              "body": "Get the resulting item in hand after the bucket event",
              "tags": "Returns Itemstack hold in hand after the event..",
              "plain": "Get the resulting item in hand after the bucket event\n@return Itemstack hold in hand after the event."
            }
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "FIELD",
            "name": "itemStack"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "setItemStack(org.bukkit.inventory.ItemStack)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "itemStack"
              }
            ],
            "comment": {
              "body": "Set the item in hand after the event",
              "plain": "Set the item in hand after the event\n@param itemStack the new held itemstack after the bucket event."
            }
          }
        ],
        "comment": {
          "body": "Called when a player interacts with a Bucket",
          "plain": "Called when a player interacts with a Bucket"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.player.PlayerBucketFillEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PlayerBucketFillEvent(org.bukkit.entity.Player,org.bukkit.block.Block,org.bukkit.block.BlockFace,org.bukkit.Material,org.bukkit.inventory.ItemStack)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "blockClicked"
              },
              {
                "kind": "PARAMETER",
                "name": "blockFace"
              },
              {
                "kind": "PARAMETER",
                "name": "bucket"
              },
              {
                "kind": "PARAMETER",
                "name": "itemInHand"
              },
              {
                "kind": "PARAMETER",
                "name": "who"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          }
        ],
        "comment": {
          "body": "Called when a player fills a bucket",
          "plain": "Called when a player fills a bucket"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.player.PlayerChangedMainHandEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PlayerChangedMainHandEvent(org.bukkit.entity.Player,org.bukkit.inventory.MainHand)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "mainHand"
              },
              {
                "kind": "PARAMETER",
                "name": "who"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getMainHand()",
            "comment": {
              "body": "Gets the new main hand of the player. The old hand is still momentarily\n available via \u003ca href\u003d\"org/bukkit/entity/HumanEntity.html#getMainHand()\"\u003e\u003ccode\u003eHumanEntity.getMainHand()\u003c/code\u003e\u003c/a\u003e.",
              "tags": "Returns the new \u003ca href\u003d\"org/bukkit/inventory/MainHand.html\" title\u003d\"enum in org.bukkit.inventory\"\u003e\u003ccode\u003eMainHand\u003c/code\u003e\u003c/a\u003e of the player.",
              "plain": "Gets the new main hand of the player. The old hand is still momentarily\n available via {@link Player#getMainHand()}.\n@return the new {@link MainHand} of the player"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "FIELD",
            "name": "mainHand"
          }
        ],
        "comment": {
          "body": "Called when a player changes their main hand in the client settings.",
          "plain": "Called when a player changes their main hand in the client settings."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.player.PlayerChangedWorldEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PlayerChangedWorldEvent(org.bukkit.entity.Player,org.bukkit.World)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "from"
              },
              {
                "kind": "PARAMETER",
                "name": "player"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "from"
          },
          {
            "kind": "METHOD",
            "name": "getFrom()",
            "comment": {
              "body": "Gets the world the player is switching from.",
              "tags": "Returns player\u0027s previous world.",
              "plain": "Gets the world the player is switching from.\n@return player\u0027s previous world"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          }
        ],
        "comment": {
          "body": "Called when a player switches to another world.",
          "plain": "Called when a player switches to another world."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.player.PlayerChannelEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PlayerChannelEvent(org.bukkit.entity.Player,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "channel"
              },
              {
                "kind": "PARAMETER",
                "name": "player"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "channel"
          },
          {
            "kind": "METHOD",
            "name": "getChannel()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          }
        ],
        "comment": {
          "body": "This event is called after a player registers or unregisters a new plugin\n channel.",
          "plain": "This event is called after a player registers or unregisters a new plugin\n channel."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.player.PlayerChatEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PlayerChatEvent(org.bukkit.entity.Player,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "message"
              },
              {
                "kind": "PARAMETER",
                "name": "player"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "PlayerChatEvent(org.bukkit.entity.Player,java.lang.String,java.lang.String,java.util.Set\u003corg.bukkit.entity.Player\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "format"
              },
              {
                "kind": "PARAMETER",
                "name": "message"
              },
              {
                "kind": "PARAMETER",
                "name": "player"
              },
              {
                "kind": "PARAMETER",
                "name": "recipients"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "cancel"
          },
          {
            "kind": "FIELD",
            "name": "format"
          },
          {
            "kind": "METHOD",
            "name": "getFormat()",
            "comment": {
              "body": "Gets the format to use to display this chat message",
              "tags": "Returns String.Format compatible format string.",
              "plain": "Gets the format to use to display this chat message\n@return String.Format compatible format string"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getMessage()",
            "comment": {
              "body": "Gets the message that the player is attempting to send",
              "tags": "Returns Message the player is attempting to send.",
              "plain": "Gets the message that the player is attempting to send\n@return Message the player is attempting to send"
            }
          },
          {
            "kind": "METHOD",
            "name": "getRecipients()",
            "comment": {
              "body": "Gets a set of recipients that this chat message will be displayed to",
              "tags": "Returns All Players who will see this chat message.",
              "plain": "Gets a set of recipients that this chat message will be displayed to\n@return All Players who will see this chat message"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "FIELD",
            "name": "message"
          },
          {
            "kind": "FIELD",
            "name": "recipients"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "setFormat(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "format"
              }
            ],
            "comment": {
              "body": "Sets the format to use to display this chat message",
              "plain": "Sets the format to use to display this chat message\n@param format String.Format compatible format string"
            }
          },
          {
            "kind": "METHOD",
            "name": "setMessage(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "message"
              }
            ],
            "comment": {
              "body": "Sets the message that the player will send",
              "plain": "Sets the message that the player will send\n@param message New message that the player will send"
            }
          },
          {
            "kind": "METHOD",
            "name": "setPlayer(org.bukkit.entity.Player)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "player"
              }
            ],
            "comment": {
              "body": "Sets the player that this message will display as, or command will be\n executed as",
              "plain": "Sets the player that this message will display as, or command will be\n executed as\n@param player New player which this event will execute as"
            }
          }
        ],
        "deprecated": {
          "deprecated": "true"
        },
        "comment": {
          "body": "Holds information for player chat and commands",
          "plain": "Holds information for player chat and commands\n@deprecated This event will fire from the main thread and allows the use of\n     all of the Bukkit API, unlike the {@link AsyncPlayerChatEvent}.\n     \u003cp\u003e\n     Listening to this event forces chat to wait for the main thread which\n     causes delays for chat. {@link AsyncPlayerChatEvent} is the encouraged\n     alternative for thread safe implementations."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.player.PlayerChatTabCompleteEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PlayerChatTabCompleteEvent(org.bukkit.entity.Player,java.lang.String,java.util.Collection\u003cjava.lang.String\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "completions"
              },
              {
                "kind": "PARAMETER",
                "name": "message"
              },
              {
                "kind": "PARAMETER",
                "name": "who"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "completions"
          },
          {
            "kind": "METHOD",
            "name": "getChatMessage()",
            "comment": {
              "body": "Gets the chat message being tab-completed.",
              "tags": "Returns the chat message.",
              "plain": "Gets the chat message being tab-completed.\n@return the chat message"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getLastToken()",
            "comment": {
              "body": "Gets the last \u0027token\u0027 of the message being tab-completed.\n \u003cp\u003e\n The token is the substring starting with the character after the last\n space in the message.",
              "tags": "Returns The last token for the chat message.",
              "plain": "Gets the last \u0027token\u0027 of the message being tab-completed.\n \u003cp\u003e\n The token is the substring starting with the character after the last\n space in the message.\n@return The last token for the chat message"
            }
          },
          {
            "kind": "METHOD",
            "name": "getTabCompletions()",
            "comment": {
              "body": "This is the collection of completions for this event.",
              "tags": "Returns the current completions.",
              "plain": "This is the collection of completions for this event.\n@return the current completions"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "FIELD",
            "name": "lastToken"
          },
          {
            "kind": "FIELD",
            "name": "message"
          }
        ],
        "comment": {
          "body": "Called when a player attempts to tab-complete a chat message.",
          "plain": "Called when a player attempts to tab-complete a chat message."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.player.PlayerCommandPreprocessEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PlayerCommandPreprocessEvent(org.bukkit.entity.Player,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "message"
              },
              {
                "kind": "PARAMETER",
                "name": "player"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "PlayerCommandPreprocessEvent(org.bukkit.entity.Player,java.lang.String,java.util.Set\u003corg.bukkit.entity.Player\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "message"
              },
              {
                "kind": "PARAMETER",
                "name": "player"
              },
              {
                "kind": "PARAMETER",
                "name": "recipients"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "cancel"
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getMessage()",
            "comment": {
              "body": "Gets the command that the player is attempting to send.\n \u003cp\u003e\n All commands begin with a special character; implementations do not\n consider the first character when executing the content.",
              "tags": "Returns Message the player is attempting to send.",
              "plain": "Gets the command that the player is attempting to send.\n \u003cp\u003e\n All commands begin with a special character; implementations do not\n consider the first character when executing the content.\n@return Message the player is attempting to send"
            }
          },
          {
            "kind": "METHOD",
            "name": "getRecipients()",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Gets a set of recipients that this chat message will be displayed to.\n \u003cp\u003e\n The set returned is not guaranteed to be mutable and may auto-populate\n on access. Any listener accessing the returned set should be aware that\n it may reduce performance for a lazy set implementation. Listeners\n should be aware that modifying the list may throw \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003e\u003ccode\u003eUnsupportedOperationException\u003c/code\u003e\u003c/a\u003e if the event caller provides an\n unmodifiable set.",
              "tags": "Returns All Players who will see this chat message.",
              "plain": "Gets a set of recipients that this chat message will be displayed to.\n \u003cp\u003e\n The set returned is not guaranteed to be mutable and may auto-populate\n on access. Any listener accessing the returned set should be aware that\n it may reduce performance for a lazy set implementation. Listeners\n should be aware that modifying the list may throw {@link UnsupportedOperationException} if the event caller provides an\n unmodifiable set.\n@deprecated This method is provided for backward compatibility with no\n     guarantee to the effect of viewing or modifying the set.\n@return All Players who will see this chat message"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "FIELD",
            "name": "message"
          },
          {
            "kind": "FIELD",
            "name": "recipients"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "setMessage(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "command"
              }
            ],
            "comment": {
              "body": "Sets the command that the player will send.\n \u003cp\u003e\n All commands begin with a special character; implementations do not\n consider the first character when executing the content.",
              "plain": "Sets the command that the player will send.\n \u003cp\u003e\n All commands begin with a special character; implementations do not\n consider the first character when executing the content.\n@param command New message that the player will send\n@throws IllegalArgumentException if command is null or empty"
            }
          },
          {
            "kind": "METHOD",
            "name": "setPlayer(org.bukkit.entity.Player)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "player"
              }
            ],
            "comment": {
              "body": "Sets the player that this command will be executed as.",
              "plain": "Sets the player that this command will be executed as.\n@param player New player which this event will execute as\n@throws IllegalArgumentException if the player provided is null"
            }
          }
        ],
        "comment": {
          "body": "This event is called whenever a player runs a command (by placing a slash\n at the start of their message). It is called early in the command handling\n process, and modifications in this event (via \u003ca href\u003d\"org/bukkit/event/player/PlayerCommandPreprocessEvent.html#setMessage(java.lang.String)\"\u003e\u003ccode\u003ePlayerCommandPreprocessEvent.setMessage(String)\u003c/code\u003e\u003c/a\u003e)\n will be shown in the behavior.\n \u003cp\u003e\n Many plugins will have \u003cb\u003eno use for this event\u003c/b\u003e, and you should\n attempt to avoid using it if it is not necessary.\n \u003cp\u003e\n Some examples of valid uses for this event are:\n \u003cul\u003e\n \u003cli\u003eLogging executed commands to a separate file\n \u003cli\u003eVariable substitution. For example, replacing\n     \u003ccode\u003e${nearbyPlayer}\u003c/code\u003e with the name of the nearest other\n     player, or simulating the \u003ccode\u003e@a\u003c/code\u003e and \u003ccode\u003e@p\u003c/code\u003e\n     decorators used by Command Blocks in plugins that do not handle it.\n \u003cli\u003eConditionally blocking commands belonging to other plugins. For\n     example, blocking the use of the \u003ccode\u003e/home\u003c/code\u003e command in a\n     combat arena.\n \u003cli\u003ePer-sender command aliases. For example, after a player runs the\n     command \u003ccode\u003e/calias cr gamemode creative\u003c/code\u003e, the next time they\n     run \u003ccode\u003e/cr\u003c/code\u003e, it gets replaced into\n     \u003ccode\u003e/gamemode creative\u003c/code\u003e. (Global command aliases should be\n     done by registering the alias.)\n \u003c/ul\u003e\n \u003cp\u003e\n Examples of incorrect uses are:\n \u003cul\u003e\n \u003cli\u003eUsing this event to run command logic\n \u003c/ul\u003e\n \u003cp\u003e\n If the event is cancelled, processing of the command will halt.\n \u003cp\u003e\n The state of whether or not there is a slash (\u003ccode\u003e/\u003c/code\u003e) at the\n beginning of the message should be preserved. If a slash is added or\n removed, unexpected behavior may result.",
          "plain": "This event is called whenever a player runs a command (by placing a slash\n at the start of their message). It is called early in the command handling\n process, and modifications in this event (via {@link #setMessage(String)})\n will be shown in the behavior.\n \u003cp\u003e\n Many plugins will have \u003cb\u003eno use for this event\u003c/b\u003e, and you should\n attempt to avoid using it if it is not necessary.\n \u003cp\u003e\n Some examples of valid uses for this event are:\n \u003cul\u003e\n \u003cli\u003eLogging executed commands to a separate file\n \u003cli\u003eVariable substitution. For example, replacing\n     \u003ccode\u003e${nearbyPlayer}\u003c/code\u003e with the name of the nearest other\n     player, or simulating the \u003ccode\u003e@a\u003c/code\u003e and \u003ccode\u003e@p\u003c/code\u003e\n     decorators used by Command Blocks in plugins that do not handle it.\n \u003cli\u003eConditionally blocking commands belonging to other plugins. For\n     example, blocking the use of the \u003ccode\u003e/home\u003c/code\u003e command in a\n     combat arena.\n \u003cli\u003ePer-sender command aliases. For example, after a player runs the\n     command \u003ccode\u003e/calias cr gamemode creative\u003c/code\u003e, the next time they\n     run \u003ccode\u003e/cr\u003c/code\u003e, it gets replaced into\n     \u003ccode\u003e/gamemode creative\u003c/code\u003e. (Global command aliases should be\n     done by registering the alias.)\n \u003c/ul\u003e\n \u003cp\u003e\n Examples of incorrect uses are:\n \u003cul\u003e\n \u003cli\u003eUsing this event to run command logic\n \u003c/ul\u003e\n \u003cp\u003e\n If the event is cancelled, processing of the command will halt.\n \u003cp\u003e\n The state of whether or not there is a slash (\u003ccode\u003e/\u003c/code\u003e) at the\n beginning of the message should be preserved. If a slash is added or\n removed, unexpected behavior may result."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.player.PlayerDropItemEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PlayerDropItemEvent(org.bukkit.entity.Player,org.bukkit.entity.Item)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "drop"
              },
              {
                "kind": "PARAMETER",
                "name": "player"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "cancel"
          },
          {
            "kind": "FIELD",
            "name": "drop"
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getItemDrop()",
            "comment": {
              "body": "Gets the ItemDrop created by the player",
              "tags": "Returns ItemDrop created by the player.",
              "plain": "Gets the ItemDrop created by the player\n@return ItemDrop created by the player"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          }
        ],
        "comment": {
          "body": "Thrown when a player drops an item from their inventory",
          "plain": "Thrown when a player drops an item from their inventory"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.player.PlayerEditBookEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PlayerEditBookEvent(org.bukkit.entity.Player,int,org.bukkit.inventory.meta.BookMeta,org.bukkit.inventory.meta.BookMeta,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "isSigning"
              },
              {
                "kind": "PARAMETER",
                "name": "newBookMeta"
              },
              {
                "kind": "PARAMETER",
                "name": "previousBookMeta"
              },
              {
                "kind": "PARAMETER",
                "name": "slot"
              },
              {
                "kind": "PARAMETER",
                "name": "who"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "cancel"
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getNewBookMeta()",
            "comment": {
              "body": "Gets the book meta that the player is attempting to add to the book.\n \u003cp\u003e\n Note: this is a copy of the proposed new book meta. Use \u003ca href\u003d\"org/bukkit/event/player/PlayerEditBookEvent.html#setNewBookMeta(org.bukkit.inventory.meta.BookMeta)\"\u003e\u003ccode\u003ePlayerEditBookEvent.setNewBookMeta(BookMeta)\u003c/code\u003e\u003c/a\u003e to change what will actually be added to the\n book.",
              "tags": "Returns the book meta that the player is attempting to add.",
              "plain": "Gets the book meta that the player is attempting to add to the book.\n \u003cp\u003e\n Note: this is a copy of the proposed new book meta. Use {@link #setNewBookMeta(BookMeta)} to change what will actually be added to the\n book.\n@return the book meta that the player is attempting to add"
            }
          },
          {
            "kind": "METHOD",
            "name": "getPreviousBookMeta()",
            "comment": {
              "body": "Gets the book meta currently on the book.\n \u003cp\u003e\n Note: this is a copy of the book meta. You cannot use this object to\n change the existing book meta.",
              "tags": "Returns the book meta currently on the book.",
              "plain": "Gets the book meta currently on the book.\n \u003cp\u003e\n Note: this is a copy of the book meta. You cannot use this object to\n change the existing book meta.\n@return the book meta currently on the book"
            }
          },
          {
            "kind": "METHOD",
            "name": "getSlot()",
            "comment": {
              "body": "Gets the inventory slot number for the book item that triggered this\n event.\n \u003cp\u003e\n This is a slot number on the player\u0027s hotbar in the range 0-8.",
              "tags": "Returns the inventory slot number that the book item occupies.",
              "plain": "Gets the inventory slot number for the book item that triggered this\n event.\n \u003cp\u003e\n This is a slot number on the player\u0027s hotbar in the range 0-8.\n@return the inventory slot number that the book item occupies"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "FIELD",
            "name": "isSigning"
          },
          {
            "kind": "METHOD",
            "name": "isSigning()",
            "comment": {
              "body": "Gets whether or not the book is being signed. If a book is signed the\n Material changes from BOOK_AND_QUILL to WRITTEN_BOOK.",
              "tags": "Returns true if the book is being signed.",
              "plain": "Gets whether or not the book is being signed. If a book is signed the\n Material changes from BOOK_AND_QUILL to WRITTEN_BOOK.\n@return true if the book is being signed"
            }
          },
          {
            "kind": "FIELD",
            "name": "newBookMeta"
          },
          {
            "kind": "FIELD",
            "name": "previousBookMeta"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "setNewBookMeta(org.bukkit.inventory.meta.BookMeta)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "newBookMeta"
              }
            ],
            "comment": {
              "body": "Sets the book meta that will actually be added to the book.",
              "plain": "Sets the book meta that will actually be added to the book.\n@param newBookMeta new book meta\n@throws IllegalArgumentException if the new book meta is null"
            }
          },
          {
            "kind": "METHOD",
            "name": "setSigning(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "signing"
              }
            ],
            "comment": {
              "body": "Sets whether or not the book is being signed. If a book is signed the\n Material changes from BOOK_AND_QUILL to WRITTEN_BOOK.",
              "plain": "Sets whether or not the book is being signed. If a book is signed the\n Material changes from BOOK_AND_QUILL to WRITTEN_BOOK.\n@param signing whether or not the book is being signed."
            }
          },
          {
            "kind": "FIELD",
            "name": "slot"
          }
        ],
        "comment": {
          "body": "Called when a player edits or signs a book and quill item. If the event is\n cancelled, no changes are made to the BookMeta",
          "plain": "Called when a player edits or signs a book and quill item. If the event is\n cancelled, no changes are made to the BookMeta"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.player.PlayerEggThrowEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PlayerEggThrowEvent(org.bukkit.entity.Player,org.bukkit.entity.Egg,boolean,byte,org.bukkit.entity.EntityType)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "egg"
              },
              {
                "kind": "PARAMETER",
                "name": "hatching"
              },
              {
                "kind": "PARAMETER",
                "name": "hatchingType"
              },
              {
                "kind": "PARAMETER",
                "name": "numHatches"
              },
              {
                "kind": "PARAMETER",
                "name": "player"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "egg"
          },
          {
            "kind": "METHOD",
            "name": "getEgg()",
            "comment": {
              "body": "Gets the egg involved in this event.",
              "tags": "Returns the egg involved in this event.",
              "plain": "Gets the egg involved in this event.\n@return the egg involved in this event"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getHatchingType()",
            "comment": {
              "body": "Get the type of the mob being hatched (EntityType.CHICKEN by default)",
              "tags": "Returns The type of the mob being hatched by the egg.",
              "plain": "Get the type of the mob being hatched (EntityType.CHICKEN by default)\n@return The type of the mob being hatched by the egg"
            }
          },
          {
            "kind": "METHOD",
            "name": "getNumHatches()",
            "comment": {
              "body": "Get the number of mob hatches from the egg. By default the number will\n be the number the server would\u0027ve done\n \u003cul\u003e\n \u003cli\u003e7/8 chance of being 0\n \u003cli\u003e31/256 ~\u003d 1/8 chance to be 1\n \u003cli\u003e1/256 chance to be 4\n \u003c/ul\u003e",
              "tags": "Returns The number of mobs going to be hatched by the egg.",
              "plain": "Get the number of mob hatches from the egg. By default the number will\n be the number the server would\u0027ve done\n \u003cul\u003e\n \u003cli\u003e7/8 chance of being 0\n \u003cli\u003e31/256 ~\u003d 1/8 chance to be 1\n \u003cli\u003e1/256 chance to be 4\n \u003c/ul\u003e\n@return The number of mobs going to be hatched by the egg"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "FIELD",
            "name": "hatchType"
          },
          {
            "kind": "FIELD",
            "name": "hatching"
          },
          {
            "kind": "METHOD",
            "name": "isHatching()",
            "comment": {
              "body": "Gets whether the egg is hatching or not. Will be what the server\n would\u0027ve done without interaction.",
              "tags": "Returns boolean Whether the egg is going to hatch or not.",
              "plain": "Gets whether the egg is hatching or not. Will be what the server\n would\u0027ve done without interaction.\n@return boolean Whether the egg is going to hatch or not"
            }
          },
          {
            "kind": "FIELD",
            "name": "numHatches"
          },
          {
            "kind": "METHOD",
            "name": "setHatching(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "hatching"
              }
            ],
            "comment": {
              "body": "Sets whether the egg will hatch or not.",
              "plain": "Sets whether the egg will hatch or not.\n@param hatching true if you want the egg to hatch, false if you want it\n     not to"
            }
          },
          {
            "kind": "METHOD",
            "name": "setHatchingType(org.bukkit.entity.EntityType)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "hatchType"
              }
            ],
            "comment": {
              "body": "Change the type of mob being hatched by the egg",
              "plain": "Change the type of mob being hatched by the egg\n@param hatchType The type of the mob being hatched by the egg"
            }
          },
          {
            "kind": "METHOD",
            "name": "setNumHatches(byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "numHatches"
              }
            ],
            "comment": {
              "body": "Change the number of mobs coming out of the hatched egg\n \u003cp\u003e\n The boolean hatching will override this number. Ie. If hatching \u003d\n false, this number will not matter",
              "plain": "Change the number of mobs coming out of the hatched egg\n \u003cp\u003e\n The boolean hatching will override this number. Ie. If hatching \u003d\n false, this number will not matter\n@param numHatches The number of mobs coming out of the egg"
            }
          }
        ],
        "comment": {
          "body": "Called when a player throws an egg and it might hatch",
          "plain": "Called when a player throws an egg and it might hatch"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.player.PlayerEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PlayerEvent(org.bukkit.entity.Player)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "who"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "PlayerEvent(org.bukkit.entity.Player,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "async"
              },
              {
                "kind": "PARAMETER",
                "name": "who"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getPlayer()",
            "comment": {
              "body": "Returns the player involved in this event",
              "tags": "Returns Player who is involved in this event.",
              "plain": "Returns the player involved in this event\n@return Player who is involved in this event"
            }
          },
          {
            "kind": "FIELD",
            "name": "player"
          }
        ],
        "comment": {
          "body": "Represents a player related event",
          "plain": "Represents a player related event"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.player.PlayerExpChangeEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PlayerExpChangeEvent(org.bukkit.entity.Player,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "expAmount"
              },
              {
                "kind": "PARAMETER",
                "name": "player"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "PlayerExpChangeEvent(org.bukkit.entity.Player,org.bukkit.entity.Entity,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "expAmount"
              },
              {
                "kind": "PARAMETER",
                "name": "player"
              },
              {
                "kind": "PARAMETER",
                "name": "sourceEntity"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "exp"
          },
          {
            "kind": "METHOD",
            "name": "getAmount()",
            "comment": {
              "body": "Get the amount of experience the player will receive",
              "tags": "Returns The amount of experience.",
              "plain": "Get the amount of experience the player will receive\n@return The amount of experience"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getSource()",
            "comment": {
              "body": "Get the source that provided the experience.",
              "tags": "Returns The source of the experience.",
              "plain": "Get the source that provided the experience.\n@return The source of the experience"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "setAmount(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "amount"
              }
            ],
            "comment": {
              "body": "Set the amount of experience the player will receive",
              "plain": "Set the amount of experience the player will receive\n@param amount The amount of experience to set"
            }
          },
          {
            "kind": "FIELD",
            "name": "source"
          }
        ],
        "comment": {
          "body": "Called when a players experience changes naturally",
          "plain": "Called when a players experience changes naturally"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.player.PlayerFishEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PlayerFishEvent(org.bukkit.entity.Player,org.bukkit.entity.Entity,org.bukkit.entity.Fish,org.bukkit.event.player.PlayerFishEvent.State)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "entity"
              },
              {
                "kind": "PARAMETER",
                "name": "hookEntity"
              },
              {
                "kind": "PARAMETER",
                "name": "player"
              },
              {
                "kind": "PARAMETER",
                "name": "state"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "cancel"
          },
          {
            "kind": "FIELD",
            "name": "entity"
          },
          {
            "kind": "FIELD",
            "name": "exp"
          },
          {
            "kind": "METHOD",
            "name": "getCaught()",
            "comment": {
              "body": "Gets the entity caught by the player.\n \u003cp\u003e\n If player has fished successfully, the result may be cast to \u003ca href\u003d\"org/bukkit/entity/Item.html\" title\u003d\"interface in org.bukkit.entity\"\u003e\u003ccode\u003eItem\u003c/code\u003e\u003c/a\u003e.",
              "tags": "Returns Entity caught by the player, Entity if fishing, and null if\n     bobber has gotten stuck in the ground or nothing has been caught.",
              "plain": "Gets the entity caught by the player.\n \u003cp\u003e\n If player has fished successfully, the result may be cast to {@link org.bukkit.entity.Item}.\n@return Entity caught by the player, Entity if fishing, and null if\n     bobber has gotten stuck in the ground or nothing has been caught"
            }
          },
          {
            "kind": "METHOD",
            "name": "getExpToDrop()",
            "comment": {
              "body": "Gets the amount of experience received when fishing.\n \u003cp\u003e\n Note: This value has no default effect unless the event state is \u003ca href\u003d\"org/bukkit/event/player/PlayerFishEvent.State.html#CAUGHT_FISH\"\u003e\u003ccode\u003ePlayerFishEvent.State.CAUGHT_FISH\u003c/code\u003e\u003c/a\u003e.",
              "tags": "Returns the amount of experience to drop.",
              "plain": "Gets the amount of experience received when fishing.\n \u003cp\u003e\n Note: This value has no default effect unless the event state is {@link State#CAUGHT_FISH}.\n@return the amount of experience to drop"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getHook()",
            "comment": {
              "body": "Gets the fishing hook.",
              "tags": "Returns Fish the entity representing the fishing hook/bobber..",
              "plain": "Gets the fishing hook.\n@return Fish the entity representing the fishing hook/bobber."
            }
          },
          {
            "kind": "METHOD",
            "name": "getState()",
            "comment": {
              "body": "Gets the state of the fishing",
              "tags": "Returns A State detailing the state of the fishing.",
              "plain": "Gets the state of the fishing\n@return A State detailing the state of the fishing"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "FIELD",
            "name": "hookEntity"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "ENUM",
            "name": "org.bukkit.event.player.PlayerFishEvent.State",
            "children": [
              {
                "kind": "ENUM_CONSTANT",
                "name": "BITE",
                "comment": {
                  "body": "Called when there is a bite on the hook and it is ready to be reeled\n in.",
                  "plain": "Called when there is a bite on the hook and it is ready to be reeled\n in."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "CAUGHT_ENTITY",
                "comment": {
                  "body": "When a player has successfully caught an entity. This refers to any\n already spawned entity in the world that has been hooked directly by\n the rod.",
                  "plain": "When a player has successfully caught an entity. This refers to any\n already spawned entity in the world that has been hooked directly by\n the rod."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "CAUGHT_FISH",
                "comment": {
                  "body": "When a player has successfully caught a fish and is reeling it in. In\n this instance, a \"fish\" is any item retrieved from water as a result\n of fishing, ie an item, but not necessarily a fish.",
                  "plain": "When a player has successfully caught a fish and is reeling it in. In\n this instance, a \"fish\" is any item retrieved from water as a result\n of fishing, ie an item, but not necessarily a fish."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "FAILED_ATTEMPT",
                "comment": {
                  "body": "When a player fails to catch anything while fishing usually due to\n poor aiming or timing.",
                  "plain": "When a player fails to catch anything while fishing usually due to\n poor aiming or timing."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "FISHING",
                "comment": {
                  "body": "When a player is fishing, ie casting the line out.",
                  "plain": "When a player is fishing, ie casting the line out."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "IN_GROUND",
                "comment": {
                  "body": "When a bobber is stuck in the ground.",
                  "plain": "When a bobber is stuck in the ground."
                }
              },
              {
                "kind": "CONSTRUCTOR",
                "name": "State()"
              },
              {
                "kind": "METHOD",
                "name": "valueOf(java.lang.String)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "name"
                  }
                ]
              },
              {
                "kind": "METHOD",
                "name": "values()"
              }
            ],
            "comment": {
              "body": "An enum to specify the state of the fishing",
              "plain": "An enum to specify the state of the fishing"
            }
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "setExpToDrop(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "amount"
              }
            ],
            "comment": {
              "body": "Sets the amount of experience received when fishing.\n \u003cp\u003e\n Note: This value has no default effect unless the event state is \u003ca href\u003d\"org/bukkit/event/player/PlayerFishEvent.State.html#CAUGHT_FISH\"\u003e\u003ccode\u003ePlayerFishEvent.State.CAUGHT_FISH\u003c/code\u003e\u003c/a\u003e.",
              "plain": "Sets the amount of experience received when fishing.\n \u003cp\u003e\n Note: This value has no default effect unless the event state is {@link State#CAUGHT_FISH}.\n@param amount the amount of experience to drop"
            }
          },
          {
            "kind": "FIELD",
            "name": "state"
          }
        ],
        "comment": {
          "body": "Thrown when a player is fishing",
          "plain": "Thrown when a player is fishing"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.player.PlayerGameModeChangeEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PlayerGameModeChangeEvent(org.bukkit.entity.Player,org.bukkit.GameMode)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "newGameMode"
              },
              {
                "kind": "PARAMETER",
                "name": "player"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "cancelled"
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getNewGameMode()",
            "comment": {
              "body": "Gets the GameMode the player is switched to.",
              "tags": "Returns player\u0027s new GameMode.",
              "plain": "Gets the GameMode the player is switched to.\n@return player\u0027s new GameMode"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "FIELD",
            "name": "newGameMode"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          }
        ],
        "comment": {
          "body": "Called when the GameMode of the player is changed.",
          "plain": "Called when the GameMode of the player is changed."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.player.PlayerInteractAtEntityEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PlayerInteractAtEntityEvent(org.bukkit.entity.Player,org.bukkit.entity.Entity,org.bukkit.util.Vector)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "clickedEntity"
              },
              {
                "kind": "PARAMETER",
                "name": "position"
              },
              {
                "kind": "PARAMETER",
                "name": "who"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "PlayerInteractAtEntityEvent(org.bukkit.entity.Player,org.bukkit.entity.Entity,org.bukkit.util.Vector,org.bukkit.inventory.EquipmentSlot)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "clickedEntity"
              },
              {
                "kind": "PARAMETER",
                "name": "hand"
              },
              {
                "kind": "PARAMETER",
                "name": "position"
              },
              {
                "kind": "PARAMETER",
                "name": "who"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getClickedPosition()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "FIELD",
            "name": "position"
          }
        ],
        "comment": {
          "body": "Represents an event that is called when a player right clicks an entity that\n also contains the location where the entity was clicked.\n \u003cbr\u003e\n Note that the client may sometimes spuriously send this packet in addition to \u003ca href\u003d\"org/bukkit/event/player/PlayerInteractEntityEvent.html\" title\u003d\"class in org.bukkit.event.player\"\u003e\u003ccode\u003ePlayerInteractEntityEvent\u003c/code\u003e\u003c/a\u003e.\n Users are advised to listen to this (parent) class unless specifically required.",
          "plain": "Represents an event that is called when a player right clicks an entity that\n also contains the location where the entity was clicked.\n \u003cbr\u003e\n Note that the client may sometimes spuriously send this packet in addition to {@link PlayerInteractEntityEvent}.\n Users are advised to listen to this (parent) class unless specifically required."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.player.PlayerInteractEntityEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PlayerInteractEntityEvent(org.bukkit.entity.Player,org.bukkit.entity.Entity)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "clickedEntity"
              },
              {
                "kind": "PARAMETER",
                "name": "who"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "PlayerInteractEntityEvent(org.bukkit.entity.Player,org.bukkit.entity.Entity,org.bukkit.inventory.EquipmentSlot)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "clickedEntity"
              },
              {
                "kind": "PARAMETER",
                "name": "hand"
              },
              {
                "kind": "PARAMETER",
                "name": "who"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "cancelled"
          },
          {
            "kind": "FIELD",
            "name": "clickedEntity"
          },
          {
            "kind": "METHOD",
            "name": "getHand()",
            "comment": {
              "body": "The hand used to perform this interaction.",
              "tags": "Returns the hand used to interact.",
              "plain": "The hand used to perform this interaction.\n@return the hand used to interact"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getRightClicked()",
            "comment": {
              "body": "Gets the entity that was rightclicked by the player.",
              "tags": "Returns entity right clicked by player.",
              "plain": "Gets the entity that was rightclicked by the player.\n@return entity right clicked by player"
            }
          },
          {
            "kind": "FIELD",
            "name": "hand"
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          }
        ],
        "comment": {
          "body": "Represents an event that is called when a player right clicks an entity.",
          "plain": "Represents an event that is called when a player right clicks an entity."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.player.PlayerInteractEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PlayerInteractEvent(org.bukkit.entity.Player,org.bukkit.event.block.Action,org.bukkit.inventory.ItemStack,org.bukkit.block.Block,org.bukkit.block.BlockFace)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "action"
              },
              {
                "kind": "PARAMETER",
                "name": "clickedBlock"
              },
              {
                "kind": "PARAMETER",
                "name": "clickedFace"
              },
              {
                "kind": "PARAMETER",
                "name": "item"
              },
              {
                "kind": "PARAMETER",
                "name": "who"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "PlayerInteractEvent(org.bukkit.entity.Player,org.bukkit.event.block.Action,org.bukkit.inventory.ItemStack,org.bukkit.block.Block,org.bukkit.block.BlockFace,org.bukkit.inventory.EquipmentSlot)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "action"
              },
              {
                "kind": "PARAMETER",
                "name": "clickedBlock"
              },
              {
                "kind": "PARAMETER",
                "name": "clickedFace"
              },
              {
                "kind": "PARAMETER",
                "name": "hand"
              },
              {
                "kind": "PARAMETER",
                "name": "item"
              },
              {
                "kind": "PARAMETER",
                "name": "who"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "action"
          },
          {
            "kind": "FIELD",
            "name": "blockClicked"
          },
          {
            "kind": "FIELD",
            "name": "blockFace"
          },
          {
            "kind": "METHOD",
            "name": "getAction()",
            "comment": {
              "body": "Returns the action type",
              "tags": "Returns Action returns the type of interaction.",
              "plain": "Returns the action type\n@return Action returns the type of interaction"
            }
          },
          {
            "kind": "METHOD",
            "name": "getBlockFace()",
            "comment": {
              "body": "Returns the face of the block that was clicked",
              "tags": "Returns BlockFace returns the face of the block that was clicked.",
              "plain": "Returns the face of the block that was clicked\n@return BlockFace returns the face of the block that was clicked"
            }
          },
          {
            "kind": "METHOD",
            "name": "getClickedBlock()",
            "comment": {
              "body": "Returns the clicked block",
              "tags": "Returns Block returns the block clicked with this item..",
              "plain": "Returns the clicked block\n@return Block returns the block clicked with this item."
            }
          },
          {
            "kind": "METHOD",
            "name": "getHand()",
            "comment": {
              "body": "The hand used to perform this interaction. May be null in the case of\n \u003ca href\u003d\"org/bukkit/event/block/Action.html#PHYSICAL\"\u003e\u003ccode\u003eAction.PHYSICAL\u003c/code\u003e\u003c/a\u003e.",
              "tags": "Returns the hand used to interact. May be null..",
              "plain": "The hand used to perform this interaction. May be null in the case of\n {@link Action#PHYSICAL}.\n@return the hand used to interact. May be null."
            }
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getItem()",
            "comment": {
              "body": "Returns the item in hand represented by this event",
              "tags": "Returns ItemStack the item used.",
              "plain": "Returns the item in hand represented by this event\n@return ItemStack the item used"
            }
          },
          {
            "kind": "METHOD",
            "name": "getMaterial()",
            "comment": {
              "body": "Convenience method. Returns the material of the item represented by\n this event",
              "tags": "Returns Material the material of the item used.",
              "plain": "Convenience method. Returns the material of the item represented by\n this event\n@return Material the material of the item used"
            }
          },
          {
            "kind": "FIELD",
            "name": "hand"
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "hasBlock()",
            "comment": {
              "body": "Check if this event involved a block",
              "tags": "Returns boolean true if it did.",
              "plain": "Check if this event involved a block\n@return boolean true if it did"
            }
          },
          {
            "kind": "METHOD",
            "name": "hasItem()",
            "comment": {
              "body": "Check if this event involved an item",
              "tags": "Returns boolean true if it did.",
              "plain": "Check if this event involved an item\n@return boolean true if it did"
            }
          },
          {
            "kind": "METHOD",
            "name": "isBlockInHand()",
            "comment": {
              "body": "Convenience method to inform the user whether this was a block\n placement event.",
              "tags": "Returns boolean true if the item in hand was a block.",
              "plain": "Convenience method to inform the user whether this was a block\n placement event.\n@return boolean true if the item in hand was a block"
            }
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()",
            "comment": {
              "body": "Gets the cancellation state of this event. Set to true if you want to\n prevent buckets from placing water and so forth",
              "tags": "Returns boolean cancellation state.",
              "plain": "Gets the cancellation state of this event. Set to true if you want to\n prevent buckets from placing water and so forth\n@return boolean cancellation state"
            }
          },
          {
            "kind": "FIELD",
            "name": "item"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ],
            "comment": {
              "body": "Sets the cancellation state of this event. A canceled event will not be\n executed in the server, but will still pass to other plugins\n \u003cp\u003e\n Canceling this event will prevent use of food (player won\u0027t lose the\n food item), prevent bows/snowballs/eggs from firing, etc. (player won\u0027t\n lose the ammo)",
              "plain": "Sets the cancellation state of this event. A canceled event will not be\n executed in the server, but will still pass to other plugins\n \u003cp\u003e\n Canceling this event will prevent use of food (player won\u0027t lose the\n food item), prevent bows/snowballs/eggs from firing, etc. (player won\u0027t\n lose the ammo)\n@param cancel true if you wish to cancel this event"
            }
          },
          {
            "kind": "METHOD",
            "name": "setUseInteractedBlock(org.bukkit.event.Event.Result)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "useInteractedBlock"
              }
            ],
            "comment": {
              "plain": "@param useInteractedBlock the action to take with the interacted block"
            }
          },
          {
            "kind": "METHOD",
            "name": "setUseItemInHand(org.bukkit.event.Event.Result)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "useItemInHand"
              }
            ],
            "comment": {
              "plain": "@param useItemInHand the action to take with the item in hand"
            }
          },
          {
            "kind": "FIELD",
            "name": "useClickedBlock"
          },
          {
            "kind": "METHOD",
            "name": "useInteractedBlock()",
            "comment": {
              "body": "This controls the action to take with the block (if any) that was\n clicked on. This event gets processed for all blocks, but most don\u0027t\n have a default action",
              "tags": "Returns the action to take with the interacted block.",
              "plain": "This controls the action to take with the block (if any) that was\n clicked on. This event gets processed for all blocks, but most don\u0027t\n have a default action\n@return the action to take with the interacted block"
            }
          },
          {
            "kind": "FIELD",
            "name": "useItemInHand"
          },
          {
            "kind": "METHOD",
            "name": "useItemInHand()",
            "comment": {
              "body": "This controls the action to take with the item the player is holding.\n This includes both blocks and items (such as flint and steel or\n records). When this is set to default, it will be allowed if no action\n is taken on the interacted block.",
              "tags": "Returns the action to take with the item in hand.",
              "plain": "This controls the action to take with the item the player is holding.\n This includes both blocks and items (such as flint and steel or\n records). When this is set to default, it will be allowed if no action\n is taken on the interacted block.\n@return the action to take with the item in hand"
            }
          }
        ],
        "comment": {
          "body": "Represents an event that is called when a player interacts with an object or\n air, potentially fired once for each hand. The hand can be determined using\n \u003ca href\u003d\"org/bukkit/event/player/PlayerInteractEvent.html#getHand()\"\u003e\u003ccode\u003ePlayerInteractEvent.getHand()\u003c/code\u003e\u003c/a\u003e.\n \u003cp\u003e\n This event will fire as cancelled if the vanilla behavior\n is to do nothing (e.g interacting with air)",
          "plain": "Represents an event that is called when a player interacts with an object or\n air, potentially fired once for each hand. The hand can be determined using\n {@link #getHand()}.\n \u003cp\u003e\n This event will fire as cancelled if the vanilla behavior\n is to do nothing (e.g interacting with air)"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.player.PlayerItemBreakEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PlayerItemBreakEvent(org.bukkit.entity.Player,org.bukkit.inventory.ItemStack)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "brokenItem"
              },
              {
                "kind": "PARAMETER",
                "name": "player"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "brokenItem"
          },
          {
            "kind": "METHOD",
            "name": "getBrokenItem()",
            "comment": {
              "body": "Gets the item that broke",
              "tags": "Returns The broken item.",
              "plain": "Gets the item that broke\n@return The broken item"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          }
        ],
        "comment": {
          "body": "Fired when a player\u0027s item breaks (such as a shovel or flint and steel).\n \u003cp\u003e\n The item that\u0027s breaking will exist in the inventory with a stack size of\n 0. After the event, the item\u0027s durability will be reset to 0.",
          "plain": "Fired when a player\u0027s item breaks (such as a shovel or flint and steel).\n \u003cp\u003e\n The item that\u0027s breaking will exist in the inventory with a stack size of\n 0. After the event, the item\u0027s durability will be reset to 0."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.player.PlayerItemConsumeEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PlayerItemConsumeEvent(org.bukkit.entity.Player,org.bukkit.inventory.ItemStack)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "item"
              },
              {
                "kind": "PARAMETER",
                "name": "player"
              }
            ],
            "comment": {
              "plain": "@param player the player consuming\n@param item the ItemStack being consumed"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getItem()",
            "comment": {
              "body": "Gets the item that is being consumed. Modifying the returned item will\n have no effect, you must use \u003ca href\u003d\"org/bukkit/event/player/PlayerItemConsumeEvent.html#setItem(org.bukkit.inventory.ItemStack)\"\u003e\u003ccode\u003ePlayerItemConsumeEvent.setItem(org.bukkit.inventory.ItemStack)\u003c/code\u003e\u003c/a\u003e instead.",
              "tags": "Returns an ItemStack for the item being consumed.",
              "plain": "Gets the item that is being consumed. Modifying the returned item will\n have no effect, you must use {@link #setItem(org.bukkit.inventory.ItemStack)} instead.\n@return an ItemStack for the item being consumed"
            }
          },
          {
            "kind": "METHOD",
            "name": "getReplacement()",
            "comment": {
              "body": "Return the custom item stack that will replace the consumed item, or null if no\n custom replacement has been set (which means the default replacement will be used).",
              "tags": "Returns The custom item stack that will replace the consumed item or null.",
              "plain": "Return the custom item stack that will replace the consumed item, or null if no\n custom replacement has been set (which means the default replacement will be used).\n@return The custom item stack that will replace the consumed item or null"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "FIELD",
            "name": "isCancelled"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "FIELD",
            "name": "item"
          },
          {
            "kind": "FIELD",
            "name": "replacement"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "setItem(org.bukkit.inventory.ItemStack)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "item"
              }
            ],
            "comment": {
              "body": "Set the item being consumed",
              "plain": "Set the item being consumed\n@param item the item being consumed"
            }
          },
          {
            "kind": "METHOD",
            "name": "setReplacement(org.bukkit.inventory.ItemStack)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "replacement"
              }
            ],
            "comment": {
              "body": "Set a custom item stack to replace the consumed item. Pass null to clear any custom\n stack that has been set and use the default replacement.",
              "plain": "Set a custom item stack to replace the consumed item. Pass null to clear any custom\n stack that has been set and use the default replacement.\n@param replacement Replacement item to set, null to clear any custom stack and use default"
            }
          }
        ],
        "comment": {
          "body": "This event will fire when a player is finishing consuming an item (food,\n potion, milk bucket).\n \u003cbr\u003e\n If the ItemStack is modified the server will use the effects of the new\n item and not remove the original one from the player\u0027s inventory.\n \u003cbr\u003e\n If the event is cancelled the effect will not be applied and the item will\n not be removed from the player\u0027s inventory.",
          "plain": "This event will fire when a player is finishing consuming an item (food,\n potion, milk bucket).\n \u003cbr\u003e\n If the ItemStack is modified the server will use the effects of the new\n item and not remove the original one from the player\u0027s inventory.\n \u003cbr\u003e\n If the event is cancelled the effect will not be applied and the item will\n not be removed from the player\u0027s inventory."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.player.PlayerItemDamageEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PlayerItemDamageEvent(org.bukkit.entity.Player,org.bukkit.inventory.ItemStack,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "damage"
              },
              {
                "kind": "PARAMETER",
                "name": "player"
              },
              {
                "kind": "PARAMETER",
                "name": "what"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "cancelled"
          },
          {
            "kind": "FIELD",
            "name": "damage"
          },
          {
            "kind": "METHOD",
            "name": "getDamage()",
            "comment": {
              "body": "Gets the amount of durability damage this item will be taking.",
              "tags": "Returns durability change.",
              "plain": "Gets the amount of durability damage this item will be taking.\n@return durability change"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getItem()"
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "FIELD",
            "name": "item"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "setDamage(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "damage"
              }
            ]
          }
        ]
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.player.PlayerItemHeldEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PlayerItemHeldEvent(org.bukkit.entity.Player,int,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "current"
              },
              {
                "kind": "PARAMETER",
                "name": "player"
              },
              {
                "kind": "PARAMETER",
                "name": "previous"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "cancel"
          },
          {
            "kind": "FIELD",
            "name": "current"
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getNewSlot()",
            "comment": {
              "body": "Gets the new held slot index",
              "tags": "Returns New slot index.",
              "plain": "Gets the new held slot index\n@return New slot index"
            }
          },
          {
            "kind": "METHOD",
            "name": "getPreviousSlot()",
            "comment": {
              "body": "Gets the previous held slot index",
              "tags": "Returns Previous slot index.",
              "plain": "Gets the previous held slot index\n@return Previous slot index"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "FIELD",
            "name": "previous"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          }
        ],
        "comment": {
          "body": "Fired when a player changes their currently held item",
          "plain": "Fired when a player changes their currently held item"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.player.PlayerItemMendEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PlayerItemMendEvent(org.bukkit.entity.Player,org.bukkit.inventory.ItemStack,org.bukkit.entity.ExperienceOrb,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "experienceOrb"
              },
              {
                "kind": "PARAMETER",
                "name": "item"
              },
              {
                "kind": "PARAMETER",
                "name": "repairAmount"
              },
              {
                "kind": "PARAMETER",
                "name": "who"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "cancelled"
          },
          {
            "kind": "FIELD",
            "name": "experienceOrb"
          },
          {
            "kind": "METHOD",
            "name": "getExperienceOrb()",
            "comment": {
              "body": "Get the experience orb triggering the event.",
              "tags": "Returns the experience orb.",
              "plain": "Get the experience orb triggering the event.\n@return the experience orb"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getItem()",
            "comment": {
              "body": "Get the \u003ca href\u003d\"org/bukkit/inventory/ItemStack.html\" title\u003d\"class in org.bukkit.inventory\"\u003e\u003ccode\u003eItemStack\u003c/code\u003e\u003c/a\u003e to be repaired.\n\n This is not necessarily the item the player is holding.",
              "tags": "Returns the item to be repaired.",
              "plain": "Get the {@link ItemStack} to be repaired.\n\n This is not necessarily the item the player is holding.\n@return the item to be repaired"
            }
          },
          {
            "kind": "METHOD",
            "name": "getRepairAmount()",
            "comment": {
              "body": "Get the amount the item is to be repaired.\n\n The default value is twice the value of the consumed experience orb\n or the remaining damage left on the item, whichever is smaller.",
              "tags": "Returns how much damage will be repaired by the experience orb.",
              "plain": "Get the amount the item is to be repaired.\n\n The default value is twice the value of the consumed experience orb\n or the remaining damage left on the item, whichever is smaller.\n@return how much damage will be repaired by the experience orb"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "FIELD",
            "name": "item"
          },
          {
            "kind": "FIELD",
            "name": "repairAmount"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancelled"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "setRepairAmount(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "amount"
              }
            ],
            "comment": {
              "body": "Set the amount the item will be repaired.\n\n Half of this value will be subtracted from the experience orb which initiated this event.",
              "plain": "Set the amount the item will be repaired.\n\n Half of this value will be subtracted from the experience orb which initiated this event.\n@param amount how much damage will be repaired on the item"
            }
          }
        ],
        "comment": {
          "body": "Represents when a player has an item repaired via the Mending enchantment.\n \u003cbr\u003e\n This event is fired directly before the \u003ca href\u003d\"org/bukkit/event/player/PlayerExpChangeEvent.html\" title\u003d\"class in org.bukkit.event.player\"\u003e\u003ccode\u003ePlayerExpChangeEvent\u003c/code\u003e\u003c/a\u003e, and the\n results of this event directly affect the \u003ca href\u003d\"org/bukkit/event/player/PlayerExpChangeEvent.html\" title\u003d\"class in org.bukkit.event.player\"\u003e\u003ccode\u003ePlayerExpChangeEvent\u003c/code\u003e\u003c/a\u003e.",
          "plain": "Represents when a player has an item repaired via the Mending enchantment.\n \u003cbr\u003e\n This event is fired directly before the {@link PlayerExpChangeEvent}, and the\n results of this event directly affect the {@link PlayerExpChangeEvent}."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.player.PlayerJoinEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PlayerJoinEvent(org.bukkit.entity.Player,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "joinMessage"
              },
              {
                "kind": "PARAMETER",
                "name": "playerJoined"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getJoinMessage()",
            "comment": {
              "body": "Gets the join message to send to all online players",
              "tags": "Returns string join message.",
              "plain": "Gets the join message to send to all online players\n@return string join message"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "FIELD",
            "name": "joinMessage"
          },
          {
            "kind": "METHOD",
            "name": "setJoinMessage(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "joinMessage"
              }
            ],
            "comment": {
              "body": "Sets the join message to send to all online players",
              "plain": "Sets the join message to send to all online players\n@param joinMessage join message"
            }
          }
        ],
        "comment": {
          "body": "Called when a player joins a server",
          "plain": "Called when a player joins a server"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.player.PlayerKickEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PlayerKickEvent(org.bukkit.entity.Player,java.lang.String,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "kickReason"
              },
              {
                "kind": "PARAMETER",
                "name": "leaveMessage"
              },
              {
                "kind": "PARAMETER",
                "name": "playerKicked"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "cancel"
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getLeaveMessage()",
            "comment": {
              "body": "Gets the leave message send to all online players",
              "tags": "Returns string kick reason.",
              "plain": "Gets the leave message send to all online players\n@return string kick reason"
            }
          },
          {
            "kind": "METHOD",
            "name": "getReason()",
            "comment": {
              "body": "Gets the reason why the player is getting kicked",
              "tags": "Returns string kick reason.",
              "plain": "Gets the reason why the player is getting kicked\n@return string kick reason"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "FIELD",
            "name": "kickReason"
          },
          {
            "kind": "FIELD",
            "name": "leaveMessage"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "setLeaveMessage(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "leaveMessage"
              }
            ],
            "comment": {
              "body": "Sets the leave message send to all online players",
              "plain": "Sets the leave message send to all online players\n@param leaveMessage leave message"
            }
          },
          {
            "kind": "METHOD",
            "name": "setReason(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "kickReason"
              }
            ],
            "comment": {
              "body": "Sets the reason why the player is getting kicked",
              "plain": "Sets the reason why the player is getting kicked\n@param kickReason kick reason"
            }
          }
        ],
        "comment": {
          "body": "Called when a player gets kicked from the server",
          "plain": "Called when a player gets kicked from the server"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.player.PlayerLevelChangeEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PlayerLevelChangeEvent(org.bukkit.entity.Player,int,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "newLevel"
              },
              {
                "kind": "PARAMETER",
                "name": "oldLevel"
              },
              {
                "kind": "PARAMETER",
                "name": "player"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getNewLevel()",
            "comment": {
              "body": "Gets the new level of the player",
              "tags": "Returns The new (current) level of the player.",
              "plain": "Gets the new level of the player\n@return The new (current) level of the player"
            }
          },
          {
            "kind": "METHOD",
            "name": "getOldLevel()",
            "comment": {
              "body": "Gets the old level of the player",
              "tags": "Returns The old level of the player.",
              "plain": "Gets the old level of the player\n@return The old level of the player"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "FIELD",
            "name": "newLevel"
          },
          {
            "kind": "FIELD",
            "name": "oldLevel"
          }
        ],
        "comment": {
          "body": "Called when a players level changes",
          "plain": "Called when a players level changes"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.player.PlayerLocaleChangeEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PlayerLocaleChangeEvent(org.bukkit.entity.Player,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "locale"
              },
              {
                "kind": "PARAMETER",
                "name": "who"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getLocale()",
            "comment": {
              "tags": "Returns the player\u0027s new locale.",
              "plain": "@see Player#getLocale()\n@return the player\u0027s new locale"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "FIELD",
            "name": "locale"
          }
        ],
        "comment": {
          "body": "Called when a player changes their locale in the client settings.",
          "plain": "Called when a player changes their locale in the client settings."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.player.PlayerLoginEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PlayerLoginEvent(org.bukkit.entity.Player,java.lang.String,java.net.InetAddress)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "address"
              },
              {
                "kind": "PARAMETER",
                "name": "hostname"
              },
              {
                "kind": "PARAMETER",
                "name": "player"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "PlayerLoginEvent(org.bukkit.entity.Player,java.lang.String,java.net.InetAddress,java.net.InetAddress)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "address"
              },
              {
                "kind": "PARAMETER",
                "name": "hostname"
              },
              {
                "kind": "PARAMETER",
                "name": "player"
              },
              {
                "kind": "PARAMETER",
                "name": "realAddress"
              }
            ],
            "comment": {
              "body": "This constructor defaults message to an empty string, and result to\n ALLOWED",
              "plain": "This constructor defaults message to an empty string, and result to\n ALLOWED\n@param player The {@link Player} for this event\n@param hostname The hostname that was used to connect to the server\n@param address The address the player used to connect, provided for\n     timing issues\n@param realAddress The unspoofed, actual address, that the player used to connect"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "PlayerLoginEvent(org.bukkit.entity.Player,java.lang.String,java.net.InetAddress,org.bukkit.event.player.PlayerLoginEvent.Result,java.lang.String,java.net.InetAddress)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "address"
              },
              {
                "kind": "PARAMETER",
                "name": "hostname"
              },
              {
                "kind": "PARAMETER",
                "name": "message"
              },
              {
                "kind": "PARAMETER",
                "name": "player"
              },
              {
                "kind": "PARAMETER",
                "name": "realAddress"
              },
              {
                "kind": "PARAMETER",
                "name": "result"
              }
            ],
            "comment": {
              "body": "This constructor pre-configures the event with a result and message",
              "plain": "This constructor pre-configures the event with a result and message\n@param player The {@link Player} for this event\n@param hostname The hostname that was used to connect to the server\n@param address The address the player used to connect, provided for\n     timing issues\n@param result The result status for this event\n@param message The message to be displayed if result denies login\n@param realAddress The unspoofed, actual address, that the player used to connect"
            }
          },
          {
            "kind": "FIELD",
            "name": "address"
          },
          {
            "kind": "METHOD",
            "name": "allow()",
            "comment": {
              "body": "Allows the player to log in",
              "plain": "Allows the player to log in"
            }
          },
          {
            "kind": "METHOD",
            "name": "disallow(org.bukkit.event.player.PlayerLoginEvent.Result,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "message"
              },
              {
                "kind": "PARAMETER",
                "name": "result"
              }
            ],
            "comment": {
              "body": "Disallows the player from logging in, with the given reason",
              "plain": "Disallows the player from logging in, with the given reason\n@param result New result for disallowing the player\n@param message Kick message to display to the user"
            }
          },
          {
            "kind": "METHOD",
            "name": "getAddress()",
            "comment": {
              "body": "Gets the \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/net/InetAddress.html\" title\u003d\"class or interface in java.net\" class\u003d\"external-link\"\u003e\u003ccode\u003eInetAddress\u003c/code\u003e\u003c/a\u003e for the Player associated with this event.\n This method is provided as a workaround for player.getAddress()\n returning null during PlayerLoginEvent.",
              "tags": "Returns The address for this player. For legacy compatibility, this may\n     be null..",
              "plain": "Gets the {@link InetAddress} for the Player associated with this event.\n This method is provided as a workaround for player.getAddress()\n returning null during PlayerLoginEvent.\n@return The address for this player. For legacy compatibility, this may\n     be null."
            }
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getHostname()",
            "comment": {
              "body": "Gets the hostname that the player used to connect to the server, or\n blank if unknown",
              "tags": "Returns The hostname.",
              "plain": "Gets the hostname that the player used to connect to the server, or\n blank if unknown\n@return The hostname"
            }
          },
          {
            "kind": "METHOD",
            "name": "getKickMessage()",
            "comment": {
              "body": "Gets the current kick message that will be used if getResult() !\u003d\n Result.ALLOWED",
              "tags": "Returns Current kick message.",
              "plain": "Gets the current kick message that will be used if getResult() !\u003d\n Result.ALLOWED\n@return Current kick message"
            }
          },
          {
            "kind": "METHOD",
            "name": "getRealAddress()",
            "comment": {
              "body": "Gets the connection address of this player, regardless of whether it has been spoofed or not.",
              "tags": "Returns the player\u0027s connection address.",
              "plain": "Gets the connection address of this player, regardless of whether it has been spoofed or not.\n@return the player\u0027s connection address"
            }
          },
          {
            "kind": "METHOD",
            "name": "getResult()",
            "comment": {
              "body": "Gets the current result of the login, as an enum",
              "tags": "Returns Current Result of the login.",
              "plain": "Gets the current result of the login, as an enum\n@return Current Result of the login"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "FIELD",
            "name": "hostname"
          },
          {
            "kind": "FIELD",
            "name": "message"
          },
          {
            "kind": "ENUM",
            "name": "org.bukkit.event.player.PlayerLoginEvent.Result",
            "children": [
              {
                "kind": "ENUM_CONSTANT",
                "name": "ALLOWED",
                "comment": {
                  "body": "The player is allowed to log in",
                  "plain": "The player is allowed to log in"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "KICK_BANNED",
                "comment": {
                  "body": "The player is not allowed to log in, due to them being banned",
                  "plain": "The player is not allowed to log in, due to them being banned"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "KICK_FULL",
                "comment": {
                  "body": "The player is not allowed to log in, due to the server being full",
                  "plain": "The player is not allowed to log in, due to the server being full"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "KICK_OTHER",
                "comment": {
                  "body": "The player is not allowed to log in, for reasons undefined",
                  "plain": "The player is not allowed to log in, for reasons undefined"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "KICK_WHITELIST",
                "comment": {
                  "body": "The player is not allowed to log in, due to them not being on the\n white list",
                  "plain": "The player is not allowed to log in, due to them not being on the\n white list"
                }
              },
              {
                "kind": "CONSTRUCTOR",
                "name": "Result()"
              },
              {
                "kind": "METHOD",
                "name": "valueOf(java.lang.String)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "name"
                  }
                ]
              },
              {
                "kind": "METHOD",
                "name": "values()"
              }
            ],
            "comment": {
              "body": "Basic kick reasons for communicating to plugins",
              "plain": "Basic kick reasons for communicating to plugins"
            }
          },
          {
            "kind": "FIELD",
            "name": "realAddress"
          },
          {
            "kind": "FIELD",
            "name": "result"
          },
          {
            "kind": "METHOD",
            "name": "setKickMessage(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "message"
              }
            ],
            "comment": {
              "body": "Sets the kick message to display if getResult() !\u003d Result.ALLOWED",
              "plain": "Sets the kick message to display if getResult() !\u003d Result.ALLOWED\n@param message New kick message"
            }
          },
          {
            "kind": "METHOD",
            "name": "setResult(org.bukkit.event.player.PlayerLoginEvent.Result)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "result"
              }
            ],
            "comment": {
              "body": "Sets the new result of the login, as an enum",
              "plain": "Sets the new result of the login, as an enum\n@param result New result to set"
            }
          }
        ],
        "comment": {
          "body": "Stores details for players attempting to log in",
          "plain": "Stores details for players attempting to log in"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.player.PlayerMoveEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PlayerMoveEvent(org.bukkit.entity.Player,org.bukkit.Location,org.bukkit.Location)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "from"
              },
              {
                "kind": "PARAMETER",
                "name": "player"
              },
              {
                "kind": "PARAMETER",
                "name": "to"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "cancel"
          },
          {
            "kind": "FIELD",
            "name": "from"
          },
          {
            "kind": "METHOD",
            "name": "getFrom()",
            "comment": {
              "body": "Gets the location this player moved from",
              "tags": "Returns Location the player moved from.",
              "plain": "Gets the location this player moved from\n@return Location the player moved from"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getTo()",
            "comment": {
              "body": "Gets the location this player moved to",
              "tags": "Returns Location the player moved to.",
              "plain": "Gets the location this player moved to\n@return Location the player moved to"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()",
            "comment": {
              "body": "Gets the cancellation state of this event. A cancelled event will not\n be executed in the server, but will still pass to other plugins\n \u003cp\u003e\n If a move or teleport event is cancelled, the player will be moved or\n teleported back to the Location as defined by getFrom(). This will not\n fire an event",
              "tags": "Returns true if this event is cancelled.",
              "plain": "Gets the cancellation state of this event. A cancelled event will not\n be executed in the server, but will still pass to other plugins\n \u003cp\u003e\n If a move or teleport event is cancelled, the player will be moved or\n teleported back to the Location as defined by getFrom(). This will not\n fire an event\n@return true if this event is cancelled"
            }
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ],
            "comment": {
              "body": "Sets the cancellation state of this event. A cancelled event will not\n be executed in the server, but will still pass to other plugins\n \u003cp\u003e\n If a move or teleport event is cancelled, the player will be moved or\n teleported back to the Location as defined by getFrom(). This will not\n fire an event",
              "plain": "Sets the cancellation state of this event. A cancelled event will not\n be executed in the server, but will still pass to other plugins\n \u003cp\u003e\n If a move or teleport event is cancelled, the player will be moved or\n teleported back to the Location as defined by getFrom(). This will not\n fire an event\n@param cancel true if you wish to cancel this event"
            }
          },
          {
            "kind": "METHOD",
            "name": "setFrom(org.bukkit.Location)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "from"
              }
            ],
            "comment": {
              "body": "Sets the location to mark as where the player moved from",
              "plain": "Sets the location to mark as where the player moved from\n@param from New location to mark as the players previous location"
            }
          },
          {
            "kind": "METHOD",
            "name": "setTo(org.bukkit.Location)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "to"
              }
            ],
            "comment": {
              "body": "Sets the location that this player will move to",
              "plain": "Sets the location that this player will move to\n@param to New Location this player will move to"
            }
          },
          {
            "kind": "FIELD",
            "name": "to"
          },
          {
            "kind": "METHOD",
            "name": "validateLocation(org.bukkit.Location)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "loc"
              }
            ]
          }
        ],
        "comment": {
          "body": "Holds information for player movement events",
          "plain": "Holds information for player movement events"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.player.PlayerPickupArrowEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PlayerPickupArrowEvent(org.bukkit.entity.Player,org.bukkit.entity.Item,org.bukkit.entity.Arrow)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "arrow"
              },
              {
                "kind": "PARAMETER",
                "name": "item"
              },
              {
                "kind": "PARAMETER",
                "name": "player"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "arrow"
          },
          {
            "kind": "METHOD",
            "name": "getArrow()",
            "comment": {
              "body": "Get the arrow being picked up by the player",
              "tags": "Returns The arrow being picked up.",
              "plain": "Get the arrow being picked up by the player\n@return The arrow being picked up"
            }
          }
        ],
        "comment": {
          "body": "Thrown when a player picks up an arrow from the ground.",
          "plain": "Thrown when a player picks up an arrow from the ground."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.player.PlayerPickupItemEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PlayerPickupItemEvent(org.bukkit.entity.Player,org.bukkit.entity.Item,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "item"
              },
              {
                "kind": "PARAMETER",
                "name": "player"
              },
              {
                "kind": "PARAMETER",
                "name": "remaining"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "cancel"
          },
          {
            "kind": "FIELD",
            "name": "flyAtPlayer"
          },
          {
            "kind": "METHOD",
            "name": "getFlyAtPlayer()",
            "comment": {
              "body": "Gets if the item will fly at the player",
              "tags": "Returns True if the item will fly at the player.",
              "plain": "Gets if the item will fly at the player\n@return True if the item will fly at the player"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getItem()",
            "comment": {
              "body": "Gets the Item picked up by the player.",
              "tags": "Returns Item.",
              "plain": "Gets the Item picked up by the player.\n@return Item"
            }
          },
          {
            "kind": "METHOD",
            "name": "getRemaining()",
            "comment": {
              "body": "Gets the amount remaining on the ground, if any",
              "tags": "Returns amount remaining on the ground.",
              "plain": "Gets the amount remaining on the ground, if any\n@return amount remaining on the ground"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "FIELD",
            "name": "item"
          },
          {
            "kind": "FIELD",
            "name": "remaining"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "setFlyAtPlayer(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "flyAtPlayer"
              }
            ],
            "comment": {
              "body": "Set if the item will fly at the player\n \u003cp\u003eCancelling the event will set this value to false.\u003c/p\u003e",
              "plain": "Set if the item will fly at the player\n \u003cp\u003eCancelling the event will set this value to false.\u003c/p\u003e\n@param flyAtPlayer True for item to fly at player"
            }
          }
        ],
        "deprecated": {
          "deprecated": "true"
        },
        "comment": {
          "body": "Thrown when a player picks an item up from the ground",
          "plain": "Thrown when a player picks an item up from the ground\n@deprecated {@link EntityPickupItemEvent}"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.player.PlayerPortalEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PlayerPortalEvent(org.bukkit.entity.Player,org.bukkit.Location,org.bukkit.Location,org.bukkit.TravelAgent)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "from"
              },
              {
                "kind": "PARAMETER",
                "name": "player"
              },
              {
                "kind": "PARAMETER",
                "name": "pta"
              },
              {
                "kind": "PARAMETER",
                "name": "to"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "PlayerPortalEvent(org.bukkit.entity.Player,org.bukkit.Location,org.bukkit.Location,org.bukkit.TravelAgent,org.bukkit.event.player.PlayerTeleportEvent.TeleportCause)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cause"
              },
              {
                "kind": "PARAMETER",
                "name": "from"
              },
              {
                "kind": "PARAMETER",
                "name": "player"
              },
              {
                "kind": "PARAMETER",
                "name": "pta"
              },
              {
                "kind": "PARAMETER",
                "name": "to"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getPortalTravelAgent()",
            "comment": {
              "body": "Gets the Travel Agent used (or not) in this event.",
              "tags": "Returns the Travel Agent used (or not) in this event.",
              "plain": "Gets the Travel Agent used (or not) in this event.\n@return the Travel Agent used (or not) in this event"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "setPortalTravelAgent(org.bukkit.TravelAgent)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "travelAgent"
              }
            ],
            "comment": {
              "body": "Sets the Travel Agent used (or not) in this event.",
              "plain": "Sets the Travel Agent used (or not) in this event.\n@param travelAgent the Travel Agent used (or not) in this event"
            }
          },
          {
            "kind": "FIELD",
            "name": "travelAgent"
          },
          {
            "kind": "FIELD",
            "name": "useTravelAgent"
          },
          {
            "kind": "METHOD",
            "name": "useTravelAgent()",
            "comment": {
              "body": "Gets whether or not the Travel Agent will be used.\n \u003cp\u003e\n If this is set to true, the TravelAgent will try to find a Portal at\n the \u003ca href\u003d\"org/bukkit/event/player/PlayerMoveEvent.html#getTo()\"\u003e\u003ccode\u003ePlayerMoveEvent.getTo()\u003c/code\u003e\u003c/a\u003e Location, and will try to create one if there is\n none.\n \u003cp\u003e\n If this is set to false, the \u003ca href\u003d\"org/bukkit/event/player/PlayerEvent.html#getPlayer()\"\u003e\u003ccode\u003ePlayerEvent.getPlayer()\u003c/code\u003e\u003c/a\u003e} will only be\n teleported to the \u003ca href\u003d\"org/bukkit/event/player/PlayerMoveEvent.html#getTo()\"\u003e\u003ccode\u003ePlayerMoveEvent.getTo()\u003c/code\u003e\u003c/a\u003e Location.",
              "tags": "Returns whether to use the Travel Agent.",
              "plain": "Gets whether or not the Travel Agent will be used.\n \u003cp\u003e\n If this is set to true, the TravelAgent will try to find a Portal at\n the {@link #getTo()} Location, and will try to create one if there is\n none.\n \u003cp\u003e\n If this is set to false, the {@link #getPlayer()}} will only be\n teleported to the {@link #getTo()} Location.\n@return whether to use the Travel Agent"
            }
          },
          {
            "kind": "METHOD",
            "name": "useTravelAgent(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "useTravelAgent"
              }
            ],
            "comment": {
              "body": "Sets whether or not the Travel Agent will be used.\n \u003cp\u003e\n If this is set to true, the TravelAgent will try to find a Portal at\n the \u003ca href\u003d\"org/bukkit/event/player/PlayerMoveEvent.html#getTo()\"\u003e\u003ccode\u003ePlayerMoveEvent.getTo()\u003c/code\u003e\u003c/a\u003e Location, and will try to create one if there is\n none.\n \u003cp\u003e\n If this is set to false, the \u003ca href\u003d\"org/bukkit/event/player/PlayerEvent.html#getPlayer()\"\u003e\u003ccode\u003ePlayerEvent.getPlayer()\u003c/code\u003e\u003c/a\u003e will only be\n teleported to the \u003ca href\u003d\"org/bukkit/event/player/PlayerMoveEvent.html#getTo()\"\u003e\u003ccode\u003ePlayerMoveEvent.getTo()\u003c/code\u003e\u003c/a\u003e Location.",
              "plain": "Sets whether or not the Travel Agent will be used.\n \u003cp\u003e\n If this is set to true, the TravelAgent will try to find a Portal at\n the {@link #getTo()} Location, and will try to create one if there is\n none.\n \u003cp\u003e\n If this is set to false, the {@link #getPlayer()} will only be\n teleported to the {@link #getTo()} Location.\n@param useTravelAgent whether to use the Travel Agent"
            }
          }
        ],
        "comment": {
          "body": "Called when a player is about to teleport because it is in contact with a\n portal.\n \u003cp\u003e\n For other entities see \u003ca href\u003d\"org/bukkit/event/entity/EntityPortalEvent.html\" title\u003d\"class in org.bukkit.event.entity\"\u003e\u003ccode\u003eEntityPortalEvent\u003c/code\u003e\u003c/a\u003e",
          "plain": "Called when a player is about to teleport because it is in contact with a\n portal.\n \u003cp\u003e\n For other entities see {@link org.bukkit.event.entity.EntityPortalEvent}"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.player.PlayerPreLoginEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PlayerPreLoginEvent(java.lang.String,java.net.InetAddress)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "ipAddress"
              },
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "PlayerPreLoginEvent(java.lang.String,java.net.InetAddress,java.util.UUID)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "ipAddress"
              },
              {
                "kind": "PARAMETER",
                "name": "name"
              },
              {
                "kind": "PARAMETER",
                "name": "uniqueId"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "allow()",
            "comment": {
              "body": "Allows the player to log in",
              "plain": "Allows the player to log in"
            }
          },
          {
            "kind": "METHOD",
            "name": "disallow(org.bukkit.event.player.PlayerPreLoginEvent.Result,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "message"
              },
              {
                "kind": "PARAMETER",
                "name": "result"
              }
            ],
            "comment": {
              "body": "Disallows the player from logging in, with the given reason",
              "plain": "Disallows the player from logging in, with the given reason\n@param result New result for disallowing the player\n@param message Kick message to display to the user"
            }
          },
          {
            "kind": "METHOD",
            "name": "getAddress()",
            "comment": {
              "body": "Gets the player IP address.",
              "tags": "Returns The IP address.",
              "plain": "Gets the player IP address.\n@return The IP address"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getKickMessage()",
            "comment": {
              "body": "Gets the current kick message that will be used if getResult() !\u003d\n Result.ALLOWED",
              "tags": "Returns Current kick message.",
              "plain": "Gets the current kick message that will be used if getResult() !\u003d\n Result.ALLOWED\n@return Current kick message"
            }
          },
          {
            "kind": "METHOD",
            "name": "getName()",
            "comment": {
              "body": "Gets the player\u0027s name.",
              "tags": "Returns the player\u0027s name.",
              "plain": "Gets the player\u0027s name.\n@return the player\u0027s name"
            }
          },
          {
            "kind": "METHOD",
            "name": "getResult()",
            "comment": {
              "body": "Gets the current result of the login, as an enum",
              "tags": "Returns Current Result of the login.",
              "plain": "Gets the current result of the login, as an enum\n@return Current Result of the login"
            }
          },
          {
            "kind": "METHOD",
            "name": "getUniqueId()",
            "comment": {
              "body": "Gets the player\u0027s unique ID.",
              "tags": "Returns The unique ID.",
              "plain": "Gets the player\u0027s unique ID.\n@return The unique ID"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "FIELD",
            "name": "ipAddress"
          },
          {
            "kind": "FIELD",
            "name": "message"
          },
          {
            "kind": "FIELD",
            "name": "name"
          },
          {
            "kind": "ENUM",
            "name": "org.bukkit.event.player.PlayerPreLoginEvent.Result",
            "children": [
              {
                "kind": "ENUM_CONSTANT",
                "name": "ALLOWED",
                "comment": {
                  "body": "The player is allowed to log in",
                  "plain": "The player is allowed to log in"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "KICK_BANNED",
                "comment": {
                  "body": "The player is not allowed to log in, due to them being banned",
                  "plain": "The player is not allowed to log in, due to them being banned"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "KICK_FULL",
                "comment": {
                  "body": "The player is not allowed to log in, due to the server being full",
                  "plain": "The player is not allowed to log in, due to the server being full"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "KICK_OTHER",
                "comment": {
                  "body": "The player is not allowed to log in, for reasons undefined",
                  "plain": "The player is not allowed to log in, for reasons undefined"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "KICK_WHITELIST",
                "comment": {
                  "body": "The player is not allowed to log in, due to them not being on the\n white list",
                  "plain": "The player is not allowed to log in, due to them not being on the\n white list"
                }
              },
              {
                "kind": "CONSTRUCTOR",
                "name": "Result()"
              },
              {
                "kind": "METHOD",
                "name": "valueOf(java.lang.String)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "name"
                  }
                ]
              },
              {
                "kind": "METHOD",
                "name": "values()"
              }
            ],
            "comment": {
              "body": "Basic kick reasons for communicating to plugins",
              "plain": "Basic kick reasons for communicating to plugins"
            }
          },
          {
            "kind": "FIELD",
            "name": "result"
          },
          {
            "kind": "METHOD",
            "name": "setKickMessage(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "message"
              }
            ],
            "comment": {
              "body": "Sets the kick message to display if getResult() !\u003d Result.ALLOWED",
              "plain": "Sets the kick message to display if getResult() !\u003d Result.ALLOWED\n@param message New kick message"
            }
          },
          {
            "kind": "METHOD",
            "name": "setResult(org.bukkit.event.player.PlayerPreLoginEvent.Result)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "result"
              }
            ],
            "comment": {
              "body": "Sets the new result of the login, as an enum",
              "plain": "Sets the new result of the login, as an enum\n@param result New result to set"
            }
          },
          {
            "kind": "FIELD",
            "name": "uniqueId"
          }
        ],
        "deprecated": {
          "deprecated": "true"
        },
        "comment": {
          "body": "Stores details for players attempting to log in",
          "plain": "Stores details for players attempting to log in\n@deprecated This event causes synchronization from the login thread; {@link AsyncPlayerPreLoginEvent} is preferred to keep the secondary threads\n     asynchronous."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.player.PlayerQuitEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PlayerQuitEvent(org.bukkit.entity.Player,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "quitMessage"
              },
              {
                "kind": "PARAMETER",
                "name": "who"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getQuitMessage()",
            "comment": {
              "body": "Gets the quit message to send to all online players",
              "tags": "Returns string quit message.",
              "plain": "Gets the quit message to send to all online players\n@return string quit message"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "FIELD",
            "name": "quitMessage"
          },
          {
            "kind": "METHOD",
            "name": "setQuitMessage(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "quitMessage"
              }
            ],
            "comment": {
              "body": "Sets the quit message to send to all online players",
              "plain": "Sets the quit message to send to all online players\n@param quitMessage quit message"
            }
          }
        ],
        "comment": {
          "body": "Called when a player leaves a server",
          "plain": "Called when a player leaves a server"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.player.PlayerRegisterChannelEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PlayerRegisterChannelEvent(org.bukkit.entity.Player,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "channel"
              },
              {
                "kind": "PARAMETER",
                "name": "player"
              }
            ]
          }
        ],
        "comment": {
          "body": "This is called immediately after a player registers for a plugin channel.",
          "plain": "This is called immediately after a player registers for a plugin channel."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.player.PlayerResourcePackStatusEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PlayerResourcePackStatusEvent(org.bukkit.entity.Player,org.bukkit.event.player.PlayerResourcePackStatusEvent.Status)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "resourcePackStatus"
              },
              {
                "kind": "PARAMETER",
                "name": "who"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "PlayerResourcePackStatusEvent(org.bukkit.entity.Player,org.bukkit.event.player.PlayerResourcePackStatusEvent.Status,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "hash"
              },
              {
                "kind": "PARAMETER",
                "name": "resourcePackStatus"
              },
              {
                "kind": "PARAMETER",
                "name": "who"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getHash()"
          },
          {
            "kind": "METHOD",
            "name": "getStatus()",
            "comment": {
              "body": "Gets the status of this pack.",
              "tags": "Returns the current status.",
              "plain": "Gets the status of this pack.\n@return the current status"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "FIELD",
            "name": "hash"
          },
          {
            "kind": "ENUM",
            "name": "org.bukkit.event.player.PlayerResourcePackStatusEvent.Status",
            "children": [
              {
                "kind": "ENUM_CONSTANT",
                "name": "ACCEPTED",
                "comment": {
                  "body": "The client accepted the pack and is beginning a download of it.",
                  "plain": "The client accepted the pack and is beginning a download of it."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "DECLINED",
                "comment": {
                  "body": "The client refused to accept the resource pack.",
                  "plain": "The client refused to accept the resource pack."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "FAILED_DOWNLOAD",
                "comment": {
                  "body": "The client accepted the pack, but download failed.",
                  "plain": "The client accepted the pack, but download failed."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "SUCCESSFULLY_LOADED",
                "comment": {
                  "body": "The resource pack has been successfully downloaded and applied to the\n client.",
                  "plain": "The resource pack has been successfully downloaded and applied to the\n client."
                }
              },
              {
                "kind": "CONSTRUCTOR",
                "name": "Status()"
              },
              {
                "kind": "METHOD",
                "name": "valueOf(java.lang.String)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "name"
                  }
                ]
              },
              {
                "kind": "METHOD",
                "name": "values()"
              }
            ],
            "comment": {
              "body": "Status of the resource pack.",
              "plain": "Status of the resource pack."
            }
          },
          {
            "kind": "FIELD",
            "name": "status"
          }
        ],
        "comment": {
          "body": "Called when a player takes action on a resource pack request sent via\n \u003ca href\u003d\"org/bukkit/entity/Player.html#setResourcePack(java.lang.String)\"\u003e\u003ccode\u003ePlayer.setResourcePack(java.lang.String)\u003c/code\u003e\u003c/a\u003e.",
          "plain": "Called when a player takes action on a resource pack request sent via\n {@link Player#setResourcePack(java.lang.String)}."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.player.PlayerRespawnEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PlayerRespawnEvent(org.bukkit.entity.Player,org.bukkit.Location,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "isBedSpawn"
              },
              {
                "kind": "PARAMETER",
                "name": "respawnLocation"
              },
              {
                "kind": "PARAMETER",
                "name": "respawnPlayer"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getRespawnLocation()",
            "comment": {
              "body": "Gets the current respawn location",
              "tags": "Returns Location current respawn location.",
              "plain": "Gets the current respawn location\n@return Location current respawn location"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "FIELD",
            "name": "isBedSpawn"
          },
          {
            "kind": "METHOD",
            "name": "isBedSpawn()",
            "comment": {
              "body": "Gets whether the respawn location is the player\u0027s bed.",
              "tags": "Returns true if the respawn location is the player\u0027s bed..",
              "plain": "Gets whether the respawn location is the player\u0027s bed.\n@return true if the respawn location is the player\u0027s bed."
            }
          },
          {
            "kind": "FIELD",
            "name": "respawnLocation"
          },
          {
            "kind": "METHOD",
            "name": "setRespawnLocation(org.bukkit.Location)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "respawnLocation"
              }
            ],
            "comment": {
              "body": "Sets the new respawn location",
              "plain": "Sets the new respawn location\n@param respawnLocation new location for the respawn"
            }
          }
        ],
        "comment": {
          "body": "Called when a player respawns.",
          "plain": "Called when a player respawns."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.player.PlayerShearEntityEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PlayerShearEntityEvent(org.bukkit.entity.Player,org.bukkit.entity.Entity)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "what"
              },
              {
                "kind": "PARAMETER",
                "name": "who"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "cancel"
          },
          {
            "kind": "METHOD",
            "name": "getEntity()",
            "comment": {
              "body": "Gets the entity the player is shearing",
              "tags": "Returns the entity the player is shearing.",
              "plain": "Gets the entity the player is shearing\n@return the entity the player is shearing"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "what"
          }
        ],
        "comment": {
          "body": "Called when a player shears an entity",
          "plain": "Called when a player shears an entity"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.player.PlayerStatisticIncrementEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PlayerStatisticIncrementEvent(org.bukkit.entity.Player,org.bukkit.Statistic,int,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "initialValue"
              },
              {
                "kind": "PARAMETER",
                "name": "newValue"
              },
              {
                "kind": "PARAMETER",
                "name": "player"
              },
              {
                "kind": "PARAMETER",
                "name": "statistic"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "PlayerStatisticIncrementEvent(org.bukkit.entity.Player,org.bukkit.Statistic,int,int,org.bukkit.Material)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "initialValue"
              },
              {
                "kind": "PARAMETER",
                "name": "material"
              },
              {
                "kind": "PARAMETER",
                "name": "newValue"
              },
              {
                "kind": "PARAMETER",
                "name": "player"
              },
              {
                "kind": "PARAMETER",
                "name": "statistic"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "PlayerStatisticIncrementEvent(org.bukkit.entity.Player,org.bukkit.Statistic,int,int,org.bukkit.entity.EntityType)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "entityType"
              },
              {
                "kind": "PARAMETER",
                "name": "initialValue"
              },
              {
                "kind": "PARAMETER",
                "name": "newValue"
              },
              {
                "kind": "PARAMETER",
                "name": "player"
              },
              {
                "kind": "PARAMETER",
                "name": "statistic"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "entityType"
          },
          {
            "kind": "METHOD",
            "name": "getEntityType()",
            "comment": {
              "body": "Gets the EntityType if \u003ca href\u003d\"org/bukkit/event/player/PlayerStatisticIncrementEvent.html#getStatistic()\"\u003e\u003ccode\u003egetStatistic()\u003c/code\u003e\u003c/a\u003e is an\n entity statistic otherwise returns null.",
              "tags": "Returns the EntityType of the statistic.",
              "plain": "Gets the EntityType if {@link #getStatistic() getStatistic()} is an\n entity statistic otherwise returns null.\n@return the EntityType of the statistic"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getMaterial()",
            "comment": {
              "body": "Gets the Material if \u003ca href\u003d\"org/bukkit/event/player/PlayerStatisticIncrementEvent.html#getStatistic()\"\u003e\u003ccode\u003egetStatistic()\u003c/code\u003e\u003c/a\u003e is a block\n or item statistic otherwise returns null.",
              "tags": "Returns the Material of the statistic.",
              "plain": "Gets the Material if {@link #getStatistic() getStatistic()} is a block\n or item statistic otherwise returns null.\n@return the Material of the statistic"
            }
          },
          {
            "kind": "METHOD",
            "name": "getNewValue()",
            "comment": {
              "body": "Gets the new value of the statistic.",
              "tags": "Returns the new value of the statistic.",
              "plain": "Gets the new value of the statistic.\n@return the new value of the statistic"
            }
          },
          {
            "kind": "METHOD",
            "name": "getPreviousValue()",
            "comment": {
              "body": "Gets the previous value of the statistic.",
              "tags": "Returns the previous value of the statistic.",
              "plain": "Gets the previous value of the statistic.\n@return the previous value of the statistic"
            }
          },
          {
            "kind": "METHOD",
            "name": "getStatistic()",
            "comment": {
              "body": "Gets the statistic that is being incremented.",
              "tags": "Returns the incremented statistic.",
              "plain": "Gets the statistic that is being incremented.\n@return the incremented statistic"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "FIELD",
            "name": "initialValue"
          },
          {
            "kind": "FIELD",
            "name": "isCancelled"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "FIELD",
            "name": "material"
          },
          {
            "kind": "FIELD",
            "name": "newValue"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "statistic"
          }
        ],
        "comment": {
          "body": "Called when a player statistic is incremented.\n \u003cp\u003e\n This event is not called for \u003ca href\u003d\"org/bukkit/Statistic.html#PLAY_ONE_TICK\"\u003e\u003ccode\u003eStatistic.PLAY_ONE_TICK\u003c/code\u003e\u003c/a\u003e or\n movement based statistics.",
          "plain": "Called when a player statistic is incremented.\n \u003cp\u003e\n This event is not called for {@link org.bukkit.Statistic#PLAY_ONE_TICK} or\n movement based statistics."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.player.PlayerSwapHandItemsEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PlayerSwapHandItemsEvent(org.bukkit.entity.Player,org.bukkit.inventory.ItemStack,org.bukkit.inventory.ItemStack)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "mainHandItem"
              },
              {
                "kind": "PARAMETER",
                "name": "offHandItem"
              },
              {
                "kind": "PARAMETER",
                "name": "player"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "cancelled"
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getMainHandItem()",
            "comment": {
              "body": "Gets the item switched to the main hand.",
              "tags": "Returns item in the main hand.",
              "plain": "Gets the item switched to the main hand.\n@return item in the main hand"
            }
          },
          {
            "kind": "METHOD",
            "name": "getOffHandItem()",
            "comment": {
              "body": "Gets the item switched to the off hand.",
              "tags": "Returns item in the off hand.",
              "plain": "Gets the item switched to the off hand.\n@return item in the off hand"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "FIELD",
            "name": "mainHandItem"
          },
          {
            "kind": "FIELD",
            "name": "offHandItem"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "setMainHandItem(org.bukkit.inventory.ItemStack)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "mainHandItem"
              }
            ],
            "comment": {
              "body": "Sets the item in the main hand.",
              "plain": "Sets the item in the main hand.\n@param mainHandItem new item in the main hand"
            }
          },
          {
            "kind": "METHOD",
            "name": "setOffHandItem(org.bukkit.inventory.ItemStack)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "offHandItem"
              }
            ],
            "comment": {
              "body": "Sets the item in the off hand.",
              "plain": "Sets the item in the off hand.\n@param offHandItem new item in the off hand"
            }
          }
        ],
        "comment": {
          "body": "Called when a player swap items between main hand and off hand using the\n hotkey.",
          "plain": "Called when a player swap items between main hand and off hand using the\n hotkey."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.player.PlayerTeleportEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PlayerTeleportEvent(org.bukkit.entity.Player,org.bukkit.Location,org.bukkit.Location)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "from"
              },
              {
                "kind": "PARAMETER",
                "name": "player"
              },
              {
                "kind": "PARAMETER",
                "name": "to"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "PlayerTeleportEvent(org.bukkit.entity.Player,org.bukkit.Location,org.bukkit.Location,org.bukkit.event.player.PlayerTeleportEvent.TeleportCause)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cause"
              },
              {
                "kind": "PARAMETER",
                "name": "from"
              },
              {
                "kind": "PARAMETER",
                "name": "player"
              },
              {
                "kind": "PARAMETER",
                "name": "to"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "cause"
          },
          {
            "kind": "METHOD",
            "name": "getCause()",
            "comment": {
              "body": "Gets the cause of this teleportation event",
              "tags": "Returns Cause of the event.",
              "plain": "Gets the cause of this teleportation event\n@return Cause of the event"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "ENUM",
            "name": "org.bukkit.event.player.PlayerTeleportEvent.TeleportCause",
            "children": [
              {
                "kind": "ENUM_CONSTANT",
                "name": "CHORUS_FRUIT",
                "comment": {
                  "body": "Indicates the teleportation was caused by a player consuming chorus\n fruit",
                  "plain": "Indicates the teleportation was caused by a player consuming chorus\n fruit"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "COMMAND",
                "comment": {
                  "body": "Indicates the teleportation was caused by a player executing a\n command",
                  "plain": "Indicates the teleportation was caused by a player executing a\n command"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "ENDER_PEARL",
                "comment": {
                  "body": "Indicates the teleporation was caused by a player throwing an Ender\n Pearl",
                  "plain": "Indicates the teleporation was caused by a player throwing an Ender\n Pearl"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "END_GATEWAY",
                "comment": {
                  "body": "Indicates the teleportation was caused by a player entering an End\n gateway",
                  "plain": "Indicates the teleportation was caused by a player entering an End\n gateway"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "END_PORTAL",
                "comment": {
                  "body": "Indicates the teleportation was caused by a player entering an End\n portal",
                  "plain": "Indicates the teleportation was caused by a player entering an End\n portal"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "NETHER_PORTAL",
                "comment": {
                  "body": "Indicates the teleportation was caused by a player entering a\n Nether portal",
                  "plain": "Indicates the teleportation was caused by a player entering a\n Nether portal"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "PLUGIN",
                "comment": {
                  "body": "Indicates the teleportation was caused by a plugin",
                  "plain": "Indicates the teleportation was caused by a plugin"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "SPECTATE",
                "comment": {
                  "body": "Indicates the teleportation was caused by a player teleporting to a\n Entity/Player via the spectator menu",
                  "plain": "Indicates the teleportation was caused by a player teleporting to a\n Entity/Player via the spectator menu"
                }
              },
              {
                "kind": "CONSTRUCTOR",
                "name": "TeleportCause()"
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "UNKNOWN",
                "comment": {
                  "body": "Indicates the teleportation was caused by an event not covered by\n this enum",
                  "plain": "Indicates the teleportation was caused by an event not covered by\n this enum"
                }
              },
              {
                "kind": "METHOD",
                "name": "valueOf(java.lang.String)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "name"
                  }
                ]
              },
              {
                "kind": "METHOD",
                "name": "values()"
              }
            ]
          }
        ],
        "comment": {
          "body": "Holds information for player teleport events",
          "plain": "Holds information for player teleport events"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.player.PlayerToggleFlightEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PlayerToggleFlightEvent(org.bukkit.entity.Player,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "isFlying"
              },
              {
                "kind": "PARAMETER",
                "name": "player"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "cancel"
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "FIELD",
            "name": "isFlying"
          },
          {
            "kind": "METHOD",
            "name": "isFlying()",
            "comment": {
              "body": "Returns whether the player is trying to start or stop flying.",
              "tags": "Returns flying state.",
              "plain": "Returns whether the player is trying to start or stop flying.\n@return flying state"
            }
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          }
        ],
        "comment": {
          "body": "Called when a player toggles their flying state",
          "plain": "Called when a player toggles their flying state"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.player.PlayerToggleSneakEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PlayerToggleSneakEvent(org.bukkit.entity.Player,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "isSneaking"
              },
              {
                "kind": "PARAMETER",
                "name": "player"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "cancel"
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "FIELD",
            "name": "isSneaking"
          },
          {
            "kind": "METHOD",
            "name": "isSneaking()",
            "comment": {
              "body": "Returns whether the player is now sneaking or not.",
              "tags": "Returns sneaking state.",
              "plain": "Returns whether the player is now sneaking or not.\n@return sneaking state"
            }
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          }
        ],
        "comment": {
          "body": "Called when a player toggles their sneaking state",
          "plain": "Called when a player toggles their sneaking state"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.player.PlayerToggleSprintEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PlayerToggleSprintEvent(org.bukkit.entity.Player,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "isSprinting"
              },
              {
                "kind": "PARAMETER",
                "name": "player"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "cancel"
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "FIELD",
            "name": "isSprinting"
          },
          {
            "kind": "METHOD",
            "name": "isSprinting()",
            "comment": {
              "body": "Gets whether the player is now sprinting or not.",
              "tags": "Returns sprinting state.",
              "plain": "Gets whether the player is now sprinting or not.\n@return sprinting state"
            }
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          }
        ],
        "comment": {
          "body": "Called when a player toggles their sprinting state",
          "plain": "Called when a player toggles their sprinting state"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.player.PlayerUnleashEntityEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PlayerUnleashEntityEvent(org.bukkit.entity.Entity,org.bukkit.entity.Player)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "entity"
              },
              {
                "kind": "PARAMETER",
                "name": "player"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "cancelled"
          },
          {
            "kind": "METHOD",
            "name": "getPlayer()",
            "comment": {
              "body": "Returns the player who is unleashing the entity.",
              "tags": "Returns The player.",
              "plain": "Returns the player who is unleashing the entity.\n@return The player"
            }
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "FIELD",
            "name": "player"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          }
        ],
        "comment": {
          "body": "Called prior to an entity being unleashed due to a player\u0027s action.",
          "plain": "Called prior to an entity being unleashed due to a player\u0027s action."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.player.PlayerUnregisterChannelEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PlayerUnregisterChannelEvent(org.bukkit.entity.Player,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "channel"
              },
              {
                "kind": "PARAMETER",
                "name": "player"
              }
            ]
          }
        ],
        "comment": {
          "body": "This is called immediately after a player unregisters for a plugin channel.",
          "plain": "This is called immediately after a player unregisters for a plugin channel."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.player.PlayerVelocityEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PlayerVelocityEvent(org.bukkit.entity.Player,org.bukkit.util.Vector)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "player"
              },
              {
                "kind": "PARAMETER",
                "name": "velocity"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "cancel"
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getVelocity()",
            "comment": {
              "body": "Gets the velocity vector that will be sent to the player",
              "tags": "Returns Vector the player will get.",
              "plain": "Gets the velocity vector that will be sent to the player\n@return Vector the player will get"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "setVelocity(org.bukkit.util.Vector)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "velocity"
              }
            ],
            "comment": {
              "body": "Sets the velocity vector that will be sent to the player",
              "plain": "Sets the velocity vector that will be sent to the player\n@param velocity The velocity vector that will be sent to the player"
            }
          },
          {
            "kind": "FIELD",
            "name": "velocity"
          }
        ],
        "comment": {
          "body": "Called when the velocity of a player changes.",
          "plain": "Called when the velocity of a player changes."
        }
      }
    ]
  },
  {
    "kind": "PACKAGE",
    "name": "org.bukkit.event.server",
    "children": [
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.server.BroadcastMessageEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "BroadcastMessageEvent(java.lang.String,java.util.Set\u003corg.bukkit.command.CommandSender\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "message"
              },
              {
                "kind": "PARAMETER",
                "name": "recipients"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "cancelled"
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getMessage()",
            "comment": {
              "body": "Get the message to broadcast.",
              "tags": "Returns Message to broadcast.",
              "plain": "Get the message to broadcast.\n@return Message to broadcast"
            }
          },
          {
            "kind": "METHOD",
            "name": "getRecipients()",
            "comment": {
              "body": "Gets a set of recipients that this chat message will be displayed to.\n \u003cp\u003e\n The set returned is not guaranteed to be mutable and may auto-populate\n on access. Any listener accessing the returned set should be aware that\n it may reduce performance for a lazy set implementation.\n \u003cp\u003e\n Listeners should be aware that modifying the list may throw \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003e\u003ccode\u003eUnsupportedOperationException\u003c/code\u003e\u003c/a\u003e if the event caller provides an\n unmodifiable set.",
              "tags": "Returns All CommandSenders who will see this chat message.",
              "plain": "Gets a set of recipients that this chat message will be displayed to.\n \u003cp\u003e\n The set returned is not guaranteed to be mutable and may auto-populate\n on access. Any listener accessing the returned set should be aware that\n it may reduce performance for a lazy set implementation.\n \u003cp\u003e\n Listeners should be aware that modifying the list may throw {@link UnsupportedOperationException} if the event caller provides an\n unmodifiable set.\n@return All CommandSenders who will see this chat message"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "FIELD",
            "name": "message"
          },
          {
            "kind": "FIELD",
            "name": "recipients"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancelled"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "setMessage(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "message"
              }
            ],
            "comment": {
              "body": "Set the message to broadcast.",
              "plain": "Set the message to broadcast.\n@param message New message to broadcast"
            }
          }
        ],
        "comment": {
          "body": "Event triggered for server broadcast messages such as from\n \u003ca href\u003d\"org/bukkit/Server.html#broadcast(java.lang.String,java.lang.String)\"\u003e\u003ccode\u003eServer.broadcast(String, String)\u003c/code\u003e\u003c/a\u003e.",
          "plain": "Event triggered for server broadcast messages such as from\n {@link org.bukkit.Server#broadcast(String, String)}."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.server.MapInitializeEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "MapInitializeEvent(org.bukkit.map.MapView)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "mapView"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getMap()",
            "comment": {
              "body": "Gets the map initialized in this event.",
              "tags": "Returns Map for this event.",
              "plain": "Gets the map initialized in this event.\n@return Map for this event"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "FIELD",
            "name": "mapView"
          }
        ],
        "comment": {
          "body": "Called when a map is initialized.",
          "plain": "Called when a map is initialized."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.server.PluginDisableEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PluginDisableEvent(org.bukkit.plugin.Plugin)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "plugin"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          }
        ],
        "comment": {
          "body": "Called when a plugin is disabled.",
          "plain": "Called when a plugin is disabled."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.server.PluginEnableEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PluginEnableEvent(org.bukkit.plugin.Plugin)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "plugin"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          }
        ],
        "comment": {
          "body": "Called when a plugin is enabled.",
          "plain": "Called when a plugin is enabled."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.server.PluginEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PluginEvent(org.bukkit.plugin.Plugin)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "plugin"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getPlugin()",
            "comment": {
              "body": "Gets the plugin involved in this event",
              "tags": "Returns Plugin for this event.",
              "plain": "Gets the plugin involved in this event\n@return Plugin for this event"
            }
          },
          {
            "kind": "FIELD",
            "name": "plugin"
          }
        ],
        "comment": {
          "body": "Used for plugin enable and disable events",
          "plain": "Used for plugin enable and disable events"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.server.RemoteServerCommandEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "RemoteServerCommandEvent(org.bukkit.command.CommandSender,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "command"
              },
              {
                "kind": "PARAMETER",
                "name": "sender"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          }
        ],
        "comment": {
          "body": "This event is called when a command is received over RCON. See the javadocs\n of \u003ca href\u003d\"org/bukkit/event/server/ServerCommandEvent.html\" title\u003d\"class in org.bukkit.event.server\"\u003e\u003ccode\u003eServerCommandEvent\u003c/code\u003e\u003c/a\u003e for more information.",
          "plain": "This event is called when a command is received over RCON. See the javadocs\n of {@link ServerCommandEvent} for more information."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.server.ServerCommandEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "ServerCommandEvent(org.bukkit.command.CommandSender,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "command"
              },
              {
                "kind": "PARAMETER",
                "name": "sender"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "cancel"
          },
          {
            "kind": "FIELD",
            "name": "command"
          },
          {
            "kind": "METHOD",
            "name": "getCommand()",
            "comment": {
              "body": "Gets the command that the user is attempting to execute from the\n console",
              "tags": "Returns Command the user is attempting to execute.",
              "plain": "Gets the command that the user is attempting to execute from the\n console\n@return Command the user is attempting to execute"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getSender()",
            "comment": {
              "body": "Get the command sender.",
              "tags": "Returns The sender.",
              "plain": "Get the command sender.\n@return The sender"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "FIELD",
            "name": "sender"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "setCommand(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "message"
              }
            ],
            "comment": {
              "body": "Sets the command that the server will execute",
              "plain": "Sets the command that the server will execute\n@param message New message that the server will execute"
            }
          }
        ],
        "comment": {
          "body": "This event is called when a command is run by a non-player. It is\n called early in the command handling process, and modifications in this\n event (via \u003ca href\u003d\"org/bukkit/event/server/ServerCommandEvent.html#setCommand(java.lang.String)\"\u003e\u003ccode\u003eServerCommandEvent.setCommand(String)\u003c/code\u003e\u003c/a\u003e) will be shown in the behavior.\n \u003cp\u003e\n Many plugins will have \u003cb\u003eno use for this event\u003c/b\u003e, and you should\n attempt to avoid using it if it is not necessary.\n \u003cp\u003e\n Some examples of valid uses for this event are:\n \u003cul\u003e\n \u003cli\u003eLogging executed commands to a separate file\n \u003cli\u003eVariable substitution. For example, replacing \u003ccode\u003e${ip:Steve}\u003c/code\u003e\n     with the connection IP of the player named Steve, or simulating the\n     \u003ccode\u003e@a\u003c/code\u003e and \u003ccode\u003e@p\u003c/code\u003e decorators used by Command Blocks\n     for plugins that do not handle it.\n \u003cli\u003eConditionally blocking commands belonging to other plugins.\n \u003cli\u003ePer-sender command aliases. For example, after the console runs the\n     command \u003ccode\u003e/calias cr gamemode creative\u003c/code\u003e, the next time they\n     run \u003ccode\u003e/cr\u003c/code\u003e, it gets replaced into\n     \u003ccode\u003e/gamemode creative\u003c/code\u003e. (Global command aliases should be\n     done by registering the alias.)\n \u003c/ul\u003e\n \u003cp\u003e\n Examples of incorrect uses are:\n \u003cul\u003e\n \u003cli\u003eUsing this event to run command logic\n \u003c/ul\u003e\n \u003cp\u003e\n If the event is cancelled, processing of the command will halt.\n \u003cp\u003e\n The state of whether or not there is a slash (\u003ccode\u003e/\u003c/code\u003e) at the\n beginning of the message should be preserved. If a slash is added or\n removed, unexpected behavior may result.",
          "plain": "This event is called when a command is run by a non-player. It is\n called early in the command handling process, and modifications in this\n event (via {@link #setCommand(String)}) will be shown in the behavior.\n \u003cp\u003e\n Many plugins will have \u003cb\u003eno use for this event\u003c/b\u003e, and you should\n attempt to avoid using it if it is not necessary.\n \u003cp\u003e\n Some examples of valid uses for this event are:\n \u003cul\u003e\n \u003cli\u003eLogging executed commands to a separate file\n \u003cli\u003eVariable substitution. For example, replacing \u003ccode\u003e${ip:Steve}\u003c/code\u003e\n     with the connection IP of the player named Steve, or simulating the\n     \u003ccode\u003e@a\u003c/code\u003e and \u003ccode\u003e@p\u003c/code\u003e decorators used by Command Blocks\n     for plugins that do not handle it.\n \u003cli\u003eConditionally blocking commands belonging to other plugins.\n \u003cli\u003ePer-sender command aliases. For example, after the console runs the\n     command \u003ccode\u003e/calias cr gamemode creative\u003c/code\u003e, the next time they\n     run \u003ccode\u003e/cr\u003c/code\u003e, it gets replaced into\n     \u003ccode\u003e/gamemode creative\u003c/code\u003e. (Global command aliases should be\n     done by registering the alias.)\n \u003c/ul\u003e\n \u003cp\u003e\n Examples of incorrect uses are:\n \u003cul\u003e\n \u003cli\u003eUsing this event to run command logic\n \u003c/ul\u003e\n \u003cp\u003e\n If the event is cancelled, processing of the command will halt.\n \u003cp\u003e\n The state of whether or not there is a slash (\u003ccode\u003e/\u003c/code\u003e) at the\n beginning of the message should be preserved. If a slash is added or\n removed, unexpected behavior may result."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.server.ServerEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "ServerEvent()"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "ServerEvent(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "isAsync"
              }
            ]
          }
        ],
        "comment": {
          "body": "Miscellaneous server events",
          "plain": "Miscellaneous server events"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.server.ServerListPingEvent",
        "children": [
          {
            "kind": "FIELD",
            "name": "MAGIC_PLAYER_COUNT"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "ServerListPingEvent(java.net.InetAddress,java.lang.String,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "address"
              },
              {
                "kind": "PARAMETER",
                "name": "maxPlayers"
              },
              {
                "kind": "PARAMETER",
                "name": "motd"
              }
            ],
            "comment": {
              "body": "This constructor is intended for implementations that provide the\n \u003ca href\u003d\"org/bukkit/event/server/ServerListPingEvent.html#iterator()\"\u003e\u003ccode\u003eServerListPingEvent.iterator()\u003c/code\u003e\u003c/a\u003e method, thus provided the \u003ca href\u003d\"org/bukkit/event/server/ServerListPingEvent.html#getNumPlayers()\"\u003e\u003ccode\u003eServerListPingEvent.getNumPlayers()\u003c/code\u003e\u003c/a\u003e\n count.",
              "plain": "This constructor is intended for implementations that provide the\n {@link #iterator()} method, thus provided the {@link #getNumPlayers()}\n count.\n@param address the address of the pinger\n@param motd the message of the day\n@param maxPlayers the max number of players"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "ServerListPingEvent(java.net.InetAddress,java.lang.String,int,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "address"
              },
              {
                "kind": "PARAMETER",
                "name": "maxPlayers"
              },
              {
                "kind": "PARAMETER",
                "name": "motd"
              },
              {
                "kind": "PARAMETER",
                "name": "numPlayers"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "address"
          },
          {
            "kind": "METHOD",
            "name": "getAddress()",
            "comment": {
              "body": "Get the address the ping is coming from.",
              "tags": "Returns the address.",
              "plain": "Get the address the ping is coming from.\n@return the address"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getMaxPlayers()",
            "comment": {
              "body": "Get the maximum number of players sent.",
              "tags": "Returns the maximum number of players.",
              "plain": "Get the maximum number of players sent.\n@return the maximum number of players"
            }
          },
          {
            "kind": "METHOD",
            "name": "getMotd()",
            "comment": {
              "body": "Get the message of the day message.",
              "tags": "Returns the message of the day.",
              "plain": "Get the message of the day message.\n@return the message of the day"
            }
          },
          {
            "kind": "METHOD",
            "name": "getNumPlayers()",
            "comment": {
              "body": "Get the number of players sent.",
              "tags": "Returns the number of players.",
              "plain": "Get the number of players sent.\n@return the number of players"
            }
          },
          {
            "kind": "METHOD",
            "name": "getSampleText()",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "tags": "Returns the player list sample.",
              "plain": "@deprecated Will be removed in 1.13, use {@link PaperServerListPingEvent#getPlayerSample()}\n@return the player list sample"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "iterator()",
            "comment": {
              "body": "\n \u003cp\u003e\n Calling the \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/util/Iterator.html#remove()\" title\u003d\"class or interface in java.util\" class\u003d\"external-link\"\u003e\u003ccode\u003eIterator.remove()\u003c/code\u003e\u003c/a\u003e method will force that particular\n player to not be displayed on the player list, decrease the size\n returned by \u003ca href\u003d\"org/bukkit/event/server/ServerListPingEvent.html#getNumPlayers()\"\u003e\u003ccode\u003eServerListPingEvent.getNumPlayers()\u003c/code\u003e\u003c/a\u003e, and will not be returned again by\n any new iterator.",
              "plain": "{@inheritDoc}\n \u003cp\u003e\n Calling the {@link Iterator#remove()} method will force that particular\n player to not be displayed on the player list, decrease the size\n returned by {@link #getNumPlayers()}, and will not be returned again by\n any new iterator.\n@throws UnsupportedOperationException if the caller of this event does\n     not support removing players"
            }
          },
          {
            "kind": "FIELD",
            "name": "maxPlayers"
          },
          {
            "kind": "FIELD",
            "name": "motd"
          },
          {
            "kind": "FIELD",
            "name": "numPlayers"
          },
          {
            "kind": "FIELD",
            "name": "sample"
          },
          {
            "kind": "METHOD",
            "name": "setMaxPlayers(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "maxPlayers"
              }
            ],
            "comment": {
              "body": "Set the maximum number of players sent.",
              "plain": "Set the maximum number of players sent.\n@param maxPlayers the maximum number of player"
            }
          },
          {
            "kind": "METHOD",
            "name": "setMotd(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "motd"
              }
            ],
            "comment": {
              "body": "Change the message of the day message.",
              "plain": "Change the message of the day message.\n@param motd the message of the day"
            }
          },
          {
            "kind": "METHOD",
            "name": "setSampleText(java.util.List\u003cjava.lang.String\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "sample"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@deprecated Will be removed in 1.13, use {@link PaperServerListPingEvent#getPlayerSample()}\n@param sample the new player list sample"
            }
          },
          {
            "kind": "METHOD",
            "name": "setServerIcon(org.bukkit.util.CachedServerIcon)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "icon"
              }
            ],
            "comment": {
              "body": "Sets the server-icon sent to the client.",
              "plain": "Sets the server-icon sent to the client.\n@param icon the icon to send to the client\n@throws IllegalArgumentException if the {@link CachedServerIcon} is not\n     created by the caller of this event; null may be accepted for some\n     implementations\n@throws UnsupportedOperationException if the caller of this event does\n     not support setting the server icon"
            }
          }
        ],
        "comment": {
          "body": "Called when a server list ping is coming in. Displayed players can be\n checked and removed by \u003ca href\u003d\"org/bukkit/event/server/ServerListPingEvent.html#iterator()\"\u003e\u003ccode\u003eiterating\u003c/code\u003e\u003c/a\u003e over this event.",
          "plain": "Called when a server list ping is coming in. Displayed players can be\n checked and removed by {@link #iterator() iterating} over this event."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.server.ServiceEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "ServiceEvent(org.bukkit.plugin.RegisteredServiceProvider\u003c?\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "provider"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getProvider()"
          },
          {
            "kind": "FIELD",
            "name": "provider"
          }
        ],
        "comment": {
          "body": "An event relating to a registered service. This is called in a \u003ca href\u003d\"org/bukkit/plugin/ServicesManager.html\" title\u003d\"interface in org.bukkit.plugin\"\u003e\u003ccode\u003eServicesManager\u003c/code\u003e\u003c/a\u003e",
          "plain": "An event relating to a registered service. This is called in a {@link org.bukkit.plugin.ServicesManager}"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.server.ServiceRegisterEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "ServiceRegisterEvent(org.bukkit.plugin.RegisteredServiceProvider\u003c?\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "registeredProvider"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          }
        ],
        "comment": {
          "body": "This event is called when a service is registered.\n \u003cp\u003e\n Warning: The order in which register and unregister events are called\n should not be relied upon.",
          "plain": "This event is called when a service is registered.\n \u003cp\u003e\n Warning: The order in which register and unregister events are called\n should not be relied upon."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.server.ServiceUnregisterEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "ServiceUnregisterEvent(org.bukkit.plugin.RegisteredServiceProvider\u003c?\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "serviceProvider"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          }
        ],
        "comment": {
          "body": "This event is called when a service is unregistered.\n \u003cp\u003e\n Warning: The order in which register and unregister events are called\n should not be relied upon.",
          "plain": "This event is called when a service is unregistered.\n \u003cp\u003e\n Warning: The order in which register and unregister events are called\n should not be relied upon."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.server.TabCompleteEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "TabCompleteEvent(org.bukkit.command.CommandSender,java.lang.String,java.util.List\u003cjava.lang.String\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "buffer"
              },
              {
                "kind": "PARAMETER",
                "name": "completions"
              },
              {
                "kind": "PARAMETER",
                "name": "sender"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "TabCompleteEvent(org.bukkit.command.CommandSender,java.lang.String,java.util.List\u003cjava.lang.String\u003e,boolean,org.bukkit.Location)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "buffer"
              },
              {
                "kind": "PARAMETER",
                "name": "completions"
              },
              {
                "kind": "PARAMETER",
                "name": "isCommand"
              },
              {
                "kind": "PARAMETER",
                "name": "location"
              },
              {
                "kind": "PARAMETER",
                "name": "sender"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "buffer"
          },
          {
            "kind": "FIELD",
            "name": "cancelled"
          },
          {
            "kind": "FIELD",
            "name": "completions"
          },
          {
            "kind": "METHOD",
            "name": "getBuffer()",
            "comment": {
              "body": "Return the entire buffer which formed the basis of this completion.",
              "tags": "Returns command buffer, as entered.",
              "plain": "Return the entire buffer which formed the basis of this completion.\n@return command buffer, as entered"
            }
          },
          {
            "kind": "METHOD",
            "name": "getCompletions()",
            "comment": {
              "body": "The list of completions which will be offered to the sender, in order.\n This list is mutable and reflects what will be offered.",
              "tags": "Returns a list of offered completions.",
              "plain": "The list of completions which will be offered to the sender, in order.\n This list is mutable and reflects what will be offered.\n@return a list of offered completions"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getLocation()",
            "comment": {
              "tags": "Returns The position looked at by the sender, or null if none.",
              "plain": "@return The position looked at by the sender, or null if none"
            }
          },
          {
            "kind": "METHOD",
            "name": "getSender()",
            "comment": {
              "body": "Get the sender completing this command.",
              "tags": "Returns the \u003ca href\u003d\"org/bukkit/command/CommandSender.html\" title\u003d\"interface in org.bukkit.command\"\u003e\u003ccode\u003eCommandSender\u003c/code\u003e\u003c/a\u003e instance.",
              "plain": "Get the sender completing this command.\n@return the {@link CommandSender} instance"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "FIELD",
            "name": "isCommand"
          },
          {
            "kind": "METHOD",
            "name": "isCommand()",
            "comment": {
              "tags": "Returns True if it is a command being tab completed, false if it is a chat message..",
              "plain": "@return True if it is a command being tab completed, false if it is a chat message."
            }
          },
          {
            "kind": "FIELD",
            "name": "loc"
          },
          {
            "kind": "FIELD",
            "name": "sender"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancelled"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "setCompletions(java.util.List\u003cjava.lang.String\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "completions"
              }
            ],
            "comment": {
              "body": "Set the completions offered, overriding any already set.\n\n The passed collection will be cloned to a new List. You must call {\u003ca href\u003d\"org/bukkit/event/server/TabCompleteEvent.html#getCompletions()\"\u003e\u003ccode\u003eTabCompleteEvent.getCompletions()\u003c/code\u003e\u003c/a\u003e} to mutate from here",
              "plain": "Set the completions offered, overriding any already set.\n\n The passed collection will be cloned to a new List. You must call {{@link #getCompletions()}} to mutate from here\n@param completions the new completions"
            }
          }
        ],
        "comment": {
          "body": "Called when a \u003ca href\u003d\"org/bukkit/command/CommandSender.html\" title\u003d\"interface in org.bukkit.command\"\u003e\u003ccode\u003eCommandSender\u003c/code\u003e\u003c/a\u003e of any description (ie: player or\n console) attempts to tab complete.",
          "plain": "Called when a {@link CommandSender} of any description (ie: player or\n console) attempts to tab complete."
        }
      }
    ]
  },
  {
    "kind": "PACKAGE",
    "name": "org.bukkit.event.vehicle",
    "children": [
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.vehicle.VehicleBlockCollisionEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "VehicleBlockCollisionEvent(org.bukkit.entity.Vehicle,org.bukkit.block.Block)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "block"
              },
              {
                "kind": "PARAMETER",
                "name": "vehicle"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "block"
          },
          {
            "kind": "METHOD",
            "name": "getBlock()",
            "comment": {
              "body": "Gets the block the vehicle collided with",
              "tags": "Returns the block the vehicle collided with.",
              "plain": "Gets the block the vehicle collided with\n@return the block the vehicle collided with"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          }
        ],
        "comment": {
          "body": "Raised when a vehicle collides with a block.",
          "plain": "Raised when a vehicle collides with a block."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.vehicle.VehicleCollisionEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "VehicleCollisionEvent(org.bukkit.entity.Vehicle)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "vehicle"
              }
            ]
          }
        ],
        "comment": {
          "body": "Raised when a vehicle collides.",
          "plain": "Raised when a vehicle collides."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.vehicle.VehicleCreateEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "VehicleCreateEvent(org.bukkit.entity.Vehicle)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "vehicle"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "cancelled"
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancelled"
              }
            ]
          }
        ],
        "comment": {
          "body": "Raised when a vehicle is created.",
          "plain": "Raised when a vehicle is created."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.vehicle.VehicleDamageEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "VehicleDamageEvent(org.bukkit.entity.Vehicle,org.bukkit.entity.Entity,double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "attacker"
              },
              {
                "kind": "PARAMETER",
                "name": "damage"
              },
              {
                "kind": "PARAMETER",
                "name": "vehicle"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "attacker"
          },
          {
            "kind": "FIELD",
            "name": "cancelled"
          },
          {
            "kind": "FIELD",
            "name": "damage"
          },
          {
            "kind": "METHOD",
            "name": "getAttacker()",
            "comment": {
              "body": "Gets the Entity that is attacking the vehicle",
              "tags": "Returns the Entity that is attacking the vehicle.",
              "plain": "Gets the Entity that is attacking the vehicle\n@return the Entity that is attacking the vehicle"
            }
          },
          {
            "kind": "METHOD",
            "name": "getDamage()",
            "comment": {
              "body": "Gets the damage done to the vehicle",
              "tags": "Returns the damage done to the vehicle.",
              "plain": "Gets the damage done to the vehicle\n@return the damage done to the vehicle"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "setDamage(double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "damage"
              }
            ],
            "comment": {
              "body": "Sets the damage done to the vehicle",
              "plain": "Sets the damage done to the vehicle\n@param damage The damage"
            }
          }
        ],
        "comment": {
          "body": "Raised when a vehicle receives damage.",
          "plain": "Raised when a vehicle receives damage."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.vehicle.VehicleDestroyEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "VehicleDestroyEvent(org.bukkit.entity.Vehicle,org.bukkit.entity.Entity)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "attacker"
              },
              {
                "kind": "PARAMETER",
                "name": "vehicle"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "attacker"
          },
          {
            "kind": "FIELD",
            "name": "cancelled"
          },
          {
            "kind": "METHOD",
            "name": "getAttacker()",
            "comment": {
              "body": "Gets the Entity that has destroyed the vehicle, potentially null",
              "tags": "Returns the Entity that has destroyed the vehicle, potentially null.",
              "plain": "Gets the Entity that has destroyed the vehicle, potentially null\n@return the Entity that has destroyed the vehicle, potentially null"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          }
        ],
        "comment": {
          "body": "Raised when a vehicle is destroyed, which could be caused by either a\n player or the environment. This is not raised if the boat is simply\n \u0027removed\u0027 due to other means.",
          "plain": "Raised when a vehicle is destroyed, which could be caused by either a\n player or the environment. This is not raised if the boat is simply\n \u0027removed\u0027 due to other means."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.vehicle.VehicleEnterEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "VehicleEnterEvent(org.bukkit.entity.Vehicle,org.bukkit.entity.Entity)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "entered"
              },
              {
                "kind": "PARAMETER",
                "name": "vehicle"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "cancelled"
          },
          {
            "kind": "FIELD",
            "name": "entered"
          },
          {
            "kind": "METHOD",
            "name": "getEntered()",
            "comment": {
              "body": "Gets the Entity that entered the vehicle.",
              "tags": "Returns the Entity that entered the vehicle.",
              "plain": "Gets the Entity that entered the vehicle.\n@return the Entity that entered the vehicle"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          }
        ],
        "comment": {
          "body": "Raised when an entity enters a vehicle.",
          "plain": "Raised when an entity enters a vehicle."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.vehicle.VehicleEntityCollisionEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "VehicleEntityCollisionEvent(org.bukkit.entity.Vehicle,org.bukkit.entity.Entity)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "entity"
              },
              {
                "kind": "PARAMETER",
                "name": "vehicle"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "cancelled"
          },
          {
            "kind": "FIELD",
            "name": "cancelledCollision"
          },
          {
            "kind": "FIELD",
            "name": "cancelledPickup"
          },
          {
            "kind": "FIELD",
            "name": "entity"
          },
          {
            "kind": "METHOD",
            "name": "getEntity()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "METHOD",
            "name": "isCollisionCancelled()"
          },
          {
            "kind": "METHOD",
            "name": "isPickupCancelled()"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "setCollisionCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "setPickupCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          }
        ],
        "comment": {
          "body": "Raised when a vehicle collides with an entity.",
          "plain": "Raised when a vehicle collides with an entity."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.vehicle.VehicleEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "VehicleEvent(org.bukkit.entity.Vehicle)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "vehicle"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getVehicle()",
            "comment": {
              "body": "Get the vehicle.",
              "tags": "Returns the vehicle.",
              "plain": "Get the vehicle.\n@return the vehicle"
            }
          },
          {
            "kind": "FIELD",
            "name": "vehicle"
          }
        ],
        "comment": {
          "body": "Represents a vehicle-related event.",
          "plain": "Represents a vehicle-related event."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.vehicle.VehicleExitEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "VehicleExitEvent(org.bukkit.entity.Vehicle,org.bukkit.entity.LivingEntity)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "exited"
              },
              {
                "kind": "PARAMETER",
                "name": "vehicle"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "cancelled"
          },
          {
            "kind": "FIELD",
            "name": "exited"
          },
          {
            "kind": "METHOD",
            "name": "getExited()",
            "comment": {
              "body": "Get the living entity that exited the vehicle.",
              "tags": "Returns The entity..",
              "plain": "Get the living entity that exited the vehicle.\n@return The entity."
            }
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          }
        ],
        "comment": {
          "body": "Raised when a living entity exits a vehicle.",
          "plain": "Raised when a living entity exits a vehicle."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.vehicle.VehicleMoveEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "VehicleMoveEvent(org.bukkit.entity.Vehicle,org.bukkit.Location,org.bukkit.Location)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "from"
              },
              {
                "kind": "PARAMETER",
                "name": "to"
              },
              {
                "kind": "PARAMETER",
                "name": "vehicle"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "from"
          },
          {
            "kind": "METHOD",
            "name": "getFrom()",
            "comment": {
              "body": "Get the previous position.",
              "tags": "Returns Old position..",
              "plain": "Get the previous position.\n@return Old position."
            }
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getTo()",
            "comment": {
              "body": "Get the next position.",
              "tags": "Returns New position..",
              "plain": "Get the next position.\n@return New position."
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "FIELD",
            "name": "to"
          }
        ],
        "comment": {
          "body": "Raised when a vehicle moves.",
          "plain": "Raised when a vehicle moves."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.vehicle.VehicleUpdateEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "VehicleUpdateEvent(org.bukkit.entity.Vehicle)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "vehicle"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          }
        ],
        "comment": {
          "body": "Called when a vehicle updates",
          "plain": "Called when a vehicle updates"
        }
      }
    ]
  },
  {
    "kind": "PACKAGE",
    "name": "org.bukkit.event.weather",
    "children": [
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.weather.LightningStrikeEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "LightningStrikeEvent(org.bukkit.World,org.bukkit.entity.LightningStrike)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "bolt"
              },
              {
                "kind": "PARAMETER",
                "name": "world"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "bolt"
          },
          {
            "kind": "FIELD",
            "name": "canceled"
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getLightning()",
            "comment": {
              "body": "Gets the bolt which is striking the earth.",
              "tags": "Returns lightning entity.",
              "plain": "Gets the bolt which is striking the earth.\n@return lightning entity"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          }
        ],
        "comment": {
          "body": "Stores data for lightning striking",
          "plain": "Stores data for lightning striking"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.weather.ThunderChangeEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "ThunderChangeEvent(org.bukkit.World,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "to"
              },
              {
                "kind": "PARAMETER",
                "name": "world"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "canceled"
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "to"
          },
          {
            "kind": "METHOD",
            "name": "toThunderState()",
            "comment": {
              "body": "Gets the state of thunder that the world is being set to",
              "tags": "Returns true if the weather is being set to thundering, false otherwise.",
              "plain": "Gets the state of thunder that the world is being set to\n@return true if the weather is being set to thundering, false otherwise"
            }
          }
        ],
        "comment": {
          "body": "Stores data for thunder state changing in a world",
          "plain": "Stores data for thunder state changing in a world"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.weather.WeatherChangeEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "WeatherChangeEvent(org.bukkit.World,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "to"
              },
              {
                "kind": "PARAMETER",
                "name": "world"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "canceled"
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "to"
          },
          {
            "kind": "METHOD",
            "name": "toWeatherState()",
            "comment": {
              "body": "Gets the state of weather that the world is being set to",
              "tags": "Returns true if the weather is being set to raining, false otherwise.",
              "plain": "Gets the state of weather that the world is being set to\n@return true if the weather is being set to raining, false otherwise"
            }
          }
        ],
        "comment": {
          "body": "Stores data for weather changing in a world",
          "plain": "Stores data for weather changing in a world"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.weather.WeatherEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "WeatherEvent(org.bukkit.World)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "where"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getWorld()",
            "comment": {
              "body": "Returns the World where this event is occurring",
              "tags": "Returns World this event is occurring in.",
              "plain": "Returns the World where this event is occurring\n@return World this event is occurring in"
            }
          },
          {
            "kind": "FIELD",
            "name": "world"
          }
        ],
        "comment": {
          "body": "Represents a Weather-related event",
          "plain": "Represents a Weather-related event"
        }
      }
    ]
  },
  {
    "kind": "PACKAGE",
    "name": "org.bukkit.event.world",
    "children": [
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.world.ChunkEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "ChunkEvent(org.bukkit.Chunk)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "chunk"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "chunk"
          },
          {
            "kind": "METHOD",
            "name": "getChunk()",
            "comment": {
              "body": "Gets the chunk being loaded/unloaded",
              "tags": "Returns Chunk that triggered this event.",
              "plain": "Gets the chunk being loaded/unloaded\n@return Chunk that triggered this event"
            }
          }
        ],
        "comment": {
          "body": "Represents a Chunk related event",
          "plain": "Represents a Chunk related event"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.world.ChunkLoadEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "ChunkLoadEvent(org.bukkit.Chunk,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "chunk"
              },
              {
                "kind": "PARAMETER",
                "name": "newChunk"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isNewChunk()",
            "comment": {
              "body": "Gets if this chunk was newly created or not.\n \u003cp\u003e\n Note that if this chunk is new, it will not be populated at this time.",
              "tags": "Returns true if the chunk is new, otherwise false.",
              "plain": "Gets if this chunk was newly created or not.\n \u003cp\u003e\n Note that if this chunk is new, it will not be populated at this time.\n@return true if the chunk is new, otherwise false"
            }
          },
          {
            "kind": "FIELD",
            "name": "newChunk"
          }
        ],
        "comment": {
          "body": "Called when a chunk is loaded",
          "plain": "Called when a chunk is loaded"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.world.ChunkPopulateEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "ChunkPopulateEvent(org.bukkit.Chunk)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "chunk"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          }
        ],
        "comment": {
          "body": "Thrown when a new chunk has finished being populated.\n \u003cp\u003e\n If your intent is to populate the chunk using this event, please see \u003ca href\u003d\"org/bukkit/generator/BlockPopulator.html\" title\u003d\"class in org.bukkit.generator\"\u003e\u003ccode\u003eBlockPopulator\u003c/code\u003e\u003c/a\u003e",
          "plain": "Thrown when a new chunk has finished being populated.\n \u003cp\u003e\n If your intent is to populate the chunk using this event, please see {@link BlockPopulator}"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.world.ChunkUnloadEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "ChunkUnloadEvent(org.bukkit.Chunk)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "chunk"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "ChunkUnloadEvent(org.bukkit.Chunk,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "chunk"
              },
              {
                "kind": "PARAMETER",
                "name": "save"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "cancel"
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "METHOD",
            "name": "isSaveChunk()",
            "comment": {
              "body": "Return whether this chunk will be saved to disk.",
              "tags": "Returns chunk save status.",
              "plain": "Return whether this chunk will be saved to disk.\n@return chunk save status"
            }
          },
          {
            "kind": "FIELD",
            "name": "saveChunk"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "setSaveChunk(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "saveChunk"
              }
            ],
            "comment": {
              "body": "Set whether this chunk will be saved to disk.",
              "plain": "Set whether this chunk will be saved to disk.\n@param saveChunk chunk save status"
            }
          }
        ],
        "comment": {
          "body": "Called when a chunk is unloaded",
          "plain": "Called when a chunk is unloaded"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.world.PortalCreateEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PortalCreateEvent(java.util.Collection\u003corg.bukkit.block.Block\u003e,org.bukkit.World,org.bukkit.event.world.PortalCreateEvent.CreateReason)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "blocks"
              },
              {
                "kind": "PARAMETER",
                "name": "reason"
              },
              {
                "kind": "PARAMETER",
                "name": "world"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "blocks"
          },
          {
            "kind": "FIELD",
            "name": "cancel"
          },
          {
            "kind": "METHOD",
            "name": "getBlocks()",
            "comment": {
              "body": "Gets an array list of all the blocks associated with the created portal",
              "tags": "Returns array list of all the blocks associated with the created portal.",
              "plain": "Gets an array list of all the blocks associated with the created portal\n@return array list of all the blocks associated with the created portal"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getReason()",
            "comment": {
              "body": "Gets the reason for the portal\u0027s creation",
              "tags": "Returns CreateReason for the portal\u0027s creation.",
              "plain": "Gets the reason for the portal\u0027s creation\n@return CreateReason for the portal\u0027s creation"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "ENUM",
            "name": "org.bukkit.event.world.PortalCreateEvent.CreateReason",
            "children": [
              {
                "kind": "CONSTRUCTOR",
                "name": "CreateReason()"
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "FIRE",
                "comment": {
                  "body": "When a portal is created \u0027traditionally\u0027 due to a portal frame\n being set on fire.",
                  "plain": "When a portal is created \u0027traditionally\u0027 due to a portal frame\n being set on fire."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "OBC_DESTINATION",
                "comment": {
                  "body": "When a portal is created as a destination for an existing portal\n when using the custom PortalTravelAgent",
                  "plain": "When a portal is created as a destination for an existing portal\n when using the custom PortalTravelAgent"
                }
              },
              {
                "kind": "METHOD",
                "name": "valueOf(java.lang.String)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "name"
                  }
                ]
              },
              {
                "kind": "METHOD",
                "name": "values()"
              }
            ],
            "comment": {
              "body": "An enum to specify the various reasons for a portal\u0027s creation",
              "plain": "An enum to specify the various reasons for a portal\u0027s creation"
            }
          },
          {
            "kind": "FIELD",
            "name": "reason"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          }
        ],
        "comment": {
          "body": "Called when a portal is created",
          "plain": "Called when a portal is created"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.world.SpawnChangeEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "SpawnChangeEvent(org.bukkit.World,org.bukkit.Location)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "previousLocation"
              },
              {
                "kind": "PARAMETER",
                "name": "world"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getPreviousLocation()",
            "comment": {
              "body": "Gets the previous spawn location",
              "tags": "Returns Location that used to be spawn.",
              "plain": "Gets the previous spawn location\n@return Location that used to be spawn"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "FIELD",
            "name": "previousLocation"
          }
        ],
        "comment": {
          "body": "An event that is called when a world\u0027s spawn changes. The world\u0027s previous\n spawn location is included.",
          "plain": "An event that is called when a world\u0027s spawn changes. The world\u0027s previous\n spawn location is included."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.world.StructureGrowEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "StructureGrowEvent(org.bukkit.Location,org.bukkit.TreeType,boolean,org.bukkit.entity.Player,java.util.List\u003corg.bukkit.block.BlockState\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "blocks"
              },
              {
                "kind": "PARAMETER",
                "name": "bonemeal"
              },
              {
                "kind": "PARAMETER",
                "name": "location"
              },
              {
                "kind": "PARAMETER",
                "name": "player"
              },
              {
                "kind": "PARAMETER",
                "name": "species"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "blocks"
          },
          {
            "kind": "FIELD",
            "name": "bonemeal"
          },
          {
            "kind": "FIELD",
            "name": "cancelled"
          },
          {
            "kind": "METHOD",
            "name": "getBlocks()",
            "comment": {
              "body": "Gets an ArrayList of all blocks associated with the structure.",
              "tags": "Returns ArrayList of all blocks associated with the structure..",
              "plain": "Gets an ArrayList of all blocks associated with the structure.\n@return ArrayList of all blocks associated with the structure."
            }
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getLocation()",
            "comment": {
              "body": "Gets the location of the structure.",
              "tags": "Returns Location of the structure.",
              "plain": "Gets the location of the structure.\n@return Location of the structure"
            }
          },
          {
            "kind": "METHOD",
            "name": "getPlayer()",
            "comment": {
              "body": "Gets the player that created the structure.",
              "tags": "Returns Player that created the structure, null if was not created\n     manually.",
              "plain": "Gets the player that created the structure.\n@return Player that created the structure, null if was not created\n     manually"
            }
          },
          {
            "kind": "METHOD",
            "name": "getSpecies()",
            "comment": {
              "body": "Gets the species type (birch, normal, pine, red mushroom, brown\n mushroom)",
              "tags": "Returns Structure species.",
              "plain": "Gets the species type (birch, normal, pine, red mushroom, brown\n mushroom)\n@return Structure species"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "METHOD",
            "name": "isFromBonemeal()",
            "comment": {
              "body": "Checks if structure was grown using bonemeal.",
              "tags": "Returns True if the structure was grown using bonemeal..",
              "plain": "Checks if structure was grown using bonemeal.\n@return True if the structure was grown using bonemeal."
            }
          },
          {
            "kind": "FIELD",
            "name": "location"
          },
          {
            "kind": "FIELD",
            "name": "player"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "species"
          }
        ],
        "comment": {
          "body": "Event that is called when an organic structure attempts to grow (Sapling -\u0026gt;\n Tree), (Mushroom -\u0026gt; Huge Mushroom), naturally or using bonemeal.",
          "plain": "Event that is called when an organic structure attempts to grow (Sapling {@literal -\u003e}\n Tree), (Mushroom {@literal -\u003e} Huge Mushroom), naturally or using bonemeal."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.world.WorldEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "WorldEvent(org.bukkit.World)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "world"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getWorld()",
            "comment": {
              "body": "Gets the world primarily involved with this event",
              "tags": "Returns World which caused this event.",
              "plain": "Gets the world primarily involved with this event\n@return World which caused this event"
            }
          },
          {
            "kind": "FIELD",
            "name": "world"
          }
        ],
        "comment": {
          "body": "Represents events within a world",
          "plain": "Represents events within a world"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.world.WorldInitEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "WorldInitEvent(org.bukkit.World)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "world"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          }
        ],
        "comment": {
          "body": "Called when a World is initializing",
          "plain": "Called when a World is initializing"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.world.WorldLoadEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "WorldLoadEvent(org.bukkit.World)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "world"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          }
        ],
        "comment": {
          "body": "Called when a World is loaded",
          "plain": "Called when a World is loaded"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.world.WorldSaveEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "WorldSaveEvent(org.bukkit.World)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "world"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          }
        ],
        "comment": {
          "body": "Called when a World is saved.",
          "plain": "Called when a World is saved."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.event.world.WorldUnloadEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "WorldUnloadEvent(org.bukkit.World)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "world"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "FIELD",
            "name": "isCancelled"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          }
        ],
        "comment": {
          "body": "Called when a World is unloaded",
          "plain": "Called when a World is unloaded"
        }
      }
    ]
  },
  {
    "kind": "PACKAGE",
    "name": "org.bukkit.generator",
    "children": [
      {
        "kind": "CLASS",
        "name": "org.bukkit.generator.BlockPopulator",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "BlockPopulator()"
          },
          {
            "kind": "METHOD",
            "name": "populate(org.bukkit.World,java.util.Random,org.bukkit.Chunk)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "random"
              },
              {
                "kind": "PARAMETER",
                "name": "source"
              },
              {
                "kind": "PARAMETER",
                "name": "world"
              }
            ],
            "comment": {
              "body": "Populates an area of blocks at or around the given chunk.\n \u003cp\u003e\n The chunks on each side of the specified chunk must already exist; that\n is, there must be one north, east, south and west of the specified\n chunk. The \"corner\" chunks may not exist, in which scenario the\n populator should record any changes required for those chunks and\n perform the changes when they are ready.",
              "plain": "Populates an area of blocks at or around the given chunk.\n \u003cp\u003e\n The chunks on each side of the specified chunk must already exist; that\n is, there must be one north, east, south and west of the specified\n chunk. The \"corner\" chunks may not exist, in which scenario the\n populator should record any changes required for those chunks and\n perform the changes when they are ready.\n@param world The world to generate in\n@param random The random generator to use\n@param source The chunk to generate for"
            }
          }
        ],
        "comment": {
          "body": "A block populator is responsible for generating a small area of blocks.\n \u003cp\u003e\n For example, generating glowstone inside the nether or generating dungeons\n full of treasure",
          "plain": "A block populator is responsible for generating a small area of blocks.\n \u003cp\u003e\n For example, generating glowstone inside the nether or generating dungeons\n full of treasure"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.generator.ChunkGenerator",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "ChunkGenerator()"
          },
          {
            "kind": "METHOD",
            "name": "canSpawn(org.bukkit.World,int,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "world"
              },
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ],
            "comment": {
              "body": "Tests if the specified location is valid for a natural spawn position",
              "tags": "Returns true if the location is valid, otherwise false.",
              "plain": "Tests if the specified location is valid for a natural spawn position\n@param world The world we\u0027re testing on\n@param x X-coordinate of the block to test\n@param z Z-coordinate of the block to test\n@return true if the location is valid, otherwise false"
            }
          },
          {
            "kind": "METHOD",
            "name": "createChunkData(org.bukkit.World)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "world"
              }
            ],
            "comment": {
              "body": "Create a ChunkData for a world.",
              "tags": "Returns a new ChunkData for world.",
              "plain": "Create a ChunkData for a world.\n@param world the world the ChunkData is for\n@return a new ChunkData for world"
            }
          },
          {
            "kind": "METHOD",
            "name": "generate(org.bukkit.World,java.util.Random,int,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "random"
              },
              {
                "kind": "PARAMETER",
                "name": "world"
              },
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            }
          },
          {
            "kind": "METHOD",
            "name": "generateBlockSections(org.bukkit.World,java.util.Random,int,int,org.bukkit.generator.ChunkGenerator.BiomeGrid)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "biomes"
              },
              {
                "kind": "PARAMETER",
                "name": "random"
              },
              {
                "kind": "PARAMETER",
                "name": "world"
              },
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Shapes the chunk for the given coordinates.\n \u003cp\u003e\n As of 1.2, chunks are represented by a vertical array of chunk\n sections, each of which is 16 x 16 x 16 blocks.  If a section is empty\n (all zero), the section does not need to be supplied, reducing memory\n usage.\n \u003cp\u003e\n This method must return a byte[][] array in the following format:\n \u003cpre\u003e\n     byte[][] result \u003d new byte[world-height / 16][];\n \u003c/pre\u003e\n Each section \u003ccode\u003e(sectionID \u003d (Y\u0026gt;\u0026gt;4))\u003c/code\u003e that has blocks needs to be allocated\n space for the 4096 blocks in that section:\n \u003cpre\u003e\n     result[sectionID] \u003d new byte[4096];\n \u003c/pre\u003e\n while sections that are not populated can be left null.\n \u003cp\u003e\n Setting a block at X, Y, Z within the chunk can be done with the\n following mapping function:\n \u003cpre\u003e\n    void setBlock(byte[][] result, int x, int y, int z, byte blkid) {\n        \u003ccode\u003eif (result[y \u0026gt;\u0026gt; 4) \u003d\u003d null) {}\n            {@code result[y \u0026gt;\u0026gt; 4] \u003d new byte[4096];}\n        \u003c/code\u003e\n        \u003ccode\u003eresult[y \u0026gt;\u0026gt; 4][((y \u0026amp; 0xF) \u0026lt;\u0026lt; 8) | (z \u0026lt;\u0026lt; 4) | x] \u003d blkid;\u003c/code\u003e\n    }\n \u003c/pre\u003e\n while reading a block ID can be done with the following mapping\n function:\n \u003cpre\u003e\n    byte getBlock(byte[][] result, int x, int y, int z) {\n        \u003ccode\u003eif (result[y \u0026gt;\u0026gt; 4) \u003d\u003d null) {}\n            return (byte)0;\n        \u003c/code\u003e\n        \u003ccode\u003ereturn result[y \u0026gt;\u0026gt; 4][((y \u0026amp; 0xF) \u0026lt;\u0026lt; 8) | (z \u0026lt;\u0026lt; 4) | x];\u003c/code\u003e\n    }\n \u003c/pre\u003e\n\n Note that this method should \u003cb\u003enever\u003c/b\u003e attempt to get the Chunk at\n the passed coordinates, as doing so may cause an infinite loop",
              "tags": "Returns short[][] containing the types for each block created by this\n     generator.",
              "plain": "Shapes the chunk for the given coordinates.\n \u003cp\u003e\n As of 1.2, chunks are represented by a vertical array of chunk\n sections, each of which is 16 x 16 x 16 blocks.  If a section is empty\n (all zero), the section does not need to be supplied, reducing memory\n usage.\n \u003cp\u003e\n This method must return a byte[][] array in the following format:\n \u003cpre\u003e\n     byte[][] result \u003d new byte[world-height / 16][];\n \u003c/pre\u003e\n Each section {@code (sectionID \u003d (Y\u003e\u003e4))} that has blocks needs to be allocated\n space for the 4096 blocks in that section:\n \u003cpre\u003e\n     result[sectionID] \u003d new byte[4096];\n \u003c/pre\u003e\n while sections that are not populated can be left null.\n \u003cp\u003e\n Setting a block at X, Y, Z within the chunk can be done with the\n following mapping function:\n \u003cpre\u003e\n    void setBlock(byte[][] result, int x, int y, int z, byte blkid) {\n        {@code if (result[y \u003e\u003e 4) \u003d\u003d null) {}\n            {@code result[y \u003e\u003e 4] \u003d new byte[4096];}\n        }\n        {@code result[y \u003e\u003e 4][((y \u0026 0xF) \u003c\u003c 8) | (z \u003c\u003c 4) | x] \u003d blkid;}\n    }\n \u003c/pre\u003e\n while reading a block ID can be done with the following mapping\n function:\n \u003cpre\u003e\n    byte getBlock(byte[][] result, int x, int y, int z) {\n        {@code if (result[y \u003e\u003e 4) \u003d\u003d null) {}\n            return (byte)0;\n        }\n        {@code return result[y \u003e\u003e 4][((y \u0026 0xF) \u003c\u003c 8) | (z \u003c\u003c 4) | x];}\n    }\n \u003c/pre\u003e\n\n Note that this method should \u003cb\u003enever\u003c/b\u003e attempt to get the Chunk at\n the passed coordinates, as doing so may cause an infinite loop\n@param world The world this chunk will be used for\n@param random The random generator to use\n@param x The X-coordinate of the chunk\n@param z The Z-coordinate of the chunk\n@param biomes Proposed biome values for chunk - can be updated by\n     generator\n@return short[][] containing the types for each block created by this\n     generator\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "generateChunkData(org.bukkit.World,java.util.Random,int,int,org.bukkit.generator.ChunkGenerator.BiomeGrid)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "biome"
              },
              {
                "kind": "PARAMETER",
                "name": "random"
              },
              {
                "kind": "PARAMETER",
                "name": "world"
              },
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ],
            "comment": {
              "body": "Shapes the chunk for the given coordinates.\n \n This method must return a ChunkData.\n \u003cp\u003e\n Notes:\n \u003cp\u003e\n This method should \u003cb\u003enever\u003c/b\u003e attempt to get the Chunk at\n the passed coordinates, as doing so may cause an infinite loop\n \u003cp\u003e\n This method should \u003cb\u003enever\u003c/b\u003e modify a ChunkData after it has\n been returned.\n \u003cp\u003e\n This method \u003cb\u003emust\u003c/b\u003e return a ChunkData returned by \u003ccode\u003eChunkGenerator.createChunkData(org.bukkit.World)\u003c/code\u003e",
              "tags": "Returns ChunkData containing the types for each block created by this\n     generator.",
              "plain": "Shapes the chunk for the given coordinates.\n \n This method must return a ChunkData.\n \u003cp\u003e\n Notes:\n \u003cp\u003e\n This method should \u003cb\u003enever\u003c/b\u003e attempt to get the Chunk at\n the passed coordinates, as doing so may cause an infinite loop\n \u003cp\u003e\n This method should \u003cb\u003enever\u003c/b\u003e modify a ChunkData after it has\n been returned.\n \u003cp\u003e\n This method \u003cb\u003emust\u003c/b\u003e return a ChunkData returned by {@link ChunkGenerator#createChunkData(org.bukkit.World)}\n@param world The world this chunk will be used for\n@param random The random generator to use\n@param x The X-coordinate of the chunk\n@param z The Z-coordinate of the chunk\n@param biome Proposed biome values for chunk - can be updated by\n     generator\n@return ChunkData containing the types for each block created by this\n     generator"
            }
          },
          {
            "kind": "METHOD",
            "name": "generateExtBlockSections(org.bukkit.World,java.util.Random,int,int,org.bukkit.generator.ChunkGenerator.BiomeGrid)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "biomes"
              },
              {
                "kind": "PARAMETER",
                "name": "random"
              },
              {
                "kind": "PARAMETER",
                "name": "world"
              },
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Shapes the chunk for the given coordinates, with extended block IDs\n supported (0-4095).\n \u003cp\u003e\n As of 1.2, chunks are represented by a vertical array of chunk\n sections, each of which is 16 x 16 x 16 blocks. If a section is empty\n (all zero), the section does not need to be supplied, reducing memory\n usage.\n \u003cp\u003e\n This method must return a short[][] array in the following format:\n \u003cpre\u003e\n     short[][] result \u003d new short[world-height / 16][];\n \u003c/pre\u003e\n Each section \u003ccode\u003e(sectionID \u003d (Y\u0026gt;\u0026gt;4))\u003c/code\u003e that has blocks needs to be allocated\n space for the 4096 blocks in that section:\n \u003cpre\u003e\n     result[sectionID] \u003d new short[4096];\n \u003c/pre\u003e\n while sections that are not populated can be left null.\n \u003cp\u003e\n Setting a block at X, Y, Z within the chunk can be done with the\n following mapping function:\n \u003cpre\u003e\n    void setBlock(short[][] result, int x, int y, int z, short blkid) {\n        \u003ccode\u003eif (result[y \u0026gt;\u0026gt; 4] \u003d\u003d null) {}\n            {@code result[y \u0026gt;\u0026gt; 4] \u003d new short[4096];}\n        \u003c/code\u003e\n        \u003ccode\u003eresult[y \u0026gt;\u0026gt; 4][((y \u0026amp; 0xF) \u0026lt;\u0026lt; 8) | (z \u0026lt;\u0026lt; 4) | x] \u003d blkid;\u003c/code\u003e\n    }\n \u003c/pre\u003e\n while reading a block ID can be done with the following mapping\n function:\n \u003cpre\u003e\n    short getBlock(short[][] result, int x, int y, int z) {\n        \u003ccode\u003eif (result[y \u0026gt;\u0026gt; 4] \u003d\u003d null) {}\n            return (short)0;\n        \u003c/code\u003e\n        \u003ccode\u003ereturn result[y \u0026gt;\u0026gt; 4][((y \u0026amp; 0xF) \u0026lt;\u0026lt; 8) | (z \u0026lt;\u0026lt; 4) | x];\u003c/code\u003e\n    }\n \u003c/pre\u003e\n while sections that are not populated can be left null.\n \u003cp\u003e\n Setting a block at X, Y, Z within the chunk can be done with the\n following mapping function:\n \u003cpre\u003e\n    void setBlock(short[][] result, int x, int y, int z, short blkid) {\n        \u003ccode\u003eif (result[y \u0026gt;\u0026gt; 4) \u003d\u003d null) {}\n            {@code result[y \u0026gt;\u0026gt; 4] \u003d new short[4096];}\n        \u003c/code\u003e\n        \u003ccode\u003eresult[y \u0026gt;\u0026gt; 4][((y \u0026amp; 0xF) \u0026lt;\u0026lt; 8) | (z \u0026lt;\u0026lt; 4) | x] \u003d blkid;\u003c/code\u003e\n    }\n \u003c/pre\u003e\n while reading a block ID can be done with the following mapping\n function:\n \u003cpre\u003e\n    short getBlock(short[][] result, int x, int y, int z) {\n        \u003ccode\u003eif (result[y \u0026gt;\u0026gt; 4) \u003d\u003d null) {}\n            return (short)0;\n        \u003c/code\u003e\n        \u003ccode\u003ereturn result[y \u0026gt;\u0026gt; 4][((y \u0026amp; 0xF) \u0026lt;\u0026lt; 8) | (z \u0026lt;\u0026lt; 4) | x];\u003c/code\u003e\n    }\n \u003c/pre\u003e\n \u003cp\u003e\n Note that this method should \u003cb\u003enever\u003c/b\u003e attempt to get the Chunk at\n the passed coordinates, as doing so may cause an infinite loop\n \u003cp\u003e\n Note generators that do not return block IDs above 255 should not\n implement this method, or should have it return null (which will result\n in the generateBlockSections() method being called).",
              "tags": "Returns short[][] containing the types for each block created by this\n     generator.",
              "plain": "Shapes the chunk for the given coordinates, with extended block IDs\n supported (0-4095).\n \u003cp\u003e\n As of 1.2, chunks are represented by a vertical array of chunk\n sections, each of which is 16 x 16 x 16 blocks. If a section is empty\n (all zero), the section does not need to be supplied, reducing memory\n usage.\n \u003cp\u003e\n This method must return a short[][] array in the following format:\n \u003cpre\u003e\n     short[][] result \u003d new short[world-height / 16][];\n \u003c/pre\u003e\n Each section {@code (sectionID \u003d (Y\u003e\u003e4))} that has blocks needs to be allocated\n space for the 4096 blocks in that section:\n \u003cpre\u003e\n     result[sectionID] \u003d new short[4096];\n \u003c/pre\u003e\n while sections that are not populated can be left null.\n \u003cp\u003e\n Setting a block at X, Y, Z within the chunk can be done with the\n following mapping function:\n \u003cpre\u003e\n    void setBlock(short[][] result, int x, int y, int z, short blkid) {\n        {@code if (result[y \u003e\u003e 4] \u003d\u003d null) {}\n            {@code result[y \u003e\u003e 4] \u003d new short[4096];}\n        }\n        {@code result[y \u003e\u003e 4][((y \u0026 0xF) \u003c\u003c 8) | (z \u003c\u003c 4) | x] \u003d blkid;}\n    }\n \u003c/pre\u003e\n while reading a block ID can be done with the following mapping\n function:\n \u003cpre\u003e\n    short getBlock(short[][] result, int x, int y, int z) {\n        {@code if (result[y \u003e\u003e 4] \u003d\u003d null) {}\n            return (short)0;\n        }\n        {@code return result[y \u003e\u003e 4][((y \u0026 0xF) \u003c\u003c 8) | (z \u003c\u003c 4) | x];}\n    }\n \u003c/pre\u003e\n while sections that are not populated can be left null.\n \u003cp\u003e\n Setting a block at X, Y, Z within the chunk can be done with the\n following mapping function:\n \u003cpre\u003e\n    void setBlock(short[][] result, int x, int y, int z, short blkid) {\n        {@code if (result[y \u003e\u003e 4) \u003d\u003d null) {}\n            {@code result[y \u003e\u003e 4] \u003d new short[4096];}\n        }\n        {@code result[y \u003e\u003e 4][((y \u0026 0xF) \u003c\u003c 8) | (z \u003c\u003c 4) | x] \u003d blkid;}\n    }\n \u003c/pre\u003e\n while reading a block ID can be done with the following mapping\n function:\n \u003cpre\u003e\n    short getBlock(short[][] result, int x, int y, int z) {\n        {@code if (result[y \u003e\u003e 4) \u003d\u003d null) {}\n            return (short)0;\n        }\n        {@code return result[y \u003e\u003e 4][((y \u0026 0xF) \u003c\u003c 8) | (z \u003c\u003c 4) | x];}\n    }\n \u003c/pre\u003e\n \u003cp\u003e\n Note that this method should \u003cb\u003enever\u003c/b\u003e attempt to get the Chunk at\n the passed coordinates, as doing so may cause an infinite loop\n \u003cp\u003e\n Note generators that do not return block IDs above 255 should not\n implement this method, or should have it return null (which will result\n in the generateBlockSections() method being called).\n@param world The world this chunk will be used for\n@param random The random generator to use\n@param x The X-coordinate of the chunk\n@param z The Z-coordinate of the chunk\n@param biomes Proposed biome values for chunk - can be updated by\n     generator\n@return short[][] containing the types for each block created by this\n     generator\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "getDefaultPopulators(org.bukkit.World)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "world"
              }
            ],
            "comment": {
              "body": "Gets a list of default \u003ca href\u003d\"org/bukkit/generator/BlockPopulator.html\" title\u003d\"class in org.bukkit.generator\"\u003e\u003ccode\u003eBlockPopulator\u003c/code\u003e\u003c/a\u003es to apply to a given\n world",
              "tags": "Returns List containing any amount of BlockPopulators.",
              "plain": "Gets a list of default {@link BlockPopulator}s to apply to a given\n world\n@param world World to apply to\n@return List containing any amount of BlockPopulators"
            }
          },
          {
            "kind": "METHOD",
            "name": "getFixedSpawnLocation(org.bukkit.World,java.util.Random)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "random"
              },
              {
                "kind": "PARAMETER",
                "name": "world"
              }
            ],
            "comment": {
              "body": "Gets a fixed spawn location to use for a given world.\n \u003cp\u003e\n A null value is returned if a world should not use a fixed spawn point,\n and will instead attempt to find one randomly.",
              "tags": "Returns Location containing a new spawn point, otherwise null.",
              "plain": "Gets a fixed spawn location to use for a given world.\n \u003cp\u003e\n A null value is returned if a world should not use a fixed spawn point,\n and will instead attempt to find one randomly.\n@param world The world to locate a spawn point for\n@param random Random generator to use in the calculation\n@return Location containing a new spawn point, otherwise null"
            }
          },
          {
            "kind": "INTERFACE",
            "name": "org.bukkit.generator.ChunkGenerator.BiomeGrid",
            "children": [
              {
                "kind": "METHOD",
                "name": "getBiome(int,int)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "x"
                  },
                  {
                    "kind": "PARAMETER",
                    "name": "z"
                  }
                ],
                "comment": {
                  "body": "Get biome at x, z within chunk being generated",
                  "tags": "Returns Biome value.",
                  "plain": "Get biome at x, z within chunk being generated\n@param x - 0-15\n@param z - 0-15\n@return Biome value"
                }
              },
              {
                "kind": "METHOD",
                "name": "setBiome(int,int,org.bukkit.block.Biome)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "bio"
                  },
                  {
                    "kind": "PARAMETER",
                    "name": "x"
                  },
                  {
                    "kind": "PARAMETER",
                    "name": "z"
                  }
                ],
                "comment": {
                  "body": "Set biome at x, z within chunk being generated",
                  "plain": "Set biome at x, z within chunk being generated\n@param x - 0-15\n@param z - 0-15\n@param bio - Biome value"
                }
              }
            ],
            "comment": {
              "body": "Interface to biome section for chunk to be generated: initialized with\n default values for world type and seed.\n \u003cp\u003e\n Custom generator is free to access and tailor values during\n generateBlockSections() or generateExtBlockSections().",
              "plain": "Interface to biome section for chunk to be generated: initialized with\n default values for world type and seed.\n \u003cp\u003e\n Custom generator is free to access and tailor values during\n generateBlockSections() or generateExtBlockSections()."
            }
          },
          {
            "kind": "INTERFACE",
            "name": "org.bukkit.generator.ChunkGenerator.ChunkData",
            "children": [
              {
                "kind": "METHOD",
                "name": "getData(int,int,int)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "x"
                  },
                  {
                    "kind": "PARAMETER",
                    "name": "y"
                  },
                  {
                    "kind": "PARAMETER",
                    "name": "z"
                  }
                ],
                "deprecated": {
                  "deprecated": "true"
                },
                "comment": {
                  "body": "Get the block data at x,y,z in the chunk data.\n\n Getting blocks outside the chunk\u0027s bounds returns 0.",
                  "tags": "Returns the block data value or air if x, y or z are outside the chunk\u0027s bounds.",
                  "plain": "Get the block data at x,y,z in the chunk data.\n\n Getting blocks outside the chunk\u0027s bounds returns 0.\n@param x the x location in the chunk from 0-15 inclusive\n@param y the y location in the chunk from 0 (inclusive) - maxHeight (exclusive)\n@param z the z location in the chunk from 0-15 inclusive\n@return the block data value or air if x, y or z are outside the chunk\u0027s bounds\n@deprecated Uses magic values"
                }
              },
              {
                "kind": "METHOD",
                "name": "getMaxHeight()",
                "comment": {
                  "body": "Get the maximum height for the chunk.\n \n Setting blocks at or above this height will do nothing.",
                  "tags": "Returns the maximum height.",
                  "plain": "Get the maximum height for the chunk.\n \n Setting blocks at or above this height will do nothing.\n@return the maximum height"
                }
              },
              {
                "kind": "METHOD",
                "name": "getType(int,int,int)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "x"
                  },
                  {
                    "kind": "PARAMETER",
                    "name": "y"
                  },
                  {
                    "kind": "PARAMETER",
                    "name": "z"
                  }
                ],
                "comment": {
                  "body": "Get the type of the block at x, y, z.\n\n Getting blocks outside the chunk\u0027s bounds returns air.",
                  "tags": "Returns the type of the block or Material.AIR if x, y or z are outside the chunk\u0027s bounds.",
                  "plain": "Get the type of the block at x, y, z.\n\n Getting blocks outside the chunk\u0027s bounds returns air.\n@param x the x location in the chunk from 0-15 inclusive\n@param y the y location in the chunk from 0 (inclusive) - maxHeight (exclusive)\n@param z the z location in the chunk from 0-15 inclusive\n@return the type of the block or Material.AIR if x, y or z are outside the chunk\u0027s bounds"
                }
              },
              {
                "kind": "METHOD",
                "name": "getTypeAndData(int,int,int)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "x"
                  },
                  {
                    "kind": "PARAMETER",
                    "name": "y"
                  },
                  {
                    "kind": "PARAMETER",
                    "name": "z"
                  }
                ],
                "comment": {
                  "body": "Get the type and data of the block at x, y ,z.\n\n Getting blocks outside the chunk\u0027s bounds returns air.",
                  "tags": "Returns the type and data of the block or the MaterialData for air if x, y or z are outside the chunk\u0027s bounds.",
                  "plain": "Get the type and data of the block at x, y ,z.\n\n Getting blocks outside the chunk\u0027s bounds returns air.\n@param x the x location in the chunk from 0-15 inclusive\n@param y the y location in the chunk from 0 (inclusive) - maxHeight (exclusive)\n@param z the z location in the chunk from 0-15 inclusive\n@return the type and data of the block or the MaterialData for air if x, y or z are outside the chunk\u0027s bounds"
                }
              },
              {
                "kind": "METHOD",
                "name": "getTypeId(int,int,int)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "x"
                  },
                  {
                    "kind": "PARAMETER",
                    "name": "y"
                  },
                  {
                    "kind": "PARAMETER",
                    "name": "z"
                  }
                ],
                "deprecated": {
                  "deprecated": "true"
                },
                "comment": {
                  "body": "Get the blockId at x,y,z in the chunk data.\n\n Getting blocks outside the chunk\u0027s bounds returns 0.",
                  "tags": "Returns the block id or 0 if x, y or z are outside the chunk\u0027s bounds.",
                  "plain": "Get the blockId at x,y,z in the chunk data.\n\n Getting blocks outside the chunk\u0027s bounds returns 0.\n@param x the x location in the chunk from 0-15 inclusive\n@param y the y location in the chunk from 0 (inclusive) - maxHeight (exclusive)\n@param z the z location in the chunk from 0-15 inclusive\n@return the block id or 0 if x, y or z are outside the chunk\u0027s bounds\n@deprecated Uses magic values"
                }
              },
              {
                "kind": "METHOD",
                "name": "setBlock(int,int,int,int)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "blockId"
                  },
                  {
                    "kind": "PARAMETER",
                    "name": "x"
                  },
                  {
                    "kind": "PARAMETER",
                    "name": "y"
                  },
                  {
                    "kind": "PARAMETER",
                    "name": "z"
                  }
                ],
                "deprecated": {
                  "deprecated": "true"
                },
                "comment": {
                  "body": "Set the block at x,y,z in the chunk data to blockId.\n\n Setting blocks outside the chunk\u0027s bounds does nothing.",
                  "plain": "Set the block at x,y,z in the chunk data to blockId.\n\n Setting blocks outside the chunk\u0027s bounds does nothing.\n@param x the x location in the chunk from 0-15 inclusive\n@param y the y location in the chunk from 0 (inclusive) - maxHeight (exclusive)\n@param z the z location in the chunk from 0-15 inclusive\n@param blockId the blockId to set the block to\n@deprecated Uses magic values"
                }
              },
              {
                "kind": "METHOD",
                "name": "setBlock(int,int,int,int,byte)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "blockId"
                  },
                  {
                    "kind": "PARAMETER",
                    "name": "data"
                  },
                  {
                    "kind": "PARAMETER",
                    "name": "x"
                  },
                  {
                    "kind": "PARAMETER",
                    "name": "y"
                  },
                  {
                    "kind": "PARAMETER",
                    "name": "z"
                  }
                ],
                "deprecated": {
                  "deprecated": "true"
                },
                "comment": {
                  "body": "Set the block at x,y,z in the chunk data to blockId.\n\n Setting blocks outside the chunk\u0027s bounds does nothing.",
                  "plain": "Set the block at x,y,z in the chunk data to blockId.\n\n Setting blocks outside the chunk\u0027s bounds does nothing.\n@param x the x location in the chunk from 0-15 inclusive\n@param y the y location in the chunk from 0 (inclusive) - maxHeight (exclusive)\n@param z the z location in the chunk from 0-15 inclusive\n@param blockId the blockId to set the block to\n@param data the block data to set the block to\n@deprecated Uses magic values"
                }
              },
              {
                "kind": "METHOD",
                "name": "setBlock(int,int,int,org.bukkit.Material)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "material"
                  },
                  {
                    "kind": "PARAMETER",
                    "name": "x"
                  },
                  {
                    "kind": "PARAMETER",
                    "name": "y"
                  },
                  {
                    "kind": "PARAMETER",
                    "name": "z"
                  }
                ],
                "comment": {
                  "body": "Set the block at x,y,z in the chunk data to material.\n\n Note: setting blocks outside the chunk\u0027s bounds does nothing.",
                  "plain": "Set the block at x,y,z in the chunk data to material.\n\n Note: setting blocks outside the chunk\u0027s bounds does nothing.\n@param x the x location in the chunk from 0-15 inclusive\n@param y the y location in the chunk from 0 (inclusive) - maxHeight (exclusive)\n@param z the z location in the chunk from 0-15 inclusive\n@param material the type to set the block to"
                }
              },
              {
                "kind": "METHOD",
                "name": "setBlock(int,int,int,org.bukkit.material.MaterialData)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "material"
                  },
                  {
                    "kind": "PARAMETER",
                    "name": "x"
                  },
                  {
                    "kind": "PARAMETER",
                    "name": "y"
                  },
                  {
                    "kind": "PARAMETER",
                    "name": "z"
                  }
                ],
                "comment": {
                  "body": "Set the block at x,y,z in the chunk data to material.\n\n Setting blocks outside the chunk\u0027s bounds does nothing.",
                  "plain": "Set the block at x,y,z in the chunk data to material.\n\n Setting blocks outside the chunk\u0027s bounds does nothing.\n@param x the x location in the chunk from 0-15 inclusive\n@param y the y location in the chunk from 0 (inclusive) - maxHeight (exclusive)\n@param z the z location in the chunk from 0-15 inclusive\n@param material the type to set the block to"
                }
              },
              {
                "kind": "METHOD",
                "name": "setRegion(int,int,int,int,int,int,int)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "blockId"
                  },
                  {
                    "kind": "PARAMETER",
                    "name": "xMax"
                  },
                  {
                    "kind": "PARAMETER",
                    "name": "xMin"
                  },
                  {
                    "kind": "PARAMETER",
                    "name": "yMax"
                  },
                  {
                    "kind": "PARAMETER",
                    "name": "yMin"
                  },
                  {
                    "kind": "PARAMETER",
                    "name": "zMax"
                  },
                  {
                    "kind": "PARAMETER",
                    "name": "zMin"
                  }
                ],
                "deprecated": {
                  "deprecated": "true"
                },
                "comment": {
                  "body": "Set a region of this chunk from xMin, yMin, zMin (inclusive)\n to xMax, yMax, zMax (exclusive) to block id.\n\n Setting blocks outside the chunk\u0027s bounds does nothing.",
                  "plain": "Set a region of this chunk from xMin, yMin, zMin (inclusive)\n to xMax, yMax, zMax (exclusive) to block id.\n\n Setting blocks outside the chunk\u0027s bounds does nothing.\n@param xMin minimum x location (inclusive) in the chunk to set\n@param yMin minimum y location (inclusive) in the chunk to set\n@param zMin minimum z location (inclusive) in the chunk to set\n@param xMax maximum x location (exclusive) in the chunk to set\n@param yMax maximum y location (exclusive) in the chunk to set\n@param zMax maximum z location (exclusive) in the chunk to set\n@param blockId the block id to set the blocks to\n@deprecated Uses magic values."
                }
              },
              {
                "kind": "METHOD",
                "name": "setRegion(int,int,int,int,int,int,int,int)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "blockId"
                  },
                  {
                    "kind": "PARAMETER",
                    "name": "data"
                  },
                  {
                    "kind": "PARAMETER",
                    "name": "xMax"
                  },
                  {
                    "kind": "PARAMETER",
                    "name": "xMin"
                  },
                  {
                    "kind": "PARAMETER",
                    "name": "yMax"
                  },
                  {
                    "kind": "PARAMETER",
                    "name": "yMin"
                  },
                  {
                    "kind": "PARAMETER",
                    "name": "zMax"
                  },
                  {
                    "kind": "PARAMETER",
                    "name": "zMin"
                  }
                ],
                "deprecated": {
                  "deprecated": "true"
                },
                "comment": {
                  "body": "Set a region of this chunk from xMin, yMin, zMin (inclusive)\n to xMax, yMax, zMax (exclusive) to block id and data.\n\n Setting blocks outside the chunk\u0027s bounds does nothing.",
                  "plain": "Set a region of this chunk from xMin, yMin, zMin (inclusive)\n to xMax, yMax, zMax (exclusive) to block id and data.\n\n Setting blocks outside the chunk\u0027s bounds does nothing.\n@param xMin minimum x location (inclusive) in the chunk to set\n@param yMin minimum y location (inclusive) in the chunk to set\n@param zMin minimum z location (inclusive) in the chunk to set\n@param xMax maximum x location (exclusive) in the chunk to set\n@param yMax maximum y location (exclusive) in the chunk to set\n@param zMax maximum z location (exclusive) in the chunk to set\n@param blockId the block id to set the blocks to\n@param data the block data to set the blocks to\n@deprecated Uses magic values."
                }
              },
              {
                "kind": "METHOD",
                "name": "setRegion(int,int,int,int,int,int,org.bukkit.Material)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "material"
                  },
                  {
                    "kind": "PARAMETER",
                    "name": "xMax"
                  },
                  {
                    "kind": "PARAMETER",
                    "name": "xMin"
                  },
                  {
                    "kind": "PARAMETER",
                    "name": "yMax"
                  },
                  {
                    "kind": "PARAMETER",
                    "name": "yMin"
                  },
                  {
                    "kind": "PARAMETER",
                    "name": "zMax"
                  },
                  {
                    "kind": "PARAMETER",
                    "name": "zMin"
                  }
                ],
                "comment": {
                  "body": "Set a region of this chunk from xMin, yMin, zMin (inclusive)\n to xMax, yMax, zMax (exclusive) to material.\n\n Setting blocks outside the chunk\u0027s bounds does nothing.",
                  "plain": "Set a region of this chunk from xMin, yMin, zMin (inclusive)\n to xMax, yMax, zMax (exclusive) to material.\n\n Setting blocks outside the chunk\u0027s bounds does nothing.\n@param xMin minimum x location (inclusive) in the chunk to set\n@param yMin minimum y location (inclusive) in the chunk to set\n@param zMin minimum z location (inclusive) in the chunk to set\n@param xMax maximum x location (exclusive) in the chunk to set\n@param yMax maximum y location (exclusive) in the chunk to set\n@param zMax maximum z location (exclusive) in the chunk to set\n@param material the type to set the blocks to"
                }
              },
              {
                "kind": "METHOD",
                "name": "setRegion(int,int,int,int,int,int,org.bukkit.material.MaterialData)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "material"
                  },
                  {
                    "kind": "PARAMETER",
                    "name": "xMax"
                  },
                  {
                    "kind": "PARAMETER",
                    "name": "xMin"
                  },
                  {
                    "kind": "PARAMETER",
                    "name": "yMax"
                  },
                  {
                    "kind": "PARAMETER",
                    "name": "yMin"
                  },
                  {
                    "kind": "PARAMETER",
                    "name": "zMax"
                  },
                  {
                    "kind": "PARAMETER",
                    "name": "zMin"
                  }
                ],
                "comment": {
                  "body": "Set a region of this chunk from xMin, yMin, zMin (inclusive)\n to xMax, yMax, zMax (exclusive) to material.\n\n Setting blocks outside the chunk\u0027s bounds does nothing.",
                  "plain": "Set a region of this chunk from xMin, yMin, zMin (inclusive)\n to xMax, yMax, zMax (exclusive) to material.\n\n Setting blocks outside the chunk\u0027s bounds does nothing.\n@param xMin minimum x location (inclusive) in the chunk to set\n@param yMin minimum y location (inclusive) in the chunk to set\n@param zMin minimum z location (inclusive) in the chunk to set\n@param xMax maximum x location (exclusive) in the chunk to set\n@param yMax maximum y location (exclusive) in the chunk to set\n@param zMax maximum z location (exclusive) in the chunk to set\n@param material the type to set the blocks to"
                }
              }
            ],
            "comment": {
              "body": "Data for a Chunk.",
              "plain": "Data for a Chunk."
            }
          }
        ],
        "comment": {
          "body": "A chunk generator is responsible for the initial shaping of an entire\n chunk. For example, the nether chunk generator should shape netherrack and\n soulsand",
          "plain": "A chunk generator is responsible for the initial shaping of an entire\n chunk. For example, the nether chunk generator should shape netherrack and\n soulsand"
        }
      }
    ]
  },
  {
    "kind": "PACKAGE",
    "name": "org.bukkit.help",
    "children": [
      {
        "kind": "CLASS",
        "name": "org.bukkit.help.GenericCommandHelpTopic",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "GenericCommandHelpTopic(org.bukkit.command.Command)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "command"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "canSee(org.bukkit.command.CommandSender)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "sender"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "command"
          }
        ],
        "comment": {
          "body": "Lacking an alternative, the help system will create instances of\n GenericCommandHelpTopic for each command in the server\u0027s CommandMap. You\n can use this class as a base class for custom help topics, or as an example\n for how to write your own.",
          "plain": "Lacking an alternative, the help system will create instances of\n GenericCommandHelpTopic for each command in the server\u0027s CommandMap. You\n can use this class as a base class for custom help topics, or as an example\n for how to write your own."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.help.HelpMap",
        "children": [
          {
            "kind": "METHOD",
            "name": "addTopic(org.bukkit.help.HelpTopic)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "topic"
              }
            ],
            "comment": {
              "body": "Adds a topic to the server\u0027s help index.",
              "plain": "Adds a topic to the server\u0027s help index.\n@param topic The new help topic to add."
            }
          },
          {
            "kind": "METHOD",
            "name": "clear()",
            "comment": {
              "body": "Clears out the contents of the help index. Normally called during\n server reload.",
              "plain": "Clears out the contents of the help index. Normally called during\n server reload."
            }
          },
          {
            "kind": "METHOD",
            "name": "getHelpTopic(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "topicName"
              }
            ],
            "comment": {
              "body": "Returns a help topic for a given topic name.",
              "tags": "Returns A \u003ca href\u003d\"org/bukkit/help/HelpTopic.html\" title\u003d\"class in org.bukkit.help\"\u003e\u003ccode\u003eHelpTopic\u003c/code\u003e\u003c/a\u003e object matching the topic name or null if\n     none can be found..",
              "plain": "Returns a help topic for a given topic name.\n@param topicName The help topic name to look up.\n@return A {@link HelpTopic} object matching the topic name or null if\n     none can be found."
            }
          },
          {
            "kind": "METHOD",
            "name": "getHelpTopics()",
            "comment": {
              "body": "Returns a collection of all the registered help topics.",
              "tags": "Returns All the registered help topics..",
              "plain": "Returns a collection of all the registered help topics.\n@return All the registered help topics."
            }
          },
          {
            "kind": "METHOD",
            "name": "getIgnoredPlugins()",
            "comment": {
              "body": "Gets the list of plugins the server administrator has chosen to exclude\n from the help index. Plugin authors who choose to directly extend\n \u003ca href\u003d\"org/bukkit/command/Command.html\" title\u003d\"class in org.bukkit.command\"\u003e\u003ccode\u003eCommand\u003c/code\u003e\u003c/a\u003e instead of \u003ca href\u003d\"org/bukkit/command/PluginCommand.html\" title\u003d\"class in org.bukkit.command\"\u003e\u003ccode\u003ePluginCommand\u003c/code\u003e\u003c/a\u003e will need to check this collection in\n their \u003ca href\u003d\"org/bukkit/help/HelpTopicFactory.html\" title\u003d\"interface in org.bukkit.help\"\u003e\u003ccode\u003eHelpTopicFactory\u003c/code\u003e\u003c/a\u003e implementations to ensure they meet the\n server administrator\u0027s expectations.",
              "tags": "Returns A list of plugins that should be excluded from the help index..",
              "plain": "Gets the list of plugins the server administrator has chosen to exclude\n from the help index. Plugin authors who choose to directly extend\n {@link org.bukkit.command.Command} instead of {@link org.bukkit.command.PluginCommand} will need to check this collection in\n their {@link HelpTopicFactory} implementations to ensure they meet the\n server administrator\u0027s expectations.\n@return A list of plugins that should be excluded from the help index."
            }
          },
          {
            "kind": "METHOD",
            "name": "registerHelpTopicFactory(java.lang.Class\u003c?\u003e,org.bukkit.help.HelpTopicFactory\u003c?\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "commandClass"
              },
              {
                "kind": "PARAMETER",
                "name": "factory"
              }
            ],
            "comment": {
              "body": "Associates a \u003ca href\u003d\"org/bukkit/help/HelpTopicFactory.html\" title\u003d\"interface in org.bukkit.help\"\u003e\u003ccode\u003eHelpTopicFactory\u003c/code\u003e\u003c/a\u003e object with given command base\n class. Plugins typically call this method during \u003ccode\u003eonLoad()\u003c/code\u003e. Once\n registered, the custom HelpTopicFactory will be used to create a custom\n \u003ca href\u003d\"org/bukkit/help/HelpTopic.html\" title\u003d\"class in org.bukkit.help\"\u003e\u003ccode\u003eHelpTopic\u003c/code\u003e\u003c/a\u003e for all commands deriving from the \u003ccode\u003e\n commandClass\u003c/code\u003e base class, or all commands deriving from \u003ca href\u003d\"org/bukkit/command/PluginCommand.html\" title\u003d\"class in org.bukkit.command\"\u003e\u003ccode\u003ePluginCommand\u003c/code\u003e\u003c/a\u003e who\u0027s executor derives from \u003ccode\u003e\n commandClass\u003c/code\u003e base class.",
              "plain": "Associates a {@link HelpTopicFactory} object with given command base\n class. Plugins typically call this method during {@code onLoad()}. Once\n registered, the custom HelpTopicFactory will be used to create a custom\n {@link HelpTopic} for all commands deriving from the {@code\n commandClass} base class, or all commands deriving from {@link org.bukkit.command.PluginCommand} who\u0027s executor derives from {@code\n commandClass} base class.\n@param commandClass The class for which the custom HelpTopicFactory\n     applies. Must derive from either {@link org.bukkit.command.Command}\n     or {@link org.bukkit.command.CommandExecutor}.\n@param factory The {@link HelpTopicFactory} implementation to associate\n     with the {@code commandClass}.\n@throws IllegalArgumentException Thrown if {@code commandClass} does\n     not derive from a legal base class."
            }
          }
        ],
        "comment": {
          "body": "The HelpMap tracks all help topics registered in a Bukkit server. When the\n server starts up or is reloaded, help is processed and topics are added in\n the following order:\n \n \u003col\u003e\n \u003cli\u003eGeneral topics are loaded from the help.yml\n \u003cli\u003ePlugins load and optionally call \u003ccode\u003eaddTopic()\u003c/code\u003e\n \u003cli\u003eRegistered plugin commands are processed by \u003ca href\u003d\"org/bukkit/help/HelpTopicFactory.html\" title\u003d\"interface in org.bukkit.help\"\u003e\u003ccode\u003eHelpTopicFactory\u003c/code\u003e\u003c/a\u003e\n     objects to create topics\n \u003cli\u003eTopic contents are amended as directed in help.yml\n \u003c/ol\u003e",
          "plain": "The HelpMap tracks all help topics registered in a Bukkit server. When the\n server starts up or is reloaded, help is processed and topics are added in\n the following order:\n \n \u003col\u003e\n \u003cli\u003eGeneral topics are loaded from the help.yml\n \u003cli\u003ePlugins load and optionally call {@code addTopic()}\n \u003cli\u003eRegistered plugin commands are processed by {@link HelpTopicFactory}\n     objects to create topics\n \u003cli\u003eTopic contents are amended as directed in help.yml\n \u003c/ol\u003e"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.help.HelpTopic",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "HelpTopic()"
          },
          {
            "kind": "METHOD",
            "name": "amendCanSee(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "amendedPermission"
              }
            ],
            "comment": {
              "body": "Allows the server administrator to override the permission required to\n see a help topic.\n \u003cp\u003e\n HelpTopic implementations should take this into account when\n determining topic visibility on the \u003ca href\u003d\"org/bukkit/help/HelpTopic.html#canSee(org.bukkit.command.CommandSender)\"\u003e\u003ccode\u003eHelpTopic.canSee(org.bukkit.command.CommandSender)\u003c/code\u003e\u003c/a\u003e function.",
              "plain": "Allows the server administrator to override the permission required to\n see a help topic.\n \u003cp\u003e\n HelpTopic implementations should take this into account when\n determining topic visibility on the {@link HelpTopic#canSee(org.bukkit.command.CommandSender)} function.\n@param amendedPermission The permission node the server administrator\n     wishes to apply to this topic."
            }
          },
          {
            "kind": "METHOD",
            "name": "amendTopic(java.lang.String,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "amendedFullText"
              },
              {
                "kind": "PARAMETER",
                "name": "amendedShortText"
              }
            ],
            "comment": {
              "body": "Allows the server admin (or another plugin) to add or replace the\n contents of a help topic.\n \u003cp\u003e\n A null in either parameter will leave that part of the topic unchanged.\n In either amending parameter, the string \u0026lt;text\u0026gt; is replaced\n with the existing contents in the help topic. Use this to append or\n prepend additional content into an automatically generated help topic.",
              "plain": "Allows the server admin (or another plugin) to add or replace the\n contents of a help topic.\n \u003cp\u003e\n A null in either parameter will leave that part of the topic unchanged.\n In either amending parameter, the string {@literal \u003ctext\u003e} is replaced\n with the existing contents in the help topic. Use this to append or\n prepend additional content into an automatically generated help topic.\n@param amendedShortText The new topic short text to use, or null to\n     leave alone.\n@param amendedFullText The new topic full text to use, or null to leave\n     alone."
            }
          },
          {
            "kind": "FIELD",
            "name": "amendedPermission"
          },
          {
            "kind": "METHOD",
            "name": "applyAmendment(java.lang.String,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "amendment"
              },
              {
                "kind": "PARAMETER",
                "name": "baseText"
              }
            ],
            "comment": {
              "body": "Developers implementing their own custom HelpTopic implementations can\n use this utility method to ensure their implementations comply with the\n expected behavior of the \u003ca href\u003d\"org/bukkit/help/HelpTopic.html#amendTopic(java.lang.String,java.lang.String)\"\u003e\u003ccode\u003eHelpTopic.amendTopic(String, String)\u003c/code\u003e\u003c/a\u003e\n method.",
              "tags": "Returns The application of the amending text to the existing text,\n     according to the expected rules of amendTopic()..",
              "plain": "Developers implementing their own custom HelpTopic implementations can\n use this utility method to ensure their implementations comply with the\n expected behavior of the {@link HelpTopic#amendTopic(String, String)}\n method.\n@param baseText The existing text of the help topic.\n@param amendment The amending text from the amendTopic() method.\n@return The application of the amending text to the existing text,\n     according to the expected rules of amendTopic()."
            }
          },
          {
            "kind": "METHOD",
            "name": "canSee(org.bukkit.command.CommandSender)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "player"
              }
            ],
            "comment": {
              "body": "Determines if a \u003ca href\u003d\"org/bukkit/entity/Player.html\" title\u003d\"interface in org.bukkit.entity\"\u003e\u003ccode\u003ePlayer\u003c/code\u003e\u003c/a\u003e is allowed to see this help topic.\n \u003cp\u003e\n HelpTopic implementations should take server administrator wishes into\n account as set by the \u003ca href\u003d\"org/bukkit/help/HelpTopic.html#amendCanSee(java.lang.String)\"\u003e\u003ccode\u003eHelpTopic.amendCanSee(String)\u003c/code\u003e\u003c/a\u003e function.",
              "tags": "Returns True of the Player can see this help topic, false otherwise..",
              "plain": "Determines if a {@link Player} is allowed to see this help topic.\n \u003cp\u003e\n HelpTopic implementations should take server administrator wishes into\n account as set by the {@link HelpTopic#amendCanSee(String)} function.\n@param player The Player in question.\n@return True of the Player can see this help topic, false otherwise."
            }
          },
          {
            "kind": "FIELD",
            "name": "fullText"
          },
          {
            "kind": "METHOD",
            "name": "getFullText(org.bukkit.command.CommandSender)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "forWho"
              }
            ],
            "comment": {
              "body": "Returns the full description of this help topic that is displayed when\n the user requests this topic\u0027s details.\n \u003cp\u003e\n The result will be paginated to properly fit the user\u0027s client.",
              "tags": "Returns A full topic description..",
              "plain": "Returns the full description of this help topic that is displayed when\n the user requests this topic\u0027s details.\n \u003cp\u003e\n The result will be paginated to properly fit the user\u0027s client.\n@param forWho The player or console requesting the full text. Useful\n     for further security trimming the command\u0027s full text based on\n     sub-permissions in custom implementations.\n@return A full topic description."
            }
          },
          {
            "kind": "METHOD",
            "name": "getName()",
            "comment": {
              "body": "Returns the name of this help topic.",
              "tags": "Returns The topic name..",
              "plain": "Returns the name of this help topic.\n@return The topic name."
            }
          },
          {
            "kind": "METHOD",
            "name": "getShortText()",
            "comment": {
              "body": "Returns a brief description that will be displayed in the topic index.",
              "tags": "Returns A brief topic description..",
              "plain": "Returns a brief description that will be displayed in the topic index.\n@return A brief topic description."
            }
          },
          {
            "kind": "FIELD",
            "name": "name"
          },
          {
            "kind": "FIELD",
            "name": "shortText"
          }
        ],
        "comment": {
          "body": "HelpTopic implementations are displayed to the user when the user uses the\n /help command.\n \u003cp\u003e\n Custom implementations of this class can work at two levels. A simple\n implementation only needs to set the value of \u003ccode\u003ename\u003c/code\u003e, \u003ccode\u003e\n shortText\u003c/code\u003e, and \u003ccode\u003efullText\u003c/code\u003e in the constructor. This base class will\n take care of the rest.\n \u003cp\u003e\n Complex implementations can be created by overriding the behavior of all\n the methods in this class.",
          "plain": "HelpTopic implementations are displayed to the user when the user uses the\n /help command.\n \u003cp\u003e\n Custom implementations of this class can work at two levels. A simple\n implementation only needs to set the value of {@code name}, {@code\n shortText}, and {@code fullText} in the constructor. This base class will\n take care of the rest.\n \u003cp\u003e\n Complex implementations can be created by overriding the behavior of all\n the methods in this class."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.help.HelpTopicComparator",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "HelpTopicComparator()"
          },
          {
            "kind": "METHOD",
            "name": "compare(org.bukkit.help.HelpTopic,org.bukkit.help.HelpTopic)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "lhs"
              },
              {
                "kind": "PARAMETER",
                "name": "rhs"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "helpTopicComparatorInstance()"
          },
          {
            "kind": "FIELD",
            "name": "htc"
          },
          {
            "kind": "CLASS",
            "name": "org.bukkit.help.HelpTopicComparator.TopicNameComparator",
            "children": [
              {
                "kind": "CONSTRUCTOR",
                "name": "TopicNameComparator()"
              },
              {
                "kind": "METHOD",
                "name": "compare(java.lang.String,java.lang.String)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "lhs"
                  },
                  {
                    "kind": "PARAMETER",
                    "name": "rhs"
                  }
                ]
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "tnc"
          },
          {
            "kind": "METHOD",
            "name": "topicNameComparatorInstance()"
          }
        ],
        "comment": {
          "body": "Used to impose a custom total ordering on help topics.\n \u003cp\u003e\n All topics are listed in alphabetic order, but topics that start with a\n slash come after topics that don\u0027t.",
          "plain": "Used to impose a custom total ordering on help topics.\n \u003cp\u003e\n All topics are listed in alphabetic order, but topics that start with a\n slash come after topics that don\u0027t."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.help.HelpTopicFactory",
        "children": [
          {
            "kind": "TYPE_PARAMETER",
            "name": "TCommand"
          },
          {
            "kind": "METHOD",
            "name": "createTopic(TCommand)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "command"
              }
            ],
            "comment": {
              "body": "This method accepts a command deriving from a custom command base class\n and constructs a custom HelpTopic for it.",
              "tags": "Returns A new custom help topic or \u003ccode\u003enull\u003c/code\u003e to intentionally NOT\n     create a topic..",
              "plain": "This method accepts a command deriving from a custom command base class\n and constructs a custom HelpTopic for it.\n@param command The custom command to build a help topic for.\n@return A new custom help topic or {@code null} to intentionally NOT\n     create a topic."
            }
          }
        ],
        "comment": {
          "body": "A HelpTopicFactory is used to create custom \u003ca href\u003d\"org/bukkit/help/HelpTopic.html\" title\u003d\"class in org.bukkit.help\"\u003e\u003ccode\u003eHelpTopic\u003c/code\u003e\u003c/a\u003e objects from\n commands that inherit from a common base class or have executors that\n inherit from a common base class. You can use a custom HelpTopic to change\n the way all the commands in your plugin display in the help. If your plugin\n implements a complex permissions system, a custom help topic may also be\n appropriate.\n \u003cp\u003e\n To automatically bind your plugin\u0027s commands to your custom HelpTopic\n implementation, first make sure all your commands or executors derive from\n a custom base class (it doesn\u0027t have to do anything). Next implement a\n custom HelpTopicFactory that accepts your custom command base class and\n instantiates an instance of your custom HelpTopic from it. Finally,\n register your HelpTopicFactory against your command base class using the\n \u003ca href\u003d\"org/bukkit/help/HelpMap.html#registerHelpTopicFactory(java.lang.Class,org.bukkit.help.HelpTopicFactory)\"\u003e\u003ccode\u003eHelpMap.registerHelpTopicFactory(Class, HelpTopicFactory)\u003c/code\u003e\u003c/a\u003e method.\n \u003cp\u003e\n As the help system iterates over all registered commands to make help\n topics, it first checks to see if there is a HelpTopicFactory registered\n for the command\u0027s base class. If so, the factory is used to make a help\n topic rather than a generic help topic. If no factory is found for the\n command\u0027s base class and the command derives from \u003ca href\u003d\"org/bukkit/command/PluginCommand.html\" title\u003d\"class in org.bukkit.command\"\u003e\u003ccode\u003ePluginCommand\u003c/code\u003e\u003c/a\u003e, then the type of the command\u0027s executor\n is inspected looking for a registered HelpTopicFactory. Finally, if no\n factory is found, a generic help topic is created for the command.",
          "plain": "A HelpTopicFactory is used to create custom {@link HelpTopic} objects from\n commands that inherit from a common base class or have executors that\n inherit from a common base class. You can use a custom HelpTopic to change\n the way all the commands in your plugin display in the help. If your plugin\n implements a complex permissions system, a custom help topic may also be\n appropriate.\n \u003cp\u003e\n To automatically bind your plugin\u0027s commands to your custom HelpTopic\n implementation, first make sure all your commands or executors derive from\n a custom base class (it doesn\u0027t have to do anything). Next implement a\n custom HelpTopicFactory that accepts your custom command base class and\n instantiates an instance of your custom HelpTopic from it. Finally,\n register your HelpTopicFactory against your command base class using the\n {@link HelpMap#registerHelpTopicFactory(Class, HelpTopicFactory)} method.\n \u003cp\u003e\n As the help system iterates over all registered commands to make help\n topics, it first checks to see if there is a HelpTopicFactory registered\n for the command\u0027s base class. If so, the factory is used to make a help\n topic rather than a generic help topic. If no factory is found for the\n command\u0027s base class and the command derives from {@link org.bukkit.command.PluginCommand}, then the type of the command\u0027s executor\n is inspected looking for a registered HelpTopicFactory. Finally, if no\n factory is found, a generic help topic is created for the command.\n@param \u003cTCommand\u003e The base class for your custom commands."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.help.IndexHelpTopic",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "IndexHelpTopic(java.lang.String,java.lang.String,java.lang.String,java.util.Collection\u003corg.bukkit.help.HelpTopic\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              },
              {
                "kind": "PARAMETER",
                "name": "permission"
              },
              {
                "kind": "PARAMETER",
                "name": "shortText"
              },
              {
                "kind": "PARAMETER",
                "name": "topics"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "IndexHelpTopic(java.lang.String,java.lang.String,java.lang.String,java.util.Collection\u003corg.bukkit.help.HelpTopic\u003e,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              },
              {
                "kind": "PARAMETER",
                "name": "permission"
              },
              {
                "kind": "PARAMETER",
                "name": "preamble"
              },
              {
                "kind": "PARAMETER",
                "name": "shortText"
              },
              {
                "kind": "PARAMETER",
                "name": "topics"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "allTopics"
          },
          {
            "kind": "METHOD",
            "name": "amendCanSee(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "amendedPermission"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "buildIndexLine(org.bukkit.command.CommandSender,org.bukkit.help.HelpTopic)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "sender"
              },
              {
                "kind": "PARAMETER",
                "name": "topic"
              }
            ],
            "comment": {
              "body": "Builds individual lines in the index topic. Override this method to\n change how index lines are rendered.",
              "tags": "Returns The rendered index line..",
              "plain": "Builds individual lines in the index topic. Override this method to\n change how index lines are rendered.\n@param sender The command sender requesting the index line.\n@param topic The topic to render into an index line.\n@return The rendered index line."
            }
          },
          {
            "kind": "METHOD",
            "name": "buildPreamble(org.bukkit.command.CommandSender)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "sender"
              }
            ],
            "comment": {
              "body": "Builds the topic preamble. Override this method to change how the index\n preamble looks.",
              "tags": "Returns The topic preamble..",
              "plain": "Builds the topic preamble. Override this method to change how the index\n preamble looks.\n@param sender The command sender requesting the preamble.\n@return The topic preamble."
            }
          },
          {
            "kind": "METHOD",
            "name": "canSee(org.bukkit.command.CommandSender)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "sender"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getFullText(org.bukkit.command.CommandSender)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "sender"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "permission"
          },
          {
            "kind": "FIELD",
            "name": "preamble"
          },
          {
            "kind": "METHOD",
            "name": "setTopicsCollection(java.util.Collection\u003corg.bukkit.help.HelpTopic\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "topics"
              }
            ],
            "comment": {
              "body": "Sets the contents of the internal allTopics collection.",
              "plain": "Sets the contents of the internal allTopics collection.\n@param topics The topics to set."
            }
          }
        ],
        "comment": {
          "body": "This help topic generates a list of other help topics. This class is useful\n for adding your own index help topics. To enforce a particular order, use a\n sorted collection.\n \u003cp\u003e\n If a preamble is provided to the constructor, that text will be displayed\n before the first item in the index.",
          "plain": "This help topic generates a list of other help topics. This class is useful\n for adding your own index help topics. To enforce a particular order, use a\n sorted collection.\n \u003cp\u003e\n If a preamble is provided to the constructor, that text will be displayed\n before the first item in the index."
        }
      }
    ]
  },
  {
    "kind": "PACKAGE",
    "name": "org.bukkit.inventory",
    "children": [
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.inventory.AbstractHorseInventory",
        "children": [
          {
            "kind": "METHOD",
            "name": "getSaddle()",
            "comment": {
              "body": "Gets the item in the horse\u0027s saddle slot.",
              "tags": "Returns the saddle item.",
              "plain": "Gets the item in the horse\u0027s saddle slot.\n@return the saddle item"
            }
          },
          {
            "kind": "METHOD",
            "name": "setSaddle(org.bukkit.inventory.ItemStack)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "stack"
              }
            ],
            "comment": {
              "body": "Sets the item in the horse\u0027s saddle slot.",
              "plain": "Sets the item in the horse\u0027s saddle slot.\n@param stack the new item"
            }
          }
        ],
        "comment": {
          "body": "An interface to the inventory of an \u003ca href\u003d\"org/bukkit/entity/AbstractHorse.html\" title\u003d\"interface in org.bukkit.entity\"\u003e\u003ccode\u003eAbstractHorse\u003c/code\u003e\u003c/a\u003e.",
          "plain": "An interface to the inventory of an {@link AbstractHorse}."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.inventory.AnvilInventory",
        "children": [
          {
            "kind": "METHOD",
            "name": "getRenameText()",
            "comment": {
              "body": "Get the name to be applied to the repaired item. An empty string denotes\n the default item name.",
              "tags": "Returns the rename text.",
              "plain": "Get the name to be applied to the repaired item. An empty string denotes\n the default item name.\n@return the rename text"
            }
          },
          {
            "kind": "METHOD",
            "name": "getRepairCost()",
            "comment": {
              "body": "Get the experience cost (in levels) to complete the current repair.",
              "tags": "Returns the experience cost.",
              "plain": "Get the experience cost (in levels) to complete the current repair.\n@return the experience cost"
            }
          },
          {
            "kind": "METHOD",
            "name": "setRepairCost(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "levels"
              }
            ],
            "comment": {
              "body": "Set the experience cost (in levels) to complete the current repair.",
              "plain": "Set the experience cost (in levels) to complete the current repair.\n@param levels the experience cost"
            }
          }
        ],
        "comment": {
          "body": "Interface to the inventory of an Anvil.",
          "plain": "Interface to the inventory of an Anvil."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.inventory.ArmoredHorseInventory",
        "children": [
          {
            "kind": "METHOD",
            "name": "getArmor()",
            "comment": {
              "body": "Gets the item in the horse\u0027s armor slot.",
              "tags": "Returns the armor item.",
              "plain": "Gets the item in the horse\u0027s armor slot.\n@return the armor item"
            }
          },
          {
            "kind": "METHOD",
            "name": "setArmor(org.bukkit.inventory.ItemStack)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "stack"
              }
            ],
            "comment": {
              "body": "Sets the item in the horse\u0027s armor slot.",
              "plain": "Sets the item in the horse\u0027s armor slot.\n@param stack the new item"
            }
          }
        ]
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.inventory.BeaconInventory",
        "children": [
          {
            "kind": "METHOD",
            "name": "getItem()",
            "comment": {
              "body": "Get the item powering the beacon.",
              "tags": "Returns The current item..",
              "plain": "Get the item powering the beacon.\n@return The current item."
            }
          },
          {
            "kind": "METHOD",
            "name": "setItem(org.bukkit.inventory.ItemStack)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "item"
              }
            ],
            "comment": {
              "body": "Set the item powering the beacon.",
              "plain": "Set the item powering the beacon.\n@param item The new item"
            }
          }
        ],
        "comment": {
          "body": "Interface to the inventory of a Beacon.",
          "plain": "Interface to the inventory of a Beacon."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.inventory.BrewerInventory",
        "children": [
          {
            "kind": "METHOD",
            "name": "getFuel()",
            "comment": {
              "body": "Get the current fuel for brewing.",
              "tags": "Returns The fuel.",
              "plain": "Get the current fuel for brewing.\n@return The fuel"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHolder()"
          },
          {
            "kind": "METHOD",
            "name": "getIngredient()",
            "comment": {
              "body": "Get the current ingredient for brewing.",
              "tags": "Returns The ingredient..",
              "plain": "Get the current ingredient for brewing.\n@return The ingredient."
            }
          },
          {
            "kind": "METHOD",
            "name": "setFuel(org.bukkit.inventory.ItemStack)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "fuel"
              }
            ],
            "comment": {
              "body": "Set the current fuel for brewing. Generally only\n \u003ca href\u003d\"org/bukkit/Material.html#BLAZE_POWDER\"\u003e\u003ccode\u003eMaterial.BLAZE_POWDER\u003c/code\u003e\u003c/a\u003e will be of use.",
              "plain": "Set the current fuel for brewing. Generally only\n {@link Material#BLAZE_POWDER} will be of use.\n@param fuel The fuel"
            }
          },
          {
            "kind": "METHOD",
            "name": "setIngredient(org.bukkit.inventory.ItemStack)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "ingredient"
              }
            ],
            "comment": {
              "body": "Set the current ingredient for brewing.",
              "plain": "Set the current ingredient for brewing.\n@param ingredient The ingredient"
            }
          }
        ],
        "comment": {
          "body": "Interface to the inventory of a Brewing Stand.",
          "plain": "Interface to the inventory of a Brewing Stand."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.inventory.CraftingInventory",
        "children": [
          {
            "kind": "METHOD",
            "name": "getMatrix()",
            "comment": {
              "body": "Get the contents of the crafting matrix.",
              "tags": "Returns The contents..",
              "plain": "Get the contents of the crafting matrix.\n@return The contents."
            }
          },
          {
            "kind": "METHOD",
            "name": "getRecipe()",
            "comment": {
              "body": "Get the current recipe formed on the crafting inventory, if any.",
              "tags": "Returns The recipe, or null if the current contents don\u0027t match any\n     recipe..",
              "plain": "Get the current recipe formed on the crafting inventory, if any.\n@return The recipe, or null if the current contents don\u0027t match any\n     recipe."
            }
          },
          {
            "kind": "METHOD",
            "name": "getResult()",
            "comment": {
              "body": "Check what item is in the result slot of this crafting inventory.",
              "tags": "Returns The result item..",
              "plain": "Check what item is in the result slot of this crafting inventory.\n@return The result item."
            }
          },
          {
            "kind": "METHOD",
            "name": "setMatrix(org.bukkit.inventory.ItemStack[])",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "contents"
              }
            ],
            "comment": {
              "body": "Replace the contents of the crafting matrix",
              "plain": "Replace the contents of the crafting matrix\n@param contents The new contents.\n@throws IllegalArgumentException if the length of contents is greater\n     than the size of the crafting matrix."
            }
          },
          {
            "kind": "METHOD",
            "name": "setResult(org.bukkit.inventory.ItemStack)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "newResult"
              }
            ],
            "comment": {
              "body": "Set the item in the result slot of the crafting inventory.",
              "plain": "Set the item in the result slot of the crafting inventory.\n@param newResult The new result item."
            }
          }
        ],
        "comment": {
          "body": "Interface to the crafting inventories",
          "plain": "Interface to the crafting inventories"
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.inventory.DoubleChestInventory",
        "children": [
          {
            "kind": "METHOD",
            "name": "getHolder()"
          },
          {
            "kind": "METHOD",
            "name": "getLeftSide()",
            "comment": {
              "body": "Get the left half of this double chest.",
              "tags": "Returns The left side inventory.",
              "plain": "Get the left half of this double chest.\n@return The left side inventory"
            }
          },
          {
            "kind": "METHOD",
            "name": "getRightSide()",
            "comment": {
              "body": "Get the right side of this double chest.",
              "tags": "Returns The right side inventory.",
              "plain": "Get the right side of this double chest.\n@return The right side inventory"
            }
          }
        ],
        "comment": {
          "body": "Interface to the inventory of a Double Chest.",
          "plain": "Interface to the inventory of a Double Chest."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.inventory.EnchantingInventory",
        "children": [
          {
            "kind": "METHOD",
            "name": "getItem()",
            "comment": {
              "body": "Get the item being enchanted.",
              "tags": "Returns The current item..",
              "plain": "Get the item being enchanted.\n@return The current item."
            }
          },
          {
            "kind": "METHOD",
            "name": "getSecondary()",
            "comment": {
              "body": "Get the secondary item being used for the enchant.",
              "tags": "Returns The second item.",
              "plain": "Get the secondary item being used for the enchant.\n@return The second item"
            }
          },
          {
            "kind": "METHOD",
            "name": "setItem(org.bukkit.inventory.ItemStack)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "item"
              }
            ],
            "comment": {
              "body": "Set the item being enchanted.",
              "plain": "Set the item being enchanted.\n@param item The new item"
            }
          },
          {
            "kind": "METHOD",
            "name": "setSecondary(org.bukkit.inventory.ItemStack)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "item"
              }
            ],
            "comment": {
              "body": "Set the secondary item being used for the enchant.",
              "plain": "Set the secondary item being used for the enchant.\n@param item The new item"
            }
          }
        ],
        "comment": {
          "body": "Interface to the inventory of an Enchantment Table.",
          "plain": "Interface to the inventory of an Enchantment Table."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.inventory.EntityEquipment",
        "children": [
          {
            "kind": "METHOD",
            "name": "clear()",
            "comment": {
              "body": "Clears the entity of all armor and held items",
              "plain": "Clears the entity of all armor and held items"
            }
          },
          {
            "kind": "METHOD",
            "name": "getArmorContents()",
            "comment": {
              "body": "Gets a copy of all worn armor",
              "tags": "Returns The array of worn armor.",
              "plain": "Gets a copy of all worn armor\n@return The array of worn armor"
            }
          },
          {
            "kind": "METHOD",
            "name": "getBoots()",
            "comment": {
              "body": "Gets a copy of the boots currently being worn by the entity",
              "tags": "Returns The boots being worn.",
              "plain": "Gets a copy of the boots currently being worn by the entity\n@return The boots being worn"
            }
          },
          {
            "kind": "METHOD",
            "name": "getBootsDropChance()",
            "comment": {
              "body": "Gets the chance of the boots being dropped upon this creature\u0027s death.\n \n \u003cul\u003e\n \u003cli\u003eA drop chance of 0.0F will never drop\n \u003cli\u003eA drop chance of 1.0F will always drop\n \u003c/ul\u003e",
              "tags": "Returns the chance of the boots being dropped (1 for players).",
              "plain": "Gets the chance of the boots being dropped upon this creature\u0027s death.\n \n \u003cul\u003e\n \u003cli\u003eA drop chance of 0.0F will never drop\n \u003cli\u003eA drop chance of 1.0F will always drop\n \u003c/ul\u003e\n@return the chance of the boots being dropped (1 for players)"
            }
          },
          {
            "kind": "METHOD",
            "name": "getChestplate()",
            "comment": {
              "body": "Gets a copy of the chest plate currently being worn by the entity",
              "tags": "Returns The chest plate being worn.",
              "plain": "Gets a copy of the chest plate currently being worn by the entity\n@return The chest plate being worn"
            }
          },
          {
            "kind": "METHOD",
            "name": "getChestplateDropChance()",
            "comment": {
              "body": "Gets the chance of the chest plate being dropped upon this creature\u0027s\n death.\n \n \u003cul\u003e\n \u003cli\u003eA drop chance of 0.0F will never drop\n \u003cli\u003eA drop chance of 1.0F will always drop\n \u003c/ul\u003e",
              "tags": "Returns the chance of the chest plate being dropped (1 for players).",
              "plain": "Gets the chance of the chest plate being dropped upon this creature\u0027s\n death.\n \n \u003cul\u003e\n \u003cli\u003eA drop chance of 0.0F will never drop\n \u003cli\u003eA drop chance of 1.0F will always drop\n \u003c/ul\u003e\n@return the chance of the chest plate being dropped (1 for players)"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHelmet()",
            "comment": {
              "body": "Gets a copy of the helmet currently being worn by the entity",
              "tags": "Returns The helmet being worn.",
              "plain": "Gets a copy of the helmet currently being worn by the entity\n@return The helmet being worn"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHelmetDropChance()",
            "comment": {
              "body": "Gets the chance of the helmet being dropped upon this creature\u0027s death.\n\n \u003cul\u003e\n \u003cli\u003eA drop chance of 0.0F will never drop\n \u003cli\u003eA drop chance of 1.0F will always drop\n \u003c/ul\u003e",
              "tags": "Returns the chance of the helmet being dropped (1 for players).",
              "plain": "Gets the chance of the helmet being dropped upon this creature\u0027s death.\n\n \u003cul\u003e\n \u003cli\u003eA drop chance of 0.0F will never drop\n \u003cli\u003eA drop chance of 1.0F will always drop\n \u003c/ul\u003e\n@return the chance of the helmet being dropped (1 for players)"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHolder()",
            "comment": {
              "body": "Get the entity this EntityEquipment belongs to",
              "tags": "Returns the entity this EntityEquipment belongs to.",
              "plain": "Get the entity this EntityEquipment belongs to\n@return the entity this EntityEquipment belongs to"
            }
          },
          {
            "kind": "METHOD",
            "name": "getItemInHand()",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Gets a copy of the item the entity is currently holding",
              "tags": "Returns the currently held item.",
              "plain": "Gets a copy of the item the entity is currently holding\n@deprecated entities can duel wield now use the methods for the\n      specific hand instead\n@see #getItemInMainHand()\n@see #getItemInOffHand()\n@return the currently held item"
            }
          },
          {
            "kind": "METHOD",
            "name": "getItemInHandDropChance()",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "tags": "Returns drop chance.",
              "plain": "@deprecated entities can duel wield now use the methods for the specific\n hand instead\n@see #getItemInMainHandDropChance()\n@see #getItemInOffHandDropChance()\n@return drop chance"
            }
          },
          {
            "kind": "METHOD",
            "name": "getItemInMainHand()",
            "comment": {
              "body": "Gets a copy of the item the entity is currently holding\n in their main hand.",
              "tags": "Returns the currently held item.",
              "plain": "Gets a copy of the item the entity is currently holding\n in their main hand.\n@return the currently held item"
            }
          },
          {
            "kind": "METHOD",
            "name": "getItemInMainHandDropChance()",
            "comment": {
              "body": "Gets the chance of the main hand item being dropped upon this creature\u0027s\n death.\n\n \u003cul\u003e\n \u003cli\u003eA drop chance of 0.0F will never drop\n \u003cli\u003eA drop chance of 1.0F will always drop\n \u003c/ul\u003e",
              "tags": "Returns chance of the currently held item being dropped (1 for players).",
              "plain": "Gets the chance of the main hand item being dropped upon this creature\u0027s\n death.\n\n \u003cul\u003e\n \u003cli\u003eA drop chance of 0.0F will never drop\n \u003cli\u003eA drop chance of 1.0F will always drop\n \u003c/ul\u003e\n@return chance of the currently held item being dropped (1 for players)"
            }
          },
          {
            "kind": "METHOD",
            "name": "getItemInOffHand()",
            "comment": {
              "body": "Gets a copy of the item the entity is currently holding\n in their off hand.",
              "tags": "Returns the currently held item.",
              "plain": "Gets a copy of the item the entity is currently holding\n in their off hand.\n@return the currently held item"
            }
          },
          {
            "kind": "METHOD",
            "name": "getItemInOffHandDropChance()",
            "comment": {
              "body": "Gets the chance of the off hand item being dropped upon this creature\u0027s\n death.\n\n \u003cul\u003e\n \u003cli\u003eA drop chance of 0.0F will never drop\n \u003cli\u003eA drop chance of 1.0F will always drop\n \u003c/ul\u003e",
              "tags": "Returns chance of the off hand item being dropped (1 for players).",
              "plain": "Gets the chance of the off hand item being dropped upon this creature\u0027s\n death.\n\n \u003cul\u003e\n \u003cli\u003eA drop chance of 0.0F will never drop\n \u003cli\u003eA drop chance of 1.0F will always drop\n \u003c/ul\u003e\n@return chance of the off hand item being dropped (1 for players)"
            }
          },
          {
            "kind": "METHOD",
            "name": "getLeggings()",
            "comment": {
              "body": "Gets a copy of the leggings currently being worn by the entity",
              "tags": "Returns The leggings being worn.",
              "plain": "Gets a copy of the leggings currently being worn by the entity\n@return The leggings being worn"
            }
          },
          {
            "kind": "METHOD",
            "name": "getLeggingsDropChance()",
            "comment": {
              "body": "Gets the chance of the leggings being dropped upon this creature\u0027s\n death.\n \n \u003cul\u003e\n \u003cli\u003eA drop chance of 0.0F will never drop\n \u003cli\u003eA drop chance of 1.0F will always drop\n \u003c/ul\u003e",
              "tags": "Returns the chance of the leggings being dropped (1 for players).",
              "plain": "Gets the chance of the leggings being dropped upon this creature\u0027s\n death.\n \n \u003cul\u003e\n \u003cli\u003eA drop chance of 0.0F will never drop\n \u003cli\u003eA drop chance of 1.0F will always drop\n \u003c/ul\u003e\n@return the chance of the leggings being dropped (1 for players)"
            }
          },
          {
            "kind": "METHOD",
            "name": "setArmorContents(org.bukkit.inventory.ItemStack[])",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "items"
              }
            ],
            "comment": {
              "body": "Sets the entities armor to the provided array of ItemStacks",
              "plain": "Sets the entities armor to the provided array of ItemStacks\n@param items The items to set the armor as"
            }
          },
          {
            "kind": "METHOD",
            "name": "setBoots(org.bukkit.inventory.ItemStack)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "boots"
              }
            ],
            "comment": {
              "body": "Sets the boots worn by the entity",
              "plain": "Sets the boots worn by the entity\n@param boots The boots to put on the entity"
            }
          },
          {
            "kind": "METHOD",
            "name": "setBootsDropChance(float)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "chance"
              }
            ],
            "comment": {
              "body": "Sets the chance of the boots being dropped upon this creature\u0027s death.\n \n \u003cul\u003e\n \u003cli\u003eA drop chance of 0.0F will never drop\n \u003cli\u003eA drop chance of 1.0F will always drop\n \u003c/ul\u003e",
              "plain": "Sets the chance of the boots being dropped upon this creature\u0027s death.\n \n \u003cul\u003e\n \u003cli\u003eA drop chance of 0.0F will never drop\n \u003cli\u003eA drop chance of 1.0F will always drop\n \u003c/ul\u003e\n@param chance of the boots being dropped\n@throws UnsupportedOperationException when called on players"
            }
          },
          {
            "kind": "METHOD",
            "name": "setChestplate(org.bukkit.inventory.ItemStack)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "chestplate"
              }
            ],
            "comment": {
              "body": "Sets the chest plate worn by the entity",
              "plain": "Sets the chest plate worn by the entity\n@param chestplate The chest plate to put on the entity"
            }
          },
          {
            "kind": "METHOD",
            "name": "setChestplateDropChance(float)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "chance"
              }
            ],
            "comment": {
              "body": "Sets the chance of the chest plate being dropped upon this creature\u0027s\n death.\n \n \u003cul\u003e\n \u003cli\u003eA drop chance of 0.0F will never drop\n \u003cli\u003eA drop chance of 1.0F will always drop\n \u003c/ul\u003e",
              "plain": "Sets the chance of the chest plate being dropped upon this creature\u0027s\n death.\n \n \u003cul\u003e\n \u003cli\u003eA drop chance of 0.0F will never drop\n \u003cli\u003eA drop chance of 1.0F will always drop\n \u003c/ul\u003e\n@param chance of the chest plate being dropped\n@throws UnsupportedOperationException when called on players"
            }
          },
          {
            "kind": "METHOD",
            "name": "setHelmet(org.bukkit.inventory.ItemStack)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "helmet"
              }
            ],
            "comment": {
              "body": "Sets the helmet worn by the entity",
              "plain": "Sets the helmet worn by the entity\n@param helmet The helmet to put on the entity"
            }
          },
          {
            "kind": "METHOD",
            "name": "setHelmetDropChance(float)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "chance"
              }
            ],
            "comment": {
              "body": "Sets the chance of the helmet being dropped upon this creature\u0027s death.\n \n \u003cul\u003e\n \u003cli\u003eA drop chance of 0.0F will never drop\n \u003cli\u003eA drop chance of 1.0F will always drop\n \u003c/ul\u003e",
              "plain": "Sets the chance of the helmet being dropped upon this creature\u0027s death.\n \n \u003cul\u003e\n \u003cli\u003eA drop chance of 0.0F will never drop\n \u003cli\u003eA drop chance of 1.0F will always drop\n \u003c/ul\u003e\n@param chance of the helmet being dropped\n@throws UnsupportedOperationException when called on players"
            }
          },
          {
            "kind": "METHOD",
            "name": "setItemInHand(org.bukkit.inventory.ItemStack)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "stack"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Sets the item the entity is holding",
              "plain": "Sets the item the entity is holding\n@deprecated entities can duel wield now use the methods for the\n      specific hand instead\n@see #setItemInMainHand(ItemStack)\n@see #setItemInOffHand(ItemStack)\n@param stack The item to put into the entities hand"
            }
          },
          {
            "kind": "METHOD",
            "name": "setItemInHandDropChance(float)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "chance"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@deprecated entities can duel wield now use the methods for the specific\n hand instead\n@see #setItemInMainHandDropChance(float)\n@see #setItemInOffHandDropChance(float)\n@param chance drop chance"
            }
          },
          {
            "kind": "METHOD",
            "name": "setItemInMainHand(org.bukkit.inventory.ItemStack)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "item"
              }
            ],
            "comment": {
              "body": "Sets the item the entity is holding in their main hand.",
              "plain": "Sets the item the entity is holding in their main hand.\n@param item The item to put into the entities hand"
            }
          },
          {
            "kind": "METHOD",
            "name": "setItemInMainHandDropChance(float)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "chance"
              }
            ],
            "comment": {
              "body": "Sets the chance of the item this creature is currently holding in their\n main hand being dropped upon this creature\u0027s death.\n\n \u003cul\u003e\n \u003cli\u003eA drop chance of 0.0F will never drop\n \u003cli\u003eA drop chance of 1.0F will always drop\n \u003c/ul\u003e",
              "plain": "Sets the chance of the item this creature is currently holding in their\n main hand being dropped upon this creature\u0027s death.\n\n \u003cul\u003e\n \u003cli\u003eA drop chance of 0.0F will never drop\n \u003cli\u003eA drop chance of 1.0F will always drop\n \u003c/ul\u003e\n@param chance the chance of the main hand item being dropped\n@throws UnsupportedOperationException when called on players"
            }
          },
          {
            "kind": "METHOD",
            "name": "setItemInOffHand(org.bukkit.inventory.ItemStack)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "item"
              }
            ],
            "comment": {
              "body": "Sets the item the entity is holding in their off hand.",
              "plain": "Sets the item the entity is holding in their off hand.\n@param item The item to put into the entities hand"
            }
          },
          {
            "kind": "METHOD",
            "name": "setItemInOffHandDropChance(float)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "chance"
              }
            ],
            "comment": {
              "body": "Sets the chance of the off hand item being dropped upon this creature\u0027s\n death.\n\n \u003cul\u003e\n \u003cli\u003eA drop chance of 0.0F will never drop\n \u003cli\u003eA drop chance of 1.0F will always drop\n \u003c/ul\u003e",
              "plain": "Sets the chance of the off hand item being dropped upon this creature\u0027s\n death.\n\n \u003cul\u003e\n \u003cli\u003eA drop chance of 0.0F will never drop\n \u003cli\u003eA drop chance of 1.0F will always drop\n \u003c/ul\u003e\n@param chance the chance of off hand item being dropped\n@throws UnsupportedOperationException when called on players"
            }
          },
          {
            "kind": "METHOD",
            "name": "setLeggings(org.bukkit.inventory.ItemStack)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "leggings"
              }
            ],
            "comment": {
              "body": "Sets the leggings worn by the entity",
              "plain": "Sets the leggings worn by the entity\n@param leggings The leggings to put on the entity"
            }
          },
          {
            "kind": "METHOD",
            "name": "setLeggingsDropChance(float)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "chance"
              }
            ],
            "comment": {
              "body": "Sets the chance of the leggings being dropped upon this creature\u0027s\n death.\n \n \u003cul\u003e\n \u003cli\u003eA drop chance of 0.0F will never drop\n \u003cli\u003eA drop chance of 1.0F will always drop\n \u003c/ul\u003e",
              "plain": "Sets the chance of the leggings being dropped upon this creature\u0027s\n death.\n \n \u003cul\u003e\n \u003cli\u003eA drop chance of 0.0F will never drop\n \u003cli\u003eA drop chance of 1.0F will always drop\n \u003c/ul\u003e\n@param chance chance of the leggings being dropped\n@throws UnsupportedOperationException when called on players"
            }
          }
        ],
        "comment": {
          "body": "An interface to a creatures inventory",
          "plain": "An interface to a creatures inventory"
        }
      },
      {
        "kind": "ENUM",
        "name": "org.bukkit.inventory.EquipmentSlot",
        "children": [
          {
            "kind": "ENUM_CONSTANT",
            "name": "CHEST"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "EquipmentSlot()"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "FEET"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "HAND"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "HEAD"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "LEGS"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "OFF_HAND"
          },
          {
            "kind": "METHOD",
            "name": "valueOf(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "values()"
          }
        ]
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.inventory.FurnaceInventory",
        "children": [
          {
            "kind": "METHOD",
            "name": "getFuel()",
            "comment": {
              "body": "Get the current fuel.",
              "tags": "Returns The item.",
              "plain": "Get the current fuel.\n@return The item"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHolder()"
          },
          {
            "kind": "METHOD",
            "name": "getResult()",
            "comment": {
              "body": "Get the current item in the result slot.",
              "tags": "Returns The item.",
              "plain": "Get the current item in the result slot.\n@return The item"
            }
          },
          {
            "kind": "METHOD",
            "name": "getSmelting()",
            "comment": {
              "body": "Get the item currently smelting.",
              "tags": "Returns The item.",
              "plain": "Get the item currently smelting.\n@return The item"
            }
          },
          {
            "kind": "METHOD",
            "name": "setFuel(org.bukkit.inventory.ItemStack)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "stack"
              }
            ],
            "comment": {
              "body": "Set the current fuel.",
              "plain": "Set the current fuel.\n@param stack The item"
            }
          },
          {
            "kind": "METHOD",
            "name": "setResult(org.bukkit.inventory.ItemStack)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "stack"
              }
            ],
            "comment": {
              "body": "Set the current item in the result slot.",
              "plain": "Set the current item in the result slot.\n@param stack The item"
            }
          },
          {
            "kind": "METHOD",
            "name": "setSmelting(org.bukkit.inventory.ItemStack)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "stack"
              }
            ],
            "comment": {
              "body": "Set the item currently smelting.",
              "plain": "Set the item currently smelting.\n@param stack The item"
            }
          }
        ],
        "comment": {
          "body": "Interface to the inventory of a Furnace.",
          "plain": "Interface to the inventory of a Furnace."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.inventory.FurnaceRecipe",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "FurnaceRecipe(org.bukkit.inventory.ItemStack,org.bukkit.Material)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "result"
              },
              {
                "kind": "PARAMETER",
                "name": "source"
              }
            ],
            "comment": {
              "body": "Create a furnace recipe to craft the specified ItemStack.",
              "plain": "Create a furnace recipe to craft the specified ItemStack.\n@param result The item you want the recipe to create.\n@param source The input material."
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "FurnaceRecipe(org.bukkit.inventory.ItemStack,org.bukkit.Material,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "result"
              },
              {
                "kind": "PARAMETER",
                "name": "source"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Create a furnace recipe to craft the specified ItemStack.",
              "plain": "Create a furnace recipe to craft the specified ItemStack.\n@param result The item you want the recipe to create.\n@param source The input material.\n@param data The data value. (Note: This is currently ignored by the\n     CraftBukkit server.)\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "FurnaceRecipe(org.bukkit.inventory.ItemStack,org.bukkit.Material,int,float)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "experience"
              },
              {
                "kind": "PARAMETER",
                "name": "result"
              },
              {
                "kind": "PARAMETER",
                "name": "source"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Create a furnace recipe to craft the specified ItemStack.",
              "plain": "Create a furnace recipe to craft the specified ItemStack.\n@param result The item you want the recipe to create.\n@param source The input material.\n@param data The data value. (Note: This is currently ignored by the\n     CraftBukkit server.)\n@param experience The experience given by this recipe\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "FurnaceRecipe(org.bukkit.inventory.ItemStack,org.bukkit.material.MaterialData)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "result"
              },
              {
                "kind": "PARAMETER",
                "name": "source"
              }
            ],
            "comment": {
              "body": "Create a furnace recipe to craft the specified ItemStack.",
              "plain": "Create a furnace recipe to craft the specified ItemStack.\n@param result The item you want the recipe to create.\n@param source The input material."
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "FurnaceRecipe(org.bukkit.inventory.ItemStack,org.bukkit.material.MaterialData,float)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "experience"
              },
              {
                "kind": "PARAMETER",
                "name": "result"
              },
              {
                "kind": "PARAMETER",
                "name": "source"
              }
            ],
            "comment": {
              "body": "Create a furnace recipe to craft the specified ItemStack.",
              "plain": "Create a furnace recipe to craft the specified ItemStack.\n@param result The item you want the recipe to create.\n@param source The input material.\n@param experience The experience given by this recipe"
            }
          },
          {
            "kind": "FIELD",
            "name": "experience"
          },
          {
            "kind": "METHOD",
            "name": "getExperience()",
            "comment": {
              "body": "Get the experience given by this recipe.",
              "tags": "Returns experience level.",
              "plain": "Get the experience given by this recipe.\n@return experience level"
            }
          },
          {
            "kind": "METHOD",
            "name": "getInput()",
            "comment": {
              "body": "Get the input material.",
              "tags": "Returns The input material..",
              "plain": "Get the input material.\n@return The input material."
            }
          },
          {
            "kind": "METHOD",
            "name": "getResult()",
            "comment": {
              "body": "Get the result of this recipe.",
              "tags": "Returns The resulting stack..",
              "plain": "Get the result of this recipe.\n@return The resulting stack."
            }
          },
          {
            "kind": "FIELD",
            "name": "ingredient"
          },
          {
            "kind": "FIELD",
            "name": "output"
          },
          {
            "kind": "METHOD",
            "name": "setExperience(float)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "experience"
              }
            ],
            "comment": {
              "body": "Sets the experience given by this recipe.",
              "plain": "Sets the experience given by this recipe.\n@param experience the experience level"
            }
          },
          {
            "kind": "METHOD",
            "name": "setInput(org.bukkit.Material)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "input"
              }
            ],
            "comment": {
              "body": "Sets the input of this furnace recipe.",
              "tags": "Returns The changed recipe, so you can chain calls..",
              "plain": "Sets the input of this furnace recipe.\n@param input The input material.\n@return The changed recipe, so you can chain calls."
            }
          },
          {
            "kind": "METHOD",
            "name": "setInput(org.bukkit.Material,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "input"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Sets the input of this furnace recipe.",
              "tags": "Returns The changed recipe, so you can chain calls..",
              "plain": "Sets the input of this furnace recipe.\n@param input The input material.\n@param data The data value. (Note: This is currently ignored by the\n     CraftBukkit server.)\n@return The changed recipe, so you can chain calls.\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "setInput(org.bukkit.material.MaterialData)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "input"
              }
            ],
            "comment": {
              "body": "Sets the input of this furnace recipe.",
              "tags": "Returns The changed recipe, so you can chain calls..",
              "plain": "Sets the input of this furnace recipe.\n@param input The input material.\n@return The changed recipe, so you can chain calls."
            }
          }
        ],
        "comment": {
          "body": "Represents a smelting recipe.",
          "plain": "Represents a smelting recipe."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.inventory.HorseInventory",
        "comment": {
          "body": "An interface to the inventory of a Horse.",
          "plain": "An interface to the inventory of a Horse."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.inventory.Inventory",
        "children": [
          {
            "kind": "METHOD",
            "name": "addItem(org.bukkit.inventory.ItemStack...)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "items"
              }
            ],
            "comment": {
              "body": "Stores the given ItemStacks in the inventory. This will try to fill\n existing stacks and empty slots as well as it can.\n \u003cp\u003e\n The returned HashMap contains what it couldn\u0027t store, where the key is\n the index of the parameter, and the value is the ItemStack at that\n index of the varargs parameter. If all items are stored, it will return\n an empty HashMap.\n \u003cp\u003e\n If you pass in ItemStacks which exceed the maximum stack size for the\n Material, first they will be added to partial stacks where\n Material.getMaxStackSize() is not exceeded, up to\n Material.getMaxStackSize(). When there are no partial stacks left\n stacks will be split on Inventory.getMaxStackSize() allowing you to\n exceed the maximum stack size for that material.\n \u003cp\u003e\n It is known that in some implementations this method will also set\n the inputted argument amount to the number of that item not placed in\n slots.",
              "tags": "Returns A HashMap containing items that didn\u0027t fit..",
              "plain": "Stores the given ItemStacks in the inventory. This will try to fill\n existing stacks and empty slots as well as it can.\n \u003cp\u003e\n The returned HashMap contains what it couldn\u0027t store, where the key is\n the index of the parameter, and the value is the ItemStack at that\n index of the varargs parameter. If all items are stored, it will return\n an empty HashMap.\n \u003cp\u003e\n If you pass in ItemStacks which exceed the maximum stack size for the\n Material, first they will be added to partial stacks where\n Material.getMaxStackSize() is not exceeded, up to\n Material.getMaxStackSize(). When there are no partial stacks left\n stacks will be split on Inventory.getMaxStackSize() allowing you to\n exceed the maximum stack size for that material.\n \u003cp\u003e\n It is known that in some implementations this method will also set\n the inputted argument amount to the number of that item not placed in\n slots.\n@param items The ItemStacks to add\n@return A HashMap containing items that didn\u0027t fit.\n@throws IllegalArgumentException if items or any element in it is null"
            }
          },
          {
            "kind": "METHOD",
            "name": "all(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "materialId"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Returns a HashMap with all slots and ItemStacks in the inventory with\n given materialId.\n \u003cp\u003e\n The HashMap contains entries where, the key is the slot index, and the\n value is the ItemStack in that slot. If no matching ItemStack with the\n given materialId is found, an empty map is returned.",
              "tags": "Returns A HashMap containing the slot index, ItemStack pairs.",
              "plain": "Returns a HashMap with all slots and ItemStacks in the inventory with\n given materialId.\n \u003cp\u003e\n The HashMap contains entries where, the key is the slot index, and the\n value is the ItemStack in that slot. If no matching ItemStack with the\n given materialId is found, an empty map is returned.\n@param materialId The materialId to look for\n@return A HashMap containing the slot index, ItemStack pairs\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "all(org.bukkit.Material)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "material"
              }
            ],
            "comment": {
              "body": "Returns a HashMap with all slots and ItemStacks in the inventory with\n the given Material.\n \u003cp\u003e\n The HashMap contains entries where, the key is the slot index, and the\n value is the ItemStack in that slot. If no matching ItemStack with the\n given Material is found, an empty map is returned.",
              "tags": "Returns A HashMap containing the slot index, ItemStack pairs.",
              "plain": "Returns a HashMap with all slots and ItemStacks in the inventory with\n the given Material.\n \u003cp\u003e\n The HashMap contains entries where, the key is the slot index, and the\n value is the ItemStack in that slot. If no matching ItemStack with the\n given Material is found, an empty map is returned.\n@param material The material to look for\n@return A HashMap containing the slot index, ItemStack pairs\n@throws IllegalArgumentException if material is null"
            }
          },
          {
            "kind": "METHOD",
            "name": "all(org.bukkit.inventory.ItemStack)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "item"
              }
            ],
            "comment": {
              "body": "Finds all slots in the inventory containing any ItemStacks with the\n given ItemStack. This will only match slots if both the type and the\n amount of the stack match\n \u003cp\u003e\n The HashMap contains entries where, the key is the slot index, and the\n value is the ItemStack in that slot. If no matching ItemStack with the\n given Material is found, an empty map is returned.",
              "tags": "Returns A map from slot indexes to item at index.",
              "plain": "Finds all slots in the inventory containing any ItemStacks with the\n given ItemStack. This will only match slots if both the type and the\n amount of the stack match\n \u003cp\u003e\n The HashMap contains entries where, the key is the slot index, and the\n value is the ItemStack in that slot. If no matching ItemStack with the\n given Material is found, an empty map is returned.\n@param item The ItemStack to match against\n@return A map from slot indexes to item at index"
            }
          },
          {
            "kind": "METHOD",
            "name": "clear()",
            "comment": {
              "body": "Clears out the whole Inventory.",
              "plain": "Clears out the whole Inventory."
            }
          },
          {
            "kind": "METHOD",
            "name": "clear(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "index"
              }
            ],
            "comment": {
              "body": "Clears out a particular slot in the index.",
              "plain": "Clears out a particular slot in the index.\n@param index The index to empty."
            }
          },
          {
            "kind": "METHOD",
            "name": "contains(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "materialId"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Checks if the inventory contains any ItemStacks with the given\n materialId",
              "tags": "Returns true if an ItemStack in this inventory contains the materialId.",
              "plain": "Checks if the inventory contains any ItemStacks with the given\n materialId\n@param materialId The materialId to check for\n@return true if an ItemStack in this inventory contains the materialId\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "contains(int,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "amount"
              },
              {
                "kind": "PARAMETER",
                "name": "materialId"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Checks if the inventory contains any ItemStacks with the given\n materialId, adding to at least the minimum amount specified.",
              "tags": "Returns true if this contains any matching ItemStack with the given\n     materialId and amount.",
              "plain": "Checks if the inventory contains any ItemStacks with the given\n materialId, adding to at least the minimum amount specified.\n@param materialId The materialId to check for\n@param amount The minimum amount to look for\n@return true if this contains any matching ItemStack with the given\n     materialId and amount\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "contains(org.bukkit.Material)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "material"
              }
            ],
            "comment": {
              "body": "Checks if the inventory contains any ItemStacks with the given\n material.",
              "tags": "Returns true if an ItemStack is found with the given Material.",
              "plain": "Checks if the inventory contains any ItemStacks with the given\n material.\n@param material The material to check for\n@return true if an ItemStack is found with the given Material\n@throws IllegalArgumentException if material is null"
            }
          },
          {
            "kind": "METHOD",
            "name": "contains(org.bukkit.Material,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "amount"
              },
              {
                "kind": "PARAMETER",
                "name": "material"
              }
            ],
            "comment": {
              "body": "Checks if the inventory contains any ItemStacks with the given\n material, adding to at least the minimum amount specified.",
              "tags": "Returns true if amount is less than 1, true if enough ItemStacks were\n     found to add to the given amount.",
              "plain": "Checks if the inventory contains any ItemStacks with the given\n material, adding to at least the minimum amount specified.\n@param material The material to check for\n@param amount The minimum amount\n@return true if amount is less than 1, true if enough ItemStacks were\n     found to add to the given amount\n@throws IllegalArgumentException if material is null"
            }
          },
          {
            "kind": "METHOD",
            "name": "contains(org.bukkit.inventory.ItemStack)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "item"
              }
            ],
            "comment": {
              "body": "Checks if the inventory contains any ItemStacks matching the given\n ItemStack.\n \u003cp\u003e\n This will only return true if both the type and the amount of the stack\n match.",
              "tags": "Returns false if item is null, true if any exactly matching ItemStacks\n     were found.",
              "plain": "Checks if the inventory contains any ItemStacks matching the given\n ItemStack.\n \u003cp\u003e\n This will only return true if both the type and the amount of the stack\n match.\n@param item The ItemStack to match against\n@return false if item is null, true if any exactly matching ItemStacks\n     were found"
            }
          },
          {
            "kind": "METHOD",
            "name": "contains(org.bukkit.inventory.ItemStack,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "amount"
              },
              {
                "kind": "PARAMETER",
                "name": "item"
              }
            ],
            "comment": {
              "body": "Checks if the inventory contains at least the minimum amount specified\n of exactly matching ItemStacks.\n \u003cp\u003e\n An ItemStack only counts if both the type and the amount of the stack\n match.",
              "tags": "Returns false if item is null, true if amount less than 1, true if\n     amount of exactly matching ItemStacks were found.",
              "plain": "Checks if the inventory contains at least the minimum amount specified\n of exactly matching ItemStacks.\n \u003cp\u003e\n An ItemStack only counts if both the type and the amount of the stack\n match.\n@param item the ItemStack to match against\n@param amount how many identical stacks to check for\n@return false if item is null, true if amount less than 1, true if\n     amount of exactly matching ItemStacks were found\n@see #containsAtLeast(ItemStack, int)"
            }
          },
          {
            "kind": "METHOD",
            "name": "containsAtLeast(org.bukkit.inventory.ItemStack,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "amount"
              },
              {
                "kind": "PARAMETER",
                "name": "item"
              }
            ],
            "comment": {
              "body": "Checks if the inventory contains ItemStacks matching the given\n ItemStack whose amounts sum to at least the minimum amount specified.",
              "tags": "Returns false if item is null, true if amount less than 1, true if\n     enough ItemStacks were found to add to the given amount.",
              "plain": "Checks if the inventory contains ItemStacks matching the given\n ItemStack whose amounts sum to at least the minimum amount specified.\n@param item the ItemStack to match against\n@param amount the minimum amount\n@return false if item is null, true if amount less than 1, true if\n     enough ItemStacks were found to add to the given amount"
            }
          },
          {
            "kind": "METHOD",
            "name": "first(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "materialId"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Finds the first slot in the inventory containing an ItemStack with the\n given materialId.",
              "tags": "Returns The slot index of the given materialId or -1 if not found.",
              "plain": "Finds the first slot in the inventory containing an ItemStack with the\n given materialId.\n@param materialId The materialId to look for\n@return The slot index of the given materialId or -1 if not found\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "first(org.bukkit.Material)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "material"
              }
            ],
            "comment": {
              "body": "Finds the first slot in the inventory containing an ItemStack with the\n given material",
              "tags": "Returns The slot index of the given Material or -1 if not found.",
              "plain": "Finds the first slot in the inventory containing an ItemStack with the\n given material\n@param material The material to look for\n@return The slot index of the given Material or -1 if not found\n@throws IllegalArgumentException if material is null"
            }
          },
          {
            "kind": "METHOD",
            "name": "first(org.bukkit.inventory.ItemStack)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "item"
              }
            ],
            "comment": {
              "body": "Returns the first slot in the inventory containing an ItemStack with\n the given stack. This will only match a slot if both the type and the\n amount of the stack match",
              "tags": "Returns The slot index of the given ItemStack or -1 if not found.",
              "plain": "Returns the first slot in the inventory containing an ItemStack with\n the given stack. This will only match a slot if both the type and the\n amount of the stack match\n@param item The ItemStack to match against\n@return The slot index of the given ItemStack or -1 if not found"
            }
          },
          {
            "kind": "METHOD",
            "name": "firstEmpty()",
            "comment": {
              "body": "Returns the first empty Slot.",
              "tags": "Returns The first empty Slot found, or -1 if no empty slots..",
              "plain": "Returns the first empty Slot.\n@return The first empty Slot found, or -1 if no empty slots."
            }
          },
          {
            "kind": "METHOD",
            "name": "getContents()",
            "comment": {
              "body": "Returns all ItemStacks from the inventory",
              "tags": "Returns An array of ItemStacks from the inventory..",
              "plain": "Returns all ItemStacks from the inventory\n@return An array of ItemStacks from the inventory."
            }
          },
          {
            "kind": "METHOD",
            "name": "getHolder()",
            "comment": {
              "body": "Gets the block or entity belonging to the open inventory",
              "tags": "Returns The holder of the inventory; null if it has no holder..",
              "plain": "Gets the block or entity belonging to the open inventory\n@return The holder of the inventory; null if it has no holder."
            }
          },
          {
            "kind": "METHOD",
            "name": "getItem(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "index"
              }
            ],
            "comment": {
              "body": "Returns the ItemStack found in the slot at the given index",
              "tags": "Returns The ItemStack in the slot.",
              "plain": "Returns the ItemStack found in the slot at the given index\n@param index The index of the Slot\u0027s ItemStack to return\n@return The ItemStack in the slot"
            }
          },
          {
            "kind": "METHOD",
            "name": "getLocation()",
            "comment": {
              "body": "Get the location of the block or entity which corresponds to this inventory. May return null if this container\n was custom created or is a virtual / subcontainer.",
              "tags": "Returns location or null if not applicable..",
              "plain": "Get the location of the block or entity which corresponds to this inventory. May return null if this container\n was custom created or is a virtual / subcontainer.\n@return location or null if not applicable."
            }
          },
          {
            "kind": "METHOD",
            "name": "getMaxStackSize()",
            "comment": {
              "body": "Returns the maximum stack size for an ItemStack in this inventory.",
              "tags": "Returns The maximum size for an ItemStack in this inventory..",
              "plain": "Returns the maximum stack size for an ItemStack in this inventory.\n@return The maximum size for an ItemStack in this inventory."
            }
          },
          {
            "kind": "METHOD",
            "name": "getName()",
            "comment": {
              "body": "Returns the name of the inventory",
              "tags": "Returns The String with the name of the inventory.",
              "plain": "Returns the name of the inventory\n@return The String with the name of the inventory"
            }
          },
          {
            "kind": "METHOD",
            "name": "getSize()",
            "comment": {
              "body": "Returns the size of the inventory",
              "tags": "Returns The size of the inventory.",
              "plain": "Returns the size of the inventory\n@return The size of the inventory"
            }
          },
          {
            "kind": "METHOD",
            "name": "getStorageContents()",
            "comment": {
              "body": "Return the contents from the section of the inventory where items can\n reasonably be expected to be stored. In most cases this will represent\n the entire inventory, but in some cases it may exclude armor or result\n slots.\n \u003cbr\u003e\n It is these contents which will be used for add / contains / remove\n methods which look for a specific stack.",
              "tags": "Returns inventory storage contents.",
              "plain": "Return the contents from the section of the inventory where items can\n reasonably be expected to be stored. In most cases this will represent\n the entire inventory, but in some cases it may exclude armor or result\n slots.\n \u003cbr\u003e\n It is these contents which will be used for add / contains / remove\n methods which look for a specific stack.\n@return inventory storage contents"
            }
          },
          {
            "kind": "METHOD",
            "name": "getTitle()",
            "comment": {
              "body": "Returns the title of this inventory.",
              "tags": "Returns A String with the title..",
              "plain": "Returns the title of this inventory.\n@return A String with the title."
            }
          },
          {
            "kind": "METHOD",
            "name": "getType()",
            "comment": {
              "body": "Returns what type of inventory this is.",
              "tags": "Returns The InventoryType representing the type of inventory..",
              "plain": "Returns what type of inventory this is.\n@return The InventoryType representing the type of inventory."
            }
          },
          {
            "kind": "METHOD",
            "name": "getViewers()",
            "comment": {
              "body": "Gets a list of players viewing the inventory. Note that a player is\n considered to be viewing their own inventory and internal crafting\n screen even when said inventory is not open. They will normally be\n considered to be viewing their inventory even when they have a\n different inventory screen open, but it\u0027s possible for customized\n inventory screens to exclude the viewer\u0027s inventory, so this should\n never be assumed to be non-empty.",
              "tags": "Returns A list of HumanEntities who are viewing this Inventory..",
              "plain": "Gets a list of players viewing the inventory. Note that a player is\n considered to be viewing their own inventory and internal crafting\n screen even when said inventory is not open. They will normally be\n considered to be viewing their inventory even when they have a\n different inventory screen open, but it\u0027s possible for customized\n inventory screens to exclude the viewer\u0027s inventory, so this should\n never be assumed to be non-empty.\n@return A list of HumanEntities who are viewing this Inventory."
            }
          },
          {
            "kind": "METHOD",
            "name": "iterator()"
          },
          {
            "kind": "METHOD",
            "name": "iterator(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "index"
              }
            ],
            "comment": {
              "body": "Returns an iterator starting at the given index. If the index is\n positive, then the first call to next() will return the item at that\n index; if it is negative, the first call to previous will return the\n item at index (getSize() + index).",
              "tags": "Returns An iterator..",
              "plain": "Returns an iterator starting at the given index. If the index is\n positive, then the first call to next() will return the item at that\n index; if it is negative, the first call to previous will return the\n item at index (getSize() + index).\n@param index The index.\n@return An iterator."
            }
          },
          {
            "kind": "METHOD",
            "name": "remove(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "materialId"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Removes all stacks in the inventory matching the given materialId.",
              "plain": "Removes all stacks in the inventory matching the given materialId.\n@param materialId The material to remove\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "remove(org.bukkit.Material)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "material"
              }
            ],
            "comment": {
              "body": "Removes all stacks in the inventory matching the given material.",
              "plain": "Removes all stacks in the inventory matching the given material.\n@param material The material to remove\n@throws IllegalArgumentException if material is null"
            }
          },
          {
            "kind": "METHOD",
            "name": "remove(org.bukkit.inventory.ItemStack)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "item"
              }
            ],
            "comment": {
              "body": "Removes all stacks in the inventory matching the given stack.\n \u003cp\u003e\n This will only match a slot if both the type and the amount of the\n stack match",
              "plain": "Removes all stacks in the inventory matching the given stack.\n \u003cp\u003e\n This will only match a slot if both the type and the amount of the\n stack match\n@param item The ItemStack to match against"
            }
          },
          {
            "kind": "METHOD",
            "name": "removeItem(org.bukkit.inventory.ItemStack...)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "items"
              }
            ],
            "comment": {
              "body": "Removes the given ItemStacks from the inventory.\n \u003cp\u003e\n It will try to remove \u0027as much as possible\u0027 from the types and amounts\n you give as arguments.\n \u003cp\u003e\n The returned HashMap contains what it couldn\u0027t remove, where the key is\n the index of the parameter, and the value is the ItemStack at that\n index of the varargs parameter. If all the given ItemStacks are\n removed, it will return an empty HashMap.\n \u003cp\u003e\n It is known that in some implementations this method will also set the\n inputted argument amount to the number of that item not removed from\n slots.",
              "tags": "Returns A HashMap containing items that couldn\u0027t be removed..",
              "plain": "Removes the given ItemStacks from the inventory.\n \u003cp\u003e\n It will try to remove \u0027as much as possible\u0027 from the types and amounts\n you give as arguments.\n \u003cp\u003e\n The returned HashMap contains what it couldn\u0027t remove, where the key is\n the index of the parameter, and the value is the ItemStack at that\n index of the varargs parameter. If all the given ItemStacks are\n removed, it will return an empty HashMap.\n \u003cp\u003e\n It is known that in some implementations this method will also set the\n inputted argument amount to the number of that item not removed from\n slots.\n@param items The ItemStacks to remove\n@return A HashMap containing items that couldn\u0027t be removed.\n@throws IllegalArgumentException if items is null"
            }
          },
          {
            "kind": "METHOD",
            "name": "setContents(org.bukkit.inventory.ItemStack[])",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "items"
              }
            ],
            "comment": {
              "body": "Completely replaces the inventory\u0027s contents. Removes all existing\n contents and replaces it with the ItemStacks given in the array.",
              "plain": "Completely replaces the inventory\u0027s contents. Removes all existing\n contents and replaces it with the ItemStacks given in the array.\n@param items A complete replacement for the contents; the length must\n     be less than or equal to {@link #getSize()}.\n@throws IllegalArgumentException If the array has more items than the\n     inventory."
            }
          },
          {
            "kind": "METHOD",
            "name": "setItem(int,org.bukkit.inventory.ItemStack)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "index"
              },
              {
                "kind": "PARAMETER",
                "name": "item"
              }
            ],
            "comment": {
              "body": "Stores the ItemStack at the given index of the inventory.",
              "plain": "Stores the ItemStack at the given index of the inventory.\n@param index The index where to put the ItemStack\n@param item The ItemStack to set"
            }
          },
          {
            "kind": "METHOD",
            "name": "setMaxStackSize(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "size"
              }
            ],
            "comment": {
              "body": "This method allows you to change the maximum stack size for an\n inventory.\n \u003cp\u003e\n \u003cb\u003eCaveats:\u003c/b\u003e\n \u003cul\u003e\n \u003cli\u003eNot all inventories respect this value.\n \u003cli\u003eStacks larger than 127 may be clipped when the world is saved.\n \u003cli\u003eThis value is not guaranteed to be preserved; be sure to set it\n     before every time you want to set a slot over the max stack size.\n \u003cli\u003eStacks larger than the default max size for this type of inventory\n     may not display correctly in the client.\n \u003c/ul\u003e",
              "plain": "This method allows you to change the maximum stack size for an\n inventory.\n \u003cp\u003e\n \u003cb\u003eCaveats:\u003c/b\u003e\n \u003cul\u003e\n \u003cli\u003eNot all inventories respect this value.\n \u003cli\u003eStacks larger than 127 may be clipped when the world is saved.\n \u003cli\u003eThis value is not guaranteed to be preserved; be sure to set it\n     before every time you want to set a slot over the max stack size.\n \u003cli\u003eStacks larger than the default max size for this type of inventory\n     may not display correctly in the client.\n \u003c/ul\u003e\n@param size The new maximum stack size for items in this inventory."
            }
          },
          {
            "kind": "METHOD",
            "name": "setStorageContents(org.bukkit.inventory.ItemStack[])",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "items"
              }
            ],
            "comment": {
              "body": "Put the given ItemStacks into the storage slots",
              "plain": "Put the given ItemStacks into the storage slots\n@param items The ItemStacks to use as storage contents\n@throws IllegalArgumentException If the array has more items than the\n inventory."
            }
          }
        ],
        "comment": {
          "body": "Interface to the various inventories. Behavior relating to \u003ca href\u003d\"org/bukkit/Material.html#AIR\"\u003e\u003ccode\u003eMaterial.AIR\u003c/code\u003e\u003c/a\u003e is unspecified.",
          "plain": "Interface to the various inventories. Behavior relating to {@link Material#AIR} is unspecified."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.inventory.InventoryHolder",
        "children": [
          {
            "kind": "METHOD",
            "name": "getInventory()",
            "comment": {
              "body": "Get the object\u0027s inventory.",
              "tags": "Returns The inventory..",
              "plain": "Get the object\u0027s inventory.\n@return The inventory."
            }
          }
        ]
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.inventory.InventoryView",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "InventoryView()"
          },
          {
            "kind": "FIELD",
            "name": "OUTSIDE"
          },
          {
            "kind": "METHOD",
            "name": "close()",
            "comment": {
              "body": "Closes the inventory view.",
              "plain": "Closes the inventory view."
            }
          },
          {
            "kind": "METHOD",
            "name": "convertSlot(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "rawSlot"
              }
            ],
            "comment": {
              "body": "Converts a raw slot ID into its local slot ID into whichever of the two\n inventories the slot points to.\n \u003cp\u003e\n If the raw slot refers to the upper inventory, it will be returned\n unchanged and thus be suitable for getTopInventory().getItem(); if it\n refers to the lower inventory, the output will differ from the input\n and be suitable for getBottomInventory().getItem().",
              "tags": "Returns The converted slot ID..",
              "plain": "Converts a raw slot ID into its local slot ID into whichever of the two\n inventories the slot points to.\n \u003cp\u003e\n If the raw slot refers to the upper inventory, it will be returned\n unchanged and thus be suitable for getTopInventory().getItem(); if it\n refers to the lower inventory, the output will differ from the input\n and be suitable for getBottomInventory().getItem().\n@param rawSlot The raw slot ID.\n@return The converted slot ID."
            }
          },
          {
            "kind": "METHOD",
            "name": "countSlots()",
            "comment": {
              "body": "Check the total number of slots in this view, combining the upper and\n lower inventories.\n \u003cp\u003e\n Note though that it\u0027s possible for this to be greater than the sum of\n the two inventories if for example some slots are not being used.",
              "tags": "Returns The total size.",
              "plain": "Check the total number of slots in this view, combining the upper and\n lower inventories.\n \u003cp\u003e\n Note though that it\u0027s possible for this to be greater than the sum of\n the two inventories if for example some slots are not being used.\n@return The total size"
            }
          },
          {
            "kind": "METHOD",
            "name": "getBottomInventory()",
            "comment": {
              "body": "Get the lower inventory involved in this transaction.",
              "tags": "Returns the inventory.",
              "plain": "Get the lower inventory involved in this transaction.\n@return the inventory"
            }
          },
          {
            "kind": "METHOD",
            "name": "getCursor()",
            "comment": {
              "body": "Get the item on the cursor of one of the viewing players.",
              "tags": "Returns The item on the player\u0027s cursor, or null if they aren\u0027t holding\n     one..",
              "plain": "Get the item on the cursor of one of the viewing players.\n@return The item on the player\u0027s cursor, or null if they aren\u0027t holding\n     one."
            }
          },
          {
            "kind": "METHOD",
            "name": "getItem(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "slot"
              }
            ],
            "comment": {
              "body": "Gets one item in this inventory view by its raw slot ID.",
              "tags": "Returns The item currently in the slot..",
              "plain": "Gets one item in this inventory view by its raw slot ID.\n@param slot The ID as returned by InventoryClickEvent.getRawSlot()\n@return The item currently in the slot."
            }
          },
          {
            "kind": "METHOD",
            "name": "getPlayer()",
            "comment": {
              "body": "Get the player viewing.",
              "tags": "Returns the player.",
              "plain": "Get the player viewing.\n@return the player"
            }
          },
          {
            "kind": "METHOD",
            "name": "getTitle()",
            "comment": {
              "body": "Get the title of this inventory window.",
              "tags": "Returns The title..",
              "plain": "Get the title of this inventory window.\n@return The title."
            }
          },
          {
            "kind": "METHOD",
            "name": "getTopInventory()",
            "comment": {
              "body": "Get the upper inventory involved in this transaction.",
              "tags": "Returns the inventory.",
              "plain": "Get the upper inventory involved in this transaction.\n@return the inventory"
            }
          },
          {
            "kind": "METHOD",
            "name": "getType()",
            "comment": {
              "body": "Determine the type of inventory involved in the transaction. This\n indicates the window style being shown. It will never return PLAYER,\n since that is common to all windows.",
              "tags": "Returns the inventory type.",
              "plain": "Determine the type of inventory involved in the transaction. This\n indicates the window style being shown. It will never return PLAYER,\n since that is common to all windows.\n@return the inventory type"
            }
          },
          {
            "kind": "ENUM",
            "name": "org.bukkit.inventory.InventoryView.Property",
            "children": [
              {
                "kind": "ENUM_CONSTANT",
                "name": "BREW_TIME",
                "comment": {
                  "body": "The progress of the down-pointing arrow in a brewing inventory.",
                  "plain": "The progress of the down-pointing arrow in a brewing inventory."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "BURN_TIME",
                "comment": {
                  "body": "The progress of the flame in a furnace inventory.",
                  "plain": "The progress of the flame in a furnace inventory."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "COOK_TIME",
                "comment": {
                  "body": "The progress of the right-pointing arrow in a furnace inventory.",
                  "plain": "The progress of the right-pointing arrow in a furnace inventory."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "ENCHANT_BUTTON1",
                "comment": {
                  "body": "In an enchanting inventory, the top button\u0027s experience level\n value.",
                  "plain": "In an enchanting inventory, the top button\u0027s experience level\n value."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "ENCHANT_BUTTON2",
                "comment": {
                  "body": "In an enchanting inventory, the middle button\u0027s experience level\n value.",
                  "plain": "In an enchanting inventory, the middle button\u0027s experience level\n value."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "ENCHANT_BUTTON3",
                "comment": {
                  "body": "In an enchanting inventory, the bottom button\u0027s experience level\n value.",
                  "plain": "In an enchanting inventory, the bottom button\u0027s experience level\n value."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "ENCHANT_ID1",
                "comment": {
                  "body": "In an enchanting inventory, the top button\u0027s enchantment\u0027s id",
                  "plain": "In an enchanting inventory, the top button\u0027s enchantment\u0027s id"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "ENCHANT_ID2",
                "comment": {
                  "body": "In an enchanting inventory, the middle button\u0027s enchantment\u0027s id",
                  "plain": "In an enchanting inventory, the middle button\u0027s enchantment\u0027s id"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "ENCHANT_ID3",
                "comment": {
                  "body": "In an enchanting inventory, the bottom button\u0027s enchantment\u0027s id",
                  "plain": "In an enchanting inventory, the bottom button\u0027s enchantment\u0027s id"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "ENCHANT_LEVEL1",
                "comment": {
                  "body": "In an enchanting inventory, the top button\u0027s level value.",
                  "plain": "In an enchanting inventory, the top button\u0027s level value."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "ENCHANT_LEVEL2",
                "comment": {
                  "body": "In an enchanting inventory, the middle button\u0027s level value.",
                  "plain": "In an enchanting inventory, the middle button\u0027s level value."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "ENCHANT_LEVEL3",
                "comment": {
                  "body": "In an enchanting inventory, the bottom button\u0027s level value.",
                  "plain": "In an enchanting inventory, the bottom button\u0027s level value."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "ENCHANT_XP_SEED",
                "comment": {
                  "body": "In an enchanting inventory, the first four bits of the player\u0027s xpSeed.",
                  "plain": "In an enchanting inventory, the first four bits of the player\u0027s xpSeed."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "LEVELS",
                "comment": {
                  "body": "In an beacon inventory, the levels of the beacon",
                  "plain": "In an beacon inventory, the levels of the beacon"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "PRIMARY_EFFECT",
                "comment": {
                  "body": "In an beacon inventory, the primary potion effect",
                  "plain": "In an beacon inventory, the primary potion effect"
                }
              },
              {
                "kind": "CONSTRUCTOR",
                "name": "Property(int,org.bukkit.event.inventory.InventoryType)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "appliesTo"
                  },
                  {
                    "kind": "PARAMETER",
                    "name": "id"
                  }
                ]
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "REPAIR_COST",
                "comment": {
                  "body": "The repair\u0027s cost in xp levels",
                  "plain": "The repair\u0027s cost in xp levels"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "SECONDARY_EFFECT",
                "comment": {
                  "body": "In an beacon inventory, the secondary potion effect",
                  "plain": "In an beacon inventory, the secondary potion effect"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "TICKS_FOR_CURRENT_FUEL",
                "comment": {
                  "body": "How many total ticks the current fuel should last.",
                  "plain": "How many total ticks the current fuel should last."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "TICKS_FOR_CURRENT_SMELTING",
                "comment": {
                  "body": "How many total ticks the current smelting should last.",
                  "plain": "How many total ticks the current smelting should last."
                }
              },
              {
                "kind": "METHOD",
                "name": "getId()",
                "deprecated": {
                  "deprecated": "true"
                },
                "comment": {
                  "tags": "Returns the id of this view.",
                  "plain": "@return the id of this view\n@deprecated Magic value"
                }
              },
              {
                "kind": "METHOD",
                "name": "getType()"
              },
              {
                "kind": "FIELD",
                "name": "id"
              },
              {
                "kind": "FIELD",
                "name": "style"
              },
              {
                "kind": "METHOD",
                "name": "valueOf(java.lang.String)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "name"
                  }
                ]
              },
              {
                "kind": "METHOD",
                "name": "values()"
              }
            ],
            "comment": {
              "body": "Represents various extra properties of certain inventory windows.",
              "plain": "Represents various extra properties of certain inventory windows."
            }
          },
          {
            "kind": "METHOD",
            "name": "setCursor(org.bukkit.inventory.ItemStack)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "item"
              }
            ],
            "comment": {
              "body": "Sets the item on the cursor of one of the viewing players.",
              "plain": "Sets the item on the cursor of one of the viewing players.\n@param item The item to put on the cursor, or null to remove the item\n     on their cursor."
            }
          },
          {
            "kind": "METHOD",
            "name": "setItem(int,org.bukkit.inventory.ItemStack)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "item"
              },
              {
                "kind": "PARAMETER",
                "name": "slot"
              }
            ],
            "comment": {
              "body": "Sets one item in this inventory view by its raw slot ID.\n \u003cp\u003e\n Note: If slot ID -999 is chosen, it may be expected that the item is\n dropped on the ground. This is not required behaviour, however.",
              "plain": "Sets one item in this inventory view by its raw slot ID.\n \u003cp\u003e\n Note: If slot ID -999 is chosen, it may be expected that the item is\n dropped on the ground. This is not required behaviour, however.\n@param slot The ID as returned by InventoryClickEvent.getRawSlot()\n@param item The new item to put in the slot, or null to clear it."
            }
          },
          {
            "kind": "METHOD",
            "name": "setProperty(org.bukkit.inventory.InventoryView.Property,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "prop"
              },
              {
                "kind": "PARAMETER",
                "name": "value"
              }
            ],
            "comment": {
              "body": "Sets an extra property of this inventory if supported by that\n inventory, for example the state of a progress bar.",
              "tags": "Returns true if the property was updated successfully, false if the\n     property is not supported by that inventory.",
              "plain": "Sets an extra property of this inventory if supported by that\n inventory, for example the state of a progress bar.\n@param prop the window property to update\n@param value the new value for the window property\n@return true if the property was updated successfully, false if the\n     property is not supported by that inventory"
            }
          }
        ],
        "comment": {
          "body": "Represents a view linking two inventories and a single player (whose\n inventory may or may not be one of the two).\n \u003cp\u003e\n Note: If you implement this interface but fail to satisfy the expected\n contracts of certain methods, there\u0027s no guarantee that the game will work\n as it should.",
          "plain": "Represents a view linking two inventories and a single player (whose\n inventory may or may not be one of the two).\n \u003cp\u003e\n Note: If you implement this interface but fail to satisfy the expected\n contracts of certain methods, there\u0027s no guarantee that the game will work\n as it should."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.inventory.ItemFactory",
        "children": [
          {
            "kind": "METHOD",
            "name": "asMetaFor(org.bukkit.inventory.meta.ItemMeta,org.bukkit.Material)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "material"
              },
              {
                "kind": "PARAMETER",
                "name": "meta"
              }
            ],
            "comment": {
              "body": "Returns an appropriate item meta for the specified material.\n \u003cp\u003e\n The item meta returned will always be a valid meta for a given\n ItemStack of the specified material. It may be a more or less specific\n meta, and could also be the same meta or meta type as the parameter.\n The item meta returned will also always be the most appropriate meta.\n \u003cp\u003e\n Example, if a \u003ca href\u003d\"org/bukkit/inventory/meta/SkullMeta.html\" title\u003d\"interface in org.bukkit.inventory.meta\"\u003e\u003ccode\u003eSkullMeta\u003c/code\u003e\u003c/a\u003e is being applied to a book, this method\n would return a \u003ca href\u003d\"org/bukkit/inventory/meta/BookMeta.html\" title\u003d\"interface in org.bukkit.inventory.meta\"\u003e\u003ccode\u003eBookMeta\u003c/code\u003e\u003c/a\u003e containing all information in the\n specified meta that is applicable to an \u003ca href\u003d\"org/bukkit/inventory/meta/ItemMeta.html\" title\u003d\"interface in org.bukkit.inventory.meta\"\u003e\u003ccode\u003eItemMeta\u003c/code\u003e\u003c/a\u003e, the highest\n common interface.",
              "tags": "Returns An appropriate item meta for the specified item material. No\n     guarantees are made as to if a copy is returned. This will be null for air..",
              "plain": "Returns an appropriate item meta for the specified material.\n \u003cp\u003e\n The item meta returned will always be a valid meta for a given\n ItemStack of the specified material. It may be a more or less specific\n meta, and could also be the same meta or meta type as the parameter.\n The item meta returned will also always be the most appropriate meta.\n \u003cp\u003e\n Example, if a {@link SkullMeta} is being applied to a book, this method\n would return a {@link BookMeta} containing all information in the\n specified meta that is applicable to an {@link ItemMeta}, the highest\n common interface.\n@param meta the meta to convert\n@param material the material to convert the meta for\n@return An appropriate item meta for the specified item material. No\n     guarantees are made as to if a copy is returned. This will be null for air.\n@throws IllegalArgumentException if the specified meta was not created\n     by this factory"
            }
          },
          {
            "kind": "METHOD",
            "name": "asMetaFor(org.bukkit.inventory.meta.ItemMeta,org.bukkit.inventory.ItemStack)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "meta"
              },
              {
                "kind": "PARAMETER",
                "name": "stack"
              }
            ],
            "comment": {
              "body": "Returns an appropriate item meta for the specified stack.\n \u003cp\u003e\n The item meta returned will always be a valid meta for a given\n ItemStack of the specified material. It may be a more or less specific\n meta, and could also be the same meta or meta type as the parameter.\n The item meta returned will also always be the most appropriate meta.\n \u003cp\u003e\n Example, if a \u003ca href\u003d\"org/bukkit/inventory/meta/SkullMeta.html\" title\u003d\"interface in org.bukkit.inventory.meta\"\u003e\u003ccode\u003eSkullMeta\u003c/code\u003e\u003c/a\u003e is being applied to a book, this method\n would return a \u003ca href\u003d\"org/bukkit/inventory/meta/BookMeta.html\" title\u003d\"interface in org.bukkit.inventory.meta\"\u003e\u003ccode\u003eBookMeta\u003c/code\u003e\u003c/a\u003e containing all information in the\n specified meta that is applicable to an \u003ca href\u003d\"org/bukkit/inventory/meta/ItemMeta.html\" title\u003d\"interface in org.bukkit.inventory.meta\"\u003e\u003ccode\u003eItemMeta\u003c/code\u003e\u003c/a\u003e, the highest\n common interface.",
              "tags": "Returns An appropriate item meta for the specified item stack. No\n     guarantees are made as to if a copy is returned. This will be null\n     for a stack of air..",
              "plain": "Returns an appropriate item meta for the specified stack.\n \u003cp\u003e\n The item meta returned will always be a valid meta for a given\n ItemStack of the specified material. It may be a more or less specific\n meta, and could also be the same meta or meta type as the parameter.\n The item meta returned will also always be the most appropriate meta.\n \u003cp\u003e\n Example, if a {@link SkullMeta} is being applied to a book, this method\n would return a {@link BookMeta} containing all information in the\n specified meta that is applicable to an {@link ItemMeta}, the highest\n common interface.\n@param meta the meta to convert\n@param stack the stack to convert the meta for\n@return An appropriate item meta for the specified item stack. No\n     guarantees are made as to if a copy is returned. This will be null\n     for a stack of air.\n@throws IllegalArgumentException if the specified meta was not created\n     by this factory"
            }
          },
          {
            "kind": "METHOD",
            "name": "ensureServerConversions(org.bukkit.inventory.ItemStack)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "item"
              }
            ],
            "comment": {
              "body": "Minecart updates are converting simple item stacks into more complex NBT oriented Item Stacks.\n\n Use this method to to ensure any desired data conversions are processed.\n The input itemstack will not be the same as the returned itemstack.",
              "tags": "Returns A potentially Data Converted ItemStack.",
              "plain": "Minecart updates are converting simple item stacks into more complex NBT oriented Item Stacks.\n\n Use this method to to ensure any desired data conversions are processed.\n The input itemstack will not be the same as the returned itemstack.\n@param item The item to process conversions on\n@return A potentially Data Converted ItemStack"
            }
          },
          {
            "kind": "METHOD",
            "name": "equals(org.bukkit.inventory.meta.ItemMeta,org.bukkit.inventory.meta.ItemMeta)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "meta1"
              },
              {
                "kind": "PARAMETER",
                "name": "meta2"
              }
            ],
            "comment": {
              "body": "This method is used to compare two item meta data objects.",
              "tags": "Returns false if one of the meta has data the other does not, otherwise\n     true.",
              "plain": "This method is used to compare two item meta data objects.\n@param meta1 First meta to compare, and may be null to indicate no data\n@param meta2 Second meta to compare, and may be null to indicate no\n     data\n@return false if one of the meta has data the other does not, otherwise\n     true\n@throws IllegalArgumentException if either meta was not created by this\n     factory"
            }
          },
          {
            "kind": "METHOD",
            "name": "getDefaultLeatherColor()",
            "comment": {
              "body": "Returns the default color for all leather armor.",
              "tags": "Returns the default color for leather armor.",
              "plain": "Returns the default color for all leather armor.\n@return the default color for leather armor"
            }
          },
          {
            "kind": "METHOD",
            "name": "getI18NDisplayName(org.bukkit.inventory.ItemStack)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "item"
              }
            ],
            "comment": {
              "body": "Gets the Display name as seen in the Client.\n Currently the server only supports the English language. To override this,\n You must replace the language file embedded in the server jar.",
              "tags": "Returns Display name of Item.",
              "plain": "Gets the Display name as seen in the Client.\n Currently the server only supports the English language. To override this,\n You must replace the language file embedded in the server jar.\n@param item Item to return Display name of\n@return Display name of Item"
            }
          },
          {
            "kind": "METHOD",
            "name": "getItemMeta(org.bukkit.Material)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "material"
              }
            ],
            "comment": {
              "body": "This creates a new item meta for the material.",
              "tags": "Returns a new ItemMeta that could be applied to an item stack of the\n     specified material.",
              "plain": "This creates a new item meta for the material.\n@param material The material to consider as base for the meta\n@return a new ItemMeta that could be applied to an item stack of the\n     specified material"
            }
          },
          {
            "kind": "METHOD",
            "name": "isApplicable(org.bukkit.inventory.meta.ItemMeta,org.bukkit.Material)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "material"
              },
              {
                "kind": "PARAMETER",
                "name": "meta"
              }
            ],
            "comment": {
              "body": "This method checks the item meta to confirm that it is applicable (no\n data lost if applied) to the specified Material.\n \u003cp\u003e\n A \u003ca href\u003d\"org/bukkit/inventory/meta/SkullMeta.html\" title\u003d\"interface in org.bukkit.inventory.meta\"\u003e\u003ccode\u003eSkullMeta\u003c/code\u003e\u003c/a\u003e would not be valid for a sword, but a normal \u003ca href\u003d\"org/bukkit/inventory/meta/ItemMeta.html\" title\u003d\"interface in org.bukkit.inventory.meta\"\u003e\u003ccode\u003eItemMeta\u003c/code\u003e\u003c/a\u003e from an enchanted dirt block would.",
              "tags": "Returns true if the meta can be applied without losing data, false\n     otherwise.",
              "plain": "This method checks the item meta to confirm that it is applicable (no\n data lost if applied) to the specified Material.\n \u003cp\u003e\n A {@link SkullMeta} would not be valid for a sword, but a normal {@link ItemMeta} from an enchanted dirt block would.\n@param meta Meta to check\n@param material Material that meta will be applied to\n@return true if the meta can be applied without losing data, false\n     otherwise\n@throws IllegalArgumentException if the meta was not created by this\n     factory"
            }
          },
          {
            "kind": "METHOD",
            "name": "isApplicable(org.bukkit.inventory.meta.ItemMeta,org.bukkit.inventory.ItemStack)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "meta"
              },
              {
                "kind": "PARAMETER",
                "name": "stack"
              }
            ],
            "comment": {
              "body": "This method checks the item meta to confirm that it is applicable (no\n data lost if applied) to the specified ItemStack.\n \u003cp\u003e\n A \u003ca href\u003d\"org/bukkit/inventory/meta/SkullMeta.html\" title\u003d\"interface in org.bukkit.inventory.meta\"\u003e\u003ccode\u003eSkullMeta\u003c/code\u003e\u003c/a\u003e would not be valid for a sword, but a normal \u003ca href\u003d\"org/bukkit/inventory/meta/ItemMeta.html\" title\u003d\"interface in org.bukkit.inventory.meta\"\u003e\u003ccode\u003eItemMeta\u003c/code\u003e\u003c/a\u003e from an enchanted dirt block would.",
              "tags": "Returns true if the meta can be applied without losing data, false\n     otherwise.",
              "plain": "This method checks the item meta to confirm that it is applicable (no\n data lost if applied) to the specified ItemStack.\n \u003cp\u003e\n A {@link SkullMeta} would not be valid for a sword, but a normal {@link ItemMeta} from an enchanted dirt block would.\n@param meta Meta to check\n@param stack Item that meta will be applied to\n@return true if the meta can be applied without losing data, false\n     otherwise\n@throws IllegalArgumentException if the meta was not created by this\n     factory"
            }
          }
        ],
        "comment": {
          "body": "An instance of the ItemFactory can be obtained with \u003ca href\u003d\"org/bukkit/Server.html#getItemFactory()\"\u003e\u003ccode\u003eServer.getItemFactory()\u003c/code\u003e\u003c/a\u003e.\n \u003cp\u003e\n The ItemFactory is solely responsible for creating item meta containers to\n apply on item stacks.",
          "plain": "An instance of the ItemFactory can be obtained with {@link Server#getItemFactory()}.\n \u003cp\u003e\n The ItemFactory is solely responsible for creating item meta containers to\n apply on item stacks."
        }
      },
      {
        "kind": "ENUM",
        "name": "org.bukkit.inventory.ItemFlag",
        "children": [
          {
            "kind": "ENUM_CONSTANT",
            "name": "HIDE_ATTRIBUTES",
            "comment": {
              "body": "Setting to show/hide Attributes like Damage",
              "plain": "Setting to show/hide Attributes like Damage"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "HIDE_DESTROYS",
            "comment": {
              "body": "Setting to show/hide what the ItemStack can break/destroy",
              "plain": "Setting to show/hide what the ItemStack can break/destroy"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "HIDE_ENCHANTS",
            "comment": {
              "body": "Setting to show/hide enchants",
              "plain": "Setting to show/hide enchants"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "HIDE_PLACED_ON",
            "comment": {
              "body": "Setting to show/hide where this ItemStack can be build/placed on",
              "plain": "Setting to show/hide where this ItemStack can be build/placed on"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "HIDE_POTION_EFFECTS",
            "comment": {
              "body": "Setting to show/hide potion effects on this ItemStack",
              "plain": "Setting to show/hide potion effects on this ItemStack"
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "HIDE_UNBREAKABLE",
            "comment": {
              "body": "Setting to show/hide the unbreakable State",
              "plain": "Setting to show/hide the unbreakable State"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "ItemFlag()"
          },
          {
            "kind": "METHOD",
            "name": "valueOf(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "values()"
          }
        ],
        "comment": {
          "body": "A ItemFlag can hide some Attributes from ItemStacks",
          "plain": "A ItemFlag can hide some Attributes from ItemStacks"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.inventory.ItemStack",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "ItemStack()"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "ItemStack(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Defaults stack size to 1, with no extra data",
              "plain": "Defaults stack size to 1, with no extra data\n@param type item material id\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "ItemStack(int,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "amount"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "An item stack with no extra data",
              "plain": "An item stack with no extra data\n@param type item material id\n@param amount stack size\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "ItemStack(int,int,short)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "amount"
              },
              {
                "kind": "PARAMETER",
                "name": "damage"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "An item stack with the specified damage / durability",
              "plain": "An item stack with the specified damage / durability\n@param type item material id\n@param amount stack size\n@param damage durability / damage\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "ItemStack(int,int,short,java.lang.Byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "amount"
              },
              {
                "kind": "PARAMETER",
                "name": "damage"
              },
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@param amount the amount in the stack\n@param damage the damage value of the item\n@param data the data value or null\n@deprecated this method uses an ambiguous data byte object"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "ItemStack(org.bukkit.Material)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "comment": {
              "body": "Defaults stack size to 1, with no extra data",
              "plain": "Defaults stack size to 1, with no extra data\n@param type item material"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "ItemStack(org.bukkit.Material,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "amount"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "comment": {
              "body": "An item stack with no extra data",
              "plain": "An item stack with no extra data\n@param type item material\n@param amount stack size"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "ItemStack(org.bukkit.Material,int,short)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "amount"
              },
              {
                "kind": "PARAMETER",
                "name": "damage"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "comment": {
              "body": "An item stack with the specified damage / durability",
              "plain": "An item stack with the specified damage / durability\n@param type item material\n@param amount stack size\n@param damage durability / damage"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "ItemStack(org.bukkit.Material,int,short,java.lang.Byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "amount"
              },
              {
                "kind": "PARAMETER",
                "name": "damage"
              },
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the type\n@param amount the amount in the stack\n@param damage the damage value of the item\n@param data the data value or null\n@deprecated this method uses an ambiguous data byte object"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "ItemStack(org.bukkit.inventory.ItemStack)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "stack"
              }
            ],
            "comment": {
              "body": "Creates a new item stack derived from the specified stack",
              "plain": "Creates a new item stack derived from the specified stack\n@param stack the stack to copy\n@throws IllegalArgumentException if the specified stack is null or\n     returns an item meta not created by the item factory"
            }
          },
          {
            "kind": "METHOD",
            "name": "add()",
            "comment": {
              "body": "Adds 1 to this itemstack. Will not go over the items max stack size.",
              "tags": "Returns The same item (not a clone).",
              "plain": "Adds 1 to this itemstack. Will not go over the items max stack size.\n@return The same item (not a clone)"
            }
          },
          {
            "kind": "METHOD",
            "name": "add(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "qty"
              }
            ],
            "comment": {
              "body": "Adds quantity to this itemstack. Will not go over the items max stack size.",
              "tags": "Returns The same item (not a clone).",
              "plain": "Adds quantity to this itemstack. Will not go over the items max stack size.\n@param qty The amount to add\n@return The same item (not a clone)"
            }
          },
          {
            "kind": "METHOD",
            "name": "addEnchantment(org.bukkit.enchantments.Enchantment,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "ench"
              },
              {
                "kind": "PARAMETER",
                "name": "level"
              }
            ],
            "comment": {
              "body": "Adds the specified \u003ca href\u003d\"org/bukkit/enchantments/Enchantment.html\" title\u003d\"class in org.bukkit.enchantments\"\u003e\u003ccode\u003eEnchantment\u003c/code\u003e\u003c/a\u003e to this item stack.\n \u003cp\u003e\n If this item stack already contained the given enchantment (at any\n level), it will be replaced.",
              "plain": "Adds the specified {@link Enchantment} to this item stack.\n \u003cp\u003e\n If this item stack already contained the given enchantment (at any\n level), it will be replaced.\n@param ench Enchantment to add\n@param level Level of the enchantment\n@throws IllegalArgumentException if enchantment null, or enchantment is\n     not applicable"
            }
          },
          {
            "kind": "METHOD",
            "name": "addEnchantments(java.util.Map\u003corg.bukkit.enchantments.Enchantment,java.lang.Integer\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "enchantments"
              }
            ],
            "comment": {
              "body": "Adds the specified enchantments to this item stack.\n \u003cp\u003e\n This method is the same as calling \u003ca href\u003d\"org/bukkit/inventory/ItemStack.html#addEnchantment(org.bukkit.enchantments.Enchantment,int)\"\u003e\u003ccode\u003eItemStack.addEnchantment(org.bukkit.enchantments.Enchantment, int)\u003c/code\u003e\u003c/a\u003e for each\n element of the map.",
              "plain": "Adds the specified enchantments to this item stack.\n \u003cp\u003e\n This method is the same as calling {@link #addEnchantment(org.bukkit.enchantments.Enchantment, int)} for each\n element of the map.\n@param enchantments Enchantments to add\n@throws IllegalArgumentException if the specified enchantments is null\n@throws IllegalArgumentException if any specific enchantment or level\n     is null. \u003cb\u003eWarning\u003c/b\u003e: Some enchantments may be added before this\n     exception is thrown."
            }
          },
          {
            "kind": "METHOD",
            "name": "addItemFlags(org.bukkit.inventory.ItemFlag...)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "itemFlags"
              }
            ],
            "comment": {
              "body": "Set itemflags which should be ignored when rendering a ItemStack in the Client. This Method does silently ignore double set itemFlags.",
              "plain": "Set itemflags which should be ignored when rendering a ItemStack in the Client. This Method does silently ignore double set itemFlags.\n@param itemFlags The hideflags which shouldn\u0027t be rendered"
            }
          },
          {
            "kind": "METHOD",
            "name": "addUnsafeEnchantment(org.bukkit.enchantments.Enchantment,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "ench"
              },
              {
                "kind": "PARAMETER",
                "name": "level"
              }
            ],
            "comment": {
              "body": "Adds the specified \u003ca href\u003d\"org/bukkit/enchantments/Enchantment.html\" title\u003d\"class in org.bukkit.enchantments\"\u003e\u003ccode\u003eEnchantment\u003c/code\u003e\u003c/a\u003e to this item stack.\n \u003cp\u003e\n If this item stack already contained the given enchantment (at any\n level), it will be replaced.\n \u003cp\u003e\n This method is unsafe and will ignore level restrictions or item type.\n Use at your own discretion.",
              "plain": "Adds the specified {@link Enchantment} to this item stack.\n \u003cp\u003e\n If this item stack already contained the given enchantment (at any\n level), it will be replaced.\n \u003cp\u003e\n This method is unsafe and will ignore level restrictions or item type.\n Use at your own discretion.\n@param ench Enchantment to add\n@param level Level of the enchantment"
            }
          },
          {
            "kind": "METHOD",
            "name": "addUnsafeEnchantments(java.util.Map\u003corg.bukkit.enchantments.Enchantment,java.lang.Integer\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "enchantments"
              }
            ],
            "comment": {
              "body": "Adds the specified enchantments to this item stack in an unsafe manner.\n \u003cp\u003e\n This method is the same as calling \u003ca href\u003d\"org/bukkit/inventory/ItemStack.html#addUnsafeEnchantment(org.bukkit.enchantments.Enchantment,int)\"\u003e\u003ccode\u003eItemStack.addUnsafeEnchantment(org.bukkit.enchantments.Enchantment, int)\u003c/code\u003e\u003c/a\u003e for\n each element of the map.",
              "plain": "Adds the specified enchantments to this item stack in an unsafe manner.\n \u003cp\u003e\n This method is the same as calling {@link #addUnsafeEnchantment(org.bukkit.enchantments.Enchantment, int)} for\n each element of the map.\n@param enchantments Enchantments to add"
            }
          },
          {
            "kind": "FIELD",
            "name": "amount"
          },
          {
            "kind": "METHOD",
            "name": "asOne()",
            "comment": {
              "body": "Clones the itemstack and returns it a single quantity.",
              "tags": "Returns The new itemstack with 1 quantity.",
              "plain": "Clones the itemstack and returns it a single quantity.\n@return The new itemstack with 1 quantity"
            }
          },
          {
            "kind": "METHOD",
            "name": "asQuantity(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "qty"
              }
            ],
            "comment": {
              "body": "Clones the itemstack and returns it as the specified quantity",
              "tags": "Returns The new itemstack with specified quantity.",
              "plain": "Clones the itemstack and returns it as the specified quantity\n@param qty The quantity of the cloned item\n@return The new itemstack with specified quantity"
            }
          },
          {
            "kind": "METHOD",
            "name": "clone()"
          },
          {
            "kind": "METHOD",
            "name": "containsEnchantment(org.bukkit.enchantments.Enchantment)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "ench"
              }
            ],
            "comment": {
              "body": "Checks if this ItemStack contains the given \u003ca href\u003d\"org/bukkit/enchantments/Enchantment.html\" title\u003d\"class in org.bukkit.enchantments\"\u003e\u003ccode\u003eEnchantment\u003c/code\u003e\u003c/a\u003e",
              "tags": "Returns True if this has the given enchantment.",
              "plain": "Checks if this ItemStack contains the given {@link Enchantment}\n@param ench Enchantment to test\n@return True if this has the given enchantment"
            }
          },
          {
            "kind": "METHOD",
            "name": "createData(byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "data"
          },
          {
            "kind": "METHOD",
            "name": "deserialize(java.util.Map\u003cjava.lang.String,java.lang.Object\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "args"
              }
            ],
            "comment": {
              "body": "Required method for configuration serialization",
              "tags": "Returns deserialized item stack.",
              "plain": "Required method for configuration serialization\n@param args map to deserialize\n@return deserialized item stack\n@see ConfigurationSerializable"
            }
          },
          {
            "kind": "FIELD",
            "name": "durability"
          },
          {
            "kind": "METHOD",
            "name": "ensureServerConversions()",
            "comment": {
              "body": "Minecart updates are converting simple item stacks into more complex NBT oriented Item Stacks.\n\n Use this method to to ensure any desired data conversions are processed.\n The input itemstack will not be the same as the returned itemstack.",
              "tags": "Returns A potentially Data Converted ItemStack.",
              "plain": "Minecart updates are converting simple item stacks into more complex NBT oriented Item Stacks.\n\n Use this method to to ensure any desired data conversions are processed.\n The input itemstack will not be the same as the returned itemstack.\n@return A potentially Data Converted ItemStack"
            }
          },
          {
            "kind": "METHOD",
            "name": "equals(java.lang.Object)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "obj"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getAmount()",
            "comment": {
              "body": "Gets the amount of items in this stack",
              "tags": "Returns Amount of items in this stack.",
              "plain": "Gets the amount of items in this stack\n@return Amount of items in this stack"
            }
          },
          {
            "kind": "METHOD",
            "name": "getData()",
            "comment": {
              "body": "Gets the MaterialData for this stack of items",
              "tags": "Returns MaterialData for this item.",
              "plain": "Gets the MaterialData for this stack of items\n@return MaterialData for this item"
            }
          },
          {
            "kind": "METHOD",
            "name": "getDurability()",
            "comment": {
              "body": "Gets the durability of this item",
              "tags": "Returns Durability of this item.",
              "plain": "Gets the durability of this item\n@return Durability of this item"
            }
          },
          {
            "kind": "METHOD",
            "name": "getEnchantmentLevel(org.bukkit.enchantments.Enchantment)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "ench"
              }
            ],
            "comment": {
              "body": "Gets the level of the specified enchantment on this item stack",
              "tags": "Returns Level of the enchantment, or 0.",
              "plain": "Gets the level of the specified enchantment on this item stack\n@param ench Enchantment to check\n@return Level of the enchantment, or 0"
            }
          },
          {
            "kind": "METHOD",
            "name": "getEnchantments()",
            "comment": {
              "body": "Gets a map containing all enchantments and their levels on this item.",
              "tags": "Returns Map of enchantments..",
              "plain": "Gets a map containing all enchantments and their levels on this item.\n@return Map of enchantments."
            }
          },
          {
            "kind": "METHOD",
            "name": "getI18NDisplayName()",
            "comment": {
              "body": "Gets the Display name as seen in the Client.\n Currently the server only supports the English language. To override this,\n You must replace the language file embedded in the server jar.",
              "tags": "Returns Display name of Item.",
              "plain": "Gets the Display name as seen in the Client.\n Currently the server only supports the English language. To override this,\n You must replace the language file embedded in the server jar.\n@return Display name of Item"
            }
          },
          {
            "kind": "METHOD",
            "name": "getItemFlags()",
            "comment": {
              "body": "Get current set itemFlags. The collection returned is unmodifiable.",
              "tags": "Returns A set of all itemFlags set.",
              "plain": "Get current set itemFlags. The collection returned is unmodifiable.\n@return A set of all itemFlags set"
            }
          },
          {
            "kind": "METHOD",
            "name": "getItemMeta()",
            "comment": {
              "body": "Get a copy of this ItemStack\u0027s \u003ca href\u003d\"org/bukkit/inventory/meta/ItemMeta.html\" title\u003d\"interface in org.bukkit.inventory.meta\"\u003e\u003ccode\u003eItemMeta\u003c/code\u003e\u003c/a\u003e.",
              "tags": "Returns a copy of the current ItemStack\u0027s ItemData.",
              "plain": "Get a copy of this ItemStack\u0027s {@link ItemMeta}.\n@return a copy of the current ItemStack\u0027s ItemData"
            }
          },
          {
            "kind": "METHOD",
            "name": "getLore()",
            "comment": {
              "body": "If the item has lore, returns it, else it will return null",
              "tags": "Returns The lore, or null.",
              "plain": "If the item has lore, returns it, else it will return null\n@return The lore, or null"
            }
          },
          {
            "kind": "METHOD",
            "name": "getMaxItemUseDuration()"
          },
          {
            "kind": "METHOD",
            "name": "getMaxStackSize()",
            "comment": {
              "body": "Get the maximum stacksize for the material hold in this ItemStack.\n (Returns -1 if it has no idea)",
              "tags": "Returns The maximum you can stack this material to..",
              "plain": "Get the maximum stacksize for the material hold in this ItemStack.\n (Returns -1 if it has no idea)\n@return The maximum you can stack this material to."
            }
          },
          {
            "kind": "METHOD",
            "name": "getType()",
            "comment": {
              "body": "Gets the type of this item",
              "tags": "Returns Type of the items in this stack.",
              "plain": "Gets the type of this item\n@return Type of the items in this stack"
            }
          },
          {
            "kind": "METHOD",
            "name": "getType0()"
          },
          {
            "kind": "METHOD",
            "name": "getType0(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "id"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getTypeId()",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Gets the type id of this item",
              "tags": "Returns Type Id of the items in this stack.",
              "plain": "Gets the type id of this item\n@return Type Id of the items in this stack\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "hasItemFlag(org.bukkit.inventory.ItemFlag)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "flag"
              }
            ],
            "comment": {
              "body": "Check if the specified flag is present on this item.",
              "tags": "Returns if it is present.",
              "plain": "Check if the specified flag is present on this item.\n@param flag the flag to check\n@return if it is present"
            }
          },
          {
            "kind": "METHOD",
            "name": "hasItemMeta()",
            "comment": {
              "body": "Checks to see if any meta data has been defined.",
              "tags": "Returns Returns true if some meta data has been set for this item.",
              "plain": "Checks to see if any meta data has been defined.\n@return Returns true if some meta data has been set for this item"
            }
          },
          {
            "kind": "METHOD",
            "name": "hashCode()"
          },
          {
            "kind": "METHOD",
            "name": "isSimilar(org.bukkit.inventory.ItemStack)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "stack"
              }
            ],
            "comment": {
              "body": "This method is the same as equals, but does not consider stack size\n (amount).",
              "tags": "Returns true if the two stacks are equal, ignoring the amount.",
              "plain": "This method is the same as equals, but does not consider stack size\n (amount).\n@param stack the item stack to compare to\n@return true if the two stacks are equal, ignoring the amount"
            }
          },
          {
            "kind": "FIELD",
            "name": "meta"
          },
          {
            "kind": "METHOD",
            "name": "removeEnchantment(org.bukkit.enchantments.Enchantment)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "ench"
              }
            ],
            "comment": {
              "body": "Removes the specified \u003ca href\u003d\"org/bukkit/enchantments/Enchantment.html\" title\u003d\"class in org.bukkit.enchantments\"\u003e\u003ccode\u003eEnchantment\u003c/code\u003e\u003c/a\u003e if it exists on this\n ItemStack",
              "tags": "Returns Previous level, or 0.",
              "plain": "Removes the specified {@link Enchantment} if it exists on this\n ItemStack\n@param ench Enchantment to remove\n@return Previous level, or 0"
            }
          },
          {
            "kind": "METHOD",
            "name": "removeItemFlags(org.bukkit.inventory.ItemFlag...)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "itemFlags"
              }
            ],
            "comment": {
              "body": "Remove specific set of itemFlags. This tells the Client it should render it again. This Method does silently ignore double removed itemFlags.",
              "plain": "Remove specific set of itemFlags. This tells the Client it should render it again. This Method does silently ignore double removed itemFlags.\n@param itemFlags Hideflags which should be removed"
            }
          },
          {
            "kind": "METHOD",
            "name": "serialize()"
          },
          {
            "kind": "METHOD",
            "name": "setAmount(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "amount"
              }
            ],
            "comment": {
              "body": "Sets the amount of items in this stack",
              "plain": "Sets the amount of items in this stack\n@param amount New amount of items in this stack"
            }
          },
          {
            "kind": "METHOD",
            "name": "setData(org.bukkit.material.MaterialData)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              }
            ],
            "comment": {
              "body": "Sets the MaterialData for this stack of items",
              "plain": "Sets the MaterialData for this stack of items\n@param data New MaterialData for this item"
            }
          },
          {
            "kind": "METHOD",
            "name": "setDurability(short)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "durability"
              }
            ],
            "comment": {
              "body": "Sets the durability of this item",
              "plain": "Sets the durability of this item\n@param durability Durability of this item"
            }
          },
          {
            "kind": "METHOD",
            "name": "setItemMeta(org.bukkit.inventory.meta.ItemMeta)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "itemMeta"
              }
            ],
            "comment": {
              "body": "Set the ItemMeta of this ItemStack.",
              "tags": "Returns True if successfully applied ItemMeta, see \u003ca href\u003d\"org/bukkit/inventory/ItemFactory.html#isApplicable(org.bukkit.inventory.meta.ItemMeta,org.bukkit.inventory.ItemStack)\"\u003e\u003ccode\u003eItemFactory.isApplicable(ItemMeta, ItemStack)\u003c/code\u003e\u003c/a\u003e.",
              "plain": "Set the ItemMeta of this ItemStack.\n@param itemMeta new ItemMeta, or null to indicate meta data be cleared.\n@return True if successfully applied ItemMeta, see {@link ItemFactory#isApplicable(ItemMeta, ItemStack)}\n@throws IllegalArgumentException if the item meta was not created by\n     the {@link ItemFactory}"
            }
          },
          {
            "kind": "METHOD",
            "name": "setItemMeta0(org.bukkit.inventory.meta.ItemMeta,org.bukkit.Material)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "itemMeta"
              },
              {
                "kind": "PARAMETER",
                "name": "material"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "setLore(java.util.List\u003cjava.lang.String\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "lore"
              }
            ],
            "comment": {
              "body": "Sets the lore for this item.\n Removes lore when given null.",
              "plain": "Sets the lore for this item.\n Removes lore when given null.\n@param lore the lore that will be set"
            }
          },
          {
            "kind": "METHOD",
            "name": "setType(org.bukkit.Material)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "comment": {
              "body": "Sets the type of this item\n \u003cp\u003e\n Note that in doing so you will reset the MaterialData for this stack",
              "plain": "Sets the type of this item\n \u003cp\u003e\n Note that in doing so you will reset the MaterialData for this stack\n@param type New type to set the items in this stack to"
            }
          },
          {
            "kind": "METHOD",
            "name": "setTypeId(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Sets the type id of this item\n \u003cp\u003e\n Note that in doing so you will reset the MaterialData for this stack",
              "plain": "Sets the type id of this item\n \u003cp\u003e\n Note that in doing so you will reset the MaterialData for this stack\n@param type New type id to set the items in this stack to\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "subtract()",
            "comment": {
              "body": "Subtracts 1 to this itemstack.  Going to 0 or less will invalidate the item.",
              "tags": "Returns The same item (not a clone).",
              "plain": "Subtracts 1 to this itemstack.  Going to 0 or less will invalidate the item.\n@return The same item (not a clone)"
            }
          },
          {
            "kind": "METHOD",
            "name": "subtract(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "qty"
              }
            ],
            "comment": {
              "body": "Subtracts quantity to this itemstack. Going to 0 or less will invalidate the item.",
              "tags": "Returns The same item (not a clone).",
              "plain": "Subtracts quantity to this itemstack. Going to 0 or less will invalidate the item.\n@param qty The amount to add\n@return The same item (not a clone)"
            }
          },
          {
            "kind": "METHOD",
            "name": "toString()"
          },
          {
            "kind": "FIELD",
            "name": "type"
          }
        ],
        "comment": {
          "body": "Represents a stack of items",
          "plain": "Represents a stack of items"
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.inventory.LlamaInventory",
        "children": [
          {
            "kind": "METHOD",
            "name": "getDecor()"
          },
          {
            "kind": "METHOD",
            "name": "setDecor(org.bukkit.inventory.ItemStack)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "stack"
              }
            ],
            "comment": {
              "body": "Sets the item in the llama\u0027s decor slot.",
              "plain": "Sets the item in the llama\u0027s decor slot.\n@param stack the new item"
            }
          }
        ],
        "comment": {
          "body": "An interface to the inventory of a \u003ca href\u003d\"org/bukkit/entity/Llama.html\" title\u003d\"interface in org.bukkit.entity\"\u003e\u003ccode\u003eLlama\u003c/code\u003e\u003c/a\u003e.",
          "plain": "An interface to the inventory of a {@link Llama}."
        }
      },
      {
        "kind": "ENUM",
        "name": "org.bukkit.inventory.MainHand",
        "children": [
          {
            "kind": "ENUM_CONSTANT",
            "name": "LEFT"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "MainHand()"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "RIGHT"
          },
          {
            "kind": "METHOD",
            "name": "valueOf(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "values()"
          }
        ],
        "comment": {
          "body": "Represents the chosen main hand of a player",
          "plain": "Represents the chosen main hand of a player"
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.inventory.Merchant",
        "children": [
          {
            "kind": "METHOD",
            "name": "getRecipe(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "i"
              }
            ],
            "comment": {
              "body": "Get the recipe at a certain index of this merchant\u0027s trade list.",
              "tags": "Returns the recipe.",
              "plain": "Get the recipe at a certain index of this merchant\u0027s trade list.\n@param i the index\n@return the recipe\n@throws IndexOutOfBoundsException Throws when specified index is larger than Merchant\u0027s inventory"
            }
          },
          {
            "kind": "METHOD",
            "name": "getRecipeCount()",
            "comment": {
              "body": "Get the number of trades this merchant currently has available.",
              "tags": "Returns the recipe count.",
              "plain": "Get the number of trades this merchant currently has available.\n@return the recipe count"
            }
          },
          {
            "kind": "METHOD",
            "name": "getRecipes()",
            "comment": {
              "body": "Get a list of trades currently available from this merchant.",
              "tags": "Returns an immutable list of trades.",
              "plain": "Get a list of trades currently available from this merchant.\n@return an immutable list of trades"
            }
          },
          {
            "kind": "METHOD",
            "name": "getTrader()",
            "comment": {
              "body": "Gets the player this merchant is trading with, or null if it is not\n currently trading.",
              "tags": "Returns the trader, or null.",
              "plain": "Gets the player this merchant is trading with, or null if it is not\n currently trading.\n@return the trader, or null"
            }
          },
          {
            "kind": "METHOD",
            "name": "isTrading()",
            "comment": {
              "body": "Gets whether this merchant is currently trading.",
              "tags": "Returns whether the merchant is trading.",
              "plain": "Gets whether this merchant is currently trading.\n@return whether the merchant is trading"
            }
          },
          {
            "kind": "METHOD",
            "name": "setRecipe(int,org.bukkit.inventory.MerchantRecipe)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "i"
              },
              {
                "kind": "PARAMETER",
                "name": "recipe"
              }
            ],
            "comment": {
              "body": "Set the recipe at a certain index of this merchant\u0027s trade list.",
              "plain": "Set the recipe at a certain index of this merchant\u0027s trade list.\n@param i the index\n@param recipe the recipe\n@throws IndexOutOfBoundsException Throws when specified index is larger than Merchant\u0027s inventory"
            }
          },
          {
            "kind": "METHOD",
            "name": "setRecipes(java.util.List\u003corg.bukkit.inventory.MerchantRecipe\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "recipes"
              }
            ],
            "comment": {
              "body": "Set the list of trades currently available from this merchant.\n \u003cbr\u003e\n This will not change the selected trades of players currently trading\n with this merchant.",
              "plain": "Set the list of trades currently available from this merchant.\n \u003cbr\u003e\n This will not change the selected trades of players currently trading\n with this merchant.\n@param recipes a list of recipes"
            }
          }
        ],
        "comment": {
          "body": "Represents a merchant. A merchant is a special type of inventory which can\n facilitate custom trades between items.",
          "plain": "Represents a merchant. A merchant is a special type of inventory which can\n facilitate custom trades between items."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.inventory.MerchantInventory",
        "children": [
          {
            "kind": "METHOD",
            "name": "getSelectedRecipe()",
            "comment": {
              "body": "Get the currently selected recipe.",
              "tags": "Returns the currently selected recipe.",
              "plain": "Get the currently selected recipe.\n@return the currently selected recipe"
            }
          },
          {
            "kind": "METHOD",
            "name": "getSelectedRecipeIndex()",
            "comment": {
              "body": "Get the index of the currently selected recipe.",
              "tags": "Returns the index of the currently selected recipe.",
              "plain": "Get the index of the currently selected recipe.\n@return the index of the currently selected recipe"
            }
          }
        ],
        "comment": {
          "body": "Represents a trading inventory between a player and a merchant.\n \u003cbr\u003e\n The holder of this Inventory is the owning Villager, or null if the player is\n trading with a merchant created by a plugin.",
          "plain": "Represents a trading inventory between a player and a merchant.\n \u003cbr\u003e\n The holder of this Inventory is the owning Villager, or null if the player is\n trading with a merchant created by a plugin."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.inventory.MerchantRecipe",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "MerchantRecipe(org.bukkit.inventory.ItemStack,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "maxUses"
              },
              {
                "kind": "PARAMETER",
                "name": "result"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "MerchantRecipe(org.bukkit.inventory.ItemStack,int,int,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "experienceReward"
              },
              {
                "kind": "PARAMETER",
                "name": "maxUses"
              },
              {
                "kind": "PARAMETER",
                "name": "result"
              },
              {
                "kind": "PARAMETER",
                "name": "uses"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "addIngredient(org.bukkit.inventory.ItemStack)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "item"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "experienceReward"
          },
          {
            "kind": "METHOD",
            "name": "getIngredients()"
          },
          {
            "kind": "METHOD",
            "name": "getMaxUses()",
            "comment": {
              "body": "Get the maximum number of uses this trade has.\n \u003cbr\u003e\n The maximum uses of this trade may increase when a player trades with the\n owning merchant.",
              "tags": "Returns the maximum number of uses.",
              "plain": "Get the maximum number of uses this trade has.\n \u003cbr\u003e\n The maximum uses of this trade may increase when a player trades with the\n owning merchant.\n@return the maximum number of uses"
            }
          },
          {
            "kind": "METHOD",
            "name": "getResult()"
          },
          {
            "kind": "METHOD",
            "name": "getUses()",
            "comment": {
              "body": "Get the number of times this trade has been used.",
              "tags": "Returns the number of uses.",
              "plain": "Get the number of times this trade has been used.\n@return the number of uses"
            }
          },
          {
            "kind": "METHOD",
            "name": "hasExperienceReward()",
            "comment": {
              "body": "Whether to reward experience for the trade.",
              "tags": "Returns whether to reward experience for completing this trade.",
              "plain": "Whether to reward experience for the trade.\n@return whether to reward experience for completing this trade"
            }
          },
          {
            "kind": "FIELD",
            "name": "ingredients"
          },
          {
            "kind": "FIELD",
            "name": "maxUses"
          },
          {
            "kind": "METHOD",
            "name": "removeIngredient(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "index"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "result"
          },
          {
            "kind": "METHOD",
            "name": "setExperienceReward(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "flag"
              }
            ],
            "comment": {
              "body": "Set whether to reward experience for the trade.",
              "plain": "Set whether to reward experience for the trade.\n@param flag whether to reward experience for completing this trade"
            }
          },
          {
            "kind": "METHOD",
            "name": "setIngredients(java.util.List\u003corg.bukkit.inventory.ItemStack\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "ingredients"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "setMaxUses(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "maxUses"
              }
            ],
            "comment": {
              "body": "Set the maximum number of uses this trade has.",
              "plain": "Set the maximum number of uses this trade has.\n@param maxUses the maximum number of time this trade can be used"
            }
          },
          {
            "kind": "METHOD",
            "name": "setUses(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "uses"
              }
            ],
            "comment": {
              "body": "Set the number of times this trade has been used.",
              "plain": "Set the number of times this trade has been used.\n@param uses the number of uses"
            }
          },
          {
            "kind": "FIELD",
            "name": "uses"
          }
        ],
        "comment": {
          "body": "Represents a merchant\u0027s trade.\n\n Trades can take one or two ingredients, and provide one result. The\n ingredients\u0027 Itemstack amounts are respected in the trade.\n \u003cbr\u003e\n A trade has a limited number of uses, after which the trade can no longer be\n used, unless the player uses a different trade, which will cause its maximum\n uses to increase.\n \u003cbr\u003e\n A trade may or may not reward experience for being completed.",
          "plain": "Represents a merchant\u0027s trade.\n\n Trades can take one or two ingredients, and provide one result. The\n ingredients\u0027 Itemstack amounts are respected in the trade.\n \u003cbr\u003e\n A trade has a limited number of uses, after which the trade can no longer be\n used, unless the player uses a different trade, which will cause its maximum\n uses to increase.\n \u003cbr\u003e\n A trade may or may not reward experience for being completed.\n@see org.bukkit.event.entity.VillagerReplenishTradeEvent"
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.inventory.PlayerInventory",
        "children": [
          {
            "kind": "METHOD",
            "name": "clear(int,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "id"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Clears all matching items from the inventory. Setting either value to\n -1 will skip it\u0027s check, while setting both to -1 will clear all items\n in your inventory unconditionally.",
              "tags": "Returns The number of items cleared.",
              "plain": "Clears all matching items from the inventory. Setting either value to\n -1 will skip it\u0027s check, while setting both to -1 will clear all items\n in your inventory unconditionally.\n@param id the id of the item you want to clear from the inventory\n@param data the data of the item you want to clear from the inventory\n@return The number of items cleared\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "getArmorContents()",
            "comment": {
              "body": "Get all ItemStacks from the armor slots",
              "tags": "Returns All the ItemStacks from the armor slots.",
              "plain": "Get all ItemStacks from the armor slots\n@return All the ItemStacks from the armor slots"
            }
          },
          {
            "kind": "METHOD",
            "name": "getBoots()",
            "comment": {
              "body": "Return the ItemStack from the boots slot",
              "tags": "Returns The ItemStack in the boots slot.",
              "plain": "Return the ItemStack from the boots slot\n@return The ItemStack in the boots slot"
            }
          },
          {
            "kind": "METHOD",
            "name": "getChestplate()",
            "comment": {
              "body": "Return the ItemStack from the chestplate slot",
              "tags": "Returns The ItemStack in the chestplate slot.",
              "plain": "Return the ItemStack from the chestplate slot\n@return The ItemStack in the chestplate slot"
            }
          },
          {
            "kind": "METHOD",
            "name": "getExtraContents()",
            "comment": {
              "body": "Get all additional ItemStacks stored in this inventory.\n \u003cbr\u003e\n NB: What defines an extra slot is up to the implementation, however it\n will not be contained within \u003ca href\u003d\"org/bukkit/inventory/Inventory.html#getStorageContents()\"\u003e\u003ccode\u003eInventory.getStorageContents()\u003c/code\u003e\u003c/a\u003e or\n \u003ca href\u003d\"org/bukkit/inventory/PlayerInventory.html#getArmorContents()\"\u003e\u003ccode\u003ePlayerInventory.getArmorContents()\u003c/code\u003e\u003c/a\u003e",
              "tags": "Returns All additional ItemStacks.",
              "plain": "Get all additional ItemStacks stored in this inventory.\n \u003cbr\u003e\n NB: What defines an extra slot is up to the implementation, however it\n will not be contained within {@link #getStorageContents()} or\n {@link #getArmorContents()}\n@return All additional ItemStacks"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHeldItemSlot()",
            "comment": {
              "body": "Get the slot number of the currently held item",
              "tags": "Returns Held item slot number.",
              "plain": "Get the slot number of the currently held item\n@return Held item slot number"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHelmet()",
            "comment": {
              "body": "Return the ItemStack from the helmet slot",
              "tags": "Returns The ItemStack in the helmet slot.",
              "plain": "Return the ItemStack from the helmet slot\n@return The ItemStack in the helmet slot"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHolder()"
          },
          {
            "kind": "METHOD",
            "name": "getItem(org.bukkit.inventory.EquipmentSlot)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "slot"
              }
            ],
            "comment": {
              "body": "Gets the \u003ca href\u003d\"org/bukkit/inventory/ItemStack.html\" title\u003d\"class in org.bukkit.inventory\"\u003e\u003ccode\u003eItemStack\u003c/code\u003e\u003c/a\u003e found in the slot.",
              "tags": "Returns The item stack in the slot.",
              "plain": "Gets the {@link ItemStack} found in the slot.\n@param slot The slot\n@return The item stack in the slot"
            }
          },
          {
            "kind": "METHOD",
            "name": "getItemInHand()",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Gets a copy of the item the player is currently holding",
              "tags": "Returns the currently held item.",
              "plain": "Gets a copy of the item the player is currently holding\n@deprecated players can duel wield now use the methods for the\n      specific hand instead\n@see #getItemInMainHand()\n@see #getItemInOffHand()\n@return the currently held item"
            }
          },
          {
            "kind": "METHOD",
            "name": "getItemInMainHand()",
            "comment": {
              "body": "Gets a copy of the item the player is currently holding\n in their main hand.",
              "tags": "Returns the currently held item.",
              "plain": "Gets a copy of the item the player is currently holding\n in their main hand.\n@return the currently held item"
            }
          },
          {
            "kind": "METHOD",
            "name": "getItemInOffHand()",
            "comment": {
              "body": "Gets a copy of the item the player is currently holding\n in their off hand.",
              "tags": "Returns the currently held item.",
              "plain": "Gets a copy of the item the player is currently holding\n in their off hand.\n@return the currently held item"
            }
          },
          {
            "kind": "METHOD",
            "name": "getLeggings()",
            "comment": {
              "body": "Return the ItemStack from the leg slot",
              "tags": "Returns The ItemStack in the leg slot.",
              "plain": "Return the ItemStack from the leg slot\n@return The ItemStack in the leg slot"
            }
          },
          {
            "kind": "METHOD",
            "name": "setArmorContents(org.bukkit.inventory.ItemStack[])",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "items"
              }
            ],
            "comment": {
              "body": "Put the given ItemStacks into the armor slots",
              "plain": "Put the given ItemStacks into the armor slots\n@param items The ItemStacks to use as armour"
            }
          },
          {
            "kind": "METHOD",
            "name": "setBoots(org.bukkit.inventory.ItemStack)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "boots"
              }
            ],
            "comment": {
              "body": "Put the given ItemStack into the boots slot. This does not check if the\n ItemStack is a boots",
              "plain": "Put the given ItemStack into the boots slot. This does not check if the\n ItemStack is a boots\n@param boots The ItemStack to use as boots"
            }
          },
          {
            "kind": "METHOD",
            "name": "setChestplate(org.bukkit.inventory.ItemStack)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "chestplate"
              }
            ],
            "comment": {
              "body": "Put the given ItemStack into the chestplate slot. This does not check\n if the ItemStack is a chestplate",
              "plain": "Put the given ItemStack into the chestplate slot. This does not check\n if the ItemStack is a chestplate\n@param chestplate The ItemStack to use as chestplate"
            }
          },
          {
            "kind": "METHOD",
            "name": "setExtraContents(org.bukkit.inventory.ItemStack[])",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "items"
              }
            ],
            "comment": {
              "body": "Put the given ItemStacks into the extra slots\n \u003cbr\u003e\n See \u003ca href\u003d\"org/bukkit/inventory/PlayerInventory.html#getExtraContents()\"\u003e\u003ccode\u003ePlayerInventory.getExtraContents()\u003c/code\u003e\u003c/a\u003e for an explanation of extra slots.",
              "plain": "Put the given ItemStacks into the extra slots\n \u003cbr\u003e\n See {@link #getExtraContents()} for an explanation of extra slots.\n@param items The ItemStacks to use as extra"
            }
          },
          {
            "kind": "METHOD",
            "name": "setHeldItemSlot(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "slot"
              }
            ],
            "comment": {
              "body": "Set the slot number of the currently held item.\n \u003cp\u003e\n This validates whether the slot is between 0 and 8 inclusive.",
              "plain": "Set the slot number of the currently held item.\n \u003cp\u003e\n This validates whether the slot is between 0 and 8 inclusive.\n@param slot The new slot number\n@throws IllegalArgumentException Thrown if slot is not between 0 and 8\n     inclusive"
            }
          },
          {
            "kind": "METHOD",
            "name": "setHelmet(org.bukkit.inventory.ItemStack)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "helmet"
              }
            ],
            "comment": {
              "body": "Put the given ItemStack into the helmet slot. This does not check if\n the ItemStack is a helmet",
              "plain": "Put the given ItemStack into the helmet slot. This does not check if\n the ItemStack is a helmet\n@param helmet The ItemStack to use as helmet"
            }
          },
          {
            "kind": "METHOD",
            "name": "setItem(int,org.bukkit.inventory.ItemStack)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "index"
              },
              {
                "kind": "PARAMETER",
                "name": "item"
              }
            ],
            "comment": {
              "body": "Stores the ItemStack at the given index of the inventory.\n \u003cp\u003e\n Indexes 0 through 8 refer to the hotbar. 9 through 35 refer to the main inventory, counting up from 9 at the top\n left corner of the inventory, moving to the right, and moving to the row below it back on the left side when it\n reaches the end of the row. It follows the same path in the inventory like you would read a book.\n \u003cp\u003e\n Indexes 36 through 39 refer to the armor slots. Though you can set armor with this method using these indexes,\n you are encouraged to use the provided methods for those slots.\n \u003cp\u003e\n If you attempt to use this method with an index less than 0 or greater than 39, an ArrayIndexOutOfBounds\n exception will be thrown.",
              "plain": "Stores the ItemStack at the given index of the inventory.\n \u003cp\u003e\n Indexes 0 through 8 refer to the hotbar. 9 through 35 refer to the main inventory, counting up from 9 at the top\n left corner of the inventory, moving to the right, and moving to the row below it back on the left side when it\n reaches the end of the row. It follows the same path in the inventory like you would read a book.\n \u003cp\u003e\n Indexes 36 through 39 refer to the armor slots. Though you can set armor with this method using these indexes,\n you are encouraged to use the provided methods for those slots.\n \u003cp\u003e\n If you attempt to use this method with an index less than 0 or greater than 39, an ArrayIndexOutOfBounds\n exception will be thrown.\n@param index The index where to put the ItemStack\n@param item The ItemStack to set\n@throws ArrayIndexOutOfBoundsException when index \u0026lt; 0 || index \u0026gt; 39\n@see #setBoots(ItemStack)\n@see #setChestplate(ItemStack)\n@see #setHelmet(ItemStack)\n@see #setLeggings(ItemStack)"
            }
          },
          {
            "kind": "METHOD",
            "name": "setItem(org.bukkit.inventory.EquipmentSlot,org.bukkit.inventory.ItemStack)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "slot"
              },
              {
                "kind": "PARAMETER",
                "name": "stack"
              }
            ],
            "comment": {
              "body": "Sets the \u003ca href\u003d\"org/bukkit/inventory/ItemStack.html\" title\u003d\"class in org.bukkit.inventory\"\u003e\u003ccode\u003eItemStack\u003c/code\u003e\u003c/a\u003e at the given \u003ca href\u003d\"org/bukkit/inventory/EquipmentSlot.html\" title\u003d\"enum in org.bukkit.inventory\"\u003e\u003ccode\u003eEquipmentSlot\u003c/code\u003e\u003c/a\u003e.",
              "plain": "Sets the {@link ItemStack} at the given {@link EquipmentSlot}.\n@param slot The slot for the stack\n@param stack The item stack to set"
            }
          },
          {
            "kind": "METHOD",
            "name": "setItemInHand(org.bukkit.inventory.ItemStack)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "stack"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Sets the item the player is holding",
              "plain": "Sets the item the player is holding\n@deprecated players can duel wield now use the methods for the\n      specific hand instead\n@see #setItemInMainHand(ItemStack)\n@see #setItemInOffHand(ItemStack)\n@param stack The item to put into the player\u0027s hand"
            }
          },
          {
            "kind": "METHOD",
            "name": "setItemInMainHand(org.bukkit.inventory.ItemStack)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "item"
              }
            ],
            "comment": {
              "body": "Sets the item the player is holding in their main hand.",
              "plain": "Sets the item the player is holding in their main hand.\n@param item The item to put into the player\u0027s hand"
            }
          },
          {
            "kind": "METHOD",
            "name": "setItemInOffHand(org.bukkit.inventory.ItemStack)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "item"
              }
            ],
            "comment": {
              "body": "Sets the item the player is holding in their off hand.",
              "plain": "Sets the item the player is holding in their off hand.\n@param item The item to put into the player\u0027s hand"
            }
          },
          {
            "kind": "METHOD",
            "name": "setLeggings(org.bukkit.inventory.ItemStack)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "leggings"
              }
            ],
            "comment": {
              "body": "Put the given ItemStack into the leg slot. This does not check if the\n ItemStack is a pair of leggings",
              "plain": "Put the given ItemStack into the leg slot. This does not check if the\n ItemStack is a pair of leggings\n@param leggings The ItemStack to use as leggings"
            }
          }
        ],
        "comment": {
          "body": "Interface to the inventory of a Player, including the four armor slots and any extra slots.",
          "plain": "Interface to the inventory of a Player, including the four armor slots and any extra slots."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.inventory.Recipe",
        "children": [
          {
            "kind": "METHOD",
            "name": "getResult()",
            "comment": {
              "body": "Get the result of this recipe.",
              "tags": "Returns The result stack.",
              "plain": "Get the result of this recipe.\n@return The result stack"
            }
          }
        ],
        "comment": {
          "body": "Represents some type of crafting recipe.",
          "plain": "Represents some type of crafting recipe."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.inventory.SaddledHorseInventory"
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.inventory.ShapedRecipe",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "ShapedRecipe(org.bukkit.NamespacedKey,org.bukkit.inventory.ItemStack)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "key"
              },
              {
                "kind": "PARAMETER",
                "name": "result"
              }
            ],
            "comment": {
              "body": "Create a shaped recipe to craft the specified ItemStack. The\n constructor merely determines the result and type; to set the actual\n recipe, you\u0027ll need to call the appropriate methods.",
              "plain": "Create a shaped recipe to craft the specified ItemStack. The\n constructor merely determines the result and type; to set the actual\n recipe, you\u0027ll need to call the appropriate methods.\n@param key the unique recipe key\n@param result The item you want the recipe to create.\n@see ShapedRecipe#shape(String...)\n@see ShapedRecipe#setIngredient(char, Material)\n@see ShapedRecipe#setIngredient(char, Material, int)\n@see ShapedRecipe#setIngredient(char, MaterialData)"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "ShapedRecipe(org.bukkit.inventory.ItemStack)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "result"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            }
          },
          {
            "kind": "METHOD",
            "name": "getIngredientMap()",
            "comment": {
              "body": "Get a copy of the ingredients map.",
              "tags": "Returns The mapping of character to ingredients..",
              "plain": "Get a copy of the ingredients map.\n@return The mapping of character to ingredients."
            }
          },
          {
            "kind": "METHOD",
            "name": "getKey()"
          },
          {
            "kind": "METHOD",
            "name": "getResult()",
            "comment": {
              "body": "Get the result.",
              "tags": "Returns The result stack..",
              "plain": "Get the result.\n@return The result stack."
            }
          },
          {
            "kind": "METHOD",
            "name": "getShape()",
            "comment": {
              "body": "Get the shape.",
              "tags": "Returns The recipe\u0027s shape..",
              "plain": "Get the shape.\n@return The recipe\u0027s shape."
            }
          },
          {
            "kind": "FIELD",
            "name": "ingredients"
          },
          {
            "kind": "FIELD",
            "name": "key"
          },
          {
            "kind": "FIELD",
            "name": "output"
          },
          {
            "kind": "FIELD",
            "name": "rows"
          },
          {
            "kind": "METHOD",
            "name": "setIngredient(char,org.bukkit.Material)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "ingredient"
              },
              {
                "kind": "PARAMETER",
                "name": "key"
              }
            ],
            "comment": {
              "body": "Sets the material that a character in the recipe shape refers to.",
              "tags": "Returns The changed recipe, so you can chain calls..",
              "plain": "Sets the material that a character in the recipe shape refers to.\n@param key The character that represents the ingredient in the shape.\n@param ingredient The ingredient.\n@return The changed recipe, so you can chain calls."
            }
          },
          {
            "kind": "METHOD",
            "name": "setIngredient(char,org.bukkit.Material,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "ingredient"
              },
              {
                "kind": "PARAMETER",
                "name": "key"
              },
              {
                "kind": "PARAMETER",
                "name": "raw"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Sets the material that a character in the recipe shape refers to.",
              "tags": "Returns The changed recipe, so you can chain calls..",
              "plain": "Sets the material that a character in the recipe shape refers to.\n@param key The character that represents the ingredient in the shape.\n@param ingredient The ingredient.\n@param raw The raw material data as an integer.\n@return The changed recipe, so you can chain calls.\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "setIngredient(char,org.bukkit.material.MaterialData)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "ingredient"
              },
              {
                "kind": "PARAMETER",
                "name": "key"
              }
            ],
            "comment": {
              "body": "Sets the material that a character in the recipe shape refers to.",
              "tags": "Returns The changed recipe, so you can chain calls..",
              "plain": "Sets the material that a character in the recipe shape refers to.\n@param key The character that represents the ingredient in the shape.\n@param ingredient The ingredient.\n@return The changed recipe, so you can chain calls."
            }
          },
          {
            "kind": "METHOD",
            "name": "shape(java.lang.String...)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "shape"
              }
            ],
            "comment": {
              "body": "Set the shape of this recipe to the specified rows. Each character\n represents a different ingredient; exactly what each character\n represents is set separately. The first row supplied corresponds with\n the upper most part of the recipe on the workbench e.g. if all three\n rows are supplies the first string represents the top row on the\n workbench.",
              "tags": "Returns The changed recipe, so you can chain calls..",
              "plain": "Set the shape of this recipe to the specified rows. Each character\n represents a different ingredient; exactly what each character\n represents is set separately. The first row supplied corresponds with\n the upper most part of the recipe on the workbench e.g. if all three\n rows are supplies the first string represents the top row on the\n workbench.\n@param shape The rows of the recipe (up to 3 rows).\n@return The changed recipe, so you can chain calls."
            }
          }
        ],
        "comment": {
          "body": "Represents a shaped (ie normal) crafting recipe.",
          "plain": "Represents a shaped (ie normal) crafting recipe."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.inventory.ShapelessRecipe",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "ShapelessRecipe(org.bukkit.NamespacedKey,org.bukkit.inventory.ItemStack)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "key"
              },
              {
                "kind": "PARAMETER",
                "name": "result"
              }
            ],
            "comment": {
              "body": "Create a shapeless recipe to craft the specified ItemStack. The\n constructor merely determines the result and type; to set the actual\n recipe, you\u0027ll need to call the appropriate methods.",
              "plain": "Create a shapeless recipe to craft the specified ItemStack. The\n constructor merely determines the result and type; to set the actual\n recipe, you\u0027ll need to call the appropriate methods.\n@param key the unique recipe key\n@param result The item you want the recipe to create.\n@see ShapelessRecipe#addIngredient(Material)\n@see ShapelessRecipe#addIngredient(MaterialData)\n@see ShapelessRecipe#addIngredient(Material,int)\n@see ShapelessRecipe#addIngredient(int,Material)\n@see ShapelessRecipe#addIngredient(int,MaterialData)\n@see ShapelessRecipe#addIngredient(int,Material,int)"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "ShapelessRecipe(org.bukkit.inventory.ItemStack)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "result"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            }
          },
          {
            "kind": "METHOD",
            "name": "addIngredient(int,org.bukkit.Material)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "count"
              },
              {
                "kind": "PARAMETER",
                "name": "ingredient"
              }
            ],
            "comment": {
              "body": "Adds multiples of the specified ingredient.",
              "tags": "Returns The changed recipe, so you can chain calls..",
              "plain": "Adds multiples of the specified ingredient.\n@param count How many to add (can\u0027t be more than 9!)\n@param ingredient The ingredient to add.\n@return The changed recipe, so you can chain calls."
            }
          },
          {
            "kind": "METHOD",
            "name": "addIngredient(int,org.bukkit.Material,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "count"
              },
              {
                "kind": "PARAMETER",
                "name": "ingredient"
              },
              {
                "kind": "PARAMETER",
                "name": "rawdata"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Adds multiples of the specified ingredient.",
              "tags": "Returns The changed recipe, so you can chain calls..",
              "plain": "Adds multiples of the specified ingredient.\n@param count How many to add (can\u0027t be more than 9!)\n@param ingredient The ingredient to add.\n@param rawdata The data value, or -1 to allow any data value.\n@return The changed recipe, so you can chain calls.\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "addIngredient(int,org.bukkit.material.MaterialData)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "count"
              },
              {
                "kind": "PARAMETER",
                "name": "ingredient"
              }
            ],
            "comment": {
              "body": "Adds multiples of the specified ingredient.",
              "tags": "Returns The changed recipe, so you can chain calls..",
              "plain": "Adds multiples of the specified ingredient.\n@param count How many to add (can\u0027t be more than 9!)\n@param ingredient The ingredient to add.\n@return The changed recipe, so you can chain calls."
            }
          },
          {
            "kind": "METHOD",
            "name": "addIngredient(org.bukkit.Material)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "ingredient"
              }
            ],
            "comment": {
              "body": "Adds the specified ingredient.",
              "tags": "Returns The changed recipe, so you can chain calls..",
              "plain": "Adds the specified ingredient.\n@param ingredient The ingredient to add.\n@return The changed recipe, so you can chain calls."
            }
          },
          {
            "kind": "METHOD",
            "name": "addIngredient(org.bukkit.Material,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "ingredient"
              },
              {
                "kind": "PARAMETER",
                "name": "rawdata"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Adds the specified ingredient.",
              "tags": "Returns The changed recipe, so you can chain calls..",
              "plain": "Adds the specified ingredient.\n@param ingredient The ingredient to add.\n@param rawdata The data value, or -1 to allow any data value.\n@return The changed recipe, so you can chain calls.\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "addIngredient(org.bukkit.material.MaterialData)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "ingredient"
              }
            ],
            "comment": {
              "body": "Adds the specified ingredient.",
              "tags": "Returns The changed recipe, so you can chain calls..",
              "plain": "Adds the specified ingredient.\n@param ingredient The ingredient to add.\n@return The changed recipe, so you can chain calls."
            }
          },
          {
            "kind": "METHOD",
            "name": "getIngredientList()",
            "comment": {
              "body": "Get the list of ingredients used for this recipe.",
              "tags": "Returns The input list.",
              "plain": "Get the list of ingredients used for this recipe.\n@return The input list"
            }
          },
          {
            "kind": "METHOD",
            "name": "getKey()"
          },
          {
            "kind": "METHOD",
            "name": "getResult()",
            "comment": {
              "body": "Get the result of this recipe.",
              "tags": "Returns The result stack..",
              "plain": "Get the result of this recipe.\n@return The result stack."
            }
          },
          {
            "kind": "FIELD",
            "name": "ingredients"
          },
          {
            "kind": "FIELD",
            "name": "key"
          },
          {
            "kind": "FIELD",
            "name": "output"
          },
          {
            "kind": "METHOD",
            "name": "removeIngredient(int,org.bukkit.Material)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "count"
              },
              {
                "kind": "PARAMETER",
                "name": "ingredient"
              }
            ],
            "comment": {
              "body": "Removes multiple instances of an ingredient from the list. If there are\n less instances then specified, all will be removed. Only removes exact\n matches, with a data value of 0.",
              "tags": "Returns The changed recipe..",
              "plain": "Removes multiple instances of an ingredient from the list. If there are\n less instances then specified, all will be removed. Only removes exact\n matches, with a data value of 0.\n@param count The number of copies to remove.\n@param ingredient The ingredient to remove\n@return The changed recipe."
            }
          },
          {
            "kind": "METHOD",
            "name": "removeIngredient(int,org.bukkit.Material,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "count"
              },
              {
                "kind": "PARAMETER",
                "name": "ingredient"
              },
              {
                "kind": "PARAMETER",
                "name": "rawdata"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Removes multiple instances of an ingredient from the list. If there are\n less instances then specified, all will be removed. If the data value\n is -1, only ingredients with a -1 data value will be removed.",
              "tags": "Returns The changed recipe..",
              "plain": "Removes multiple instances of an ingredient from the list. If there are\n less instances then specified, all will be removed. If the data value\n is -1, only ingredients with a -1 data value will be removed.\n@param count The number of copies to remove.\n@param ingredient The ingredient to remove.\n@param rawdata The data value.\n@return The changed recipe.\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "removeIngredient(int,org.bukkit.material.MaterialData)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "count"
              },
              {
                "kind": "PARAMETER",
                "name": "ingredient"
              }
            ],
            "comment": {
              "body": "Removes multiple instances of an ingredient from the list. If there are\n less instances then specified, all will be removed. If the data value\n is -1, only ingredients with a -1 data value will be removed.",
              "tags": "Returns The changed recipe..",
              "plain": "Removes multiple instances of an ingredient from the list. If there are\n less instances then specified, all will be removed. If the data value\n is -1, only ingredients with a -1 data value will be removed.\n@param count The number of copies to remove.\n@param ingredient The ingredient to remove.\n@return The changed recipe."
            }
          },
          {
            "kind": "METHOD",
            "name": "removeIngredient(org.bukkit.Material)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "ingredient"
              }
            ],
            "comment": {
              "body": "Removes an ingredient from the list. If the ingredient occurs multiple\n times, only one instance of it is removed. Only removes exact matches,\n with a data value of 0.",
              "tags": "Returns The changed recipe..",
              "plain": "Removes an ingredient from the list. If the ingredient occurs multiple\n times, only one instance of it is removed. Only removes exact matches,\n with a data value of 0.\n@param ingredient The ingredient to remove\n@return The changed recipe."
            }
          },
          {
            "kind": "METHOD",
            "name": "removeIngredient(org.bukkit.Material,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "ingredient"
              },
              {
                "kind": "PARAMETER",
                "name": "rawdata"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Removes an ingredient from the list. If the ingredient occurs multiple\n times, only one instance of it is removed. If the data value is -1,\n only ingredients with a -1 data value will be removed.",
              "tags": "Returns The changed recipe..",
              "plain": "Removes an ingredient from the list. If the ingredient occurs multiple\n times, only one instance of it is removed. If the data value is -1,\n only ingredients with a -1 data value will be removed.\n@param ingredient The ingredient to remove\n@param rawdata The data value;\n@return The changed recipe.\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "removeIngredient(org.bukkit.material.MaterialData)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "ingredient"
              }
            ],
            "comment": {
              "body": "Removes an ingredient from the list. If the ingredient occurs multiple\n times, only one instance of it is removed. If the data value is -1,\n only ingredients with a -1 data value will be removed.",
              "tags": "Returns The changed recipe..",
              "plain": "Removes an ingredient from the list. If the ingredient occurs multiple\n times, only one instance of it is removed. If the data value is -1,\n only ingredients with a -1 data value will be removed.\n@param ingredient The ingredient to remove\n@return The changed recipe."
            }
          }
        ],
        "comment": {
          "body": "Represents a shapeless recipe, where the arrangement of the ingredients on\n the crafting grid does not matter.",
          "plain": "Represents a shapeless recipe, where the arrangement of the ingredients on\n the crafting grid does not matter."
        }
      }
    ]
  },
  {
    "kind": "PACKAGE",
    "name": "org.bukkit.inventory.meta",
    "children": [
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.inventory.meta.BannerMeta",
        "children": [
          {
            "kind": "METHOD",
            "name": "addPattern(org.bukkit.block.banner.Pattern)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "pattern"
              }
            ],
            "comment": {
              "body": "Adds a new pattern on top of the existing\n patterns",
              "plain": "Adds a new pattern on top of the existing\n patterns\n@param pattern the new pattern to add"
            }
          },
          {
            "kind": "METHOD",
            "name": "getBaseColor()",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Returns the base color for this banner",
              "tags": "Returns the base color.",
              "plain": "Returns the base color for this banner\n@return the base color\n@deprecated banner color is now stored as the data value, not meta."
            }
          },
          {
            "kind": "METHOD",
            "name": "getPattern(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "i"
              }
            ],
            "comment": {
              "body": "Returns the pattern at the specified index",
              "tags": "Returns the pattern.",
              "plain": "Returns the pattern at the specified index\n@param i the index\n@return the pattern"
            }
          },
          {
            "kind": "METHOD",
            "name": "getPatterns()",
            "comment": {
              "body": "Returns a list of patterns on this banner",
              "tags": "Returns the patterns.",
              "plain": "Returns a list of patterns on this banner\n@return the patterns"
            }
          },
          {
            "kind": "METHOD",
            "name": "numberOfPatterns()",
            "comment": {
              "body": "Returns the number of patterns on this\n banner",
              "tags": "Returns the number of patterns.",
              "plain": "Returns the number of patterns on this\n banner\n@return the number of patterns"
            }
          },
          {
            "kind": "METHOD",
            "name": "removePattern(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "i"
              }
            ],
            "comment": {
              "body": "Removes the pattern at the specified index",
              "tags": "Returns the removed pattern.",
              "plain": "Removes the pattern at the specified index\n@param i the index\n@return the removed pattern"
            }
          },
          {
            "kind": "METHOD",
            "name": "setBaseColor(org.bukkit.DyeColor)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "color"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Sets the base color for this banner",
              "plain": "Sets the base color for this banner\n@param color the base color\n@deprecated banner color is now stored as the data value, not meta."
            }
          },
          {
            "kind": "METHOD",
            "name": "setPattern(int,org.bukkit.block.banner.Pattern)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "i"
              },
              {
                "kind": "PARAMETER",
                "name": "pattern"
              }
            ],
            "comment": {
              "body": "Sets the pattern at the specified index",
              "plain": "Sets the pattern at the specified index\n@param i the index\n@param pattern the new pattern"
            }
          },
          {
            "kind": "METHOD",
            "name": "setPatterns(java.util.List\u003corg.bukkit.block.banner.Pattern\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "patterns"
              }
            ],
            "comment": {
              "body": "Sets the patterns used on this banner",
              "plain": "Sets the patterns used on this banner\n@param patterns the new list of patterns"
            }
          }
        ]
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.inventory.meta.BlockStateMeta",
        "children": [
          {
            "kind": "METHOD",
            "name": "getBlockState()",
            "comment": {
              "body": "Returns the currently attached block state for this\n item or creates a new one if one doesn\u0027t exist.\n\n The state is a copy, it must be set back (or to another\n item) with \u003ca href\u003d\"org/bukkit/inventory/meta/BlockStateMeta.html#setBlockState(org.bukkit.block.BlockState)\"\u003e\u003ccode\u003eBlockStateMeta.setBlockState(org.bukkit.block.BlockState)\u003c/code\u003e\u003c/a\u003e",
              "tags": "Returns the attached state or a new state.",
              "plain": "Returns the currently attached block state for this\n item or creates a new one if one doesn\u0027t exist.\n\n The state is a copy, it must be set back (or to another\n item) with {@link #setBlockState(org.bukkit.block.BlockState)}\n@return the attached state or a new state"
            }
          },
          {
            "kind": "METHOD",
            "name": "hasBlockState()",
            "comment": {
              "body": "Returns whether the item has a block state currently\n attached to it.",
              "tags": "Returns whether a block state is already attached.",
              "plain": "Returns whether the item has a block state currently\n attached to it.\n@return whether a block state is already attached"
            }
          },
          {
            "kind": "METHOD",
            "name": "setBlockState(org.bukkit.block.BlockState)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "blockState"
              }
            ],
            "comment": {
              "body": "Attaches a copy of the passed block state to the item.",
              "plain": "Attaches a copy of the passed block state to the item.\n@param blockState the block state to attach to the block.\n@throws IllegalArgumentException if the blockState is null\n         or invalid for this item."
            }
          }
        ]
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.inventory.meta.BookMeta",
        "children": [
          {
            "kind": "METHOD",
            "name": "addPage(java.lang.String...)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "pages"
              }
            ],
            "comment": {
              "body": "Adds new pages to the end of the book. Up to a maximum of 50 pages with\n 256 characters per page.",
              "plain": "Adds new pages to the end of the book. Up to a maximum of 50 pages with\n 256 characters per page.\n@param pages A list of strings, each being a page"
            }
          },
          {
            "kind": "METHOD",
            "name": "clone()"
          },
          {
            "kind": "METHOD",
            "name": "getAuthor()",
            "comment": {
              "body": "Gets the author of the book.\n \u003cp\u003e\n Plugins should check that hasAuthor() returns true before calling this\n method.",
              "tags": "Returns the author of the book.",
              "plain": "Gets the author of the book.\n \u003cp\u003e\n Plugins should check that hasAuthor() returns true before calling this\n method.\n@return the author of the book"
            }
          },
          {
            "kind": "METHOD",
            "name": "getGeneration()",
            "comment": {
              "body": "Gets the generation of the book.\n \u003cp\u003e\n Plugins should check that hasGeneration() returns true before calling\n this method.",
              "tags": "Returns the generation of the book.",
              "plain": "Gets the generation of the book.\n \u003cp\u003e\n Plugins should check that hasGeneration() returns true before calling\n this method.\n@return the generation of the book"
            }
          },
          {
            "kind": "METHOD",
            "name": "getPage(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "page"
              }
            ],
            "comment": {
              "body": "Gets the specified page in the book. The given page must exist.",
              "tags": "Returns the page from the book.",
              "plain": "Gets the specified page in the book. The given page must exist.\n@param page the page number to get\n@return the page from the book"
            }
          },
          {
            "kind": "METHOD",
            "name": "getPageCount()",
            "comment": {
              "body": "Gets the number of pages in the book.",
              "tags": "Returns the number of pages in the book.",
              "plain": "Gets the number of pages in the book.\n@return the number of pages in the book"
            }
          },
          {
            "kind": "METHOD",
            "name": "getPages()",
            "comment": {
              "body": "Gets all the pages in the book.",
              "tags": "Returns list of all the pages in the book.",
              "plain": "Gets all the pages in the book.\n@return list of all the pages in the book"
            }
          },
          {
            "kind": "METHOD",
            "name": "getTitle()",
            "comment": {
              "body": "Gets the title of the book.\n \u003cp\u003e\n Plugins should check that hasTitle() returns true before calling this\n method.",
              "tags": "Returns the title of the book.",
              "plain": "Gets the title of the book.\n \u003cp\u003e\n Plugins should check that hasTitle() returns true before calling this\n method.\n@return the title of the book"
            }
          },
          {
            "kind": "METHOD",
            "name": "hasAuthor()",
            "comment": {
              "body": "Checks for the existence of an author in the book.",
              "tags": "Returns true if the book has an author.",
              "plain": "Checks for the existence of an author in the book.\n@return true if the book has an author"
            }
          },
          {
            "kind": "METHOD",
            "name": "hasGeneration()",
            "comment": {
              "body": "Checks for the existence of generation level in the book.",
              "tags": "Returns true if the book has a generation level.",
              "plain": "Checks for the existence of generation level in the book.\n@return true if the book has a generation level"
            }
          },
          {
            "kind": "METHOD",
            "name": "hasPages()",
            "comment": {
              "body": "Checks for the existence of pages in the book.",
              "tags": "Returns true if the book has pages.",
              "plain": "Checks for the existence of pages in the book.\n@return true if the book has pages"
            }
          },
          {
            "kind": "METHOD",
            "name": "hasTitle()",
            "comment": {
              "body": "Checks for the existence of a title in the book.",
              "tags": "Returns true if the book has a title.",
              "plain": "Checks for the existence of a title in the book.\n@return true if the book has a title"
            }
          },
          {
            "kind": "ENUM",
            "name": "org.bukkit.inventory.meta.BookMeta.Generation",
            "children": [
              {
                "kind": "ENUM_CONSTANT",
                "name": "COPY_OF_COPY",
                "comment": {
                  "body": "Book that was copied from a copy of an original. Can\u0027t be copied.",
                  "plain": "Book that was copied from a copy of an original. Can\u0027t be copied."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "COPY_OF_ORIGINAL",
                "comment": {
                  "body": "Book that was copied from an original. Can be copied.",
                  "plain": "Book that was copied from an original. Can be copied."
                }
              },
              {
                "kind": "CONSTRUCTOR",
                "name": "Generation()"
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "ORIGINAL",
                "comment": {
                  "body": "Book written into a book-and-quill. Can be copied. (Default value)",
                  "plain": "Book written into a book-and-quill. Can be copied. (Default value)"
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "TATTERED",
                "comment": {
                  "body": "Unused; unobtainable by players. Can\u0027t be copied.",
                  "plain": "Unused; unobtainable by players. Can\u0027t be copied."
                }
              },
              {
                "kind": "METHOD",
                "name": "valueOf(java.lang.String)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "name"
                  }
                ]
              },
              {
                "kind": "METHOD",
                "name": "values()"
              }
            ],
            "comment": {
              "body": "Represents the generation (or level of copying) of a written book",
              "plain": "Represents the generation (or level of copying) of a written book"
            }
          },
          {
            "kind": "CLASS",
            "name": "org.bukkit.inventory.meta.BookMeta.Spigot",
            "children": [
              {
                "kind": "CONSTRUCTOR",
                "name": "Spigot()"
              },
              {
                "kind": "METHOD",
                "name": "addPage(net.md_5.bungee.api.chat.BaseComponent[]...)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "pages"
                  }
                ],
                "comment": {
                  "body": "Adds new pages to the end of the book. Up to a maximum of 50 pages\n with 256 characters per page.",
                  "plain": "Adds new pages to the end of the book. Up to a maximum of 50 pages\n with 256 characters per page.\n@param pages A list of component arrays, each being a page"
                }
              },
              {
                "kind": "METHOD",
                "name": "getPage(int)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "page"
                  }
                ],
                "comment": {
                  "body": "Gets the specified page in the book. The given page must exist.",
                  "tags": "Returns the page from the book.",
                  "plain": "Gets the specified page in the book. The given page must exist.\n@param page the page number to get\n@return the page from the book"
                }
              },
              {
                "kind": "METHOD",
                "name": "getPages()",
                "comment": {
                  "body": "Gets all the pages in the book.",
                  "tags": "Returns list of all the pages in the book.",
                  "plain": "Gets all the pages in the book.\n@return list of all the pages in the book"
                }
              },
              {
                "kind": "METHOD",
                "name": "setPage(int,net.md_5.bungee.api.chat.BaseComponent...)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "data"
                  },
                  {
                    "kind": "PARAMETER",
                    "name": "page"
                  }
                ],
                "comment": {
                  "body": "Sets the specified page in the book. Pages of the book must be\n contiguous.\n \u003cp\u003e\n The data can be up to 256 characters in length, additional characters\n are truncated.",
                  "plain": "Sets the specified page in the book. Pages of the book must be\n contiguous.\n \u003cp\u003e\n The data can be up to 256 characters in length, additional characters\n are truncated.\n@param page the page number to set\n@param data the data to set for that page"
                }
              },
              {
                "kind": "METHOD",
                "name": "setPages(java.util.List\u003cnet.md_5.bungee.api.chat.BaseComponent[]\u003e)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "pages"
                  }
                ],
                "comment": {
                  "body": "Clears the existing book pages, and sets the book to use the provided\n pages. Maximum 50 pages with 256 characters per page.",
                  "plain": "Clears the existing book pages, and sets the book to use the provided\n pages. Maximum 50 pages with 256 characters per page.\n@param pages A list of pages to set the book to use"
                }
              },
              {
                "kind": "METHOD",
                "name": "setPages(net.md_5.bungee.api.chat.BaseComponent[]...)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "pages"
                  }
                ],
                "comment": {
                  "body": "Clears the existing book pages, and sets the book to use the provided\n pages. Maximum 50 pages with 256 characters per page.",
                  "plain": "Clears the existing book pages, and sets the book to use the provided\n pages. Maximum 50 pages with 256 characters per page.\n@param pages A list of component arrays, each being a page"
                }
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "setAuthor(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "author"
              }
            ],
            "comment": {
              "body": "Sets the author of the book. Removes author when given null.",
              "plain": "Sets the author of the book. Removes author when given null.\n@param author the author to set"
            }
          },
          {
            "kind": "METHOD",
            "name": "setGeneration(org.bukkit.inventory.meta.BookMeta.Generation)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "generation"
              }
            ],
            "comment": {
              "body": "Sets the generation of the book. Removes generation when given null.",
              "plain": "Sets the generation of the book. Removes generation when given null.\n@param generation the generation to set"
            }
          },
          {
            "kind": "METHOD",
            "name": "setPage(int,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "page"
              }
            ],
            "comment": {
              "body": "Sets the specified page in the book. Pages of the book must be\n contiguous.\n \u003cp\u003e\n The data can be up to 256 characters in length, additional characters\n are truncated.",
              "plain": "Sets the specified page in the book. Pages of the book must be\n contiguous.\n \u003cp\u003e\n The data can be up to 256 characters in length, additional characters\n are truncated.\n@param page the page number to set\n@param data the data to set for that page"
            }
          },
          {
            "kind": "METHOD",
            "name": "setPages(java.lang.String...)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "pages"
              }
            ],
            "comment": {
              "body": "Clears the existing book pages, and sets the book to use the provided\n pages. Maximum 50 pages with 256 characters per page.",
              "plain": "Clears the existing book pages, and sets the book to use the provided\n pages. Maximum 50 pages with 256 characters per page.\n@param pages A list of strings, each being a page"
            }
          },
          {
            "kind": "METHOD",
            "name": "setPages(java.util.List\u003cjava.lang.String\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "pages"
              }
            ],
            "comment": {
              "body": "Clears the existing book pages, and sets the book to use the provided\n pages. Maximum 50 pages with 256 characters per page.",
              "plain": "Clears the existing book pages, and sets the book to use the provided\n pages. Maximum 50 pages with 256 characters per page.\n@param pages A list of pages to set the book to use"
            }
          },
          {
            "kind": "METHOD",
            "name": "setTitle(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "title"
              }
            ],
            "comment": {
              "body": "Sets the title of the book.\n \u003cp\u003e\n Limited to 16 characters. Removes title when given null.",
              "tags": "Returns true if the title was successfully set.",
              "plain": "Sets the title of the book.\n \u003cp\u003e\n Limited to 16 characters. Removes title when given null.\n@param title the title to set\n@return true if the title was successfully set"
            }
          },
          {
            "kind": "METHOD",
            "name": "spigot()"
          }
        ],
        "comment": {
          "body": "Represents a book (\u003ca href\u003d\"org/bukkit/Material.html#BOOK_AND_QUILL\"\u003e\u003ccode\u003eMaterial.BOOK_AND_QUILL\u003c/code\u003e\u003c/a\u003e or \u003ca href\u003d\"org/bukkit/Material.html#WRITTEN_BOOK\"\u003e\u003ccode\u003eMaterial.WRITTEN_BOOK\u003c/code\u003e\u003c/a\u003e) that can have a title, an author, and pages.",
          "plain": "Represents a book ({@link Material#BOOK_AND_QUILL} or {@link Material#WRITTEN_BOOK}) that can have a title, an author, and pages."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.inventory.meta.EnchantmentStorageMeta",
        "children": [
          {
            "kind": "METHOD",
            "name": "addStoredEnchant(org.bukkit.enchantments.Enchantment,int,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "ench"
              },
              {
                "kind": "PARAMETER",
                "name": "ignoreLevelRestriction"
              },
              {
                "kind": "PARAMETER",
                "name": "level"
              }
            ],
            "comment": {
              "body": "Stores the specified enchantment in this item meta.",
              "tags": "Returns true if the item meta changed as a result of this call, false\n     otherwise.",
              "plain": "Stores the specified enchantment in this item meta.\n@param ench Enchantment to store\n@param level Level for the enchantment\n@param ignoreLevelRestriction this indicates the enchantment should be\n     applied, ignoring the level limit\n@return true if the item meta changed as a result of this call, false\n     otherwise\n@throws IllegalArgumentException if enchantment is null"
            }
          },
          {
            "kind": "METHOD",
            "name": "clone()"
          },
          {
            "kind": "METHOD",
            "name": "getStoredEnchantLevel(org.bukkit.enchantments.Enchantment)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "ench"
              }
            ],
            "comment": {
              "body": "Checks for the level of the stored enchantment.",
              "tags": "Returns The level that the specified stored enchantment has, or 0 if\n     none.",
              "plain": "Checks for the level of the stored enchantment.\n@param ench enchantment to check\n@return The level that the specified stored enchantment has, or 0 if\n     none"
            }
          },
          {
            "kind": "METHOD",
            "name": "getStoredEnchants()",
            "comment": {
              "body": "Gets a copy the stored enchantments in this ItemMeta.",
              "tags": "Returns An immutable copy of the stored enchantments.",
              "plain": "Gets a copy the stored enchantments in this ItemMeta.\n@return An immutable copy of the stored enchantments"
            }
          },
          {
            "kind": "METHOD",
            "name": "hasConflictingStoredEnchant(org.bukkit.enchantments.Enchantment)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "ench"
              }
            ],
            "comment": {
              "body": "Checks if the specified enchantment conflicts with any enchantments in\n this ItemMeta.",
              "tags": "Returns true if the enchantment conflicts, false otherwise.",
              "plain": "Checks if the specified enchantment conflicts with any enchantments in\n this ItemMeta.\n@param ench enchantment to test\n@return true if the enchantment conflicts, false otherwise"
            }
          },
          {
            "kind": "METHOD",
            "name": "hasStoredEnchant(org.bukkit.enchantments.Enchantment)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "ench"
              }
            ],
            "comment": {
              "body": "Checks for storage of the specified enchantment.",
              "tags": "Returns true if this enchantment is stored in this meta.",
              "plain": "Checks for storage of the specified enchantment.\n@param ench enchantment to check\n@return true if this enchantment is stored in this meta"
            }
          },
          {
            "kind": "METHOD",
            "name": "hasStoredEnchants()",
            "comment": {
              "body": "Checks for the existence of any stored enchantments.",
              "tags": "Returns true if an enchantment exists on this meta.",
              "plain": "Checks for the existence of any stored enchantments.\n@return true if an enchantment exists on this meta"
            }
          },
          {
            "kind": "METHOD",
            "name": "removeStoredEnchant(org.bukkit.enchantments.Enchantment)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "ench"
              }
            ],
            "comment": {
              "body": "Remove the specified stored enchantment from this item meta.",
              "tags": "Returns true if the item meta changed as a result of this call, false\n     otherwise.",
              "plain": "Remove the specified stored enchantment from this item meta.\n@param ench Enchantment to remove\n@return true if the item meta changed as a result of this call, false\n     otherwise\n@throws IllegalArgumentException if enchantment is null"
            }
          }
        ],
        "comment": {
          "body": "EnchantmentMeta is specific to items that can \u003ci\u003estore\u003c/i\u003e enchantments, as\n opposed to being enchanted. \u003ca href\u003d\"org/bukkit/Material.html#ENCHANTED_BOOK\"\u003e\u003ccode\u003eMaterial.ENCHANTED_BOOK\u003c/code\u003e\u003c/a\u003e is an example\n of an item with enchantment storage.",
          "plain": "EnchantmentMeta is specific to items that can \u003ci\u003estore\u003c/i\u003e enchantments, as\n opposed to being enchanted. {@link Material#ENCHANTED_BOOK} is an example\n of an item with enchantment storage."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.inventory.meta.FireworkEffectMeta",
        "children": [
          {
            "kind": "METHOD",
            "name": "clone()"
          },
          {
            "kind": "METHOD",
            "name": "getEffect()",
            "comment": {
              "body": "Gets the firework effect for this meta.",
              "tags": "Returns the current effect, or null if none.",
              "plain": "Gets the firework effect for this meta.\n@return the current effect, or null if none"
            }
          },
          {
            "kind": "METHOD",
            "name": "hasEffect()",
            "comment": {
              "body": "Checks if this meta has an effect.",
              "tags": "Returns true if this meta has an effect, false otherwise.",
              "plain": "Checks if this meta has an effect.\n@return true if this meta has an effect, false otherwise"
            }
          },
          {
            "kind": "METHOD",
            "name": "setEffect(org.bukkit.FireworkEffect)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "effect"
              }
            ],
            "comment": {
              "body": "Sets the firework effect for this meta.",
              "plain": "Sets the firework effect for this meta.\n@param effect the effect to set, or null to indicate none."
            }
          }
        ],
        "comment": {
          "body": "Represents a meta that can store a single FireworkEffect. An example\n includes \u003ca href\u003d\"org/bukkit/Material.html#FIREWORK_CHARGE\"\u003e\u003ccode\u003eMaterial.FIREWORK_CHARGE\u003c/code\u003e\u003c/a\u003e.",
          "plain": "Represents a meta that can store a single FireworkEffect. An example\n includes {@link Material#FIREWORK_CHARGE}."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.inventory.meta.FireworkMeta",
        "children": [
          {
            "kind": "METHOD",
            "name": "addEffect(org.bukkit.FireworkEffect)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "effect"
              }
            ],
            "comment": {
              "body": "Add another effect to this firework.",
              "plain": "Add another effect to this firework.\n@param effect The firework effect to add\n@throws IllegalArgumentException If effect is null"
            }
          },
          {
            "kind": "METHOD",
            "name": "addEffects(java.lang.Iterable\u003corg.bukkit.FireworkEffect\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "effects"
              }
            ],
            "comment": {
              "body": "Add several firework effects to this firework.",
              "plain": "Add several firework effects to this firework.\n@param effects An iterable object whose iterator yields the desired\n     firework effects\n@throws IllegalArgumentException If effects is null\n@throws IllegalArgumentException If any effect is null (may be thrown\n     after changes have occurred)"
            }
          },
          {
            "kind": "METHOD",
            "name": "addEffects(org.bukkit.FireworkEffect...)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "effects"
              }
            ],
            "comment": {
              "body": "Add several effects to this firework.",
              "plain": "Add several effects to this firework.\n@param effects The firework effects to add\n@throws IllegalArgumentException If effects is null\n@throws IllegalArgumentException If any effect is null (may be thrown\n     after changes have occurred)"
            }
          },
          {
            "kind": "METHOD",
            "name": "clearEffects()",
            "comment": {
              "body": "Remove all effects from this firework.",
              "plain": "Remove all effects from this firework."
            }
          },
          {
            "kind": "METHOD",
            "name": "clone()"
          },
          {
            "kind": "METHOD",
            "name": "getEffects()",
            "comment": {
              "body": "Get the effects in this firework.",
              "tags": "Returns An immutable list of the firework effects.",
              "plain": "Get the effects in this firework.\n@return An immutable list of the firework effects"
            }
          },
          {
            "kind": "METHOD",
            "name": "getEffectsSize()",
            "comment": {
              "body": "Get the number of effects in this firework.",
              "tags": "Returns The number of effects.",
              "plain": "Get the number of effects in this firework.\n@return The number of effects"
            }
          },
          {
            "kind": "METHOD",
            "name": "getPower()",
            "comment": {
              "body": "Gets the approximate height the firework will fly.",
              "tags": "Returns approximate flight height of the firework..",
              "plain": "Gets the approximate height the firework will fly.\n@return approximate flight height of the firework."
            }
          },
          {
            "kind": "METHOD",
            "name": "hasEffects()",
            "comment": {
              "body": "Get whether this firework has any effects.",
              "tags": "Returns true if it has effects, false if there are no effects.",
              "plain": "Get whether this firework has any effects.\n@return true if it has effects, false if there are no effects"
            }
          },
          {
            "kind": "METHOD",
            "name": "removeEffect(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "index"
              }
            ],
            "comment": {
              "body": "Remove an effect from this firework.",
              "plain": "Remove an effect from this firework.\n@param index The index of the effect to remove\n@throws IndexOutOfBoundsException If index {@literal \u003c 0 or index \u003e} {@link #getEffectsSize()}"
            }
          },
          {
            "kind": "METHOD",
            "name": "setPower(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "power"
              }
            ],
            "comment": {
              "body": "Sets the approximate power of the firework. Each level of power is half\n a second of flight time.",
              "plain": "Sets the approximate power of the firework. Each level of power is half\n a second of flight time.\n@param power the power of the firework, from 0-128\n@throws IllegalArgumentException if {@literal height\u003c0 or height\u003e128}"
            }
          }
        ],
        "comment": {
          "body": "Represents a \u003ca href\u003d\"org/bukkit/Material.html#FIREWORK\"\u003e\u003ccode\u003eMaterial.FIREWORK\u003c/code\u003e\u003c/a\u003e and its effects.",
          "plain": "Represents a {@link Material#FIREWORK} and its effects."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.inventory.meta.ItemMeta",
        "children": [
          {
            "kind": "METHOD",
            "name": "addEnchant(org.bukkit.enchantments.Enchantment,int,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "ench"
              },
              {
                "kind": "PARAMETER",
                "name": "ignoreLevelRestriction"
              },
              {
                "kind": "PARAMETER",
                "name": "level"
              }
            ],
            "comment": {
              "body": "Adds the specified enchantment to this item meta.",
              "tags": "Returns true if the item meta changed as a result of this call, false\n     otherwise.",
              "plain": "Adds the specified enchantment to this item meta.\n@param ench Enchantment to add\n@param level Level for the enchantment\n@param ignoreLevelRestriction this indicates the enchantment should be\n     applied, ignoring the level limit\n@return true if the item meta changed as a result of this call, false\n     otherwise"
            }
          },
          {
            "kind": "METHOD",
            "name": "addItemFlags(org.bukkit.inventory.ItemFlag...)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "itemFlags"
              }
            ],
            "comment": {
              "body": "Set itemflags which should be ignored when rendering a ItemStack in the Client. This Method does silently ignore double set itemFlags.",
              "plain": "Set itemflags which should be ignored when rendering a ItemStack in the Client. This Method does silently ignore double set itemFlags.\n@param itemFlags The hideflags which shouldn\u0027t be rendered"
            }
          },
          {
            "kind": "METHOD",
            "name": "clone()"
          },
          {
            "kind": "METHOD",
            "name": "getDisplayName()",
            "comment": {
              "body": "Gets the display name that is set.\n \u003cp\u003e\n Plugins should check that hasDisplayName() returns \u003ccode\u003etrue\u003c/code\u003e\n before calling this method.",
              "tags": "Returns the display name that is set.",
              "plain": "Gets the display name that is set.\n \u003cp\u003e\n Plugins should check that hasDisplayName() returns \u003ccode\u003etrue\u003c/code\u003e\n before calling this method.\n@return the display name that is set"
            }
          },
          {
            "kind": "METHOD",
            "name": "getEnchantLevel(org.bukkit.enchantments.Enchantment)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "ench"
              }
            ],
            "comment": {
              "body": "Checks for the level of the specified enchantment.",
              "tags": "Returns The level that the specified enchantment has, or 0 if none.",
              "plain": "Checks for the level of the specified enchantment.\n@param ench enchantment to check\n@return The level that the specified enchantment has, or 0 if none"
            }
          },
          {
            "kind": "METHOD",
            "name": "getEnchants()",
            "comment": {
              "body": "Returns a copy the enchantments in this ItemMeta. \u003cbr\u003e \n Returns an empty map if none.",
              "tags": "Returns An immutable copy of the enchantments.",
              "plain": "Returns a copy the enchantments in this ItemMeta. \u003cbr\u003e \n Returns an empty map if none.\n@return An immutable copy of the enchantments"
            }
          },
          {
            "kind": "METHOD",
            "name": "getItemFlags()",
            "comment": {
              "body": "Get current set itemFlags. The collection returned is unmodifiable.",
              "tags": "Returns A set of all itemFlags set.",
              "plain": "Get current set itemFlags. The collection returned is unmodifiable.\n@return A set of all itemFlags set"
            }
          },
          {
            "kind": "METHOD",
            "name": "getLocalizedName()",
            "comment": {
              "body": "Gets the localized display name that is set.\n \u003cp\u003e\n Plugins should check that hasLocalizedName() returns \u003ccode\u003etrue\u003c/code\u003e\n before calling this method.",
              "tags": "Returns the localized name that is set.",
              "plain": "Gets the localized display name that is set.\n \u003cp\u003e\n Plugins should check that hasLocalizedName() returns \u003ccode\u003etrue\u003c/code\u003e\n before calling this method.\n@return the localized name that is set"
            }
          },
          {
            "kind": "METHOD",
            "name": "getLore()",
            "comment": {
              "body": "Gets the lore that is set.\n \u003cp\u003e\n Plugins should check if hasLore() returns \u003ccode\u003etrue\u003c/code\u003e before\n calling this method.",
              "tags": "Returns a list of lore that is set.",
              "plain": "Gets the lore that is set.\n \u003cp\u003e\n Plugins should check if hasLore() returns \u003ccode\u003etrue\u003c/code\u003e before\n calling this method.\n@return a list of lore that is set"
            }
          },
          {
            "kind": "METHOD",
            "name": "hasConflictingEnchant(org.bukkit.enchantments.Enchantment)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "ench"
              }
            ],
            "comment": {
              "body": "Checks if the specified enchantment conflicts with any enchantments in\n this ItemMeta.",
              "tags": "Returns true if the enchantment conflicts, false otherwise.",
              "plain": "Checks if the specified enchantment conflicts with any enchantments in\n this ItemMeta.\n@param ench enchantment to test\n@return true if the enchantment conflicts, false otherwise"
            }
          },
          {
            "kind": "METHOD",
            "name": "hasDisplayName()",
            "comment": {
              "body": "Checks for existence of a display name.",
              "tags": "Returns true if this has a display name.",
              "plain": "Checks for existence of a display name.\n@return true if this has a display name"
            }
          },
          {
            "kind": "METHOD",
            "name": "hasEnchant(org.bukkit.enchantments.Enchantment)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "ench"
              }
            ],
            "comment": {
              "body": "Checks for existence of the specified enchantment.",
              "tags": "Returns true if this enchantment exists for this meta.",
              "plain": "Checks for existence of the specified enchantment.\n@param ench enchantment to check\n@return true if this enchantment exists for this meta"
            }
          },
          {
            "kind": "METHOD",
            "name": "hasEnchants()",
            "comment": {
              "body": "Checks for the existence of any enchantments.",
              "tags": "Returns true if an enchantment exists on this meta.",
              "plain": "Checks for the existence of any enchantments.\n@return true if an enchantment exists on this meta"
            }
          },
          {
            "kind": "METHOD",
            "name": "hasItemFlag(org.bukkit.inventory.ItemFlag)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "flag"
              }
            ],
            "comment": {
              "body": "Check if the specified flag is present on this item.",
              "tags": "Returns if it is present.",
              "plain": "Check if the specified flag is present on this item.\n@param flag the flag to check\n@return if it is present"
            }
          },
          {
            "kind": "METHOD",
            "name": "hasLocalizedName()",
            "comment": {
              "body": "Checks for existence of a localized name.",
              "tags": "Returns true if this has a localized name.",
              "plain": "Checks for existence of a localized name.\n@return true if this has a localized name"
            }
          },
          {
            "kind": "METHOD",
            "name": "hasLore()",
            "comment": {
              "body": "Checks for existence of lore.",
              "tags": "Returns true if this has lore.",
              "plain": "Checks for existence of lore.\n@return true if this has lore"
            }
          },
          {
            "kind": "METHOD",
            "name": "isUnbreakable()",
            "comment": {
              "body": "Return if the unbreakable tag is true. An unbreakable item will not lose\n durability.",
              "tags": "Returns true if the unbreakable tag is true.",
              "plain": "Return if the unbreakable tag is true. An unbreakable item will not lose\n durability.\n@return true if the unbreakable tag is true"
            }
          },
          {
            "kind": "CLASS",
            "name": "org.bukkit.inventory.meta.ItemMeta.Spigot",
            "children": [
              {
                "kind": "CONSTRUCTOR",
                "name": "Spigot()"
              },
              {
                "kind": "METHOD",
                "name": "isUnbreakable()",
                "deprecated": {
                  "deprecated": "true"
                },
                "comment": {
                  "body": "Return if the unbreakable tag is true",
                  "tags": "Returns true if the unbreakable tag is true.",
                  "plain": "Return if the unbreakable tag is true\n@return true if the unbreakable tag is true\n@deprecated see {@link ItemMeta#isUnbreakable()}"
                }
              },
              {
                "kind": "METHOD",
                "name": "setUnbreakable(boolean)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "unbreakable"
                  }
                ],
                "deprecated": {
                  "deprecated": "true"
                },
                "comment": {
                  "body": "Sets the unbreakable tag",
                  "plain": "Sets the unbreakable tag\n@param unbreakable true if set unbreakable\n@deprecated see {@link ItemMeta#setUnbreakable(boolean)}"
                }
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "removeEnchant(org.bukkit.enchantments.Enchantment)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "ench"
              }
            ],
            "comment": {
              "body": "Removes the specified enchantment from this item meta.",
              "tags": "Returns true if the item meta changed as a result of this call, false\n     otherwise.",
              "plain": "Removes the specified enchantment from this item meta.\n@param ench Enchantment to remove\n@return true if the item meta changed as a result of this call, false\n     otherwise"
            }
          },
          {
            "kind": "METHOD",
            "name": "removeItemFlags(org.bukkit.inventory.ItemFlag...)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "itemFlags"
              }
            ],
            "comment": {
              "body": "Remove specific set of itemFlags. This tells the Client it should render it again. This Method does silently ignore double removed itemFlags.",
              "plain": "Remove specific set of itemFlags. This tells the Client it should render it again. This Method does silently ignore double removed itemFlags.\n@param itemFlags Hideflags which should be removed"
            }
          },
          {
            "kind": "METHOD",
            "name": "setDisplayName(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ],
            "comment": {
              "body": "Sets the display name.",
              "plain": "Sets the display name.\n@param name the name to set"
            }
          },
          {
            "kind": "METHOD",
            "name": "setLocalizedName(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ],
            "comment": {
              "body": "Sets the localized name.",
              "plain": "Sets the localized name.\n@param name the name to set"
            }
          },
          {
            "kind": "METHOD",
            "name": "setLore(java.util.List\u003cjava.lang.String\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "lore"
              }
            ],
            "comment": {
              "body": "Sets the lore for this item. \n Removes lore when given null.",
              "plain": "Sets the lore for this item. \n Removes lore when given null.\n@param lore the lore that will be set"
            }
          },
          {
            "kind": "METHOD",
            "name": "setUnbreakable(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "unbreakable"
              }
            ],
            "comment": {
              "body": "Sets the unbreakable tag. An unbreakable item will not lose durability.",
              "plain": "Sets the unbreakable tag. An unbreakable item will not lose durability.\n@param unbreakable true if set unbreakable"
            }
          },
          {
            "kind": "METHOD",
            "name": "spigot()"
          }
        ],
        "comment": {
          "body": "This type represents the storage mechanism for auxiliary item data.\n \u003cp\u003e\n An implementation will handle the creation and application for ItemMeta.\n This class should not be implemented by a plugin in a live environment.",
          "plain": "This type represents the storage mechanism for auxiliary item data.\n \u003cp\u003e\n An implementation will handle the creation and application for ItemMeta.\n This class should not be implemented by a plugin in a live environment."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.inventory.meta.KnowledgeBookMeta",
        "children": [
          {
            "kind": "METHOD",
            "name": "addRecipe(org.bukkit.NamespacedKey...)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "recipes"
              }
            ],
            "comment": {
              "body": "Adds new recipe to the end of the book.",
              "plain": "Adds new recipe to the end of the book.\n@param recipes A list of recipe keys"
            }
          },
          {
            "kind": "METHOD",
            "name": "clone()"
          },
          {
            "kind": "METHOD",
            "name": "getRecipes()",
            "comment": {
              "body": "Gets all the recipes in the book.",
              "tags": "Returns list of all the recipes in the book.",
              "plain": "Gets all the recipes in the book.\n@return list of all the recipes in the book"
            }
          },
          {
            "kind": "METHOD",
            "name": "hasRecipes()",
            "comment": {
              "body": "Checks for the existence of recipes in the book.",
              "tags": "Returns true if the book has recipes.",
              "plain": "Checks for the existence of recipes in the book.\n@return true if the book has recipes"
            }
          },
          {
            "kind": "METHOD",
            "name": "setRecipes(java.util.List\u003corg.bukkit.NamespacedKey\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "recipes"
              }
            ],
            "comment": {
              "body": "Clears the existing book recipes, and sets the book to use the provided\n recipes.",
              "plain": "Clears the existing book recipes, and sets the book to use the provided\n recipes.\n@param recipes A list of recipes to set the book to use"
            }
          }
        ]
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.inventory.meta.LeatherArmorMeta",
        "children": [
          {
            "kind": "METHOD",
            "name": "clone()"
          },
          {
            "kind": "METHOD",
            "name": "getColor()",
            "comment": {
              "body": "Gets the color of the armor. If it has not been set otherwise, it will\n be \u003ca href\u003d\"org/bukkit/inventory/ItemFactory.html#getDefaultLeatherColor()\"\u003e\u003ccode\u003eItemFactory.getDefaultLeatherColor()\u003c/code\u003e\u003c/a\u003e.",
              "tags": "Returns the color of the armor, never null.",
              "plain": "Gets the color of the armor. If it has not been set otherwise, it will\n be {@link ItemFactory#getDefaultLeatherColor()}.\n@return the color of the armor, never null"
            }
          },
          {
            "kind": "METHOD",
            "name": "setColor(org.bukkit.Color)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "color"
              }
            ],
            "comment": {
              "body": "Sets the color of the armor.",
              "plain": "Sets the color of the armor.\n@param color the color to set. Setting it to null is equivalent to\n     setting it to {@link ItemFactory#getDefaultLeatherColor()}."
            }
          }
        ],
        "comment": {
          "body": "Represents leather armor (\u003ca href\u003d\"org/bukkit/Material.html#LEATHER_BOOTS\"\u003e\u003ccode\u003eMaterial.LEATHER_BOOTS\u003c/code\u003e\u003c/a\u003e, \u003ca href\u003d\"org/bukkit/Material.html#LEATHER_CHESTPLATE\"\u003e\u003ccode\u003eMaterial.LEATHER_CHESTPLATE\u003c/code\u003e\u003c/a\u003e, \u003ca href\u003d\"org/bukkit/Material.html#LEATHER_HELMET\"\u003e\u003ccode\u003eMaterial.LEATHER_HELMET\u003c/code\u003e\u003c/a\u003e, or \u003ca href\u003d\"org/bukkit/Material.html#LEATHER_LEGGINGS\"\u003e\u003ccode\u003eMaterial.LEATHER_LEGGINGS\u003c/code\u003e\u003c/a\u003e) that can be colored.",
          "plain": "Represents leather armor ({@link Material#LEATHER_BOOTS}, {@link Material#LEATHER_CHESTPLATE}, {@link Material#LEATHER_HELMET}, or {@link Material#LEATHER_LEGGINGS}) that can be colored."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.inventory.meta.MapMeta",
        "children": [
          {
            "kind": "METHOD",
            "name": "clone()"
          },
          {
            "kind": "METHOD",
            "name": "getColor()",
            "comment": {
              "body": "Gets the map color that is set. A custom map color will alter the display\n of the map in an inventory slot.\n \u003cp\u003e\n Plugins should check that hasColor() returns \u003ccode\u003etrue\u003c/code\u003e before\n calling this method.",
              "tags": "Returns the map color that is set.",
              "plain": "Gets the map color that is set. A custom map color will alter the display\n of the map in an inventory slot.\n \u003cp\u003e\n Plugins should check that hasColor() returns \u003ccode\u003etrue\u003c/code\u003e before\n calling this method.\n@return the map color that is set"
            }
          },
          {
            "kind": "METHOD",
            "name": "getLocationName()",
            "comment": {
              "body": "Gets the location name that is set.\n \u003cp\u003e\n Plugins should check that hasLocationName() returns \u003ccode\u003etrue\u003c/code\u003e\n before calling this method.",
              "tags": "Returns the location name that is set.",
              "plain": "Gets the location name that is set.\n \u003cp\u003e\n Plugins should check that hasLocationName() returns \u003ccode\u003etrue\u003c/code\u003e\n before calling this method.\n@return the location name that is set"
            }
          },
          {
            "kind": "METHOD",
            "name": "hasColor()",
            "comment": {
              "body": "Checks for existence of a map color.",
              "tags": "Returns true if this has a custom map color.",
              "plain": "Checks for existence of a map color.\n@return true if this has a custom map color"
            }
          },
          {
            "kind": "METHOD",
            "name": "hasLocationName()",
            "comment": {
              "body": "Checks for existence of a location name.",
              "tags": "Returns true if this has a location name.",
              "plain": "Checks for existence of a location name.\n@return true if this has a location name"
            }
          },
          {
            "kind": "METHOD",
            "name": "isScaling()",
            "comment": {
              "body": "Checks to see if this map is scaling.",
              "tags": "Returns true if this map is scaling.",
              "plain": "Checks to see if this map is scaling.\n@return true if this map is scaling"
            }
          },
          {
            "kind": "METHOD",
            "name": "setColor(org.bukkit.Color)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "color"
              }
            ],
            "comment": {
              "body": "Sets the map color. A custom map color will alter the display of the map\n in an inventory slot.",
              "plain": "Sets the map color. A custom map color will alter the display of the map\n in an inventory slot.\n@param color the color to set"
            }
          },
          {
            "kind": "METHOD",
            "name": "setLocationName(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ],
            "comment": {
              "body": "Sets the location name. A custom map color will alter the display of the\n map in an inventory slot.",
              "plain": "Sets the location name. A custom map color will alter the display of the\n map in an inventory slot.\n@param name the name to set"
            }
          },
          {
            "kind": "METHOD",
            "name": "setScaling(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "value"
              }
            ],
            "comment": {
              "body": "Sets if this map is scaling or not.",
              "plain": "Sets if this map is scaling or not.\n@param value true to scale"
            }
          }
        ],
        "comment": {
          "body": "Represents a map that can be scalable.",
          "plain": "Represents a map that can be scalable."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.inventory.meta.PotionMeta",
        "children": [
          {
            "kind": "METHOD",
            "name": "addCustomEffect(org.bukkit.potion.PotionEffect,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "effect"
              },
              {
                "kind": "PARAMETER",
                "name": "overwrite"
              }
            ],
            "comment": {
              "body": "Adds a custom potion effect to this potion.",
              "tags": "Returns true if the potion meta changed as a result of this call.",
              "plain": "Adds a custom potion effect to this potion.\n@param effect the potion effect to add\n@param overwrite true if any existing effect of the same type should be\n overwritten\n@return true if the potion meta changed as a result of this call"
            }
          },
          {
            "kind": "METHOD",
            "name": "clearCustomEffects()",
            "comment": {
              "body": "Removes all custom potion effects from this potion.",
              "tags": "Returns true if the potion meta changed as a result of this call.",
              "plain": "Removes all custom potion effects from this potion.\n@return true if the potion meta changed as a result of this call"
            }
          },
          {
            "kind": "METHOD",
            "name": "clone()"
          },
          {
            "kind": "METHOD",
            "name": "getBasePotionData()",
            "comment": {
              "body": "Returns the potion data about the base potion",
              "tags": "Returns a PotionData object.",
              "plain": "Returns the potion data about the base potion\n@return a PotionData object"
            }
          },
          {
            "kind": "METHOD",
            "name": "getColor()",
            "comment": {
              "body": "Gets the potion color that is set. A custom potion color will alter the\n display of the potion in an inventory slot.\n \u003cp\u003e\n Plugins should check that hasColor() returns \u003ccode\u003etrue\u003c/code\u003e before\n calling this method.",
              "tags": "Returns the potion color that is set.",
              "plain": "Gets the potion color that is set. A custom potion color will alter the\n display of the potion in an inventory slot.\n \u003cp\u003e\n Plugins should check that hasColor() returns \u003ccode\u003etrue\u003c/code\u003e before\n calling this method.\n@return the potion color that is set"
            }
          },
          {
            "kind": "METHOD",
            "name": "getCustomEffects()",
            "comment": {
              "body": "Gets an immutable list containing all custom potion effects applied to\n this potion.\n \u003cp\u003e\n Plugins should check that hasCustomEffects() returns true before calling\n this method.",
              "tags": "Returns the immutable list of custom potion effects.",
              "plain": "Gets an immutable list containing all custom potion effects applied to\n this potion.\n \u003cp\u003e\n Plugins should check that hasCustomEffects() returns true before calling\n this method.\n@return the immutable list of custom potion effects"
            }
          },
          {
            "kind": "METHOD",
            "name": "hasColor()",
            "comment": {
              "body": "Checks for existence of a potion color.",
              "tags": "Returns true if this has a custom potion color.",
              "plain": "Checks for existence of a potion color.\n@return true if this has a custom potion color"
            }
          },
          {
            "kind": "METHOD",
            "name": "hasCustomEffect(org.bukkit.potion.PotionEffectType)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "comment": {
              "body": "Checks for a specific custom potion effect type on this potion.",
              "tags": "Returns true if the potion has this effect.",
              "plain": "Checks for a specific custom potion effect type on this potion.\n@param type the potion effect type to check for\n@return true if the potion has this effect"
            }
          },
          {
            "kind": "METHOD",
            "name": "hasCustomEffects()",
            "comment": {
              "body": "Checks for the presence of custom potion effects.",
              "tags": "Returns true if custom potion effects are applied.",
              "plain": "Checks for the presence of custom potion effects.\n@return true if custom potion effects are applied"
            }
          },
          {
            "kind": "METHOD",
            "name": "removeCustomEffect(org.bukkit.potion.PotionEffectType)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "comment": {
              "body": "Removes a custom potion effect from this potion.",
              "tags": "Returns true if the potion meta changed as a result of this call.",
              "plain": "Removes a custom potion effect from this potion.\n@param type the potion effect type to remove\n@return true if the potion meta changed as a result of this call"
            }
          },
          {
            "kind": "METHOD",
            "name": "setBasePotionData(org.bukkit.potion.PotionData)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              }
            ],
            "comment": {
              "body": "Sets the underlying potion data",
              "plain": "Sets the underlying potion data\n@param data PotionData to set the base potion state to"
            }
          },
          {
            "kind": "METHOD",
            "name": "setColor(org.bukkit.Color)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "color"
              }
            ],
            "comment": {
              "body": "Sets the potion color. A custom potion color will alter the display of\n the potion in an inventory slot.",
              "plain": "Sets the potion color. A custom potion color will alter the display of\n the potion in an inventory slot.\n@param color the color to set"
            }
          },
          {
            "kind": "METHOD",
            "name": "setMainEffect(org.bukkit.potion.PotionEffectType)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Moves a potion effect to the top of the potion effect list.\n \u003cp\u003e\n This causes the client to display the potion effect in the potion\u0027s name.",
              "tags": "Returns true if the potion meta changed as a result of this call.",
              "plain": "Moves a potion effect to the top of the potion effect list.\n \u003cp\u003e\n This causes the client to display the potion effect in the potion\u0027s name.\n@param type the potion effect type to move\n@return true if the potion meta changed as a result of this call\n@deprecated use {@link org.bukkit.potion.PotionType#PotionType}"
            }
          }
        ],
        "comment": {
          "body": "Represents a potion or item that can have custom effects.",
          "plain": "Represents a potion or item that can have custom effects."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.inventory.meta.Repairable",
        "children": [
          {
            "kind": "METHOD",
            "name": "clone()"
          },
          {
            "kind": "METHOD",
            "name": "getRepairCost()",
            "comment": {
              "body": "Gets the repair penalty",
              "tags": "Returns the repair penalty.",
              "plain": "Gets the repair penalty\n@return the repair penalty"
            }
          },
          {
            "kind": "METHOD",
            "name": "hasRepairCost()",
            "comment": {
              "body": "Checks to see if this has a repair penalty",
              "tags": "Returns true if this has a repair penalty.",
              "plain": "Checks to see if this has a repair penalty\n@return true if this has a repair penalty"
            }
          },
          {
            "kind": "METHOD",
            "name": "setRepairCost(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cost"
              }
            ],
            "comment": {
              "body": "Sets the repair penalty",
              "plain": "Sets the repair penalty\n@param cost repair penalty"
            }
          }
        ],
        "comment": {
          "body": "Represents an item that can be repaired at an anvil.",
          "plain": "Represents an item that can be repaired at an anvil."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.inventory.meta.SkullMeta",
        "children": [
          {
            "kind": "METHOD",
            "name": "clone()"
          },
          {
            "kind": "METHOD",
            "name": "getOwner()",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Gets the owner of the skull.",
              "tags": "Returns the owner if the skull.",
              "plain": "Gets the owner of the skull.\n@return the owner if the skull\n@deprecated see {@link #setOwningPlayer(org.bukkit.OfflinePlayer)}."
            }
          },
          {
            "kind": "METHOD",
            "name": "getOwningPlayer()",
            "comment": {
              "body": "Gets the owner of the skull.",
              "tags": "Returns the owner if the skull.",
              "plain": "Gets the owner of the skull.\n@return the owner if the skull"
            }
          },
          {
            "kind": "METHOD",
            "name": "getPlayerProfile()",
            "comment": {
              "body": "If the skull has an owner, per \u003ca href\u003d\"org/bukkit/inventory/meta/SkullMeta.html#hasOwner()\"\u003e\u003ccode\u003eSkullMeta.hasOwner()\u003c/code\u003e\u003c/a\u003e, return the owners \u003ca href\u003d\"com/destroystokyo/paper/profile/PlayerProfile.html\" title\u003d\"interface in com.destroystokyo.paper.profile\"\u003e\u003ccode\u003ePlayerProfile\u003c/code\u003e\u003c/a\u003e",
              "tags": "Returns The profile of the owner, if set.",
              "plain": "If the skull has an owner, per {@link #hasOwner()}, return the owners {@link PlayerProfile}\n@return The profile of the owner, if set"
            }
          },
          {
            "kind": "METHOD",
            "name": "hasOwner()",
            "comment": {
              "body": "Checks to see if the skull has an owner.",
              "tags": "Returns true if the skull has an owner.",
              "plain": "Checks to see if the skull has an owner.\n@return true if the skull has an owner"
            }
          },
          {
            "kind": "METHOD",
            "name": "setOwner(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "owner"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Sets the owner of the skull.\n \u003cp\u003e\n Plugins should check that hasOwner() returns true before calling this\n plugin.",
              "tags": "Returns true if the owner was successfully set.",
              "plain": "Sets the owner of the skull.\n \u003cp\u003e\n Plugins should check that hasOwner() returns true before calling this\n plugin.\n@param owner the new owner of the skull\n@return true if the owner was successfully set\n@deprecated see {@link #setOwningPlayer(org.bukkit.OfflinePlayer)}."
            }
          },
          {
            "kind": "METHOD",
            "name": "setOwningPlayer(org.bukkit.OfflinePlayer)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "owner"
              }
            ],
            "comment": {
              "body": "Sets the owner of the skull.\n \u003cp\u003e\n Plugins should check that hasOwner() returns true before calling this\n plugin.",
              "tags": "Returns true if the owner was successfully set.",
              "plain": "Sets the owner of the skull.\n \u003cp\u003e\n Plugins should check that hasOwner() returns true before calling this\n plugin.\n@param owner the new owner of the skull\n@return true if the owner was successfully set"
            }
          },
          {
            "kind": "METHOD",
            "name": "setPlayerProfile(com.destroystokyo.paper.profile.PlayerProfile)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "profile"
              }
            ],
            "comment": {
              "body": "Sets this skull to use the supplied Player Profile, which can include textures already prefilled.",
              "plain": "Sets this skull to use the supplied Player Profile, which can include textures already prefilled.\n@param profile The profile to set this Skull to use, or null to clear owner"
            }
          }
        ],
        "comment": {
          "body": "Represents a skull (\u003ca href\u003d\"org/bukkit/Material.html#SKULL_ITEM\"\u003e\u003ccode\u003eMaterial.SKULL_ITEM\u003c/code\u003e\u003c/a\u003e) that can have an owner.",
          "plain": "Represents a skull ({@link Material#SKULL_ITEM}) that can have an owner."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.inventory.meta.SpawnEggMeta",
        "children": [
          {
            "kind": "METHOD",
            "name": "clone()"
          },
          {
            "kind": "METHOD",
            "name": "getSpawnedType()",
            "comment": {
              "body": "Get the type of entity this egg will spawn.",
              "tags": "Returns The entity type. May be null for implementation specific default..",
              "plain": "Get the type of entity this egg will spawn.\n@return The entity type. May be null for implementation specific default."
            }
          },
          {
            "kind": "METHOD",
            "name": "setSpawnedType(org.bukkit.entity.EntityType)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "comment": {
              "body": "Set the type of entity this egg will spawn.",
              "plain": "Set the type of entity this egg will spawn.\n@param type The entity type. May be null for implementation specific\n default."
            }
          }
        ],
        "comment": {
          "body": "Represents a \u003ca href\u003d\"org/bukkit/Material.html#MONSTER_EGG\"\u003e\u003ccode\u003eMaterial.MONSTER_EGG\u003c/code\u003e\u003c/a\u003e and it\u0027s spawned type.",
          "plain": "Represents a {@link Material#MONSTER_EGG} and it\u0027s spawned type."
        }
      }
    ]
  },
  {
    "kind": "PACKAGE",
    "name": "org.bukkit.map",
    "children": [
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.map.MapCanvas",
        "children": [
          {
            "kind": "METHOD",
            "name": "drawImage(int,int,java.awt.Image)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "image"
              },
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "y"
              }
            ],
            "comment": {
              "body": "Draw an image to the map. The image will be clipped if necessary.",
              "plain": "Draw an image to the map. The image will be clipped if necessary.\n@param x The x coordinate of the image.\n@param y The y coordinate of the image.\n@param image The Image to draw."
            }
          },
          {
            "kind": "METHOD",
            "name": "drawText(int,int,org.bukkit.map.MapFont,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "font"
              },
              {
                "kind": "PARAMETER",
                "name": "text"
              },
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "y"
              }
            ],
            "comment": {
              "body": "Render text to the map using fancy formatting. Newline (\\n) characters\n will move down one line and return to the original column, and the text\n color can be changed using sequences such as \"§12;\", replacing 12 with\n the palette index of the color (see \u003ca href\u003d\"org/bukkit/map/MapPalette.html\" title\u003d\"class in org.bukkit.map\"\u003e\u003ccode\u003eMapPalette\u003c/code\u003e\u003c/a\u003e).",
              "plain": "Render text to the map using fancy formatting. Newline (\\n) characters\n will move down one line and return to the original column, and the text\n color can be changed using sequences such as \"§12;\", replacing 12 with\n the palette index of the color (see {@link MapPalette}).\n@param x The column to start rendering on.\n@param y The row to start rendering on.\n@param font The font to use.\n@param text The formatted text to render."
            }
          },
          {
            "kind": "METHOD",
            "name": "getBasePixel(int,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "y"
              }
            ],
            "comment": {
              "body": "Get a pixel from the layers below this canvas.",
              "tags": "Returns The color. See \u003ca href\u003d\"org/bukkit/map/MapPalette.html\" title\u003d\"class in org.bukkit.map\"\u003e\u003ccode\u003eMapPalette\u003c/code\u003e\u003c/a\u003e..",
              "plain": "Get a pixel from the layers below this canvas.\n@param x The x coordinate, from 0 to 127.\n@param y The y coordinate, from 0 to 127.\n@return The color. See {@link MapPalette}."
            }
          },
          {
            "kind": "METHOD",
            "name": "getCursors()",
            "comment": {
              "body": "Get the cursor collection associated with this canvas.",
              "tags": "Returns The MapCursorCollection associated with this canvas..",
              "plain": "Get the cursor collection associated with this canvas.\n@return The MapCursorCollection associated with this canvas."
            }
          },
          {
            "kind": "METHOD",
            "name": "getMapView()",
            "comment": {
              "body": "Get the map this canvas is attached to.",
              "tags": "Returns The MapView this canvas is attached to..",
              "plain": "Get the map this canvas is attached to.\n@return The MapView this canvas is attached to."
            }
          },
          {
            "kind": "METHOD",
            "name": "getPixel(int,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "y"
              }
            ],
            "comment": {
              "body": "Get a pixel from the canvas.",
              "tags": "Returns The color. See \u003ca href\u003d\"org/bukkit/map/MapPalette.html\" title\u003d\"class in org.bukkit.map\"\u003e\u003ccode\u003eMapPalette\u003c/code\u003e\u003c/a\u003e..",
              "plain": "Get a pixel from the canvas.\n@param x The x coordinate, from 0 to 127.\n@param y The y coordinate, from 0 to 127.\n@return The color. See {@link MapPalette}."
            }
          },
          {
            "kind": "METHOD",
            "name": "setCursors(org.bukkit.map.MapCursorCollection)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cursors"
              }
            ],
            "comment": {
              "body": "Set the cursor collection associated with this canvas. This does not\n usually need to be called since a MapCursorCollection is already\n provided.",
              "plain": "Set the cursor collection associated with this canvas. This does not\n usually need to be called since a MapCursorCollection is already\n provided.\n@param cursors The MapCursorCollection to associate with this canvas."
            }
          },
          {
            "kind": "METHOD",
            "name": "setPixel(int,int,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "color"
              },
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "y"
              }
            ],
            "comment": {
              "body": "Draw a pixel to the canvas.",
              "plain": "Draw a pixel to the canvas.\n@param x The x coordinate, from 0 to 127.\n@param y The y coordinate, from 0 to 127.\n@param color The color. See {@link MapPalette}."
            }
          }
        ],
        "comment": {
          "body": "Represents a canvas for drawing to a map. Each canvas is associated with a\n specific \u003ca href\u003d\"org/bukkit/map/MapRenderer.html\" title\u003d\"class in org.bukkit.map\"\u003e\u003ccode\u003eMapRenderer\u003c/code\u003e\u003c/a\u003e and represents that renderer\u0027s layer on the\n map.",
          "plain": "Represents a canvas for drawing to a map. Each canvas is associated with a\n specific {@link MapRenderer} and represents that renderer\u0027s layer on the\n map."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.map.MapCursor",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "MapCursor(byte,byte,byte,byte,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "direction"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              },
              {
                "kind": "PARAMETER",
                "name": "visible"
              },
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "y"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Initialize the map cursor.",
              "plain": "Initialize the map cursor.\n@param x The x coordinate, from -128 to 127.\n@param y The y coordinate, from -128 to 127.\n@param direction The facing of the cursor, from 0 to 15.\n@param type The type (color/style) of the map cursor.\n@param visible Whether the cursor is visible by default.\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "MapCursor(byte,byte,byte,org.bukkit.map.MapCursor.Type,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "direction"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              },
              {
                "kind": "PARAMETER",
                "name": "visible"
              },
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "y"
              }
            ],
            "comment": {
              "body": "Initialize the map cursor.",
              "plain": "Initialize the map cursor.\n@param x The x coordinate, from -128 to 127.\n@param y The y coordinate, from -128 to 127.\n@param direction The facing of the cursor, from 0 to 15.\n@param type The type (color/style) of the map cursor.\n@param visible Whether the cursor is visible by default."
            }
          },
          {
            "kind": "FIELD",
            "name": "direction"
          },
          {
            "kind": "METHOD",
            "name": "getDirection()",
            "comment": {
              "body": "Get the direction of this cursor.",
              "tags": "Returns The facing of the cursor, from 0 to 15..",
              "plain": "Get the direction of this cursor.\n@return The facing of the cursor, from 0 to 15."
            }
          },
          {
            "kind": "METHOD",
            "name": "getRawType()",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Get the type of this cursor.",
              "tags": "Returns The type (color/style) of the map cursor..",
              "plain": "Get the type of this cursor.\n@return The type (color/style) of the map cursor.\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "getType()",
            "comment": {
              "body": "Get the type of this cursor.",
              "tags": "Returns The type (color/style) of the map cursor..",
              "plain": "Get the type of this cursor.\n@return The type (color/style) of the map cursor."
            }
          },
          {
            "kind": "METHOD",
            "name": "getX()",
            "comment": {
              "body": "Get the X position of this cursor.",
              "tags": "Returns The X coordinate..",
              "plain": "Get the X position of this cursor.\n@return The X coordinate."
            }
          },
          {
            "kind": "METHOD",
            "name": "getY()",
            "comment": {
              "body": "Get the Y position of this cursor.",
              "tags": "Returns The Y coordinate..",
              "plain": "Get the Y position of this cursor.\n@return The Y coordinate."
            }
          },
          {
            "kind": "METHOD",
            "name": "isVisible()",
            "comment": {
              "body": "Get the visibility status of this cursor.",
              "tags": "Returns True if visible, false otherwise..",
              "plain": "Get the visibility status of this cursor.\n@return True if visible, false otherwise."
            }
          },
          {
            "kind": "ENUM",
            "name": "org.bukkit.map.MapCursor.Type",
            "children": [
              {
                "kind": "ENUM_CONSTANT",
                "name": "BLUE_POINTER"
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "GREEN_POINTER"
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "MANSION"
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "RED_MARKER"
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "RED_POINTER"
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "SMALL_WHITE_CIRCLE"
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "TEMPLE"
              },
              {
                "kind": "CONSTRUCTOR",
                "name": "Type(int)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "value"
                  }
                ]
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "WHITE_CIRCLE"
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "WHITE_CROSS"
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "WHITE_POINTER"
              },
              {
                "kind": "METHOD",
                "name": "byValue(byte)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "value"
                  }
                ],
                "deprecated": {
                  "deprecated": "true"
                },
                "comment": {
                  "tags": "Returns the matching type.",
                  "plain": "@param value the value\n@return the matching type\n@deprecated Magic value"
                }
              },
              {
                "kind": "METHOD",
                "name": "getValue()",
                "deprecated": {
                  "deprecated": "true"
                },
                "comment": {
                  "tags": "Returns the value.",
                  "plain": "@return the value\n@deprecated Magic value"
                }
              },
              {
                "kind": "FIELD",
                "name": "value"
              },
              {
                "kind": "METHOD",
                "name": "valueOf(java.lang.String)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "name"
                  }
                ]
              },
              {
                "kind": "METHOD",
                "name": "values()"
              }
            ],
            "comment": {
              "body": "Represents the standard types of map cursors. More may be made\n available by resource packs - the value is used by the client as an\n index in the file \u0027./misc/mapicons.png\u0027 from minecraft.jar or from a\n resource pack.",
              "plain": "Represents the standard types of map cursors. More may be made\n available by resource packs - the value is used by the client as an\n index in the file \u0027./misc/mapicons.png\u0027 from minecraft.jar or from a\n resource pack."
            }
          },
          {
            "kind": "METHOD",
            "name": "setDirection(byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "direction"
              }
            ],
            "comment": {
              "body": "Set the direction of this cursor.",
              "plain": "Set the direction of this cursor.\n@param direction The facing of the cursor, from 0 to 15."
            }
          },
          {
            "kind": "METHOD",
            "name": "setRawType(byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Set the type of this cursor.",
              "plain": "Set the type of this cursor.\n@param type The type (color/style) of the map cursor.\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "setType(org.bukkit.map.MapCursor.Type)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "comment": {
              "body": "Set the type of this cursor.",
              "plain": "Set the type of this cursor.\n@param type The type (color/style) of the map cursor."
            }
          },
          {
            "kind": "METHOD",
            "name": "setVisible(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "visible"
              }
            ],
            "comment": {
              "body": "Set the visibility status of this cursor.",
              "plain": "Set the visibility status of this cursor.\n@param visible True if visible."
            }
          },
          {
            "kind": "METHOD",
            "name": "setX(byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "x"
              }
            ],
            "comment": {
              "body": "Set the X position of this cursor.",
              "plain": "Set the X position of this cursor.\n@param x The X coordinate."
            }
          },
          {
            "kind": "METHOD",
            "name": "setY(byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "y"
              }
            ],
            "comment": {
              "body": "Set the Y position of this cursor.",
              "plain": "Set the Y position of this cursor.\n@param y The Y coordinate."
            }
          },
          {
            "kind": "FIELD",
            "name": "type"
          },
          {
            "kind": "FIELD",
            "name": "visible"
          },
          {
            "kind": "FIELD",
            "name": "x"
          },
          {
            "kind": "FIELD",
            "name": "y"
          }
        ],
        "comment": {
          "body": "Represents a cursor on a map.",
          "plain": "Represents a cursor on a map."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.map.MapCursorCollection",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "MapCursorCollection()"
          },
          {
            "kind": "METHOD",
            "name": "addCursor(int,int,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "direction"
              },
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "y"
              }
            ],
            "comment": {
              "body": "Add a cursor to the collection.",
              "tags": "Returns The newly added MapCursor..",
              "plain": "Add a cursor to the collection.\n@param x The x coordinate, from -128 to 127.\n@param y The y coordinate, from -128 to 127.\n@param direction The facing of the cursor, from 0 to 15.\n@return The newly added MapCursor."
            }
          },
          {
            "kind": "METHOD",
            "name": "addCursor(int,int,byte,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "direction"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              },
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "y"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Add a cursor to the collection.",
              "tags": "Returns The newly added MapCursor..",
              "plain": "Add a cursor to the collection.\n@param x The x coordinate, from -128 to 127.\n@param y The y coordinate, from -128 to 127.\n@param direction The facing of the cursor, from 0 to 15.\n@param type The type (color/style) of the map cursor.\n@return The newly added MapCursor.\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "addCursor(int,int,byte,byte,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "direction"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              },
              {
                "kind": "PARAMETER",
                "name": "visible"
              },
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "y"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Add a cursor to the collection.",
              "tags": "Returns The newly added MapCursor..",
              "plain": "Add a cursor to the collection.\n@param x The x coordinate, from -128 to 127.\n@param y The y coordinate, from -128 to 127.\n@param direction The facing of the cursor, from 0 to 15.\n@param type The type (color/style) of the map cursor.\n@param visible Whether the cursor is visible.\n@return The newly added MapCursor.\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "addCursor(org.bukkit.map.MapCursor)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cursor"
              }
            ],
            "comment": {
              "body": "Add a cursor to the collection.",
              "tags": "Returns The MapCursor that was passed..",
              "plain": "Add a cursor to the collection.\n@param cursor The MapCursor to add.\n@return The MapCursor that was passed."
            }
          },
          {
            "kind": "FIELD",
            "name": "cursors"
          },
          {
            "kind": "METHOD",
            "name": "getCursor(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "index"
              }
            ],
            "comment": {
              "body": "Get a cursor from this collection.",
              "tags": "Returns The MapCursor..",
              "plain": "Get a cursor from this collection.\n@param index The index of the cursor.\n@return The MapCursor."
            }
          },
          {
            "kind": "METHOD",
            "name": "removeCursor(org.bukkit.map.MapCursor)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cursor"
              }
            ],
            "comment": {
              "body": "Remove a cursor from the collection.",
              "tags": "Returns Whether the cursor was removed successfully..",
              "plain": "Remove a cursor from the collection.\n@param cursor The MapCursor to remove.\n@return Whether the cursor was removed successfully."
            }
          },
          {
            "kind": "METHOD",
            "name": "size()",
            "comment": {
              "body": "Get the amount of cursors in this collection.",
              "tags": "Returns The size of this collection..",
              "plain": "Get the amount of cursors in this collection.\n@return The size of this collection."
            }
          }
        ],
        "comment": {
          "body": "Represents all the map cursors on a \u003ca href\u003d\"org/bukkit/map/MapCanvas.html\" title\u003d\"interface in org.bukkit.map\"\u003e\u003ccode\u003eMapCanvas\u003c/code\u003e\u003c/a\u003e. Like MapCanvas, a\n MapCursorCollection is linked to a specific \u003ca href\u003d\"org/bukkit/map/MapRenderer.html\" title\u003d\"class in org.bukkit.map\"\u003e\u003ccode\u003eMapRenderer\u003c/code\u003e\u003c/a\u003e.",
          "plain": "Represents all the map cursors on a {@link MapCanvas}. Like MapCanvas, a\n MapCursorCollection is linked to a specific {@link MapRenderer}."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.map.MapFont",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "MapFont()"
          },
          {
            "kind": "FIELD",
            "name": "chars"
          },
          {
            "kind": "METHOD",
            "name": "getChar(char)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "ch"
              }
            ],
            "comment": {
              "body": "Get the sprite for a given character.",
              "tags": "Returns The CharacterSprite associated with the character, or null if\n     there is none..",
              "plain": "Get the sprite for a given character.\n@param ch The character to get the sprite for.\n@return The CharacterSprite associated with the character, or null if\n     there is none."
            }
          },
          {
            "kind": "METHOD",
            "name": "getHeight()",
            "comment": {
              "body": "Get the height of this font.",
              "tags": "Returns The height of the font..",
              "plain": "Get the height of this font.\n@return The height of the font."
            }
          },
          {
            "kind": "METHOD",
            "name": "getWidth(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "text"
              }
            ],
            "comment": {
              "body": "Get the width of the given text as it would be rendered using this\n font.",
              "tags": "Returns The width in pixels..",
              "plain": "Get the width of the given text as it would be rendered using this\n font.\n@param text The text.\n@return The width in pixels."
            }
          },
          {
            "kind": "FIELD",
            "name": "height"
          },
          {
            "kind": "METHOD",
            "name": "isValid(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "text"
              }
            ],
            "comment": {
              "body": "Check whether the given text is valid.",
              "tags": "Returns True if the string contains only defined characters, false\n     otherwise..",
              "plain": "Check whether the given text is valid.\n@param text The text.\n@return True if the string contains only defined characters, false\n     otherwise."
            }
          },
          {
            "kind": "FIELD",
            "name": "malleable"
          },
          {
            "kind": "CLASS",
            "name": "org.bukkit.map.MapFont.CharacterSprite",
            "children": [
              {
                "kind": "CONSTRUCTOR",
                "name": "CharacterSprite(int,int,boolean[])",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "data"
                  },
                  {
                    "kind": "PARAMETER",
                    "name": "height"
                  },
                  {
                    "kind": "PARAMETER",
                    "name": "width"
                  }
                ]
              },
              {
                "kind": "FIELD",
                "name": "data"
              },
              {
                "kind": "METHOD",
                "name": "get(int,int)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "col"
                  },
                  {
                    "kind": "PARAMETER",
                    "name": "row"
                  }
                ],
                "comment": {
                  "body": "Get the value of a pixel of the character.",
                  "tags": "Returns True if the pixel is solid, false if transparent..",
                  "plain": "Get the value of a pixel of the character.\n@param row The row, in the range [0,8).\n@param col The column, in the range [0,8).\n@return True if the pixel is solid, false if transparent."
                }
              },
              {
                "kind": "METHOD",
                "name": "getHeight()",
                "comment": {
                  "body": "Get the height of the character sprite.",
                  "tags": "Returns The height of the character..",
                  "plain": "Get the height of the character sprite.\n@return The height of the character."
                }
              },
              {
                "kind": "METHOD",
                "name": "getWidth()",
                "comment": {
                  "body": "Get the width of the character sprite.",
                  "tags": "Returns The width of the character..",
                  "plain": "Get the width of the character sprite.\n@return The width of the character."
                }
              },
              {
                "kind": "FIELD",
                "name": "height"
              },
              {
                "kind": "FIELD",
                "name": "width"
              }
            ],
            "comment": {
              "body": "Represents the graphics for a single character in a MapFont.",
              "plain": "Represents the graphics for a single character in a MapFont."
            }
          },
          {
            "kind": "METHOD",
            "name": "setChar(char,org.bukkit.map.MapFont.CharacterSprite)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "ch"
              },
              {
                "kind": "PARAMETER",
                "name": "sprite"
              }
            ],
            "comment": {
              "body": "Set the sprite for a given character.",
              "plain": "Set the sprite for a given character.\n@param ch The character to set the sprite for.\n@param sprite The CharacterSprite to set.\n@throws IllegalStateException if this font is static."
            }
          }
        ],
        "comment": {
          "body": "Represents a bitmap font drawable to a map.",
          "plain": "Represents a bitmap font drawable to a map."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.map.MapPalette",
        "children": [
          {
            "kind": "FIELD",
            "name": "BLUE",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@deprecated Magic value"
            }
          },
          {
            "kind": "FIELD",
            "name": "BROWN",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@deprecated Magic value"
            }
          },
          {
            "kind": "FIELD",
            "name": "DARK_BROWN",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@deprecated Magic value"
            }
          },
          {
            "kind": "FIELD",
            "name": "DARK_GRAY",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@deprecated Magic value"
            }
          },
          {
            "kind": "FIELD",
            "name": "DARK_GREEN",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@deprecated Magic value"
            }
          },
          {
            "kind": "FIELD",
            "name": "GRAY_1",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@deprecated Magic value"
            }
          },
          {
            "kind": "FIELD",
            "name": "GRAY_2",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@deprecated Magic value"
            }
          },
          {
            "kind": "FIELD",
            "name": "LIGHT_BROWN",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@deprecated Magic value"
            }
          },
          {
            "kind": "FIELD",
            "name": "LIGHT_GRAY",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@deprecated Magic value"
            }
          },
          {
            "kind": "FIELD",
            "name": "LIGHT_GREEN",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "MapPalette()"
          },
          {
            "kind": "FIELD",
            "name": "PALE_BLUE",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@deprecated Magic value"
            }
          },
          {
            "kind": "FIELD",
            "name": "RED",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@deprecated Magic value"
            }
          },
          {
            "kind": "FIELD",
            "name": "TRANSPARENT",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@deprecated Magic value"
            }
          },
          {
            "kind": "FIELD",
            "name": "WHITE",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "c(int,int,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "b"
              },
              {
                "kind": "PARAMETER",
                "name": "g"
              },
              {
                "kind": "PARAMETER",
                "name": "r"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "colors"
          },
          {
            "kind": "METHOD",
            "name": "getColor(byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "index"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Get the value of the given color in the palette.",
              "tags": "Returns The Color of the palette entry..",
              "plain": "Get the value of the given color in the palette.\n@param index The index in the palette.\n@return The Color of the palette entry.\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "getDistance(java.awt.Color,java.awt.Color)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "c1"
              },
              {
                "kind": "PARAMETER",
                "name": "c2"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "imageToBytes(java.awt.Image)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "image"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Convert an Image to a byte[] using the palette.",
              "tags": "Returns A byte[] containing the pixels of the image..",
              "plain": "Convert an Image to a byte[] using the palette.\n@param image The image to convert.\n@return A byte[] containing the pixels of the image.\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "matchColor(int,int,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "b"
              },
              {
                "kind": "PARAMETER",
                "name": "g"
              },
              {
                "kind": "PARAMETER",
                "name": "r"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Get the index of the closest matching color in the palette to the given\n color.",
              "tags": "Returns The index in the palette..",
              "plain": "Get the index of the closest matching color in the palette to the given\n color.\n@param r The red component of the color.\n@param b The blue component of the color.\n@param g The green component of the color.\n@return The index in the palette.\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "matchColor(java.awt.Color)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "color"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Get the index of the closest matching color in the palette to the given\n color.",
              "tags": "Returns The index in the palette..",
              "plain": "Get the index of the closest matching color in the palette to the given\n color.\n@param color The Color to match.\n@return The index in the palette.\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "resizeImage(java.awt.Image)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "image"
              }
            ],
            "comment": {
              "body": "Resize an image to 128x128.",
              "tags": "Returns The resized image..",
              "plain": "Resize an image to 128x128.\n@param image The image to resize.\n@return The resized image."
            }
          }
        ],
        "comment": {
          "body": "Represents the palette that map items use.\n \u003cp\u003e\n These fields are hee base color ranges. Each entry corresponds to four\n colors of varying shades with values entry to entry + 3.",
          "plain": "Represents the palette that map items use.\n \u003cp\u003e\n These fields are hee base color ranges. Each entry corresponds to four\n colors of varying shades with values entry to entry + 3."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.map.MapRenderer",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "MapRenderer()",
            "comment": {
              "body": "Initialize the map renderer base to be non-contextual. See \u003ca href\u003d\"org/bukkit/map/MapRenderer.html#isContextual()\"\u003e\u003ccode\u003eMapRenderer.isContextual()\u003c/code\u003e\u003c/a\u003e.",
              "plain": "Initialize the map renderer base to be non-contextual. See {@link #isContextual()}."
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "MapRenderer(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "contextual"
              }
            ],
            "comment": {
              "body": "Initialize the map renderer base with the given contextual status.",
              "plain": "Initialize the map renderer base with the given contextual status.\n@param contextual Whether the renderer is contextual. See {@link #isContextual()}."
            }
          },
          {
            "kind": "FIELD",
            "name": "contextual"
          },
          {
            "kind": "METHOD",
            "name": "initialize(org.bukkit.map.MapView)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "map"
              }
            ],
            "comment": {
              "body": "Initialize this MapRenderer for the given map.",
              "plain": "Initialize this MapRenderer for the given map.\n@param map The MapView being initialized."
            }
          },
          {
            "kind": "METHOD",
            "name": "isContextual()",
            "comment": {
              "body": "Get whether the renderer is contextual, i.e. has different canvases for\n different players.",
              "tags": "Returns True if contextual, false otherwise..",
              "plain": "Get whether the renderer is contextual, i.e. has different canvases for\n different players.\n@return True if contextual, false otherwise."
            }
          },
          {
            "kind": "METHOD",
            "name": "render(org.bukkit.map.MapView,org.bukkit.map.MapCanvas,org.bukkit.entity.Player)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "canvas"
              },
              {
                "kind": "PARAMETER",
                "name": "map"
              },
              {
                "kind": "PARAMETER",
                "name": "player"
              }
            ],
            "comment": {
              "body": "Render to the given map.",
              "plain": "Render to the given map.\n@param map The MapView being rendered to.\n@param canvas The canvas to use for rendering.\n@param player The player who triggered the rendering."
            }
          }
        ],
        "comment": {
          "body": "Represents a renderer for a map.",
          "plain": "Represents a renderer for a map."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.map.MapView",
        "children": [
          {
            "kind": "METHOD",
            "name": "addRenderer(org.bukkit.map.MapRenderer)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "renderer"
              }
            ],
            "comment": {
              "body": "Add a renderer to this map.",
              "plain": "Add a renderer to this map.\n@param renderer The MapRenderer to add."
            }
          },
          {
            "kind": "METHOD",
            "name": "getCenterX()",
            "comment": {
              "body": "Get the center X position of this map.",
              "tags": "Returns The center X position..",
              "plain": "Get the center X position of this map.\n@return The center X position."
            }
          },
          {
            "kind": "METHOD",
            "name": "getCenterZ()",
            "comment": {
              "body": "Get the center Z position of this map.",
              "tags": "Returns The center Z position..",
              "plain": "Get the center Z position of this map.\n@return The center Z position."
            }
          },
          {
            "kind": "METHOD",
            "name": "getId()",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Get the ID of this map item. Corresponds to the damage value of a map\n in an inventory.",
              "tags": "Returns The ID of the map..",
              "plain": "Get the ID of this map item. Corresponds to the damage value of a map\n in an inventory.\n@return The ID of the map.\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "getRenderers()",
            "comment": {
              "body": "Get a list of MapRenderers currently in effect.",
              "tags": "Returns A \u003ccode\u003eList\u0026lt;MapRenderer\u0026gt;\u003c/code\u003e containing each map renderer..",
              "plain": "Get a list of MapRenderers currently in effect.\n@return A {@code List\u003cMapRenderer\u003e} containing each map renderer."
            }
          },
          {
            "kind": "METHOD",
            "name": "getScale()",
            "comment": {
              "body": "Get the scale of this map.",
              "tags": "Returns The scale of the map..",
              "plain": "Get the scale of this map.\n@return The scale of the map."
            }
          },
          {
            "kind": "METHOD",
            "name": "getWorld()",
            "comment": {
              "body": "Get the world that this map is associated with. Primarily used by the\n internal renderer, but may be used by external renderers. May return\n null if the world the map is associated with is not loaded.",
              "tags": "Returns The World this map is associated with..",
              "plain": "Get the world that this map is associated with. Primarily used by the\n internal renderer, but may be used by external renderers. May return\n null if the world the map is associated with is not loaded.\n@return The World this map is associated with."
            }
          },
          {
            "kind": "METHOD",
            "name": "isUnlimitedTracking()",
            "comment": {
              "body": "Whether the map will show a smaller position cursor (true), or no\n position cursor (false) when cursor is outside of map\u0027s range.",
              "tags": "Returns unlimited tracking state.",
              "plain": "Whether the map will show a smaller position cursor (true), or no\n position cursor (false) when cursor is outside of map\u0027s range.\n@return unlimited tracking state"
            }
          },
          {
            "kind": "METHOD",
            "name": "isVirtual()",
            "comment": {
              "body": "Check whether this map is virtual. A map is virtual if its lowermost\n MapRenderer is plugin-provided.",
              "tags": "Returns Whether the map is virtual..",
              "plain": "Check whether this map is virtual. A map is virtual if its lowermost\n MapRenderer is plugin-provided.\n@return Whether the map is virtual."
            }
          },
          {
            "kind": "ENUM",
            "name": "org.bukkit.map.MapView.Scale",
            "children": [
              {
                "kind": "ENUM_CONSTANT",
                "name": "CLOSE"
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "CLOSEST"
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "FAR"
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "FARTHEST"
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "NORMAL"
              },
              {
                "kind": "CONSTRUCTOR",
                "name": "Scale(int)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "value"
                  }
                ]
              },
              {
                "kind": "METHOD",
                "name": "getValue()",
                "deprecated": {
                  "deprecated": "true"
                },
                "comment": {
                  "body": "Get the raw value of this scale level.",
                  "tags": "Returns The scale value.",
                  "plain": "Get the raw value of this scale level.\n@return The scale value\n@deprecated Magic value"
                }
              },
              {
                "kind": "FIELD",
                "name": "value"
              },
              {
                "kind": "METHOD",
                "name": "valueOf(byte)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "value"
                  }
                ],
                "deprecated": {
                  "deprecated": "true"
                },
                "comment": {
                  "body": "Get the scale given the raw value.",
                  "tags": "Returns The enum scale, or null for an invalid input.",
                  "plain": "Get the scale given the raw value.\n@param value The raw scale\n@return The enum scale, or null for an invalid input\n@deprecated Magic value"
                }
              },
              {
                "kind": "METHOD",
                "name": "valueOf(java.lang.String)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "name"
                  }
                ]
              },
              {
                "kind": "METHOD",
                "name": "values()"
              }
            ],
            "comment": {
              "body": "An enum representing all possible scales a map can be set to.",
              "plain": "An enum representing all possible scales a map can be set to."
            }
          },
          {
            "kind": "METHOD",
            "name": "removeRenderer(org.bukkit.map.MapRenderer)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "renderer"
              }
            ],
            "comment": {
              "body": "Remove a renderer from this map.",
              "tags": "Returns True if the renderer was successfully removed..",
              "plain": "Remove a renderer from this map.\n@param renderer The MapRenderer to remove.\n@return True if the renderer was successfully removed."
            }
          },
          {
            "kind": "METHOD",
            "name": "setCenterX(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "x"
              }
            ],
            "comment": {
              "body": "Set the center X position of this map.",
              "plain": "Set the center X position of this map.\n@param x The center X position."
            }
          },
          {
            "kind": "METHOD",
            "name": "setCenterZ(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ],
            "comment": {
              "body": "Set the center Z position of this map.",
              "plain": "Set the center Z position of this map.\n@param z The center Z position."
            }
          },
          {
            "kind": "METHOD",
            "name": "setScale(org.bukkit.map.MapView.Scale)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "scale"
              }
            ],
            "comment": {
              "body": "Set the scale of this map.",
              "plain": "Set the scale of this map.\n@param scale The scale to set."
            }
          },
          {
            "kind": "METHOD",
            "name": "setUnlimitedTracking(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "unlimited"
              }
            ],
            "comment": {
              "body": "Whether the map will show a smaller position cursor (true), or no\n position cursor (false) when cursor is outside of map\u0027s range.",
              "plain": "Whether the map will show a smaller position cursor (true), or no\n position cursor (false) when cursor is outside of map\u0027s range.\n@param unlimited tracking state"
            }
          },
          {
            "kind": "METHOD",
            "name": "setWorld(org.bukkit.World)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "world"
              }
            ],
            "comment": {
              "body": "Set the world that this map is associated with. The world is used by\n the internal renderer, and may also be used by external renderers.",
              "plain": "Set the world that this map is associated with. The world is used by\n the internal renderer, and may also be used by external renderers.\n@param world The World to associate this map with."
            }
          }
        ],
        "comment": {
          "body": "Represents a map item.",
          "plain": "Represents a map item."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.map.MinecraftFont",
        "children": [
          {
            "kind": "FIELD",
            "name": "Font",
            "comment": {
              "body": "A static non-malleable MinecraftFont.",
              "plain": "A static non-malleable MinecraftFont."
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "MinecraftFont()",
            "comment": {
              "body": "Initialize a new MinecraftFont.",
              "plain": "Initialize a new MinecraftFont."
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "MinecraftFont(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "malleable"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "fontChars"
          },
          {
            "kind": "FIELD",
            "name": "fontData"
          },
          {
            "kind": "FIELD",
            "name": "spaceSize"
          }
        ],
        "comment": {
          "body": "Represents the built-in Minecraft font.",
          "plain": "Represents the built-in Minecraft font."
        }
      }
    ]
  },
  {
    "kind": "PACKAGE",
    "name": "org.bukkit.material",
    "children": [
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.material.Attachable",
        "children": [
          {
            "kind": "METHOD",
            "name": "getAttachedFace()",
            "comment": {
              "body": "Gets the face that this block is attached on",
              "tags": "Returns BlockFace attached to.",
              "plain": "Gets the face that this block is attached on\n@return BlockFace attached to"
            }
          }
        ],
        "comment": {
          "body": "Indicates that a block can be attached to another block",
          "plain": "Indicates that a block can be attached to another block"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.material.Banner",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "Banner()"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Banner(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Banner(int,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Banner(org.bukkit.Material)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Banner(org.bukkit.Material,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the type\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "clone()"
          },
          {
            "kind": "METHOD",
            "name": "getAttachedFace()"
          },
          {
            "kind": "METHOD",
            "name": "getFacing()"
          },
          {
            "kind": "METHOD",
            "name": "isWallBanner()"
          },
          {
            "kind": "METHOD",
            "name": "setFacingDirection(org.bukkit.block.BlockFace)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "face"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "toString()"
          }
        ]
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.material.Bed",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "Bed()",
            "comment": {
              "body": "Default constructor for a bed.",
              "plain": "Default constructor for a bed."
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Bed(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Bed(int,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Bed(org.bukkit.Material)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Bed(org.bukkit.Material,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the type\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Bed(org.bukkit.block.BlockFace)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "direction"
              }
            ],
            "comment": {
              "body": "Instantiate a bed facing in a particular direction.",
              "plain": "Instantiate a bed facing in a particular direction.\n@param direction the direction the bed\u0027s head is facing"
            }
          },
          {
            "kind": "METHOD",
            "name": "clone()"
          },
          {
            "kind": "METHOD",
            "name": "getFacing()",
            "comment": {
              "body": "Get the direction that this bed\u0027s head is facing toward",
              "tags": "Returns the direction the head of the bed is facing.",
              "plain": "Get the direction that this bed\u0027s head is facing toward\n@return the direction the head of the bed is facing"
            }
          },
          {
            "kind": "METHOD",
            "name": "isHeadOfBed()",
            "comment": {
              "body": "Determine if this block represents the head of the bed",
              "tags": "Returns true if this is the head of the bed, false if it is the foot.",
              "plain": "Determine if this block represents the head of the bed\n@return true if this is the head of the bed, false if it is the foot"
            }
          },
          {
            "kind": "METHOD",
            "name": "setFacingDirection(org.bukkit.block.BlockFace)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "face"
              }
            ],
            "comment": {
              "body": "Set which direction the head of the bed is facing. Note that this will\n only affect one of the two blocks the bed is made of.",
              "plain": "Set which direction the head of the bed is facing. Note that this will\n only affect one of the two blocks the bed is made of."
            }
          },
          {
            "kind": "METHOD",
            "name": "setHeadOfBed(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "isHeadOfBed"
              }
            ],
            "comment": {
              "body": "Configure this to be either the head or the foot of the bed",
              "plain": "Configure this to be either the head or the foot of the bed\n@param isHeadOfBed True to make it the head."
            }
          },
          {
            "kind": "METHOD",
            "name": "toString()"
          }
        ],
        "comment": {
          "body": "Represents a bed.",
          "plain": "Represents a bed."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.material.Button",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "Button()"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Button(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the type\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Button(int,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Button(org.bukkit.Material)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Button(org.bukkit.Material,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the type\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "clone()"
          },
          {
            "kind": "METHOD",
            "name": "getAttachedFace()",
            "comment": {
              "body": "Gets the face that this block is attached on",
              "tags": "Returns BlockFace attached to.",
              "plain": "Gets the face that this block is attached on\n@return BlockFace attached to"
            }
          },
          {
            "kind": "METHOD",
            "name": "isPowered()",
            "comment": {
              "body": "Gets the current state of this Material, indicating if it\u0027s powered or\n unpowered",
              "tags": "Returns true if powered, otherwise false.",
              "plain": "Gets the current state of this Material, indicating if it\u0027s powered or\n unpowered\n@return true if powered, otherwise false"
            }
          },
          {
            "kind": "METHOD",
            "name": "setFacingDirection(org.bukkit.block.BlockFace)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "face"
              }
            ],
            "comment": {
              "body": "Sets the direction this button is pointing toward",
              "plain": "Sets the direction this button is pointing toward"
            }
          },
          {
            "kind": "METHOD",
            "name": "setPowered(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "bool"
              }
            ],
            "comment": {
              "body": "Sets the current state of this button",
              "plain": "Sets the current state of this button\n@param bool whether or not the button is powered"
            }
          },
          {
            "kind": "METHOD",
            "name": "toString()"
          }
        ],
        "comment": {
          "body": "Represents a button",
          "plain": "Represents a button"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.material.Cake",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "Cake()"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Cake(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Cake(int,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Cake(org.bukkit.Material)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Cake(org.bukkit.Material,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the type\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "clone()"
          },
          {
            "kind": "METHOD",
            "name": "getSlicesEaten()",
            "comment": {
              "body": "Gets the number of slices eaten from this cake",
              "tags": "Returns The number of slices eaten.",
              "plain": "Gets the number of slices eaten from this cake\n@return The number of slices eaten"
            }
          },
          {
            "kind": "METHOD",
            "name": "getSlicesRemaining()",
            "comment": {
              "body": "Gets the number of slices remaining on this cake",
              "tags": "Returns The number of slices remaining.",
              "plain": "Gets the number of slices remaining on this cake\n@return The number of slices remaining"
            }
          },
          {
            "kind": "METHOD",
            "name": "setSlicesEaten(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "n"
              }
            ],
            "comment": {
              "body": "Sets the number of slices eaten from this cake",
              "plain": "Sets the number of slices eaten from this cake\n@param n The number of slices eaten"
            }
          },
          {
            "kind": "METHOD",
            "name": "setSlicesRemaining(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "n"
              }
            ],
            "comment": {
              "body": "Sets the number of slices remaining on this cake",
              "plain": "Sets the number of slices remaining on this cake\n@param n The number of slices remaining"
            }
          },
          {
            "kind": "METHOD",
            "name": "toString()"
          }
        ]
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.material.Cauldron",
        "children": [
          {
            "kind": "FIELD",
            "name": "CAULDRON_EMPTY"
          },
          {
            "kind": "FIELD",
            "name": "CAULDRON_FULL"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Cauldron()"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Cauldron(byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Cauldron(int,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "clone()"
          },
          {
            "kind": "METHOD",
            "name": "isEmpty()",
            "comment": {
              "body": "Check if the cauldron is empty.",
              "tags": "Returns True if it is empty..",
              "plain": "Check if the cauldron is empty.\n@return True if it is empty."
            }
          },
          {
            "kind": "METHOD",
            "name": "isFull()",
            "comment": {
              "body": "Check if the cauldron is full.",
              "tags": "Returns True if it is full..",
              "plain": "Check if the cauldron is full.\n@return True if it is full."
            }
          },
          {
            "kind": "METHOD",
            "name": "toString()"
          }
        ],
        "comment": {
          "body": "Represents a cauldron",
          "plain": "Represents a cauldron"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.material.Chest",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "Chest()"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Chest(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Chest(int,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Chest(org.bukkit.Material)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Chest(org.bukkit.Material,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the type\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Chest(org.bukkit.block.BlockFace)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "direction"
              }
            ],
            "comment": {
              "body": "Instantiate a chest facing in a particular direction.",
              "plain": "Instantiate a chest facing in a particular direction.\n@param direction the direction the chest\u0027s lit opens towards"
            }
          },
          {
            "kind": "METHOD",
            "name": "clone()"
          }
        ],
        "comment": {
          "body": "Represents a chest",
          "plain": "Represents a chest"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.material.Coal",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "Coal()"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Coal(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Coal(int,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Coal(org.bukkit.CoalType)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Coal(org.bukkit.Material)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Coal(org.bukkit.Material,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the type\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "clone()"
          },
          {
            "kind": "METHOD",
            "name": "getType()",
            "comment": {
              "body": "Gets the current type of this coal",
              "tags": "Returns CoalType of this coal.",
              "plain": "Gets the current type of this coal\n@return CoalType of this coal"
            }
          },
          {
            "kind": "METHOD",
            "name": "setType(org.bukkit.CoalType)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "comment": {
              "body": "Sets the type of this coal",
              "plain": "Sets the type of this coal\n@param type New type of this coal"
            }
          },
          {
            "kind": "METHOD",
            "name": "toString()"
          }
        ],
        "comment": {
          "body": "Represents the different types of coals.",
          "plain": "Represents the different types of coals."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.material.CocoaPlant",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "CocoaPlant()"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "CocoaPlant(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "CocoaPlant(int,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "CocoaPlant(org.bukkit.material.CocoaPlant.CocoaPlantSize)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "sz"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "CocoaPlant(org.bukkit.material.CocoaPlant.CocoaPlantSize,org.bukkit.block.BlockFace)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "dir"
              },
              {
                "kind": "PARAMETER",
                "name": "sz"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "clone()"
          },
          {
            "kind": "METHOD",
            "name": "getAttachedFace()"
          },
          {
            "kind": "METHOD",
            "name": "getFacing()"
          },
          {
            "kind": "METHOD",
            "name": "getSize()",
            "comment": {
              "body": "Get size of plant",
              "tags": "Returns size.",
              "plain": "Get size of plant\n@return size"
            }
          },
          {
            "kind": "ENUM",
            "name": "org.bukkit.material.CocoaPlant.CocoaPlantSize",
            "children": [
              {
                "kind": "CONSTRUCTOR",
                "name": "CocoaPlantSize()"
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "LARGE"
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "MEDIUM"
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "SMALL"
              },
              {
                "kind": "METHOD",
                "name": "valueOf(java.lang.String)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "name"
                  }
                ]
              },
              {
                "kind": "METHOD",
                "name": "values()"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "setFacingDirection(org.bukkit.block.BlockFace)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "face"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "setSize(org.bukkit.material.CocoaPlant.CocoaPlantSize)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "sz"
              }
            ],
            "comment": {
              "body": "Set size of plant",
              "plain": "Set size of plant\n@param sz - size of plant"
            }
          },
          {
            "kind": "METHOD",
            "name": "toString()"
          }
        ],
        "comment": {
          "body": "Represents the cocoa plant",
          "plain": "Represents the cocoa plant"
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.material.Colorable",
        "children": [
          {
            "kind": "METHOD",
            "name": "getColor()",
            "comment": {
              "body": "Gets the color of this object.",
              "tags": "Returns The DyeColor of this object..",
              "plain": "Gets the color of this object.\n@return The DyeColor of this object."
            }
          },
          {
            "kind": "METHOD",
            "name": "setColor(org.bukkit.DyeColor)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "color"
              }
            ],
            "comment": {
              "body": "Sets the color of this object to the specified DyeColor.",
              "plain": "Sets the color of this object to the specified DyeColor.\n@param color The color of the object, as a DyeColor."
            }
          }
        ],
        "comment": {
          "body": "An object that can be colored.",
          "plain": "An object that can be colored."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.material.Command",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "Command()"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Command(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Command(int,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Command(org.bukkit.Material)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Command(org.bukkit.Material,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the type\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "clone()"
          },
          {
            "kind": "METHOD",
            "name": "isPowered()",
            "comment": {
              "body": "Gets the current state of this Material, indicating if it\u0027s powered or\n unpowered",
              "tags": "Returns true if powered, otherwise false.",
              "plain": "Gets the current state of this Material, indicating if it\u0027s powered or\n unpowered\n@return true if powered, otherwise false"
            }
          },
          {
            "kind": "METHOD",
            "name": "setPowered(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "bool"
              }
            ],
            "comment": {
              "body": "Sets the current state of this Material",
              "plain": "Sets the current state of this Material\n@param bool whether or not the command block is powered"
            }
          },
          {
            "kind": "METHOD",
            "name": "toString()"
          }
        ],
        "comment": {
          "body": "Represents a command block",
          "plain": "Represents a command block"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.material.Comparator",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "Comparator()",
            "comment": {
              "body": "Constructs a comparator switched off, with the default mode (normal) and facing the default direction (north).",
              "plain": "Constructs a comparator switched off, with the default mode (normal) and facing the default direction (north)."
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Comparator(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Comparator(int,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Comparator(org.bukkit.Material)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Comparator(org.bukkit.Material,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the type\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Comparator(org.bukkit.block.BlockFace)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "facingDirection"
              }
            ],
            "comment": {
              "body": "Constructs a comparator switched off, with the default mode (normal) and facing the specified direction.",
              "plain": "Constructs a comparator switched off, with the default mode (normal) and facing the specified direction.\n@param facingDirection the direction the comparator is facing\n@see BlockFace"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Comparator(org.bukkit.block.BlockFace,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "facingDirection"
              },
              {
                "kind": "PARAMETER",
                "name": "isSubtraction"
              }
            ],
            "comment": {
              "body": "Constructs a comparator switched off, with the specified mode and facing the specified direction.",
              "plain": "Constructs a comparator switched off, with the specified mode and facing the specified direction.\n@param facingDirection the direction the comparator is facing\n@param isSubtraction True if the comparator is in subtraction mode, false for normal comparator operation\n@see BlockFace"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Comparator(org.bukkit.block.BlockFace,boolean,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "facingDirection"
              },
              {
                "kind": "PARAMETER",
                "name": "isSubtraction"
              },
              {
                "kind": "PARAMETER",
                "name": "state"
              }
            ],
            "comment": {
              "body": "Constructs a comparator switched on or off, with the specified mode and facing the specified direction.",
              "plain": "Constructs a comparator switched on or off, with the specified mode and facing the specified direction.\n@param facingDirection the direction the comparator is facing\n@param isSubtraction True if the comparator is in subtraction mode, false for normal comparator operation\n@param state True if the comparator is in the on state\n@see BlockFace"
            }
          },
          {
            "kind": "FIELD",
            "name": "DEFAULT_DIRECTION"
          },
          {
            "kind": "FIELD",
            "name": "DEFAULT_STATE"
          },
          {
            "kind": "FIELD",
            "name": "DEFAULT_SUBTRACTION_MODE"
          },
          {
            "kind": "METHOD",
            "name": "clone()"
          },
          {
            "kind": "METHOD",
            "name": "getFacing()",
            "comment": {
              "body": "Gets the direction this comparator is facing",
              "tags": "Returns The direction this comparator is facing.",
              "plain": "Gets the direction this comparator is facing\n@return The direction this comparator is facing\n@see BlockFace"
            }
          },
          {
            "kind": "METHOD",
            "name": "isBeingPowered()",
            "comment": {
              "body": "Checks if the comparator is being powered",
              "tags": "Returns true if the comparator is being powered.",
              "plain": "Checks if the comparator is being powered\n@return true if the comparator is being powered"
            }
          },
          {
            "kind": "METHOD",
            "name": "isPowered()",
            "comment": {
              "body": "Checks if the comparator is powered",
              "tags": "Returns true if the comparator is powered.",
              "plain": "Checks if the comparator is powered\n@return true if the comparator is powered"
            }
          },
          {
            "kind": "METHOD",
            "name": "isSubtractionMode()",
            "comment": {
              "body": "Checks whether the comparator is in subtraction mode",
              "tags": "Returns True if the comparator is in subtraction mode, false if normal comparator operation.",
              "plain": "Checks whether the comparator is in subtraction mode\n@return True if the comparator is in subtraction mode, false if normal comparator operation"
            }
          },
          {
            "kind": "METHOD",
            "name": "setFacingDirection(org.bukkit.block.BlockFace)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "face"
              }
            ],
            "comment": {
              "body": "Sets the direction this comparator is facing",
              "plain": "Sets the direction this comparator is facing\n@param face The direction to set this comparator to\n@see BlockFace"
            }
          },
          {
            "kind": "METHOD",
            "name": "setSubtractionMode(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "isSubtraction"
              }
            ],
            "comment": {
              "body": "Sets whether the comparator is in subtraction mode.",
              "plain": "Sets whether the comparator is in subtraction mode.\n@param isSubtraction True if the comparator is in subtraction mode, false for normal comparator operation"
            }
          },
          {
            "kind": "METHOD",
            "name": "toString()"
          }
        ],
        "comment": {
          "body": "Represents a comparator in the on or off state, in normal or subtraction mode and facing in a specific direction.",
          "plain": "Represents a comparator in the on or off state, in normal or subtraction mode and facing in a specific direction.\n@see Material#REDSTONE_COMPARATOR_OFF\n@see Material#REDSTONE_COMPARATOR_ON"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.material.Crops",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "Crops()",
            "comment": {
              "body": "Constructs a wheat crop block in the seeded state.",
              "plain": "Constructs a wheat crop block in the seeded state."
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Crops(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Crops(int,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Crops(org.bukkit.CropState)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "state"
              }
            ],
            "comment": {
              "body": "Constructs a wheat crop block in the given growth state",
              "plain": "Constructs a wheat crop block in the given growth state\n@param state The growth state of the crops"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Crops(org.bukkit.Material)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "comment": {
              "body": "Constructs a crop block of the given type and in the seeded state",
              "plain": "Constructs a crop block of the given type and in the seeded state\n@param type The type of crops"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Crops(org.bukkit.Material,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the type\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Crops(org.bukkit.Material,org.bukkit.CropState)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "state"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "comment": {
              "body": "Constructs a crop block of the given type and in the given growth state",
              "plain": "Constructs a crop block of the given type and in the given growth state\n@param type The type of crops\n@param state The growth state of the crops"
            }
          },
          {
            "kind": "FIELD",
            "name": "DEFAULT_STATE"
          },
          {
            "kind": "FIELD",
            "name": "DEFAULT_TYPE"
          },
          {
            "kind": "METHOD",
            "name": "clone()"
          },
          {
            "kind": "METHOD",
            "name": "getState()",
            "comment": {
              "body": "Gets the current growth state of this crop\n\n For crops with only four growth states such as beetroot, only the values SEEDED, SMALL, TALL and RIPE will be\n returned.",
              "tags": "Returns CropState of this crop.",
              "plain": "Gets the current growth state of this crop\n\n For crops with only four growth states such as beetroot, only the values SEEDED, SMALL, TALL and RIPE will be\n returned.\n@return CropState of this crop"
            }
          },
          {
            "kind": "METHOD",
            "name": "setState(org.bukkit.CropState)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "state"
              }
            ],
            "comment": {
              "body": "Sets the growth state of this crop\n\n For crops with only four growth states such as beetroot, the 8 CropStates are mapped into four states:\n\n SEEDED, SMALL, TALL and RIPE\n\n GERMINATED will change to SEEDED\n VERY_SMALL will change to SMALL\n MEDIUM will change to TALL\n VERY_TALL will change to RIPE",
              "plain": "Sets the growth state of this crop\n\n For crops with only four growth states such as beetroot, the 8 CropStates are mapped into four states:\n\n SEEDED, SMALL, TALL and RIPE\n\n GERMINATED will change to SEEDED\n VERY_SMALL will change to SMALL\n MEDIUM will change to TALL\n VERY_TALL will change to RIPE\n@param state New growth state of this crop"
            }
          },
          {
            "kind": "METHOD",
            "name": "toString()"
          }
        ],
        "comment": {
          "body": "Represents the different types of crops in different states of growth.",
          "plain": "Represents the different types of crops in different states of growth.\n@see Material#CROPS\n@see Material#CARROT\n@see Material#POTATO\n@see Material#BEETROOT_BLOCK\n@see Material#NETHER_WARTS"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.material.DetectorRail",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "DetectorRail()"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "DetectorRail(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "DetectorRail(int,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "DetectorRail(org.bukkit.Material)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "DetectorRail(org.bukkit.Material,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the type\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "clone()"
          },
          {
            "kind": "METHOD",
            "name": "isPressed()"
          },
          {
            "kind": "METHOD",
            "name": "setPressed(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "isPressed"
              }
            ]
          }
        ],
        "comment": {
          "body": "Represents a detector rail",
          "plain": "Represents a detector rail"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.material.Diode",
        "children": [
          {
            "kind": "FIELD",
            "name": "DEFAULT_DELAY"
          },
          {
            "kind": "FIELD",
            "name": "DEFAULT_DIRECTION"
          },
          {
            "kind": "FIELD",
            "name": "DEFAULT_STATE"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Diode()",
            "comment": {
              "body": "Constructs a diode switched on, with a delay of 1 and facing the default\n direction (north).\n\n By default this constructor creates a diode that is switched on for\n backwards compatibility with past implementations.",
              "plain": "Constructs a diode switched on, with a delay of 1 and facing the default\n direction (north).\n\n By default this constructor creates a diode that is switched on for\n backwards compatibility with past implementations."
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Diode(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Diode(int,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Diode(org.bukkit.Material)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Diode(org.bukkit.Material,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the type\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Diode(org.bukkit.block.BlockFace)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "facingDirection"
              }
            ],
            "comment": {
              "body": "Constructs a diode switched off, with a delay of 1 and facing the\n specified direction.",
              "plain": "Constructs a diode switched off, with a delay of 1 and facing the\n specified direction.\n@param facingDirection the direction the diode is facing\n@see BlockFace"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Diode(org.bukkit.block.BlockFace,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "delay"
              },
              {
                "kind": "PARAMETER",
                "name": "facingDirection"
              }
            ],
            "comment": {
              "body": "Constructs a diode switched off, with the specified delay and facing the\n specified direction.",
              "plain": "Constructs a diode switched off, with the specified delay and facing the\n specified direction.\n@param facingDirection the direction the diode is facing\n@param delay The number of ticks (1-4) before the diode turns on after\n being powered\n@see BlockFace"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Diode(org.bukkit.block.BlockFace,int,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "delay"
              },
              {
                "kind": "PARAMETER",
                "name": "facingDirection"
              },
              {
                "kind": "PARAMETER",
                "name": "state"
              }
            ],
            "comment": {
              "body": "Constructs a diode switched on or off, with the specified delay and\n facing the specified direction.",
              "plain": "Constructs a diode switched on or off, with the specified delay and\n facing the specified direction.\n@param facingDirection the direction the diode is facing\n@param delay The number of ticks (1-4) before the diode turns on after\n being powered\n@param state True if the diode is in the on state\n@see BlockFace"
            }
          },
          {
            "kind": "METHOD",
            "name": "clone()"
          },
          {
            "kind": "METHOD",
            "name": "getDelay()",
            "comment": {
              "body": "Gets the delay of the repeater in ticks.",
              "tags": "Returns The delay (1-4).",
              "plain": "Gets the delay of the repeater in ticks.\n@return The delay (1-4)"
            }
          },
          {
            "kind": "METHOD",
            "name": "getFacing()",
            "comment": {
              "body": "Gets the direction this diode is facing",
              "tags": "Returns The direction this diode is facing.",
              "plain": "Gets the direction this diode is facing\n@return The direction this diode is facing\n@see BlockFace"
            }
          },
          {
            "kind": "METHOD",
            "name": "isPowered()",
            "comment": {
              "body": "Checks if the diode is powered.",
              "tags": "Returns true if the diode is powered.",
              "plain": "Checks if the diode is powered.\n@return true if the diode is powered"
            }
          },
          {
            "kind": "METHOD",
            "name": "setDelay(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "delay"
              }
            ],
            "comment": {
              "body": "Sets the delay of the repeater.",
              "plain": "Sets the delay of the repeater.\n@param delay The new delay (1-4)"
            }
          },
          {
            "kind": "METHOD",
            "name": "setFacingDirection(org.bukkit.block.BlockFace)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "face"
              }
            ],
            "comment": {
              "body": "Sets the direction this diode is facing.",
              "plain": "Sets the direction this diode is facing.\n@param face The direction to set this diode to\n@see BlockFace"
            }
          },
          {
            "kind": "METHOD",
            "name": "toString()"
          }
        ],
        "comment": {
          "body": "Represents a diode/repeater in the on or off state, with a delay and facing\n in a specific direction.",
          "plain": "Represents a diode/repeater in the on or off state, with a delay and facing\n in a specific direction.\n@see Material#DIODE_BLOCK_OFF\n@see Material#DIODE_BLOCK_ON"
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.material.Directional",
        "children": [
          {
            "kind": "METHOD",
            "name": "getFacing()",
            "comment": {
              "body": "Gets the direction this block is facing",
              "tags": "Returns the direction this block is facing.",
              "plain": "Gets the direction this block is facing\n@return the direction this block is facing"
            }
          },
          {
            "kind": "METHOD",
            "name": "setFacingDirection(org.bukkit.block.BlockFace)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "face"
              }
            ],
            "comment": {
              "body": "Sets the direction that this block is facing in",
              "plain": "Sets the direction that this block is facing in\n@param face The facing direction"
            }
          }
        ]
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.material.DirectionalContainer",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "DirectionalContainer(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "DirectionalContainer(int,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "DirectionalContainer(org.bukkit.Material)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "DirectionalContainer(org.bukkit.Material,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the type\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "clone()"
          },
          {
            "kind": "METHOD",
            "name": "getFacing()"
          },
          {
            "kind": "METHOD",
            "name": "setFacingDirection(org.bukkit.block.BlockFace)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "face"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "toString()"
          }
        ],
        "comment": {
          "body": "Represents a furnace or a dispenser.",
          "plain": "Represents a furnace or a dispenser."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.material.Dispenser",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "Dispenser()"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Dispenser(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Dispenser(int,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Dispenser(org.bukkit.Material)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Dispenser(org.bukkit.Material,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the type\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Dispenser(org.bukkit.block.BlockFace)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "direction"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "clone()"
          },
          {
            "kind": "METHOD",
            "name": "getFacing()"
          },
          {
            "kind": "METHOD",
            "name": "setFacingDirection(org.bukkit.block.BlockFace)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "face"
              }
            ]
          }
        ],
        "comment": {
          "body": "Represents a dispenser.",
          "plain": "Represents a dispenser."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.material.Door",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "Door()",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@deprecated Artifact of old API, equivalent to new \u003ccode\u003eDoor(Material.WOODEN_DOOR);\u003c/code\u003e"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Door(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Door(int,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Door(org.bukkit.Material)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Door(org.bukkit.Material,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "isHingeRight"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "comment": {
              "body": "Constructs the top half of door of the given material type and with the hinge on the left or right",
              "plain": "Constructs the top half of door of the given material type and with the hinge on the left or right\n@param type The type of material this door is made of. This must match the type of the block below.\n@param isHingeRight True if the hinge is on the right hand side, false if the hinge is on the left hand side.\n@see Material#WOODEN_DOOR\n@see Material#IRON_DOOR_BLOCK\n@see Material#SPRUCE_DOOR\n@see Material#BIRCH_DOOR\n@see Material#JUNGLE_DOOR\n@see Material#ACACIA_DOOR\n@see Material#DARK_OAK_DOOR"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Door(org.bukkit.Material,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the type\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Door(org.bukkit.Material,org.bukkit.block.BlockFace)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "face"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "comment": {
              "body": "Constructs the bottom half of a door of the given material type, facing the specified direction and set to closed",
              "plain": "Constructs the bottom half of a door of the given material type, facing the specified direction and set to closed\n@param type The type of material this door is made of. This must match the type of the block above.\n@param face The direction the door is facing.\n@see Material#WOODEN_DOOR\n@see Material#IRON_DOOR_BLOCK\n@see Material#SPRUCE_DOOR\n@see Material#BIRCH_DOOR\n@see Material#JUNGLE_DOOR\n@see Material#ACACIA_DOOR\n@see Material#DARK_OAK_DOOR\n@see BlockFace#WEST\n@see BlockFace#NORTH\n@see BlockFace#EAST\n@see BlockFace#SOUTH"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Door(org.bukkit.Material,org.bukkit.block.BlockFace,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "face"
              },
              {
                "kind": "PARAMETER",
                "name": "isOpen"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "comment": {
              "body": "Constructs the bottom half of a door of the given material type, facing the specified direction and set to open\n or closed",
              "plain": "Constructs the bottom half of a door of the given material type, facing the specified direction and set to open\n or closed\n@param type The type of material this door is made of. This must match the type of the block above.\n@param face The direction the door is facing.\n@param isOpen Whether the door is currently opened.\n@see Material#WOODEN_DOOR\n@see Material#IRON_DOOR_BLOCK\n@see Material#SPRUCE_DOOR\n@see Material#BIRCH_DOOR\n@see Material#JUNGLE_DOOR\n@see Material#ACACIA_DOOR\n@see Material#DARK_OAK_DOOR\n@see BlockFace#WEST\n@see BlockFace#NORTH\n@see BlockFace#EAST\n@see BlockFace#SOUTH"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Door(org.bukkit.TreeSpecies,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "isHingeRight"
              },
              {
                "kind": "PARAMETER",
                "name": "species"
              }
            ],
            "comment": {
              "body": "Constructs the top half of a wooden door of the given species and with the hinge on the left or right",
              "plain": "Constructs the top half of a wooden door of the given species and with the hinge on the left or right\n@param species The species this wooden door is made of. This must match the species of the block below.\n@param isHingeRight True if the hinge is on the right hand side, false if the hinge is on the left hand side.\n@see TreeSpecies"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Door(org.bukkit.TreeSpecies,org.bukkit.block.BlockFace)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "face"
              },
              {
                "kind": "PARAMETER",
                "name": "species"
              }
            ],
            "comment": {
              "body": "Constructs the bottom half of a wooden door of the given species, facing the specified direction and set to\n closed",
              "plain": "Constructs the bottom half of a wooden door of the given species, facing the specified direction and set to\n closed\n@param species The species this wooden door is made of. This must match the species of the block above.\n@param face The direction the door is facing.\n@see TreeSpecies\n@see BlockFace#WEST\n@see BlockFace#NORTH\n@see BlockFace#EAST\n@see BlockFace#SOUTH"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Door(org.bukkit.TreeSpecies,org.bukkit.block.BlockFace,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "face"
              },
              {
                "kind": "PARAMETER",
                "name": "isOpen"
              },
              {
                "kind": "PARAMETER",
                "name": "species"
              }
            ],
            "comment": {
              "body": "Constructs the bottom half of a wooden door of the given species, facing the specified direction and set to open\n or closed",
              "plain": "Constructs the bottom half of a wooden door of the given species, facing the specified direction and set to open\n or closed\n@param species The species this wooden door is made of. This must match the species of the block above.\n@param face The direction the door is facing.\n@param isOpen Whether the door is currently opened.\n@see TreeSpecies\n@see BlockFace#WEST\n@see BlockFace#NORTH\n@see BlockFace#EAST\n@see BlockFace#SOUTH"
            }
          },
          {
            "kind": "METHOD",
            "name": "clone()"
          },
          {
            "kind": "METHOD",
            "name": "getFacing()",
            "comment": {
              "body": "Get the direction that this door is facing.\n\n Undefined if \u003ccode\u003eisTopHalf()\u003c/code\u003e is true.",
              "tags": "Returns the direction.",
              "plain": "Get the direction that this door is facing.\n\n Undefined if \u003ccode\u003eisTopHalf()\u003c/code\u003e is true.\n@return the direction"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHinge()",
            "comment": {
              "body": "Returns the side of the door the hinge is on.\n\n Undefined if \u003ccode\u003eisTopHalf()\u003c/code\u003e is false.",
              "tags": "Returns false for left hinge, true for right hinge.",
              "plain": "Returns the side of the door the hinge is on.\n\n Undefined if \u003ccode\u003eisTopHalf()\u003c/code\u003e is false.\n@return false for left hinge, true for right hinge"
            }
          },
          {
            "kind": "METHOD",
            "name": "getHingeCorner()",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "tags": "Returns BlockFace.SELF.",
              "plain": "@return BlockFace.SELF\n@deprecated This method should not be used; use hinge and facing accessors instead."
            }
          },
          {
            "kind": "METHOD",
            "name": "getWoodDoorOfSpecies(org.bukkit.TreeSpecies)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "species"
              }
            ],
            "comment": {
              "body": "Returns the item type of a wooden door for the given tree species.",
              "tags": "Returns The item type for the given species..",
              "plain": "Returns the item type of a wooden door for the given tree species.\n@param species The species of wood door required.\n@return The item type for the given species.\n@see Material#WOODEN_DOOR\n@see Material#SPRUCE_DOOR\n@see Material#BIRCH_DOOR\n@see Material#JUNGLE_DOOR\n@see Material#ACACIA_DOOR\n@see Material#DARK_OAK_DOOR"
            }
          },
          {
            "kind": "METHOD",
            "name": "isOpen()",
            "comment": {
              "body": "Result is undefined if \u003ccode\u003eisTopHalf()\u003c/code\u003e is true.",
              "plain": "Result is undefined if \u003ccode\u003eisTopHalf()\u003c/code\u003e is true."
            }
          },
          {
            "kind": "METHOD",
            "name": "isTopHalf()",
            "comment": {
              "tags": "Returns whether this is the top half of the door.",
              "plain": "@return whether this is the top half of the door"
            }
          },
          {
            "kind": "METHOD",
            "name": "setFacingDirection(org.bukkit.block.BlockFace)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "face"
              }
            ],
            "comment": {
              "body": "Set the direction that this door should is facing.\n\n Undefined if \u003ccode\u003eisTopHalf()\u003c/code\u003e is true.",
              "plain": "Set the direction that this door should is facing.\n\n Undefined if \u003ccode\u003eisTopHalf()\u003c/code\u003e is true.\n@param face the direction"
            }
          },
          {
            "kind": "METHOD",
            "name": "setHinge(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "isHingeRight"
              }
            ],
            "comment": {
              "body": "Set whether the hinge is on the left or right side. Left is false, right is true.\n\n Undefined if \u003ccode\u003eisTopHalf()\u003c/code\u003e is false.",
              "plain": "Set whether the hinge is on the left or right side. Left is false, right is true.\n\n Undefined if \u003ccode\u003eisTopHalf()\u003c/code\u003e is false.\n@param isHingeRight True if the hinge is on the right hand side, false if the hinge is on the left hand side."
            }
          },
          {
            "kind": "METHOD",
            "name": "setOpen(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "isOpen"
              }
            ],
            "comment": {
              "body": "Set whether the door is open. Undefined if \u003ccode\u003eisTopHalf()\u003c/code\u003e is true.",
              "plain": "Set whether the door is open. Undefined if \u003ccode\u003eisTopHalf()\u003c/code\u003e is true."
            }
          },
          {
            "kind": "METHOD",
            "name": "setTopHalf(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "isTopHalf"
              }
            ],
            "comment": {
              "body": "Configure this part of the door to be either the top or the bottom half",
              "plain": "Configure this part of the door to be either the top or the bottom half\n@param isTopHalf True to make it the top half."
            }
          },
          {
            "kind": "METHOD",
            "name": "toString()"
          }
        ],
        "comment": {
          "body": "Represents a door.\n\n This class was previously deprecated, but has been retrofitted to\n work with modern doors. Some methods are undefined dependant on \u003ccode\u003eisTopHalf()\u003c/code\u003e\n due to Minecraft\u0027s internal representation of doors.",
          "plain": "Represents a door.\n\n This class was previously deprecated, but has been retrofitted to\n work with modern doors. Some methods are undefined dependant on \u003ccode\u003eisTopHalf()\u003c/code\u003e\n due to Minecraft\u0027s internal representation of doors.\n@see Material#WOODEN_DOOR\n@see Material#IRON_DOOR_BLOCK\n@see Material#SPRUCE_DOOR\n@see Material#BIRCH_DOOR\n@see Material#JUNGLE_DOOR\n@see Material#ACACIA_DOOR\n@see Material#DARK_OAK_DOOR"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.material.Dye",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "Dye()"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Dye(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Dye(int,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Dye(org.bukkit.DyeColor)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "color"
              }
            ],
            "comment": {
              "plain": "@param color color of the dye"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Dye(org.bukkit.Material)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Dye(org.bukkit.Material,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the type\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "clone()"
          },
          {
            "kind": "METHOD",
            "name": "getColor()",
            "comment": {
              "body": "Gets the current color of this dye",
              "tags": "Returns DyeColor of this dye.",
              "plain": "Gets the current color of this dye\n@return DyeColor of this dye"
            }
          },
          {
            "kind": "METHOD",
            "name": "setColor(org.bukkit.DyeColor)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "color"
              }
            ],
            "comment": {
              "body": "Sets the color of this dye",
              "plain": "Sets the color of this dye\n@param color New color of this dye"
            }
          },
          {
            "kind": "METHOD",
            "name": "toString()"
          }
        ],
        "comment": {
          "body": "Represents dye",
          "plain": "Represents dye"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.material.EnderChest",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "EnderChest()"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "EnderChest(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "EnderChest(int,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "EnderChest(org.bukkit.Material)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "EnderChest(org.bukkit.Material,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the type\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "EnderChest(org.bukkit.block.BlockFace)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "direction"
              }
            ],
            "comment": {
              "body": "Instantiate an ender chest facing in a particular direction.",
              "plain": "Instantiate an ender chest facing in a particular direction.\n@param direction the direction the ender chest\u0027s lid opens towards"
            }
          },
          {
            "kind": "METHOD",
            "name": "clone()"
          }
        ],
        "comment": {
          "body": "Represents an ender chest",
          "plain": "Represents an ender chest"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.material.ExtendedRails",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "ExtendedRails(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "ExtendedRails(int,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "ExtendedRails(org.bukkit.Material)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "ExtendedRails(org.bukkit.Material,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the type\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "clone()"
          },
          {
            "kind": "METHOD",
            "name": "getConvertedData()",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "isCurve()"
          },
          {
            "kind": "METHOD",
            "name": "setDirection(org.bukkit.block.BlockFace,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "face"
              },
              {
                "kind": "PARAMETER",
                "name": "isOnSlope"
              }
            ]
          }
        ],
        "comment": {
          "body": "This is the superclass for the \u003ca href\u003d\"org/bukkit/material/DetectorRail.html\" title\u003d\"class in org.bukkit.material\"\u003e\u003ccode\u003eDetectorRail\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"org/bukkit/material/PoweredRail.html\" title\u003d\"class in org.bukkit.material\"\u003e\u003ccode\u003ePoweredRail\u003c/code\u003e\u003c/a\u003e\n classes",
          "plain": "This is the superclass for the {@link DetectorRail} and {@link PoweredRail}\n classes"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.material.FlowerPot",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "FlowerPot()",
            "comment": {
              "body": "Default constructor for a flower pot.",
              "plain": "Default constructor for a flower pot."
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "FlowerPot(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "FlowerPot(int,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "FlowerPot(org.bukkit.Material)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "FlowerPot(org.bukkit.Material,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the type\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "clone()"
          },
          {
            "kind": "METHOD",
            "name": "getContents()",
            "comment": {
              "body": "Get the material in the flower pot",
              "tags": "Returns material MaterialData for the block currently in the flower pot\n     or null if empty.",
              "plain": "Get the material in the flower pot\n@return material MaterialData for the block currently in the flower pot\n     or null if empty"
            }
          },
          {
            "kind": "METHOD",
            "name": "setContents(org.bukkit.material.MaterialData)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "materialData"
              }
            ],
            "comment": {
              "body": "Set the contents of the flower pot",
              "plain": "Set the contents of the flower pot\n@param materialData MaterialData of the block to put in the flower pot."
            }
          },
          {
            "kind": "METHOD",
            "name": "toString()"
          }
        ],
        "deprecated": {
          "deprecated": "true"
        },
        "comment": {
          "body": "Represents a flower pot.",
          "plain": "Represents a flower pot.\n@deprecated Flower pots are now tile entities, use\n {@link org.bukkit.block.FlowerPot}."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.material.Furnace",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "Furnace()"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Furnace(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Furnace(int,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Furnace(org.bukkit.Material)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Furnace(org.bukkit.Material,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the type\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Furnace(org.bukkit.block.BlockFace)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "direction"
              }
            ],
            "comment": {
              "body": "Instantiate a furnace facing in a particular direction.",
              "plain": "Instantiate a furnace facing in a particular direction.\n@param direction the direction the furnace\u0027s \"opening\" is facing"
            }
          },
          {
            "kind": "METHOD",
            "name": "clone()"
          }
        ],
        "comment": {
          "body": "Represents a furnace.",
          "plain": "Represents a furnace."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.material.FurnaceAndDispenser",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "FurnaceAndDispenser(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "FurnaceAndDispenser(int,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "FurnaceAndDispenser(org.bukkit.Material)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "FurnaceAndDispenser(org.bukkit.Material,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the type\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "clone()"
          }
        ],
        "comment": {
          "body": "Represents a furnace or dispenser, two types of directional containers",
          "plain": "Represents a furnace or dispenser, two types of directional containers"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.material.Gate",
        "children": [
          {
            "kind": "FIELD",
            "name": "DIR_BIT"
          },
          {
            "kind": "FIELD",
            "name": "GATE_EAST"
          },
          {
            "kind": "FIELD",
            "name": "GATE_NORTH"
          },
          {
            "kind": "FIELD",
            "name": "GATE_SOUTH"
          },
          {
            "kind": "FIELD",
            "name": "GATE_WEST"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Gate()"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Gate(byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Gate(int,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "OPEN_BIT"
          },
          {
            "kind": "METHOD",
            "name": "clone()"
          },
          {
            "kind": "METHOD",
            "name": "getFacing()"
          },
          {
            "kind": "METHOD",
            "name": "isOpen()"
          },
          {
            "kind": "METHOD",
            "name": "setFacingDirection(org.bukkit.block.BlockFace)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "face"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "setOpen(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "isOpen"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "toString()"
          }
        ],
        "comment": {
          "body": "Represents a fence gate",
          "plain": "Represents a fence gate"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.material.Hopper",
        "children": [
          {
            "kind": "FIELD",
            "name": "DEFAULT_ACTIVE"
          },
          {
            "kind": "FIELD",
            "name": "DEFAULT_DIRECTION"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Hopper()",
            "comment": {
              "body": "Constructs a hopper facing the default direction (down) and initially\n active.",
              "plain": "Constructs a hopper facing the default direction (down) and initially\n active."
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Hopper(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Hopper(int,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Hopper(org.bukkit.Material)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Hopper(org.bukkit.Material,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the type\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Hopper(org.bukkit.block.BlockFace)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "facingDirection"
              }
            ],
            "comment": {
              "body": "Constructs a hopper facing the specified direction and initially active.",
              "plain": "Constructs a hopper facing the specified direction and initially active.\n@param facingDirection the direction the hopper is facing\n@see BlockFace"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Hopper(org.bukkit.block.BlockFace,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "facingDirection"
              },
              {
                "kind": "PARAMETER",
                "name": "isActive"
              }
            ],
            "comment": {
              "body": "Constructs a hopper facing the specified direction and either active or\n not.",
              "plain": "Constructs a hopper facing the specified direction and either active or\n not.\n@param facingDirection the direction the hopper is facing\n@param isActive True if the hopper is initially active, false if\n deactivated\n@see BlockFace"
            }
          },
          {
            "kind": "METHOD",
            "name": "clone()"
          },
          {
            "kind": "METHOD",
            "name": "getFacing()",
            "comment": {
              "body": "Gets the direction this hopper is facing",
              "tags": "Returns The direction this hopper is facing.",
              "plain": "Gets the direction this hopper is facing\n@return The direction this hopper is facing\n@see BlockFace"
            }
          },
          {
            "kind": "METHOD",
            "name": "isActive()",
            "comment": {
              "body": "Checks whether the hopper is active or not.",
              "tags": "Returns True if the hopper is active, false if deactivated.",
              "plain": "Checks whether the hopper is active or not.\n@return True if the hopper is active, false if deactivated"
            }
          },
          {
            "kind": "METHOD",
            "name": "isPowered()",
            "comment": {
              "body": "Checks if the hopper is powered.",
              "tags": "Returns true if the hopper is powered.",
              "plain": "Checks if the hopper is powered.\n@return true if the hopper is powered"
            }
          },
          {
            "kind": "METHOD",
            "name": "setActive(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "isActive"
              }
            ],
            "comment": {
              "body": "Sets whether the hopper is active or not.",
              "plain": "Sets whether the hopper is active or not.\n@param isActive True if the hopper is active, false if deactivated as if\n powered by redstone"
            }
          },
          {
            "kind": "METHOD",
            "name": "setFacingDirection(org.bukkit.block.BlockFace)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "face"
              }
            ],
            "comment": {
              "body": "Sets the direction this hopper is facing",
              "plain": "Sets the direction this hopper is facing\n@param face The direction to set this hopper to\n@see BlockFace"
            }
          },
          {
            "kind": "METHOD",
            "name": "toString()"
          }
        ],
        "comment": {
          "body": "Represents a hopper in an active or deactivated state and facing in a\n specific direction.",
          "plain": "Represents a hopper in an active or deactivated state and facing in a\n specific direction.\n@see Material#HOPPER"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.material.Ladder",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "Ladder()"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Ladder(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Ladder(int,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Ladder(org.bukkit.Material)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Ladder(org.bukkit.Material,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the type\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "clone()"
          },
          {
            "kind": "METHOD",
            "name": "getAttachedFace()",
            "comment": {
              "body": "Gets the face that this block is attached on",
              "tags": "Returns BlockFace attached to.",
              "plain": "Gets the face that this block is attached on\n@return BlockFace attached to"
            }
          },
          {
            "kind": "METHOD",
            "name": "setFacingDirection(org.bukkit.block.BlockFace)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "face"
              }
            ],
            "comment": {
              "body": "Sets the direction this ladder is facing",
              "plain": "Sets the direction this ladder is facing"
            }
          }
        ],
        "comment": {
          "body": "Represents Ladder data",
          "plain": "Represents Ladder data"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.material.Leaves",
        "children": [
          {
            "kind": "FIELD",
            "name": "DEFAULT_DECAYABLE"
          },
          {
            "kind": "FIELD",
            "name": "DEFAULT_TYPE"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Leaves()",
            "comment": {
              "body": "Constructs a leaf block.",
              "plain": "Constructs a leaf block."
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Leaves(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Leaves(int,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Leaves(org.bukkit.Material)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "comment": {
              "body": "Constructs a leaf block of the given type.",
              "plain": "Constructs a leaf block of the given type.\n@param type the type of leaf block"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Leaves(org.bukkit.Material,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the type\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Leaves(org.bukkit.Material,org.bukkit.TreeSpecies)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "species"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "comment": {
              "body": "Constructs a leaf block of the given type and tree species.",
              "plain": "Constructs a leaf block of the given type and tree species.\n@param type the type of leaf block\n@param species the species of the wood block"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Leaves(org.bukkit.Material,org.bukkit.TreeSpecies,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "isDecayable"
              },
              {
                "kind": "PARAMETER",
                "name": "species"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "comment": {
              "body": "Constructs a leaf block of the given type and tree species and flag for\n whether this leaf block will disappear when too far from a log.",
              "plain": "Constructs a leaf block of the given type and tree species and flag for\n whether this leaf block will disappear when too far from a log.\n@param type the type of leaf block\n@param species the species of the wood block\n@param isDecayable whether the block is permanent or can disappear"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Leaves(org.bukkit.TreeSpecies)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "species"
              }
            ],
            "comment": {
              "body": "Constructs a leaf block of the given tree species.",
              "plain": "Constructs a leaf block of the given tree species.\n@param species the species of the wood block"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Leaves(org.bukkit.TreeSpecies,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "isDecayable"
              },
              {
                "kind": "PARAMETER",
                "name": "species"
              }
            ],
            "comment": {
              "body": "Constructs a leaf block of the given tree species and flag for whether\n this leaf block will disappear when too far from a log.",
              "plain": "Constructs a leaf block of the given tree species and flag for whether\n this leaf block will disappear when too far from a log.\n@param species the species of the wood block\n@param isDecayable whether the block is permanent or can disappear"
            }
          },
          {
            "kind": "METHOD",
            "name": "clone()"
          },
          {
            "kind": "METHOD",
            "name": "isDecayable()",
            "comment": {
              "body": "Checks if this leaf block is permanent or can decay when too far from a\n log",
              "tags": "Returns true if the leaf block is permanent or can decay when too far\n from a log.",
              "plain": "Checks if this leaf block is permanent or can decay when too far from a\n log\n@return true if the leaf block is permanent or can decay when too far\n from a log"
            }
          },
          {
            "kind": "METHOD",
            "name": "isDecaying()",
            "comment": {
              "body": "Checks if this leaf block is in the process of decaying",
              "tags": "Returns true if the leaf block is in the process of decaying.",
              "plain": "Checks if this leaf block is in the process of decaying\n@return true if the leaf block is in the process of decaying"
            }
          },
          {
            "kind": "METHOD",
            "name": "setDecayable(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "isDecayable"
              }
            ],
            "comment": {
              "body": "Set whether this leaf block will disappear when too far from a log",
              "plain": "Set whether this leaf block will disappear when too far from a log\n@param isDecayable whether the block is permanent or can disappear"
            }
          },
          {
            "kind": "METHOD",
            "name": "setDecaying(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "isDecaying"
              }
            ],
            "comment": {
              "body": "Set whether this leaf block is in the process of decaying",
              "plain": "Set whether this leaf block is in the process of decaying\n@param isDecaying whether the block is decaying or not"
            }
          },
          {
            "kind": "METHOD",
            "name": "toString()"
          }
        ],
        "comment": {
          "body": "Represents the different types of leaf block that may be permanent or can\n decay when too far from a log.",
          "plain": "Represents the different types of leaf block that may be permanent or can\n decay when too far from a log.\n@see Material#LEAVES\n@see Material#LEAVES_2"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.material.Lever",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "Lever()"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Lever(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Lever(int,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Lever(org.bukkit.Material)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Lever(org.bukkit.Material,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the type\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "clone()"
          },
          {
            "kind": "METHOD",
            "name": "getAttachedFace()",
            "comment": {
              "body": "Gets the face that this block is attached on",
              "tags": "Returns BlockFace attached to.",
              "plain": "Gets the face that this block is attached on\n@return BlockFace attached to"
            }
          },
          {
            "kind": "METHOD",
            "name": "isPowered()",
            "comment": {
              "body": "Gets the current state of this Material, indicating if it\u0027s powered or\n unpowered",
              "tags": "Returns true if powered, otherwise false.",
              "plain": "Gets the current state of this Material, indicating if it\u0027s powered or\n unpowered\n@return true if powered, otherwise false"
            }
          },
          {
            "kind": "METHOD",
            "name": "setFacingDirection(org.bukkit.block.BlockFace)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "face"
              }
            ],
            "comment": {
              "body": "Sets the direction this lever is pointing in",
              "plain": "Sets the direction this lever is pointing in"
            }
          },
          {
            "kind": "METHOD",
            "name": "setPowered(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "isPowered"
              }
            ],
            "comment": {
              "body": "Set this lever to be powered or not.",
              "plain": "Set this lever to be powered or not.\n@param isPowered whether the lever should be powered or not"
            }
          },
          {
            "kind": "METHOD",
            "name": "toString()"
          }
        ],
        "comment": {
          "body": "Represents a lever",
          "plain": "Represents a lever"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.material.LongGrass",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "LongGrass()"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "LongGrass(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "LongGrass(int,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "LongGrass(org.bukkit.GrassSpecies)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "species"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "LongGrass(org.bukkit.Material)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "LongGrass(org.bukkit.Material,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the type\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "clone()"
          },
          {
            "kind": "METHOD",
            "name": "getSpecies()",
            "comment": {
              "body": "Gets the current species of this grass",
              "tags": "Returns GrassSpecies of this grass.",
              "plain": "Gets the current species of this grass\n@return GrassSpecies of this grass"
            }
          },
          {
            "kind": "METHOD",
            "name": "setSpecies(org.bukkit.GrassSpecies)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "species"
              }
            ],
            "comment": {
              "body": "Sets the species of this grass",
              "plain": "Sets the species of this grass\n@param species New species of this grass"
            }
          },
          {
            "kind": "METHOD",
            "name": "toString()"
          }
        ],
        "comment": {
          "body": "Represents the different types of long grasses.",
          "plain": "Represents the different types of long grasses."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.material.MaterialData",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "MaterialData(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "MaterialData(int,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "MaterialData(org.bukkit.Material)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "MaterialData(org.bukkit.Material,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the type\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "clone()"
          },
          {
            "kind": "FIELD",
            "name": "data"
          },
          {
            "kind": "METHOD",
            "name": "equals(java.lang.Object)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "obj"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getData()",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Gets the raw data in this material",
              "tags": "Returns Raw data.",
              "plain": "Gets the raw data in this material\n@return Raw data\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "getItemType()",
            "comment": {
              "body": "Gets the Material that this MaterialData represents",
              "tags": "Returns Material represented by this MaterialData.",
              "plain": "Gets the Material that this MaterialData represents\n@return Material represented by this MaterialData"
            }
          },
          {
            "kind": "METHOD",
            "name": "getItemTypeId()",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Gets the Material Id that this MaterialData represents",
              "tags": "Returns Material Id represented by this MaterialData.",
              "plain": "Gets the Material Id that this MaterialData represents\n@return Material Id represented by this MaterialData\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "hashCode()"
          },
          {
            "kind": "METHOD",
            "name": "setData(byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Sets the raw data of this material",
              "plain": "Sets the raw data of this material\n@param data New raw data\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "toItemStack()",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Creates a new ItemStack based on this MaterialData",
              "tags": "Returns New ItemStack containing a copy of this MaterialData.",
              "plain": "Creates a new ItemStack based on this MaterialData\n@return New ItemStack containing a copy of this MaterialData\n@deprecated this method creates an ItemStack of size 0 which is not\n generally useful. Consider {@link #toItemStack(int)}."
            }
          },
          {
            "kind": "METHOD",
            "name": "toItemStack(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "amount"
              }
            ],
            "comment": {
              "body": "Creates a new ItemStack based on this MaterialData",
              "tags": "Returns New ItemStack containing a copy of this MaterialData.",
              "plain": "Creates a new ItemStack based on this MaterialData\n@param amount The stack size of the new stack\n@return New ItemStack containing a copy of this MaterialData"
            }
          },
          {
            "kind": "METHOD",
            "name": "toString()"
          },
          {
            "kind": "FIELD",
            "name": "type"
          }
        ],
        "comment": {
          "body": "Handles specific metadata for certain items or blocks",
          "plain": "Handles specific metadata for certain items or blocks"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.material.MonsterEggs",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "MonsterEggs()"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "MonsterEggs(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "MonsterEggs(int,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "MonsterEggs(org.bukkit.Material)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "MonsterEggs(org.bukkit.Material,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the type\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "clone()"
          },
          {
            "kind": "METHOD",
            "name": "getTextures()"
          },
          {
            "kind": "FIELD",
            "name": "textures"
          }
        ],
        "comment": {
          "body": "Represents the different types of monster eggs",
          "plain": "Represents the different types of monster eggs"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.material.Mushroom",
        "children": [
          {
            "kind": "FIELD",
            "name": "EAST_REMAINDER"
          },
          {
            "kind": "FIELD",
            "name": "EAST_WEST_LIMIT"
          },
          {
            "kind": "FIELD",
            "name": "EAST_WEST_MOD"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Mushroom(int,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Mushroom(org.bukkit.Material)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "shroom"
              }
            ],
            "comment": {
              "body": "Constructs a brown/red mushroom block with all sides set to pores.",
              "plain": "Constructs a brown/red mushroom block with all sides set to pores.\n@param shroom A brown or red mushroom material type.\n@see Material#HUGE_MUSHROOM_1\n@see Material#HUGE_MUSHROOM_2"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Mushroom(org.bukkit.Material,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "shroom"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param shroom the type\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Mushroom(org.bukkit.Material,org.bukkit.block.BlockFace)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "capFace"
              },
              {
                "kind": "PARAMETER",
                "name": "shroom"
              }
            ],
            "comment": {
              "body": "Constructs a brown/red mushroom cap block with the specified face or\n faces set to cap texture.\n\n Setting any of the four sides will also set the top to cap.\n\n To set two side faces at once use e.g. north-west.\n\n Specify self to set all six faces at once.",
              "plain": "Constructs a brown/red mushroom cap block with the specified face or\n faces set to cap texture.\n\n Setting any of the four sides will also set the top to cap.\n\n To set two side faces at once use e.g. north-west.\n\n Specify self to set all six faces at once.\n@param shroom A brown or red mushroom material type.\n@param capFace The face or faces to set to mushroom cap texture.\n@see Material#HUGE_MUSHROOM_1\n@see Material#HUGE_MUSHROOM_2\n@see BlockFace"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Mushroom(org.bukkit.Material,org.bukkit.material.types.MushroomBlockTexture)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "shroom"
              },
              {
                "kind": "PARAMETER",
                "name": "texture"
              }
            ],
            "comment": {
              "body": "Constructs a brown/red mushroom block with the specified textures.",
              "plain": "Constructs a brown/red mushroom block with the specified textures.\n@param shroom A brown or red mushroom material type.\n@param texture The textured mushroom faces.\n@see Material#HUGE_MUSHROOM_1\n@see Material#HUGE_MUSHROOM_2"
            }
          },
          {
            "kind": "FIELD",
            "name": "NORTH_LIMIT"
          },
          {
            "kind": "FIELD",
            "name": "NORTH_SOUTH_MOD"
          },
          {
            "kind": "FIELD",
            "name": "SOUTH_LIMIT"
          },
          {
            "kind": "FIELD",
            "name": "WEST_REMAINDER"
          },
          {
            "kind": "METHOD",
            "name": "clone()"
          },
          {
            "kind": "METHOD",
            "name": "getBlockTexture()",
            "comment": {
              "body": "Gets the mushroom texture of this block.",
              "tags": "Returns The mushroom texture of this block.",
              "plain": "Gets the mushroom texture of this block.\n@return The mushroom texture of this block"
            }
          },
          {
            "kind": "METHOD",
            "name": "getPaintedFaces()",
            "comment": {
              "tags": "Returns A set of all faces that are currently painted (an empty set if\n     it is a stem).",
              "plain": "@return A set of all faces that are currently painted (an empty set if\n     it is a stem)"
            }
          },
          {
            "kind": "METHOD",
            "name": "isFacePainted(org.bukkit.block.BlockFace)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "face"
              }
            ],
            "comment": {
              "body": "Checks whether a face of the block is painted with cap texture.",
              "tags": "Returns True if it is painted..",
              "plain": "Checks whether a face of the block is painted with cap texture.\n@param face The face to check.\n@return True if it is painted."
            }
          },
          {
            "kind": "METHOD",
            "name": "isStem()",
            "comment": {
              "tags": "Returns Whether this is a mushroom stem..",
              "plain": "@return Whether this is a mushroom stem."
            }
          },
          {
            "kind": "METHOD",
            "name": "setBlockTexture(org.bukkit.material.types.MushroomBlockTexture)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "texture"
              }
            ],
            "comment": {
              "body": "Sets the mushroom texture of this block.",
              "plain": "Sets the mushroom texture of this block.\n@param texture The mushroom texture to set"
            }
          },
          {
            "kind": "METHOD",
            "name": "setFacePainted(org.bukkit.block.BlockFace,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "face"
              },
              {
                "kind": "PARAMETER",
                "name": "painted"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Set a face of the block to be painted or not. Note that due to the\n nature of how the data is stored, setting a face painted or not is not\n guaranteed to leave the other faces unchanged.",
              "plain": "Set a face of the block to be painted or not. Note that due to the\n nature of how the data is stored, setting a face painted or not is not\n guaranteed to leave the other faces unchanged.\n@param face The face to paint or unpaint.\n@param painted True if you want to paint it, false if you want the\n     pores to show.\n@deprecated Use MushroomBlockType cap options"
            }
          },
          {
            "kind": "METHOD",
            "name": "setStem()",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Sets this to be a mushroom stem.",
              "plain": "Sets this to be a mushroom stem.\n@see MushroomBlockTexture#STEM_SIDES\n@see MushroomBlockTexture#ALL_STEM\n@deprecated Use\n {@link #setBlockTexture(org.bukkit.material.types.MushroomBlockTexture)}\n with {@link MushroomBlockTexture#STEM_SIDES} or\n {@link MushroomBlockTexture#ALL_STEM}"
            }
          },
          {
            "kind": "METHOD",
            "name": "toString()"
          }
        ],
        "comment": {
          "body": "Represents a huge mushroom block with certain combinations of faces set to\n cap, pores or stem.",
          "plain": "Represents a huge mushroom block with certain combinations of faces set to\n cap, pores or stem.\n@see Material#HUGE_MUSHROOM_1\n@see Material#HUGE_MUSHROOM_2"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.material.NetherWarts",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "NetherWarts()"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "NetherWarts(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "NetherWarts(int,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "NetherWarts(org.bukkit.Material)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "NetherWarts(org.bukkit.Material,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the type\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "NetherWarts(org.bukkit.NetherWartsState)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "state"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "clone()"
          },
          {
            "kind": "METHOD",
            "name": "getState()",
            "comment": {
              "body": "Gets the current growth state of this nether wart",
              "tags": "Returns NetherWartsState of this nether wart.",
              "plain": "Gets the current growth state of this nether wart\n@return NetherWartsState of this nether wart"
            }
          },
          {
            "kind": "METHOD",
            "name": "setState(org.bukkit.NetherWartsState)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "state"
              }
            ],
            "comment": {
              "body": "Sets the growth state of this nether wart",
              "plain": "Sets the growth state of this nether wart\n@param state New growth state of this nether wart"
            }
          },
          {
            "kind": "METHOD",
            "name": "toString()"
          }
        ],
        "comment": {
          "body": "Represents nether wart",
          "plain": "Represents nether wart"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.material.Observer",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "Observer()"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Observer(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Observer(int,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Observer(org.bukkit.Material)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Observer(org.bukkit.Material,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the type\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Observer(org.bukkit.block.BlockFace)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "direction"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "clone()"
          },
          {
            "kind": "METHOD",
            "name": "getFacing()"
          },
          {
            "kind": "METHOD",
            "name": "isPowered()"
          },
          {
            "kind": "METHOD",
            "name": "setFacingDirection(org.bukkit.block.BlockFace)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "face"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "toString()"
          }
        ],
        "comment": {
          "body": "Represents an observer.",
          "plain": "Represents an observer."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.material.Openable",
        "children": [
          {
            "kind": "METHOD",
            "name": "isOpen()",
            "comment": {
              "body": "Check to see if the door is open.",
              "tags": "Returns true if the door has swung counterclockwise around its hinge..",
              "plain": "Check to see if the door is open.\n@return true if the door has swung counterclockwise around its hinge."
            }
          },
          {
            "kind": "METHOD",
            "name": "setOpen(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "isOpen"
              }
            ],
            "comment": {
              "body": "Configure this door to be either open or closed;",
              "plain": "Configure this door to be either open or closed;\n@param isOpen True to open the door."
            }
          }
        ]
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.material.PistonBaseMaterial",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PistonBaseMaterial(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Constructs a PistonBaseMaterial",
              "plain": "Constructs a PistonBaseMaterial\n@param type the raw type id\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "PistonBaseMaterial(int,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Constructs a PistonBaseMaterial.",
              "plain": "Constructs a PistonBaseMaterial.\n@param type the raw type id\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "PistonBaseMaterial(org.bukkit.Material)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "PistonBaseMaterial(org.bukkit.Material,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Constructs a PistonBaseMaterial.",
              "plain": "Constructs a PistonBaseMaterial.\n@param type the material type to use\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "clone()"
          },
          {
            "kind": "METHOD",
            "name": "getFacing()"
          },
          {
            "kind": "METHOD",
            "name": "isPowered()"
          },
          {
            "kind": "METHOD",
            "name": "isSticky()",
            "comment": {
              "body": "Checks if this piston base is sticky, and returns true if so",
              "tags": "Returns true if this piston is \"sticky\", or false.",
              "plain": "Checks if this piston base is sticky, and returns true if so\n@return true if this piston is \"sticky\", or false"
            }
          },
          {
            "kind": "METHOD",
            "name": "setFacingDirection(org.bukkit.block.BlockFace)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "face"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "setPowered(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "powered"
              }
            ],
            "comment": {
              "body": "Sets the current state of this piston",
              "plain": "Sets the current state of this piston\n@param powered true if the piston is extended {@literal \u0026} powered, or false"
            }
          }
        ],
        "comment": {
          "body": "Material data for the piston base block",
          "plain": "Material data for the piston base block"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.material.PistonExtensionMaterial",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PistonExtensionMaterial(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "PistonExtensionMaterial(int,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "PistonExtensionMaterial(org.bukkit.Material)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "PistonExtensionMaterial(org.bukkit.Material,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the type\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "clone()"
          },
          {
            "kind": "METHOD",
            "name": "getAttachedFace()"
          },
          {
            "kind": "METHOD",
            "name": "getFacing()"
          },
          {
            "kind": "METHOD",
            "name": "isSticky()",
            "comment": {
              "body": "Checks if this piston extension is sticky, and returns true if so",
              "tags": "Returns true if this piston is \"sticky\", or false.",
              "plain": "Checks if this piston extension is sticky, and returns true if so\n@return true if this piston is \"sticky\", or false"
            }
          },
          {
            "kind": "METHOD",
            "name": "setFacingDirection(org.bukkit.block.BlockFace)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "face"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "setSticky(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "sticky"
              }
            ],
            "comment": {
              "body": "Sets whether or not this extension is sticky",
              "plain": "Sets whether or not this extension is sticky\n@param sticky true if sticky, otherwise false"
            }
          }
        ],
        "comment": {
          "body": "Material data for the piston extension block",
          "plain": "Material data for the piston extension block"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.material.PoweredRail",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PoweredRail()"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "PoweredRail(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "PoweredRail(int,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "PoweredRail(org.bukkit.Material)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "PoweredRail(org.bukkit.Material,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the type\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "clone()"
          },
          {
            "kind": "METHOD",
            "name": "isPowered()"
          },
          {
            "kind": "METHOD",
            "name": "setPowered(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "isPowered"
              }
            ],
            "comment": {
              "body": "Set whether this PoweredRail should be powered or not.",
              "plain": "Set whether this PoweredRail should be powered or not.\n@param isPowered whether or not the rail is powered"
            }
          }
        ],
        "comment": {
          "body": "Represents a powered rail",
          "plain": "Represents a powered rail"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.material.PressurePlate",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PressurePlate()"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "PressurePlate(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "PressurePlate(int,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "PressurePlate(org.bukkit.Material)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "PressurePlate(org.bukkit.Material,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the type\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "clone()"
          },
          {
            "kind": "METHOD",
            "name": "isPressed()"
          },
          {
            "kind": "METHOD",
            "name": "toString()"
          }
        ],
        "comment": {
          "body": "Represents a pressure plate",
          "plain": "Represents a pressure plate"
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.material.PressureSensor",
        "children": [
          {
            "kind": "METHOD",
            "name": "isPressed()"
          }
        ]
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.material.Pumpkin",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "Pumpkin()"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Pumpkin(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Pumpkin(int,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Pumpkin(org.bukkit.Material)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Pumpkin(org.bukkit.Material,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the type\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Pumpkin(org.bukkit.block.BlockFace)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "direction"
              }
            ],
            "comment": {
              "body": "Instantiate a pumpkin facing in a particular direction.",
              "plain": "Instantiate a pumpkin facing in a particular direction.\n@param direction the direction the pumkin\u0027s face is facing"
            }
          },
          {
            "kind": "METHOD",
            "name": "clone()"
          },
          {
            "kind": "METHOD",
            "name": "getFacing()"
          },
          {
            "kind": "METHOD",
            "name": "isLit()"
          },
          {
            "kind": "METHOD",
            "name": "setFacingDirection(org.bukkit.block.BlockFace)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "face"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "toString()"
          }
        ],
        "comment": {
          "body": "Represents a pumpkin.",
          "plain": "Represents a pumpkin."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.material.Rails",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "Rails()"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Rails(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Rails(int,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Rails(org.bukkit.Material)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Rails(org.bukkit.Material,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the type\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "clone()"
          },
          {
            "kind": "METHOD",
            "name": "getConvertedData()",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Return the data without the extended properties used by \u003ca href\u003d\"org/bukkit/material/PoweredRail.html\" title\u003d\"class in org.bukkit.material\"\u003e\u003ccode\u003ePoweredRail\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"org/bukkit/material/DetectorRail.html\" title\u003d\"class in org.bukkit.material\"\u003e\u003ccode\u003eDetectorRail\u003c/code\u003e\u003c/a\u003e. Overridden in \u003ca href\u003d\"org/bukkit/material/ExtendedRails.html\" title\u003d\"class in org.bukkit.material\"\u003e\u003ccode\u003eExtendedRails\u003c/code\u003e\u003c/a\u003e",
              "tags": "Returns the data without the extended part.",
              "plain": "Return the data without the extended properties used by {@link PoweredRail} and {@link DetectorRail}. Overridden in {@link ExtendedRails}\n@return the data without the extended part\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "getDirection()",
            "comment": {
              "tags": "Returns the direction these tracks are set\n     \u003cp\u003e\n     Note that tracks are bidirectional and that the direction returned\n     is the ascending direction if the track is set on a slope. If it is\n     set as a curve, the corner of the track is returned..",
              "plain": "@return the direction these tracks are set\n     \u003cp\u003e\n     Note that tracks are bidirectional and that the direction returned\n     is the ascending direction if the track is set on a slope. If it is\n     set as a curve, the corner of the track is returned."
            }
          },
          {
            "kind": "METHOD",
            "name": "isCurve()",
            "comment": {
              "tags": "Returns the whether this track is set as a curve.",
              "plain": "@return the whether this track is set as a curve"
            }
          },
          {
            "kind": "METHOD",
            "name": "isOnSlope()",
            "comment": {
              "tags": "Returns the whether this track is set on a slope.",
              "plain": "@return the whether this track is set on a slope"
            }
          },
          {
            "kind": "METHOD",
            "name": "setDirection(org.bukkit.block.BlockFace,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "face"
              },
              {
                "kind": "PARAMETER",
                "name": "isOnSlope"
              }
            ],
            "comment": {
              "body": "Set the direction of these tracks\n \u003cp\u003e\n Note that tracks are bidirectional and that the direction returned is\n the ascending direction if the track is set on a slope. If it is set as\n a curve, the corner of the track should be supplied.",
              "plain": "Set the direction of these tracks\n \u003cp\u003e\n Note that tracks are bidirectional and that the direction returned is\n the ascending direction if the track is set on a slope. If it is set as\n a curve, the corner of the track should be supplied.\n@param face the direction the track should be facing\n@param isOnSlope whether or not the track should be on a slope"
            }
          },
          {
            "kind": "METHOD",
            "name": "toString()"
          }
        ],
        "comment": {
          "body": "Represents minecart rails.",
          "plain": "Represents minecart rails."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.material.Redstone",
        "children": [
          {
            "kind": "METHOD",
            "name": "isPowered()",
            "comment": {
              "body": "Gets the current state of this Material, indicating if it\u0027s powered or\n unpowered",
              "tags": "Returns true if powered, otherwise false.",
              "plain": "Gets the current state of this Material, indicating if it\u0027s powered or\n unpowered\n@return true if powered, otherwise false"
            }
          }
        ],
        "comment": {
          "body": "Indicated a Material that may carry or create a Redstone current",
          "plain": "Indicated a Material that may carry or create a Redstone current"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.material.RedstoneTorch",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "RedstoneTorch()"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "RedstoneTorch(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "RedstoneTorch(int,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "RedstoneTorch(org.bukkit.Material)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "RedstoneTorch(org.bukkit.Material,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the type\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "clone()"
          },
          {
            "kind": "METHOD",
            "name": "isPowered()",
            "comment": {
              "body": "Gets the current state of this Material, indicating if it\u0027s powered or\n unpowered",
              "tags": "Returns true if powered, otherwise false.",
              "plain": "Gets the current state of this Material, indicating if it\u0027s powered or\n unpowered\n@return true if powered, otherwise false"
            }
          },
          {
            "kind": "METHOD",
            "name": "toString()"
          }
        ],
        "comment": {
          "body": "Represents a redstone torch",
          "plain": "Represents a redstone torch"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.material.RedstoneWire",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "RedstoneWire()"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "RedstoneWire(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "RedstoneWire(int,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "RedstoneWire(org.bukkit.Material)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "RedstoneWire(org.bukkit.Material,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the type\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "clone()"
          },
          {
            "kind": "METHOD",
            "name": "isPowered()",
            "comment": {
              "body": "Gets the current state of this Material, indicating if it\u0027s powered or\n unpowered",
              "tags": "Returns true if powered, otherwise false.",
              "plain": "Gets the current state of this Material, indicating if it\u0027s powered or\n unpowered\n@return true if powered, otherwise false"
            }
          },
          {
            "kind": "METHOD",
            "name": "toString()"
          }
        ],
        "comment": {
          "body": "Represents redstone wire",
          "plain": "Represents redstone wire"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.material.Sandstone",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "Sandstone()"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Sandstone(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Sandstone(int,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Sandstone(org.bukkit.Material)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Sandstone(org.bukkit.Material,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the type\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Sandstone(org.bukkit.SandstoneType)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "clone()"
          },
          {
            "kind": "METHOD",
            "name": "getType()",
            "comment": {
              "body": "Gets the current type of this sandstone",
              "tags": "Returns SandstoneType of this sandstone.",
              "plain": "Gets the current type of this sandstone\n@return SandstoneType of this sandstone"
            }
          },
          {
            "kind": "METHOD",
            "name": "setType(org.bukkit.SandstoneType)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "comment": {
              "body": "Sets the type of this sandstone",
              "plain": "Sets the type of this sandstone\n@param type New type of this sandstone"
            }
          },
          {
            "kind": "METHOD",
            "name": "toString()"
          }
        ],
        "comment": {
          "body": "Represents the different types of sandstone.",
          "plain": "Represents the different types of sandstone."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.material.Sapling",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "Sapling()",
            "comment": {
              "body": "Constructs a sapling.",
              "plain": "Constructs a sapling."
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Sapling(int,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Sapling(org.bukkit.Material)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "comment": {
              "body": "Constructs a sapling of the given type.",
              "plain": "Constructs a sapling of the given type.\n@param type the type of tree block"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Sapling(org.bukkit.Material,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the type\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Sapling(org.bukkit.Material,org.bukkit.TreeSpecies)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "species"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "comment": {
              "body": "Constructs a sapling of the given type and tree species.",
              "plain": "Constructs a sapling of the given type and tree species.\n@param type the type of sapling\n@param species the species of the sapling"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Sapling(org.bukkit.Material,org.bukkit.TreeSpecies,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "isInstantGrowable"
              },
              {
                "kind": "PARAMETER",
                "name": "species"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "comment": {
              "body": "Constructs a sapling of the given type and tree species and if is it\n instant growable",
              "plain": "Constructs a sapling of the given type and tree species and if is it\n instant growable\n@param type the type of sapling\n@param species the species of the sapling\n@param isInstantGrowable true if the Sapling should grow when next ticked\n with bonemeal"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Sapling(org.bukkit.TreeSpecies)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "species"
              }
            ],
            "comment": {
              "body": "Constructs a sapling of the given tree species.",
              "plain": "Constructs a sapling of the given tree species.\n@param species the species of the sapling"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Sapling(org.bukkit.TreeSpecies,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "isInstantGrowable"
              },
              {
                "kind": "PARAMETER",
                "name": "species"
              }
            ],
            "comment": {
              "body": "Constructs a sapling of the given tree species and if is it instant\n growable",
              "plain": "Constructs a sapling of the given tree species and if is it instant\n growable\n@param species the species of the tree block\n@param isInstantGrowable true if the Sapling should grow when next ticked with bonemeal"
            }
          },
          {
            "kind": "METHOD",
            "name": "clone()"
          },
          {
            "kind": "METHOD",
            "name": "isInstantGrowable()",
            "comment": {
              "body": "Checks if the Sapling would grow when next ticked with bonemeal",
              "tags": "Returns true if the Sapling would grow when next ticked with bonemeal.",
              "plain": "Checks if the Sapling would grow when next ticked with bonemeal\n@return true if the Sapling would grow when next ticked with bonemeal"
            }
          },
          {
            "kind": "METHOD",
            "name": "setIsInstantGrowable(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "isInstantGrowable"
              }
            ],
            "comment": {
              "body": "Set whether this sapling will grow when next ticked with bonemeal",
              "plain": "Set whether this sapling will grow when next ticked with bonemeal\n@param isInstantGrowable true if the Sapling should grow when next ticked\n with bonemeal"
            }
          },
          {
            "kind": "METHOD",
            "name": "toString()"
          }
        ],
        "comment": {
          "body": "Represents the different types of Tree block that face a direction.",
          "plain": "Represents the different types of Tree block that face a direction.\n@see Material#SAPLING"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.material.Sign",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "Sign()"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Sign(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Sign(int,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Sign(org.bukkit.Material)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Sign(org.bukkit.Material,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "clone()"
          },
          {
            "kind": "METHOD",
            "name": "getAttachedFace()",
            "comment": {
              "body": "Gets the face that this block is attached on",
              "tags": "Returns BlockFace attached to.",
              "plain": "Gets the face that this block is attached on\n@return BlockFace attached to"
            }
          },
          {
            "kind": "METHOD",
            "name": "getFacing()",
            "comment": {
              "body": "Gets the direction that this sign is currently facing",
              "tags": "Returns BlockFace indicating where this sign is facing.",
              "plain": "Gets the direction that this sign is currently facing\n@return BlockFace indicating where this sign is facing"
            }
          },
          {
            "kind": "METHOD",
            "name": "isWallSign()",
            "comment": {
              "body": "Check if this sign is attached to a wall",
              "tags": "Returns true if this sign is attached to a wall, false if set on top of\n     a block.",
              "plain": "Check if this sign is attached to a wall\n@return true if this sign is attached to a wall, false if set on top of\n     a block"
            }
          },
          {
            "kind": "METHOD",
            "name": "setFacingDirection(org.bukkit.block.BlockFace)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "face"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "toString()"
          }
        ],
        "comment": {
          "body": "MaterialData for signs",
          "plain": "MaterialData for signs"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.material.SimpleAttachableMaterialData",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "SimpleAttachableMaterialData(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "SimpleAttachableMaterialData(int,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "SimpleAttachableMaterialData(int,org.bukkit.block.BlockFace)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "direction"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "SimpleAttachableMaterialData(org.bukkit.Material)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "SimpleAttachableMaterialData(org.bukkit.Material,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the type\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "SimpleAttachableMaterialData(org.bukkit.Material,org.bukkit.block.BlockFace)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "direction"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "clone()"
          },
          {
            "kind": "METHOD",
            "name": "getFacing()"
          },
          {
            "kind": "METHOD",
            "name": "toString()"
          }
        ],
        "comment": {
          "body": "Simple utility class for attachable MaterialData subclasses",
          "plain": "Simple utility class for attachable MaterialData subclasses"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.material.Skull",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "Skull()"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Skull(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Skull(int,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Skull(org.bukkit.Material)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Skull(org.bukkit.Material,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the type\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Skull(org.bukkit.block.BlockFace)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "direction"
              }
            ],
            "comment": {
              "body": "Instantiate a skull facing in a particular direction.",
              "plain": "Instantiate a skull facing in a particular direction.\n@param direction the direction the skull\u0027s face is facing"
            }
          },
          {
            "kind": "METHOD",
            "name": "clone()"
          },
          {
            "kind": "METHOD",
            "name": "getFacing()"
          },
          {
            "kind": "METHOD",
            "name": "setFacingDirection(org.bukkit.block.BlockFace)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "face"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "toString()"
          }
        ],
        "comment": {
          "body": "Represents a skull.",
          "plain": "Represents a skull."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.material.SmoothBrick",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "SmoothBrick()"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "SmoothBrick(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "SmoothBrick(int,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "SmoothBrick(org.bukkit.Material)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "SmoothBrick(org.bukkit.Material,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the type\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "clone()"
          },
          {
            "kind": "METHOD",
            "name": "getTextures()"
          },
          {
            "kind": "FIELD",
            "name": "textures"
          }
        ],
        "comment": {
          "body": "Represents the different types of smooth bricks.",
          "plain": "Represents the different types of smooth bricks."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.material.SpawnEgg",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "SpawnEgg()"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "SpawnEgg(byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "SpawnEgg(int,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "SpawnEgg(org.bukkit.entity.EntityType)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "clone()"
          },
          {
            "kind": "METHOD",
            "name": "getSpawnedType()",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Get the type of entity this egg will spawn.",
              "tags": "Returns The entity type..",
              "plain": "Get the type of entity this egg will spawn.\n@return The entity type.\n@deprecated This is now stored in {@link SpawnEggMeta}."
            }
          },
          {
            "kind": "METHOD",
            "name": "setSpawnedType(org.bukkit.entity.EntityType)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Set the type of entity this egg will spawn.",
              "plain": "Set the type of entity this egg will spawn.\n@param type The entity type.\n@deprecated This is now stored in {@link SpawnEggMeta}."
            }
          },
          {
            "kind": "METHOD",
            "name": "toString()"
          }
        ],
        "deprecated": {
          "deprecated": "true"
        },
        "comment": {
          "body": "Represents a spawn egg that can be used to spawn mobs",
          "plain": "Represents a spawn egg that can be used to spawn mobs\n@deprecated use {@link SpawnEggMeta}"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.material.Stairs",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "Stairs(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Stairs(int,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Stairs(org.bukkit.Material)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Stairs(org.bukkit.Material,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the type\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "clone()"
          },
          {
            "kind": "METHOD",
            "name": "getAscendingDirection()",
            "comment": {
              "tags": "Returns the direction the stairs ascend towards.",
              "plain": "@return the direction the stairs ascend towards"
            }
          },
          {
            "kind": "METHOD",
            "name": "getDescendingDirection()",
            "comment": {
              "tags": "Returns the direction the stairs descend towards.",
              "plain": "@return the direction the stairs descend towards"
            }
          },
          {
            "kind": "METHOD",
            "name": "getFacing()",
            "comment": {
              "tags": "Returns the direction the stair part of the block is facing.",
              "plain": "@return the direction the stair part of the block is facing"
            }
          },
          {
            "kind": "METHOD",
            "name": "isInverted()",
            "comment": {
              "body": "Test if step is inverted",
              "tags": "Returns true if inverted (top half), false if normal (bottom half).",
              "plain": "Test if step is inverted\n@return true if inverted (top half), false if normal (bottom half)"
            }
          },
          {
            "kind": "METHOD",
            "name": "setFacingDirection(org.bukkit.block.BlockFace)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "face"
              }
            ],
            "comment": {
              "body": "Set the direction the stair part of the block is facing",
              "plain": "Set the direction the stair part of the block is facing"
            }
          },
          {
            "kind": "METHOD",
            "name": "setInverted(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "inv"
              }
            ],
            "comment": {
              "body": "Set step inverted state",
              "plain": "Set step inverted state\n@param inv - true if step is inverted (top half), false if step is\n     normal (bottom half)"
            }
          },
          {
            "kind": "METHOD",
            "name": "toString()"
          }
        ],
        "comment": {
          "body": "Represents stairs.",
          "plain": "Represents stairs."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.material.Step",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "Step()"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Step(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Step(int,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Step(org.bukkit.Material)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Step(org.bukkit.Material,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the type\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "clone()"
          },
          {
            "kind": "METHOD",
            "name": "getTextureIndex()",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "getTextures()"
          },
          {
            "kind": "METHOD",
            "name": "isInverted()",
            "comment": {
              "body": "Test if step is inverted",
              "tags": "Returns true if inverted (top half), false if normal (bottom half).",
              "plain": "Test if step is inverted\n@return true if inverted (top half), false if normal (bottom half)"
            }
          },
          {
            "kind": "METHOD",
            "name": "setInverted(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "inv"
              }
            ],
            "comment": {
              "body": "Set step inverted state",
              "plain": "Set step inverted state\n@param inv - true if step is inverted (top half), false if step is\n     normal (bottom half)"
            }
          },
          {
            "kind": "METHOD",
            "name": "setTextureIndex(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "idx"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@deprecated Magic value"
            }
          },
          {
            "kind": "FIELD",
            "name": "textures"
          },
          {
            "kind": "METHOD",
            "name": "toString()"
          }
        ],
        "comment": {
          "body": "Represents the different types of steps.",
          "plain": "Represents the different types of steps."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.material.TexturedMaterial",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "TexturedMaterial(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "TexturedMaterial(int,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "TexturedMaterial(org.bukkit.Material)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "m"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "TexturedMaterial(org.bukkit.Material,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the type\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "clone()"
          },
          {
            "kind": "METHOD",
            "name": "getMaterial()",
            "comment": {
              "body": "Gets the current Material this block is made of",
              "tags": "Returns Material of this block.",
              "plain": "Gets the current Material this block is made of\n@return Material of this block"
            }
          },
          {
            "kind": "METHOD",
            "name": "getTextureIndex()",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Get material index from data",
              "tags": "Returns index of data in textures list.",
              "plain": "Get material index from data\n@return index of data in textures list\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "getTextures()",
            "comment": {
              "body": "Retrieve a list of possible textures. The first element of the list\n will be used as a default.",
              "tags": "Returns a list of possible textures for this block.",
              "plain": "Retrieve a list of possible textures. The first element of the list\n will be used as a default.\n@return a list of possible textures for this block"
            }
          },
          {
            "kind": "METHOD",
            "name": "setMaterial(org.bukkit.Material)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "material"
              }
            ],
            "comment": {
              "body": "Sets the material this block is made of",
              "plain": "Sets the material this block is made of\n@param material New material of this block"
            }
          },
          {
            "kind": "METHOD",
            "name": "setTextureIndex(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "idx"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Set material index",
              "plain": "Set material index\n@param idx - index of data in textures list\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "toString()"
          }
        ],
        "comment": {
          "body": "Represents textured materials like steps and smooth bricks",
          "plain": "Represents textured materials like steps and smooth bricks"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.material.Torch",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "Torch()"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Torch(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Torch(int,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Torch(org.bukkit.Material)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Torch(org.bukkit.Material,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the type\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "clone()"
          },
          {
            "kind": "METHOD",
            "name": "getAttachedFace()",
            "comment": {
              "body": "Gets the face that this block is attached on",
              "tags": "Returns BlockFace attached to.",
              "plain": "Gets the face that this block is attached on\n@return BlockFace attached to"
            }
          },
          {
            "kind": "METHOD",
            "name": "setFacingDirection(org.bukkit.block.BlockFace)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "face"
              }
            ]
          }
        ],
        "comment": {
          "body": "MaterialData for torches",
          "plain": "MaterialData for torches"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.material.TrapDoor",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "TrapDoor()"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "TrapDoor(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "TrapDoor(int,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "TrapDoor(org.bukkit.Material)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "TrapDoor(org.bukkit.Material,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the type\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "clone()"
          },
          {
            "kind": "METHOD",
            "name": "getAttachedFace()"
          },
          {
            "kind": "METHOD",
            "name": "isInverted()",
            "comment": {
              "body": "Test if trapdoor is inverted",
              "tags": "Returns true if inverted (top half), false if normal (bottom half).",
              "plain": "Test if trapdoor is inverted\n@return true if inverted (top half), false if normal (bottom half)"
            }
          },
          {
            "kind": "METHOD",
            "name": "isOpen()"
          },
          {
            "kind": "METHOD",
            "name": "setFacingDirection(org.bukkit.block.BlockFace)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "face"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "setInverted(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "inv"
              }
            ],
            "comment": {
              "body": "Set trapdoor inverted state",
              "plain": "Set trapdoor inverted state\n@param inv - true if inverted (top half), false if normal (bottom half)"
            }
          },
          {
            "kind": "METHOD",
            "name": "setOpen(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "isOpen"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "toString()"
          }
        ],
        "comment": {
          "body": "Represents a trap door",
          "plain": "Represents a trap door"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.material.Tree",
        "children": [
          {
            "kind": "FIELD",
            "name": "DEFAULT_DIRECTION"
          },
          {
            "kind": "FIELD",
            "name": "DEFAULT_TYPE"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Tree()",
            "comment": {
              "body": "Constructs a tree block.",
              "plain": "Constructs a tree block."
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Tree(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Tree(int,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Tree(org.bukkit.Material)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "comment": {
              "body": "Constructs a tree block of the given type.",
              "plain": "Constructs a tree block of the given type.\n@param type the type of tree block"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Tree(org.bukkit.Material,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the type\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Tree(org.bukkit.Material,org.bukkit.TreeSpecies)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "species"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "comment": {
              "body": "Constructs a tree block of the given type and tree species.",
              "plain": "Constructs a tree block of the given type and tree species.\n@param type the type of tree block\n@param species the species of the tree block"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Tree(org.bukkit.Material,org.bukkit.TreeSpecies,org.bukkit.block.BlockFace)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "dir"
              },
              {
                "kind": "PARAMETER",
                "name": "species"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "comment": {
              "body": "Constructs a tree block of the given type and tree species, and facing\n the given direction.",
              "plain": "Constructs a tree block of the given type and tree species, and facing\n the given direction.\n@param type the type of tree block\n@param species the species of the tree block\n@param dir the direction the tree block is facing"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Tree(org.bukkit.TreeSpecies)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "species"
              }
            ],
            "comment": {
              "body": "Constructs a tree block of the given tree species.",
              "plain": "Constructs a tree block of the given tree species.\n@param species the species of the tree block"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Tree(org.bukkit.TreeSpecies,org.bukkit.block.BlockFace)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "dir"
              },
              {
                "kind": "PARAMETER",
                "name": "species"
              }
            ],
            "comment": {
              "body": "Constructs a tree block of the given tree species, and facing the given\n direction.",
              "plain": "Constructs a tree block of the given tree species, and facing the given\n direction.\n@param species the species of the tree block\n@param dir the direction the tree block is facing"
            }
          },
          {
            "kind": "METHOD",
            "name": "clone()"
          },
          {
            "kind": "METHOD",
            "name": "getDirection()",
            "comment": {
              "body": "Get direction of the log",
              "tags": "Returns one of:\n \u003cul\u003e\n \u003cli\u003eBlockFace.TOP for upright (default)\n \u003cli\u003eBlockFace.NORTH (east-west)\n \u003cli\u003eBlockFace.WEST (north-south)\n \u003cli\u003eBlockFace.SELF (directionless)\n \u003c/ul\u003e.",
              "plain": "Get direction of the log\n@return one of:\n \u003cul\u003e\n \u003cli\u003eBlockFace.TOP for upright (default)\n \u003cli\u003eBlockFace.NORTH (east-west)\n \u003cli\u003eBlockFace.WEST (north-south)\n \u003cli\u003eBlockFace.SELF (directionless)\n \u003c/ul\u003e"
            }
          },
          {
            "kind": "METHOD",
            "name": "setDirection(org.bukkit.block.BlockFace)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "dir"
              }
            ],
            "comment": {
              "body": "Set direction of the log",
              "plain": "Set direction of the log\n@param dir - direction of end of log (BlockFace.SELF for no direction)"
            }
          },
          {
            "kind": "METHOD",
            "name": "toString()"
          }
        ],
        "comment": {
          "body": "Represents the different types of Tree block that face a direction.",
          "plain": "Represents the different types of Tree block that face a direction.\n@see Material#LOG\n@see Material#LOG_2"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.material.Tripwire",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "Tripwire()"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Tripwire(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Tripwire(int,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "clone()"
          },
          {
            "kind": "METHOD",
            "name": "isActivated()",
            "comment": {
              "body": "Test if tripwire is currently activated",
              "tags": "Returns true if activated, false if not.",
              "plain": "Test if tripwire is currently activated\n@return true if activated, false if not"
            }
          },
          {
            "kind": "METHOD",
            "name": "isObjectTriggering()",
            "comment": {
              "body": "Test if object triggering this tripwire directly",
              "tags": "Returns true if object activating tripwire, false if not.",
              "plain": "Test if object triggering this tripwire directly\n@return true if object activating tripwire, false if not"
            }
          },
          {
            "kind": "METHOD",
            "name": "setActivated(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "act"
              }
            ],
            "comment": {
              "body": "Set tripwire activated state",
              "plain": "Set tripwire activated state\n@param act - true if activated, false if not"
            }
          },
          {
            "kind": "METHOD",
            "name": "setObjectTriggering(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "trig"
              }
            ],
            "comment": {
              "body": "Set object triggering state for this tripwire",
              "plain": "Set object triggering state for this tripwire\n@param trig - true if object activating tripwire, false if not"
            }
          },
          {
            "kind": "METHOD",
            "name": "toString()"
          }
        ],
        "comment": {
          "body": "Represents the tripwire",
          "plain": "Represents the tripwire"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.material.TripwireHook",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "TripwireHook()"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "TripwireHook(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "TripwireHook(int,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "TripwireHook(org.bukkit.block.BlockFace)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "dir"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "clone()"
          },
          {
            "kind": "METHOD",
            "name": "getAttachedFace()"
          },
          {
            "kind": "METHOD",
            "name": "isActivated()",
            "comment": {
              "body": "Test if hook is currently activated",
              "tags": "Returns true if activated, false if not.",
              "plain": "Test if hook is currently activated\n@return true if activated, false if not"
            }
          },
          {
            "kind": "METHOD",
            "name": "isConnected()",
            "comment": {
              "body": "Test if tripwire is connected",
              "tags": "Returns true if connected, false if not.",
              "plain": "Test if tripwire is connected\n@return true if connected, false if not"
            }
          },
          {
            "kind": "METHOD",
            "name": "isPowered()"
          },
          {
            "kind": "METHOD",
            "name": "setActivated(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "act"
              }
            ],
            "comment": {
              "body": "Set hook activated state",
              "plain": "Set hook activated state\n@param act - true if activated, false if not"
            }
          },
          {
            "kind": "METHOD",
            "name": "setConnected(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "connected"
              }
            ],
            "comment": {
              "body": "Set tripwire connection state",
              "plain": "Set tripwire connection state\n@param connected - true if connected, false if not"
            }
          },
          {
            "kind": "METHOD",
            "name": "setFacingDirection(org.bukkit.block.BlockFace)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "face"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "toString()"
          }
        ],
        "comment": {
          "body": "Represents the tripwire hook",
          "plain": "Represents the tripwire hook"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.material.Vine",
        "children": [
          {
            "kind": "FIELD",
            "name": "VINE_EAST"
          },
          {
            "kind": "FIELD",
            "name": "VINE_NORTH"
          },
          {
            "kind": "FIELD",
            "name": "VINE_SOUTH"
          },
          {
            "kind": "FIELD",
            "name": "VINE_WEST"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Vine()"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Vine(byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Vine(int,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Vine(java.util.EnumSet\u003corg.bukkit.block.BlockFace\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "faces"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Vine(org.bukkit.block.BlockFace...)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "faces"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "clone()"
          },
          {
            "kind": "METHOD",
            "name": "isOnFace(org.bukkit.block.BlockFace)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "face"
              }
            ],
            "comment": {
              "body": "Check if the vine is attached to the specified face of an adjacent\n block. You can check two faces at once by passing e.g. \u003ca href\u003d\"org/bukkit/block/BlockFace.html#NORTH_EAST\"\u003e\u003ccode\u003eBlockFace.NORTH_EAST\u003c/code\u003e\u003c/a\u003e.",
              "tags": "Returns Whether it is attached to that face..",
              "plain": "Check if the vine is attached to the specified face of an adjacent\n block. You can check two faces at once by passing e.g. {@link BlockFace#NORTH_EAST}.\n@param face The face to check.\n@return Whether it is attached to that face."
            }
          },
          {
            "kind": "FIELD",
            "name": "possibleFaces"
          },
          {
            "kind": "METHOD",
            "name": "putOnFace(org.bukkit.block.BlockFace)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "face"
              }
            ],
            "comment": {
              "body": "Attach the vine to the specified face of an adjacent block.",
              "plain": "Attach the vine to the specified face of an adjacent block.\n@param face The face to attach."
            }
          },
          {
            "kind": "METHOD",
            "name": "removeFromFace(org.bukkit.block.BlockFace)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "face"
              }
            ],
            "comment": {
              "body": "Detach the vine from the specified face of an adjacent block.",
              "plain": "Detach the vine from the specified face of an adjacent block.\n@param face The face to detach."
            }
          },
          {
            "kind": "METHOD",
            "name": "toString()"
          }
        ],
        "comment": {
          "body": "Represents a vine",
          "plain": "Represents a vine"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.material.Wood",
        "children": [
          {
            "kind": "FIELD",
            "name": "DEFAULT_SPECIES"
          },
          {
            "kind": "FIELD",
            "name": "DEFAULT_TYPE"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Wood()",
            "comment": {
              "body": "Constructs a wood block.",
              "plain": "Constructs a wood block."
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Wood(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Wood(int,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Wood(org.bukkit.Material)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "comment": {
              "body": "Constructs a wood block of the given type.",
              "plain": "Constructs a wood block of the given type.\n@param type the type of wood block"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Wood(org.bukkit.Material,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the type\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Wood(org.bukkit.Material,org.bukkit.TreeSpecies)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "species"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "comment": {
              "body": "Constructs a wood block of the given type and tree species.",
              "plain": "Constructs a wood block of the given type and tree species.\n@param type the type of wood block\n@param species the species of the wood block"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Wood(org.bukkit.TreeSpecies)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "species"
              }
            ],
            "comment": {
              "body": "Constructs a wood block of the given tree species.",
              "plain": "Constructs a wood block of the given tree species.\n@param species the species of the wood block"
            }
          },
          {
            "kind": "METHOD",
            "name": "clone()"
          },
          {
            "kind": "METHOD",
            "name": "getSpecies()",
            "comment": {
              "body": "Gets the current species of this wood block",
              "tags": "Returns TreeSpecies of this wood block.",
              "plain": "Gets the current species of this wood block\n@return TreeSpecies of this wood block"
            }
          },
          {
            "kind": "METHOD",
            "name": "getSpeciesType(org.bukkit.Material,org.bukkit.TreeSpecies)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "species"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "comment": {
              "body": "Correct the block type for certain species-type combinations.",
              "tags": "Returns The actual type for this species given the desired type.",
              "plain": "Correct the block type for certain species-type combinations.\n@param type The desired type\n@param species The required species\n@return The actual type for this species given the desired type"
            }
          },
          {
            "kind": "METHOD",
            "name": "setSpecies(org.bukkit.TreeSpecies)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "species"
              }
            ],
            "comment": {
              "body": "Sets the species of this wood block",
              "plain": "Sets the species of this wood block\n@param species New species of this wood block"
            }
          },
          {
            "kind": "METHOD",
            "name": "toString()"
          }
        ],
        "comment": {
          "body": "Represents wood blocks of different species.",
          "plain": "Represents wood blocks of different species.\n@see Material#WOOD\n@see Material#SAPLING\n@see Material#WOOD_DOUBLE_STEP"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.material.WoodenStep",
        "children": [
          {
            "kind": "FIELD",
            "name": "DEFAULT_INVERTED"
          },
          {
            "kind": "FIELD",
            "name": "DEFAULT_TYPE"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "WoodenStep()",
            "comment": {
              "body": "Constructs a wooden step.",
              "plain": "Constructs a wooden step."
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "WoodenStep(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "WoodenStep(int,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "WoodenStep(org.bukkit.Material,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the type\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "WoodenStep(org.bukkit.TreeSpecies)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "species"
              }
            ],
            "comment": {
              "body": "Constructs a wooden step of the given tree species.",
              "plain": "Constructs a wooden step of the given tree species.\n@param species the species of the wooden step"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "WoodenStep(org.bukkit.TreeSpecies,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "inv"
              },
              {
                "kind": "PARAMETER",
                "name": "species"
              }
            ],
            "comment": {
              "body": "Constructs a wooden step of the given type and tree species, either\n inverted or not.",
              "plain": "Constructs a wooden step of the given type and tree species, either\n inverted or not.\n@param species the species of the wooden step\n@param inv true the step is at the top of the block"
            }
          },
          {
            "kind": "METHOD",
            "name": "clone()"
          },
          {
            "kind": "METHOD",
            "name": "isInverted()",
            "comment": {
              "body": "Test if step is inverted",
              "tags": "Returns true if inverted (top half), false if normal (bottom half).",
              "plain": "Test if step is inverted\n@return true if inverted (top half), false if normal (bottom half)"
            }
          },
          {
            "kind": "METHOD",
            "name": "setInverted(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "inv"
              }
            ],
            "comment": {
              "body": "Set step inverted state",
              "plain": "Set step inverted state\n@param inv - true if step is inverted (top half), false if step is normal\n (bottom half)"
            }
          },
          {
            "kind": "METHOD",
            "name": "toString()"
          }
        ],
        "comment": {
          "body": "Represents the different types of wooden steps.",
          "plain": "Represents the different types of wooden steps.\n@see Material#WOOD_STEP"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.material.Wool",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "Wool()"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Wool(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Wool(int,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the raw type id\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Wool(org.bukkit.DyeColor)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "color"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Wool(org.bukkit.Material)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Wool(org.bukkit.Material,byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param type the type\n@param data the raw data value\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "clone()"
          },
          {
            "kind": "METHOD",
            "name": "getColor()",
            "comment": {
              "body": "Gets the current color of this dye",
              "tags": "Returns DyeColor of this dye.",
              "plain": "Gets the current color of this dye\n@return DyeColor of this dye"
            }
          },
          {
            "kind": "METHOD",
            "name": "setColor(org.bukkit.DyeColor)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "color"
              }
            ],
            "comment": {
              "body": "Sets the color of this dye",
              "plain": "Sets the color of this dye\n@param color New color of this dye"
            }
          },
          {
            "kind": "METHOD",
            "name": "toString()"
          }
        ],
        "comment": {
          "body": "Represents a Wool/Cloth block",
          "plain": "Represents a Wool/Cloth block"
        }
      }
    ]
  },
  {
    "kind": "PACKAGE",
    "name": "org.bukkit.material.types",
    "children": [
      {
        "kind": "ENUM",
        "name": "org.bukkit.material.types.MushroomBlockTexture",
        "children": [
          {
            "kind": "ENUM_CONSTANT",
            "name": "ALL_CAP",
            "comment": {
              "body": "Cap texture on all faces.",
              "plain": "Cap texture on all faces."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ALL_PORES",
            "comment": {
              "body": "Pores on all faces.",
              "plain": "Pores on all faces."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "ALL_STEM",
            "comment": {
              "body": "Stem texture on all faces.",
              "plain": "Stem texture on all faces."
            }
          },
          {
            "kind": "FIELD",
            "name": "BY_BLOCKFACE"
          },
          {
            "kind": "FIELD",
            "name": "BY_DATA"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "CAP_EAST",
            "comment": {
              "body": "Cap texture on the top and east faces, pores on remaining sides.",
              "plain": "Cap texture on the top and east faces, pores on remaining sides."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "CAP_NORTH",
            "comment": {
              "body": "Cap texture on the top and north faces, pores on remaining sides.",
              "plain": "Cap texture on the top and north faces, pores on remaining sides."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "CAP_NORTH_EAST",
            "comment": {
              "body": "Cap texture on the top, north and east faces, pores on remaining sides.",
              "plain": "Cap texture on the top, north and east faces, pores on remaining sides."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "CAP_NORTH_WEST",
            "comment": {
              "body": "Cap texture on the top, north and west faces, pores on remaining sides.",
              "plain": "Cap texture on the top, north and west faces, pores on remaining sides."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "CAP_SOUTH",
            "comment": {
              "body": "Cap texture on the top and south faces, pores on remaining sides.",
              "plain": "Cap texture on the top and south faces, pores on remaining sides."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "CAP_SOUTH_EAST",
            "comment": {
              "body": "Cap texture on the top, south and east faces, pores on remaining sides.",
              "plain": "Cap texture on the top, south and east faces, pores on remaining sides."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "CAP_SOUTH_WEST",
            "comment": {
              "body": "Cap texture on the top, south and west faces, pores on remaining sides.",
              "plain": "Cap texture on the top, south and west faces, pores on remaining sides."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "CAP_TOP",
            "comment": {
              "body": "Cap texture on the top face, pores on remaining sides.",
              "plain": "Cap texture on the top face, pores on remaining sides."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "CAP_WEST",
            "comment": {
              "body": "Cap texture on the top and west faces, pores on remaining sides.",
              "plain": "Cap texture on the top and west faces, pores on remaining sides."
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "MushroomBlockTexture(int,org.bukkit.block.BlockFace)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "capFace"
              },
              {
                "kind": "PARAMETER",
                "name": "data"
              }
            ]
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "STEM_SIDES",
            "comment": {
              "body": "Stem texture on the north, east, south and west faces, pores on top and\n bottom.",
              "plain": "Stem texture on the north, east, south and west faces, pores on top and\n bottom."
            }
          },
          {
            "kind": "FIELD",
            "name": "capFace"
          },
          {
            "kind": "FIELD",
            "name": "data"
          },
          {
            "kind": "METHOD",
            "name": "getByData(byte)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Gets the MushroomBlockType with the given data value.",
              "tags": "Returns The \u003ca href\u003d\"org/bukkit/material/types/MushroomBlockTexture.html\" title\u003d\"enum in org.bukkit.material.types\"\u003e\u003ccode\u003eMushroomBlockTexture\u003c/code\u003e\u003c/a\u003e representing the given value, or\n null if it doesn\u0027t exist.",
              "plain": "Gets the MushroomBlockType with the given data value.\n@param data Data value to fetch\n@return The {@link MushroomBlockTexture} representing the given value, or\n null if it doesn\u0027t exist\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "getCapByFace(org.bukkit.block.BlockFace)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "face"
              }
            ],
            "comment": {
              "body": "Gets the MushroomBlockType with cap texture on the given block face.",
              "tags": "Returns The \u003ca href\u003d\"org/bukkit/material/types/MushroomBlockTexture.html\" title\u003d\"enum in org.bukkit.material.types\"\u003e\u003ccode\u003eMushroomBlockTexture\u003c/code\u003e\u003c/a\u003e representing the given block\n face, or null if it doesn\u0027t exist.",
              "plain": "Gets the MushroomBlockType with cap texture on the given block face.\n@param face the required block face with cap texture\n@return The {@link MushroomBlockTexture} representing the given block\n face, or null if it doesn\u0027t exist\n@see BlockFace"
            }
          },
          {
            "kind": "METHOD",
            "name": "getCapFace()",
            "comment": {
              "body": "Gets the face that has cap texture.",
              "tags": "Returns The cap face.",
              "plain": "Gets the face that has cap texture.\n@return The cap face"
            }
          },
          {
            "kind": "METHOD",
            "name": "getData()",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Gets the associated data value representing this mushroom block face.",
              "tags": "Returns A byte containing the data value of this mushroom block face.",
              "plain": "Gets the associated data value representing this mushroom block face.\n@return A byte containing the data value of this mushroom block face\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "valueOf(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "values()"
          }
        ],
        "comment": {
          "body": "Represents the different textured blocks of mushroom.",
          "plain": "Represents the different textured blocks of mushroom."
        }
      }
    ]
  },
  {
    "kind": "PACKAGE",
    "name": "org.bukkit.metadata",
    "children": [
      {
        "kind": "CLASS",
        "name": "org.bukkit.metadata.FixedMetadataValue",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "FixedMetadataValue(org.bukkit.plugin.Plugin,java.lang.Object)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "owningPlugin"
              },
              {
                "kind": "PARAMETER",
                "name": "value"
              }
            ],
            "comment": {
              "body": "Initializes a FixedMetadataValue with an Object",
              "plain": "Initializes a FixedMetadataValue with an Object\n@param owningPlugin the {@link Plugin} that created this metadata value\n@param value the value assigned to this metadata value"
            }
          },
          {
            "kind": "FIELD",
            "name": "internalValue",
            "comment": {
              "body": "Store the internal value that is represented by this fixed value.",
              "plain": "Store the internal value that is represented by this fixed value."
            }
          },
          {
            "kind": "METHOD",
            "name": "invalidate()"
          },
          {
            "kind": "METHOD",
            "name": "value()"
          }
        ],
        "comment": {
          "body": "A FixedMetadataValue is a special case metadata item that contains the same\n value forever after initialization. Invalidating a FixedMetadataValue has\n no effect.\n \u003cp\u003e\n This class extends LazyMetadataValue for historical reasons, even though it\n overrides all the implementation methods. it is possible that in the future\n that the inheritance hierarchy may change.",
          "plain": "A FixedMetadataValue is a special case metadata item that contains the same\n value forever after initialization. Invalidating a FixedMetadataValue has\n no effect.\n \u003cp\u003e\n This class extends LazyMetadataValue for historical reasons, even though it\n overrides all the implementation methods. it is possible that in the future\n that the inheritance hierarchy may change."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.metadata.LazyMetadataValue",
        "children": [
          {
            "kind": "FIELD",
            "name": "ACTUALLY_NULL"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "LazyMetadataValue(org.bukkit.plugin.Plugin)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "owningPlugin"
              }
            ],
            "comment": {
              "body": "Protected special constructor used by FixedMetadataValue to bypass\n standard setup.",
              "plain": "Protected special constructor used by FixedMetadataValue to bypass\n standard setup.\n@param owningPlugin the owning plugin"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "LazyMetadataValue(org.bukkit.plugin.Plugin,java.util.concurrent.Callable\u003cjava.lang.Object\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "lazyValue"
              },
              {
                "kind": "PARAMETER",
                "name": "owningPlugin"
              }
            ],
            "comment": {
              "body": "Initialized a LazyMetadataValue object with the default\n CACHE_AFTER_FIRST_EVAL cache strategy.",
              "plain": "Initialized a LazyMetadataValue object with the default\n CACHE_AFTER_FIRST_EVAL cache strategy.\n@param owningPlugin the {@link Plugin} that created this metadata\n     value.\n@param lazyValue the lazy value assigned to this metadata value."
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "LazyMetadataValue(org.bukkit.plugin.Plugin,org.bukkit.metadata.LazyMetadataValue.CacheStrategy,java.util.concurrent.Callable\u003cjava.lang.Object\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cacheStrategy"
              },
              {
                "kind": "PARAMETER",
                "name": "lazyValue"
              },
              {
                "kind": "PARAMETER",
                "name": "owningPlugin"
              }
            ],
            "comment": {
              "body": "Initializes a LazyMetadataValue object with a specific cache strategy.",
              "plain": "Initializes a LazyMetadataValue object with a specific cache strategy.\n@param owningPlugin the {@link Plugin} that created this metadata\n     value.\n@param cacheStrategy determines the rules for caching this metadata\n     value.\n@param lazyValue the lazy value assigned to this metadata value."
            }
          },
          {
            "kind": "FIELD",
            "name": "cacheStrategy"
          },
          {
            "kind": "METHOD",
            "name": "eval()",
            "comment": {
              "body": "Lazily evaluates the value of this metadata item.",
              "plain": "Lazily evaluates the value of this metadata item.\n@throws MetadataEvaluationException if computing the metadata value\n     fails."
            }
          },
          {
            "kind": "FIELD",
            "name": "internalValue"
          },
          {
            "kind": "METHOD",
            "name": "invalidate()"
          },
          {
            "kind": "FIELD",
            "name": "lazyValue"
          },
          {
            "kind": "ENUM",
            "name": "org.bukkit.metadata.LazyMetadataValue.CacheStrategy",
            "children": [
              {
                "kind": "ENUM_CONSTANT",
                "name": "CACHE_AFTER_FIRST_EVAL",
                "comment": {
                  "body": "Once the metadata value has been evaluated, do not re-evaluate the\n value until it is manually invalidated.",
                  "plain": "Once the metadata value has been evaluated, do not re-evaluate the\n value until it is manually invalidated."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "CACHE_ETERNALLY",
                "comment": {
                  "body": "Once the metadata value has been evaluated, do not re-evaluate the\n value in spite of manual invalidation.",
                  "plain": "Once the metadata value has been evaluated, do not re-evaluate the\n value in spite of manual invalidation."
                }
              },
              {
                "kind": "CONSTRUCTOR",
                "name": "CacheStrategy()"
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "NEVER_CACHE",
                "comment": {
                  "body": "Re-evaluate the metadata item every time it is requested",
                  "plain": "Re-evaluate the metadata item every time it is requested"
                }
              },
              {
                "kind": "METHOD",
                "name": "valueOf(java.lang.String)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "name"
                  }
                ]
              },
              {
                "kind": "METHOD",
                "name": "values()"
              }
            ],
            "comment": {
              "body": "Describes possible caching strategies for metadata.",
              "plain": "Describes possible caching strategies for metadata."
            }
          },
          {
            "kind": "METHOD",
            "name": "value()"
          }
        ],
        "comment": {
          "body": "The LazyMetadataValue class implements a type of metadata that is not\n computed until another plugin asks for it.\n \u003cp\u003e\n By making metadata values lazy, no computation is done by the providing\n plugin until absolutely necessary (if ever). Additionally,\n LazyMetadataValue objects cache their values internally unless overridden\n by a \u003ca href\u003d\"org/bukkit/metadata/LazyMetadataValue.CacheStrategy.html\" title\u003d\"enum in org.bukkit.metadata\"\u003e\u003ccode\u003eLazyMetadataValue.CacheStrategy\u003c/code\u003e\u003c/a\u003e or invalidated at the individual or plugin\n level. Once invalidated, the LazyMetadataValue will recompute its value\n when asked.",
          "plain": "The LazyMetadataValue class implements a type of metadata that is not\n computed until another plugin asks for it.\n \u003cp\u003e\n By making metadata values lazy, no computation is done by the providing\n plugin until absolutely necessary (if ever). Additionally,\n LazyMetadataValue objects cache their values internally unless overridden\n by a {@link CacheStrategy} or invalidated at the individual or plugin\n level. Once invalidated, the LazyMetadataValue will recompute its value\n when asked."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.metadata.MetadataConversionException",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "MetadataConversionException(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "message"
              }
            ]
          }
        ],
        "comment": {
          "body": "A MetadataConversionException is thrown any time a \u003ca href\u003d\"org/bukkit/metadata/LazyMetadataValue.html\" title\u003d\"class in org.bukkit.metadata\"\u003e\u003ccode\u003eLazyMetadataValue\u003c/code\u003e\u003c/a\u003e attempts to convert a metadata value to an inappropriate\n data type.",
          "plain": "A MetadataConversionException is thrown any time a {@link LazyMetadataValue} attempts to convert a metadata value to an inappropriate\n data type."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.metadata.MetadataEvaluationException",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "MetadataEvaluationException(java.lang.Throwable)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cause"
              }
            ]
          }
        ],
        "comment": {
          "body": "A MetadataEvaluationException is thrown any time a \u003ca href\u003d\"org/bukkit/metadata/LazyMetadataValue.html\" title\u003d\"class in org.bukkit.metadata\"\u003e\u003ccode\u003eLazyMetadataValue\u003c/code\u003e\u003c/a\u003e fails to evaluate its value due to an exception. The\n originating exception will be included as this exception\u0027s cause.",
          "plain": "A MetadataEvaluationException is thrown any time a {@link LazyMetadataValue} fails to evaluate its value due to an exception. The\n originating exception will be included as this exception\u0027s cause."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.metadata.MetadataStore",
        "children": [
          {
            "kind": "TYPE_PARAMETER",
            "name": "T"
          },
          {
            "kind": "METHOD",
            "name": "getMetadata(T,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "metadataKey"
              },
              {
                "kind": "PARAMETER",
                "name": "subject"
              }
            ],
            "comment": {
              "body": "Returns all metadata values attached to an object. If multiple plugins\n have attached metadata, each will value will be included.",
              "tags": "Returns A list of values, one for each plugin that has set the\n     requested value..",
              "plain": "Returns all metadata values attached to an object. If multiple plugins\n have attached metadata, each will value will be included.\n@param subject the object being interrogated.\n@param metadataKey the unique metadata key being sought.\n@return A list of values, one for each plugin that has set the\n     requested value."
            }
          },
          {
            "kind": "METHOD",
            "name": "hasMetadata(T,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "metadataKey"
              },
              {
                "kind": "PARAMETER",
                "name": "subject"
              }
            ],
            "comment": {
              "body": "Tests to see if a metadata attribute has been set on an object.",
              "tags": "Returns the existence of the metadataKey within subject..",
              "plain": "Tests to see if a metadata attribute has been set on an object.\n@param subject the object upon which the has-metadata test is\n     performed.\n@param metadataKey the unique metadata key being queried.\n@return the existence of the metadataKey within subject."
            }
          },
          {
            "kind": "METHOD",
            "name": "invalidateAll(org.bukkit.plugin.Plugin)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "owningPlugin"
              }
            ],
            "comment": {
              "body": "Invalidates all metadata in the metadata store that originates from the\n given plugin. Doing this will force each invalidated metadata item to\n be recalculated the next time it is accessed.",
              "plain": "Invalidates all metadata in the metadata store that originates from the\n given plugin. Doing this will force each invalidated metadata item to\n be recalculated the next time it is accessed.\n@param owningPlugin the plugin requesting the invalidation.\n@throws IllegalArgumentException If plugin is null"
            }
          },
          {
            "kind": "METHOD",
            "name": "removeMetadata(T,java.lang.String,org.bukkit.plugin.Plugin)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "metadataKey"
              },
              {
                "kind": "PARAMETER",
                "name": "owningPlugin"
              },
              {
                "kind": "PARAMETER",
                "name": "subject"
              }
            ],
            "comment": {
              "body": "Removes a metadata item owned by a plugin from a subject.",
              "plain": "Removes a metadata item owned by a plugin from a subject.\n@param subject the object to remove the metadata from.\n@param metadataKey the unique metadata key identifying the metadata to\n     remove.\n@param owningPlugin the plugin attempting to remove a metadata item.\n@throws IllegalArgumentException If plugin is null"
            }
          },
          {
            "kind": "METHOD",
            "name": "setMetadata(T,java.lang.String,org.bukkit.metadata.MetadataValue)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "metadataKey"
              },
              {
                "kind": "PARAMETER",
                "name": "newMetadataValue"
              },
              {
                "kind": "PARAMETER",
                "name": "subject"
              }
            ],
            "comment": {
              "body": "Adds a metadata value to an object.",
              "plain": "Adds a metadata value to an object.\n@param subject The object receiving the metadata.\n@param metadataKey A unique key to identify this metadata.\n@param newMetadataValue The metadata value to apply.\n@throws IllegalArgumentException If value is null, or the owning plugin\n     is null"
            }
          }
        ]
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.metadata.MetadataStoreBase",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "MetadataStoreBase()"
          },
          {
            "kind": "TYPE_PARAMETER",
            "name": "T"
          },
          {
            "kind": "METHOD",
            "name": "disambiguate(T,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "metadataKey"
              },
              {
                "kind": "PARAMETER",
                "name": "subject"
              }
            ],
            "comment": {
              "body": "Creates a unique name for the object receiving metadata by combining\n unique data from the subject with a metadataKey.\n \u003cp\u003e\n The name created must be globally unique for the given object and any\n two equivalent objects must generate the same unique name. For example,\n two Player objects must generate the same string if they represent the\n same player, even if the objects would fail a reference equality test.",
              "tags": "Returns a unique metadata key for the given subject..",
              "plain": "Creates a unique name for the object receiving metadata by combining\n unique data from the subject with a metadataKey.\n \u003cp\u003e\n The name created must be globally unique for the given object and any\n two equivalent objects must generate the same unique name. For example,\n two Player objects must generate the same string if they represent the\n same player, even if the objects would fail a reference equality test.\n@param subject The object for which this key is being generated.\n@param metadataKey The name identifying the metadata value.\n@return a unique metadata key for the given subject."
            }
          },
          {
            "kind": "METHOD",
            "name": "getMetadata(T,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "metadataKey"
              },
              {
                "kind": "PARAMETER",
                "name": "subject"
              }
            ],
            "comment": {
              "body": "Returns all metadata values attached to an object. If multiple\n have attached metadata, each will value will be included.",
              "tags": "Returns A list of values, one for each plugin that has set the\n     requested value..",
              "plain": "Returns all metadata values attached to an object. If multiple\n have attached metadata, each will value will be included.\n@param subject the object being interrogated.\n@param metadataKey the unique metadata key being sought.\n@return A list of values, one for each plugin that has set the\n     requested value.\n@see MetadataStore#getMetadata(Object, String)"
            }
          },
          {
            "kind": "METHOD",
            "name": "hasMetadata(T,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "metadataKey"
              },
              {
                "kind": "PARAMETER",
                "name": "subject"
              }
            ],
            "comment": {
              "body": "Tests to see if a metadata attribute has been set on an object.",
              "tags": "Returns the existence of the metadataKey within subject..",
              "plain": "Tests to see if a metadata attribute has been set on an object.\n@param subject the object upon which the has-metadata test is\n     performed.\n@param metadataKey the unique metadata key being queried.\n@return the existence of the metadataKey within subject."
            }
          },
          {
            "kind": "METHOD",
            "name": "invalidateAll(org.bukkit.plugin.Plugin)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "owningPlugin"
              }
            ],
            "comment": {
              "body": "Invalidates all metadata in the metadata store that originates from the\n given plugin. Doing this will force each invalidated metadata item to\n be recalculated the next time it is accessed.",
              "plain": "Invalidates all metadata in the metadata store that originates from the\n given plugin. Doing this will force each invalidated metadata item to\n be recalculated the next time it is accessed.\n@param owningPlugin the plugin requesting the invalidation.\n@see MetadataStore#invalidateAll(org.bukkit.plugin.Plugin)\n@throws IllegalArgumentException If plugin is null"
            }
          },
          {
            "kind": "FIELD",
            "name": "metadataMap"
          },
          {
            "kind": "METHOD",
            "name": "removeAll(org.bukkit.plugin.Plugin)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "owningPlugin"
              }
            ],
            "comment": {
              "body": "Removes all metadata in the metadata store that originates from the\n given plugin.",
              "plain": "Removes all metadata in the metadata store that originates from the\n given plugin.\n@param owningPlugin the plugin requesting the invalidation.\n@throws IllegalArgumentException If plugin is null"
            }
          },
          {
            "kind": "METHOD",
            "name": "removeMetadata(T,java.lang.String,org.bukkit.plugin.Plugin)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "metadataKey"
              },
              {
                "kind": "PARAMETER",
                "name": "owningPlugin"
              },
              {
                "kind": "PARAMETER",
                "name": "subject"
              }
            ],
            "comment": {
              "body": "Removes a metadata item owned by a plugin from a subject.",
              "plain": "Removes a metadata item owned by a plugin from a subject.\n@param subject the object to remove the metadata from.\n@param metadataKey the unique metadata key identifying the metadata to\n     remove.\n@param owningPlugin the plugin attempting to remove a metadata item.\n@see MetadataStore#removeMetadata(Object, String,\n     org.bukkit.plugin.Plugin)\n@throws IllegalArgumentException If plugin is null"
            }
          },
          {
            "kind": "METHOD",
            "name": "setMetadata(T,java.lang.String,org.bukkit.metadata.MetadataValue)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "metadataKey"
              },
              {
                "kind": "PARAMETER",
                "name": "newMetadataValue"
              },
              {
                "kind": "PARAMETER",
                "name": "subject"
              }
            ],
            "comment": {
              "body": "Adds a metadata value to an object. Each metadata value is owned by a\n specific \u003ca href\u003d\"org/bukkit/plugin/Plugin.html\" title\u003d\"interface in org.bukkit.plugin\"\u003e\u003ccode\u003ePlugin\u003c/code\u003e\u003c/a\u003e. If a plugin has already added a metadata value\n to an object, that value will be replaced with the value of \u003ccode\u003e\n newMetadataValue\u003c/code\u003e. Multiple plugins can set independent values for the\n same \u003ccode\u003emetadataKey\u003c/code\u003e without conflict.\n \u003cp\u003e\n Implementation note: I considered using a \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/util/concurrent/locks/ReadWriteLock.html\" title\u003d\"class or interface in java.util.concurrent.locks\" class\u003d\"external-link\"\u003e\u003ccode\u003eReadWriteLock\u003c/code\u003e\u003c/a\u003e for controlling access to\n \u003ccode\u003emetadataMap\u003c/code\u003e, but decided that the added overhead wasn\u0027t worth\n the finer grained access control.\n \u003cp\u003e\n Bukkit is almost entirely single threaded so locking overhead shouldn\u0027t\n pose a problem.",
              "plain": "Adds a metadata value to an object. Each metadata value is owned by a\n specific {@link Plugin}. If a plugin has already added a metadata value\n to an object, that value will be replaced with the value of {@code\n newMetadataValue}. Multiple plugins can set independent values for the\n same {@code metadataKey} without conflict.\n \u003cp\u003e\n Implementation note: I considered using a {@link java.util.concurrent.locks.ReadWriteLock} for controlling access to\n {@code metadataMap}, but decided that the added overhead wasn\u0027t worth\n the finer grained access control.\n \u003cp\u003e\n Bukkit is almost entirely single threaded so locking overhead shouldn\u0027t\n pose a problem.\n@param subject The object receiving the metadata.\n@param metadataKey A unique key to identify this metadata.\n@param newMetadataValue The metadata value to apply.\n@see MetadataStore#setMetadata(Object, String, MetadataValue)\n@throws IllegalArgumentException If value is null, or the owning plugin\n     is null"
            }
          }
        ]
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.metadata.MetadataValue",
        "children": [
          {
            "kind": "METHOD",
            "name": "asBoolean()",
            "comment": {
              "body": "Attempts to convert the value of this metadata item into a boolean.",
              "tags": "Returns the value as a boolean..",
              "plain": "Attempts to convert the value of this metadata item into a boolean.\n@return the value as a boolean."
            }
          },
          {
            "kind": "METHOD",
            "name": "asByte()",
            "comment": {
              "body": "Attempts to convert the value of this metadata item into a byte.",
              "tags": "Returns the value as a byte..",
              "plain": "Attempts to convert the value of this metadata item into a byte.\n@return the value as a byte."
            }
          },
          {
            "kind": "METHOD",
            "name": "asDouble()",
            "comment": {
              "body": "Attempts to convert the value of this metadata item into a double.",
              "tags": "Returns the value as a double..",
              "plain": "Attempts to convert the value of this metadata item into a double.\n@return the value as a double."
            }
          },
          {
            "kind": "METHOD",
            "name": "asFloat()",
            "comment": {
              "body": "Attempts to convert the value of this metadata item into a float.",
              "tags": "Returns the value as a float..",
              "plain": "Attempts to convert the value of this metadata item into a float.\n@return the value as a float."
            }
          },
          {
            "kind": "METHOD",
            "name": "asInt()",
            "comment": {
              "body": "Attempts to convert the value of this metadata item into an int.",
              "tags": "Returns the value as an int..",
              "plain": "Attempts to convert the value of this metadata item into an int.\n@return the value as an int."
            }
          },
          {
            "kind": "METHOD",
            "name": "asLong()",
            "comment": {
              "body": "Attempts to convert the value of this metadata item into a long.",
              "tags": "Returns the value as a long..",
              "plain": "Attempts to convert the value of this metadata item into a long.\n@return the value as a long."
            }
          },
          {
            "kind": "METHOD",
            "name": "asShort()",
            "comment": {
              "body": "Attempts to convert the value of this metadata item into a short.",
              "tags": "Returns the value as a short..",
              "plain": "Attempts to convert the value of this metadata item into a short.\n@return the value as a short."
            }
          },
          {
            "kind": "METHOD",
            "name": "asString()",
            "comment": {
              "body": "Attempts to convert the value of this metadata item into a string.",
              "tags": "Returns the value as a string..",
              "plain": "Attempts to convert the value of this metadata item into a string.\n@return the value as a string."
            }
          },
          {
            "kind": "METHOD",
            "name": "getOwningPlugin()",
            "comment": {
              "body": "Returns the \u003ca href\u003d\"org/bukkit/plugin/Plugin.html\" title\u003d\"interface in org.bukkit.plugin\"\u003e\u003ccode\u003ePlugin\u003c/code\u003e\u003c/a\u003e that created this metadata item.",
              "tags": "Returns the plugin that owns this metadata value. This should never be\n     null..",
              "plain": "Returns the {@link Plugin} that created this metadata item.\n@return the plugin that owns this metadata value. This should never be\n     null."
            }
          },
          {
            "kind": "METHOD",
            "name": "invalidate()",
            "comment": {
              "body": "Invalidates this metadata item, forcing it to recompute when next\n accessed.",
              "plain": "Invalidates this metadata item, forcing it to recompute when next\n accessed."
            }
          },
          {
            "kind": "METHOD",
            "name": "value()",
            "comment": {
              "body": "Fetches the value of this metadata item.",
              "tags": "Returns the metadata value..",
              "plain": "Fetches the value of this metadata item.\n@return the metadata value."
            }
          }
        ]
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.metadata.MetadataValueAdapter",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "MetadataValueAdapter(org.bukkit.plugin.Plugin)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "owningPlugin"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "asBoolean()"
          },
          {
            "kind": "METHOD",
            "name": "asByte()"
          },
          {
            "kind": "METHOD",
            "name": "asDouble()"
          },
          {
            "kind": "METHOD",
            "name": "asFloat()"
          },
          {
            "kind": "METHOD",
            "name": "asInt()"
          },
          {
            "kind": "METHOD",
            "name": "asLong()"
          },
          {
            "kind": "METHOD",
            "name": "asShort()"
          },
          {
            "kind": "METHOD",
            "name": "asString()"
          },
          {
            "kind": "METHOD",
            "name": "getOwningPlugin()"
          },
          {
            "kind": "FIELD",
            "name": "owningPlugin"
          }
        ],
        "comment": {
          "body": "Optional base class for facilitating MetadataValue implementations.\n \u003cp\u003e\n This provides all the conversion functions for MetadataValue so that\n writing an implementation of MetadataValue is as simple as implementing\n value() and invalidate().",
          "plain": "Optional base class for facilitating MetadataValue implementations.\n \u003cp\u003e\n This provides all the conversion functions for MetadataValue so that\n writing an implementation of MetadataValue is as simple as implementing\n value() and invalidate()."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.metadata.Metadatable",
        "children": [
          {
            "kind": "METHOD",
            "name": "getMetadata(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "metadataKey"
              }
            ],
            "comment": {
              "body": "Returns a list of previously set metadata values from the implementing\n object\u0027s metadata store.",
              "tags": "Returns A list of values, one for each plugin that has set the\n     requested value..",
              "plain": "Returns a list of previously set metadata values from the implementing\n object\u0027s metadata store.\n@param metadataKey the unique metadata key being sought.\n@return A list of values, one for each plugin that has set the\n     requested value."
            }
          },
          {
            "kind": "METHOD",
            "name": "hasMetadata(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "metadataKey"
              }
            ],
            "comment": {
              "body": "Tests to see whether the implementing object contains the given\n metadata value in its metadata store.",
              "tags": "Returns the existence of the metadataKey within subject..",
              "plain": "Tests to see whether the implementing object contains the given\n metadata value in its metadata store.\n@param metadataKey the unique metadata key being queried.\n@return the existence of the metadataKey within subject."
            }
          },
          {
            "kind": "METHOD",
            "name": "removeMetadata(java.lang.String,org.bukkit.plugin.Plugin)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "metadataKey"
              },
              {
                "kind": "PARAMETER",
                "name": "owningPlugin"
              }
            ],
            "comment": {
              "body": "Removes the given metadata value from the implementing object\u0027s\n metadata store.",
              "plain": "Removes the given metadata value from the implementing object\u0027s\n metadata store.\n@param metadataKey the unique metadata key identifying the metadata to\n     remove.\n@param owningPlugin This plugin\u0027s metadata value will be removed. All\n     other values will be left untouched.\n@throws IllegalArgumentException If plugin is null"
            }
          },
          {
            "kind": "METHOD",
            "name": "setMetadata(java.lang.String,org.bukkit.metadata.MetadataValue)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "metadataKey"
              },
              {
                "kind": "PARAMETER",
                "name": "newMetadataValue"
              }
            ],
            "comment": {
              "body": "Sets a metadata value in the implementing object\u0027s metadata store.",
              "plain": "Sets a metadata value in the implementing object\u0027s metadata store.\n@param metadataKey A unique key to identify this metadata.\n@param newMetadataValue The metadata value to apply.\n@throws IllegalArgumentException If value is null, or the owning plugin\n     is null"
            }
          }
        ],
        "comment": {
          "body": "This interface is implemented by all objects that can provide metadata\n about themselves.",
          "plain": "This interface is implemented by all objects that can provide metadata\n about themselves."
        }
      }
    ]
  },
  {
    "kind": "PACKAGE",
    "name": "org.bukkit.permissions",
    "children": [
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.permissions.Permissible",
        "children": [
          {
            "kind": "METHOD",
            "name": "addAttachment(org.bukkit.plugin.Plugin)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "plugin"
              }
            ],
            "comment": {
              "body": "Adds a new empty \u003ca href\u003d\"org/bukkit/permissions/PermissionAttachment.html\" title\u003d\"class in org.bukkit.permissions\"\u003e\u003ccode\u003ePermissionAttachment\u003c/code\u003e\u003c/a\u003e to this object",
              "tags": "Returns The PermissionAttachment that was just created.",
              "plain": "Adds a new empty {@link PermissionAttachment} to this object\n@param plugin Plugin responsible for this attachment, may not be null\n     or disabled\n@return The PermissionAttachment that was just created"
            }
          },
          {
            "kind": "METHOD",
            "name": "addAttachment(org.bukkit.plugin.Plugin,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "plugin"
              },
              {
                "kind": "PARAMETER",
                "name": "ticks"
              }
            ],
            "comment": {
              "body": "Temporarily adds a new empty \u003ca href\u003d\"org/bukkit/permissions/PermissionAttachment.html\" title\u003d\"class in org.bukkit.permissions\"\u003e\u003ccode\u003ePermissionAttachment\u003c/code\u003e\u003c/a\u003e to this\n object",
              "tags": "Returns The PermissionAttachment that was just created.",
              "plain": "Temporarily adds a new empty {@link PermissionAttachment} to this\n object\n@param plugin Plugin responsible for this attachment, may not be null\n     or disabled\n@param ticks Amount of ticks to automatically remove this attachment\n     after\n@return The PermissionAttachment that was just created"
            }
          },
          {
            "kind": "METHOD",
            "name": "addAttachment(org.bukkit.plugin.Plugin,java.lang.String,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              },
              {
                "kind": "PARAMETER",
                "name": "plugin"
              },
              {
                "kind": "PARAMETER",
                "name": "value"
              }
            ],
            "comment": {
              "body": "Adds a new \u003ca href\u003d\"org/bukkit/permissions/PermissionAttachment.html\" title\u003d\"class in org.bukkit.permissions\"\u003e\u003ccode\u003ePermissionAttachment\u003c/code\u003e\u003c/a\u003e with a single permission by\n name and value",
              "tags": "Returns The PermissionAttachment that was just created.",
              "plain": "Adds a new {@link PermissionAttachment} with a single permission by\n name and value\n@param plugin Plugin responsible for this attachment, may not be null\n     or disabled\n@param name Name of the permission to attach\n@param value Value of the permission\n@return The PermissionAttachment that was just created"
            }
          },
          {
            "kind": "METHOD",
            "name": "addAttachment(org.bukkit.plugin.Plugin,java.lang.String,boolean,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              },
              {
                "kind": "PARAMETER",
                "name": "plugin"
              },
              {
                "kind": "PARAMETER",
                "name": "ticks"
              },
              {
                "kind": "PARAMETER",
                "name": "value"
              }
            ],
            "comment": {
              "body": "Temporarily adds a new \u003ca href\u003d\"org/bukkit/permissions/PermissionAttachment.html\" title\u003d\"class in org.bukkit.permissions\"\u003e\u003ccode\u003ePermissionAttachment\u003c/code\u003e\u003c/a\u003e with a single\n permission by name and value",
              "tags": "Returns The PermissionAttachment that was just created.",
              "plain": "Temporarily adds a new {@link PermissionAttachment} with a single\n permission by name and value\n@param plugin Plugin responsible for this attachment, may not be null\n     or disabled\n@param name Name of the permission to attach\n@param value Value of the permission\n@param ticks Amount of ticks to automatically remove this attachment\n     after\n@return The PermissionAttachment that was just created"
            }
          },
          {
            "kind": "METHOD",
            "name": "getEffectivePermissions()",
            "comment": {
              "body": "Gets a set containing all of the permissions currently in effect by\n this object",
              "tags": "Returns Set of currently effective permissions.",
              "plain": "Gets a set containing all of the permissions currently in effect by\n this object\n@return Set of currently effective permissions"
            }
          },
          {
            "kind": "METHOD",
            "name": "hasPermission(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ],
            "comment": {
              "body": "Gets the value of the specified permission, if set.\n \u003cp\u003e\n If a permission override is not set on this object, the default value\n of the permission will be returned.",
              "tags": "Returns Value of the permission.",
              "plain": "Gets the value of the specified permission, if set.\n \u003cp\u003e\n If a permission override is not set on this object, the default value\n of the permission will be returned.\n@param name Name of the permission\n@return Value of the permission"
            }
          },
          {
            "kind": "METHOD",
            "name": "hasPermission(org.bukkit.permissions.Permission)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "perm"
              }
            ],
            "comment": {
              "body": "Gets the value of the specified permission, if set.\n \u003cp\u003e\n If a permission override is not set on this object, the default value\n of the permission will be returned",
              "tags": "Returns Value of the permission.",
              "plain": "Gets the value of the specified permission, if set.\n \u003cp\u003e\n If a permission override is not set on this object, the default value\n of the permission will be returned\n@param perm Permission to get\n@return Value of the permission"
            }
          },
          {
            "kind": "METHOD",
            "name": "isPermissionSet(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ],
            "comment": {
              "body": "Checks if this object contains an override for the specified\n permission, by fully qualified name",
              "tags": "Returns true if the permission is set, otherwise false.",
              "plain": "Checks if this object contains an override for the specified\n permission, by fully qualified name\n@param name Name of the permission\n@return true if the permission is set, otherwise false"
            }
          },
          {
            "kind": "METHOD",
            "name": "isPermissionSet(org.bukkit.permissions.Permission)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "perm"
              }
            ],
            "comment": {
              "body": "Checks if this object contains an override for the specified \u003ca href\u003d\"org/bukkit/permissions/Permission.html\" title\u003d\"class in org.bukkit.permissions\"\u003e\u003ccode\u003ePermission\u003c/code\u003e\u003c/a\u003e",
              "tags": "Returns true if the permission is set, otherwise false.",
              "plain": "Checks if this object contains an override for the specified {@link Permission}\n@param perm Permission to check\n@return true if the permission is set, otherwise false"
            }
          },
          {
            "kind": "METHOD",
            "name": "recalculatePermissions()",
            "comment": {
              "body": "Recalculates the permissions for this object, if the attachments have\n changed values.\n \u003cp\u003e\n This should very rarely need to be called from a plugin.",
              "plain": "Recalculates the permissions for this object, if the attachments have\n changed values.\n \u003cp\u003e\n This should very rarely need to be called from a plugin."
            }
          },
          {
            "kind": "METHOD",
            "name": "removeAttachment(org.bukkit.permissions.PermissionAttachment)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "attachment"
              }
            ],
            "comment": {
              "body": "Removes the given \u003ca href\u003d\"org/bukkit/permissions/PermissionAttachment.html\" title\u003d\"class in org.bukkit.permissions\"\u003e\u003ccode\u003ePermissionAttachment\u003c/code\u003e\u003c/a\u003e from this object",
              "plain": "Removes the given {@link PermissionAttachment} from this object\n@param attachment Attachment to remove\n@throws IllegalArgumentException Thrown when the specified attachment\n     isn\u0027t part of this object"
            }
          }
        ],
        "comment": {
          "body": "Represents an object that may be assigned permissions",
          "plain": "Represents an object that may be assigned permissions"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.permissions.PermissibleBase",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PermissibleBase(org.bukkit.permissions.ServerOperator)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "opable"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "addAttachment(org.bukkit.plugin.Plugin)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "plugin"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "addAttachment(org.bukkit.plugin.Plugin,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "plugin"
              },
              {
                "kind": "PARAMETER",
                "name": "ticks"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "addAttachment(org.bukkit.plugin.Plugin,java.lang.String,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              },
              {
                "kind": "PARAMETER",
                "name": "plugin"
              },
              {
                "kind": "PARAMETER",
                "name": "value"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "addAttachment(org.bukkit.plugin.Plugin,java.lang.String,boolean,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              },
              {
                "kind": "PARAMETER",
                "name": "plugin"
              },
              {
                "kind": "PARAMETER",
                "name": "ticks"
              },
              {
                "kind": "PARAMETER",
                "name": "value"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "attachments"
          },
          {
            "kind": "METHOD",
            "name": "calculateChildPermissions(java.util.Map\u003cjava.lang.String,java.lang.Boolean\u003e,boolean,org.bukkit.permissions.PermissionAttachment)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "attachment"
              },
              {
                "kind": "PARAMETER",
                "name": "children"
              },
              {
                "kind": "PARAMETER",
                "name": "invert"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "clearPermissions()"
          },
          {
            "kind": "METHOD",
            "name": "getEffectivePermissions()"
          },
          {
            "kind": "METHOD",
            "name": "hasPermission(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "inName"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "hasPermission(org.bukkit.permissions.Permission)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "perm"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "isOp()"
          },
          {
            "kind": "METHOD",
            "name": "isPermissionSet(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "isPermissionSet(org.bukkit.permissions.Permission)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "perm"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "opable"
          },
          {
            "kind": "CLASS",
            "name": "org.bukkit.permissions.PermissibleBase.RemoveAttachmentRunnable",
            "children": [
              {
                "kind": "CONSTRUCTOR",
                "name": "RemoveAttachmentRunnable(org.bukkit.permissions.PermissionAttachment)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "attachment"
                  }
                ]
              },
              {
                "kind": "FIELD",
                "name": "attachment"
              },
              {
                "kind": "METHOD",
                "name": "run()"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "parent"
          },
          {
            "kind": "FIELD",
            "name": "permissions"
          },
          {
            "kind": "METHOD",
            "name": "recalculatePermissions()"
          },
          {
            "kind": "METHOD",
            "name": "removeAttachment(org.bukkit.permissions.PermissionAttachment)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "attachment"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "setOp(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "value"
              }
            ]
          }
        ],
        "comment": {
          "body": "Base Permissible for use in any Permissible object via proxy or extension",
          "plain": "Base Permissible for use in any Permissible object via proxy or extension"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.permissions.Permission",
        "children": [
          {
            "kind": "FIELD",
            "name": "DEFAULT_PERMISSION"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Permission(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Permission(java.lang.String,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "description"
              },
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Permission(java.lang.String,java.lang.String,java.util.Map\u003cjava.lang.String,java.lang.Boolean\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "children"
              },
              {
                "kind": "PARAMETER",
                "name": "description"
              },
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Permission(java.lang.String,java.lang.String,org.bukkit.permissions.PermissionDefault)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "defaultValue"
              },
              {
                "kind": "PARAMETER",
                "name": "description"
              },
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Permission(java.lang.String,java.lang.String,org.bukkit.permissions.PermissionDefault,java.util.Map\u003cjava.lang.String,java.lang.Boolean\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "children"
              },
              {
                "kind": "PARAMETER",
                "name": "defaultValue"
              },
              {
                "kind": "PARAMETER",
                "name": "description"
              },
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Permission(java.lang.String,java.util.Map\u003cjava.lang.String,java.lang.Boolean\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "children"
              },
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Permission(java.lang.String,org.bukkit.permissions.PermissionDefault)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "defaultValue"
              },
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Permission(java.lang.String,org.bukkit.permissions.PermissionDefault,java.util.Map\u003cjava.lang.String,java.lang.Boolean\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "children"
              },
              {
                "kind": "PARAMETER",
                "name": "defaultValue"
              },
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "addParent(java.lang.String,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              },
              {
                "kind": "PARAMETER",
                "name": "value"
              }
            ],
            "comment": {
              "body": "Adds this permission to the specified parent permission.\n \u003cp\u003e\n If the parent permission does not exist, it will be created and\n registered.",
              "tags": "Returns Parent permission it created or loaded.",
              "plain": "Adds this permission to the specified parent permission.\n \u003cp\u003e\n If the parent permission does not exist, it will be created and\n registered.\n@param name Name of the parent permission\n@param value The value to set this permission to\n@return Parent permission it created or loaded"
            }
          },
          {
            "kind": "METHOD",
            "name": "addParent(org.bukkit.permissions.Permission,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "perm"
              },
              {
                "kind": "PARAMETER",
                "name": "value"
              }
            ],
            "comment": {
              "body": "Adds this permission to the specified parent permission.",
              "plain": "Adds this permission to the specified parent permission.\n@param perm Parent permission to register with\n@param value The value to set this permission to"
            }
          },
          {
            "kind": "FIELD",
            "name": "children"
          },
          {
            "kind": "FIELD",
            "name": "defaultValue"
          },
          {
            "kind": "FIELD",
            "name": "description"
          },
          {
            "kind": "METHOD",
            "name": "extractChildren(java.util.Map\u003c?,?\u003e,java.lang.String,org.bukkit.permissions.PermissionDefault,java.util.List\u003corg.bukkit.permissions.Permission\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "def"
              },
              {
                "kind": "PARAMETER",
                "name": "input"
              },
              {
                "kind": "PARAMETER",
                "name": "name"
              },
              {
                "kind": "PARAMETER",
                "name": "output"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getChildren()",
            "comment": {
              "body": "Gets the children of this permission.\n \u003cp\u003e\n If you change this map in any form, you must call \u003ca href\u003d\"org/bukkit/permissions/Permission.html#recalculatePermissibles()\"\u003e\u003ccode\u003ePermission.recalculatePermissibles()\u003c/code\u003e\u003c/a\u003e to recalculate all \u003ca href\u003d\"org/bukkit/permissions/Permissible.html\" title\u003d\"interface in org.bukkit.permissions\"\u003e\u003ccode\u003ePermissible\u003c/code\u003e\u003c/a\u003es",
              "tags": "Returns Permission children.",
              "plain": "Gets the children of this permission.\n \u003cp\u003e\n If you change this map in any form, you must call {@link #recalculatePermissibles()} to recalculate all {@link Permissible}s\n@return Permission children"
            }
          },
          {
            "kind": "METHOD",
            "name": "getDefault()",
            "comment": {
              "body": "Gets the default value of this permission.",
              "tags": "Returns Default value of this permission..",
              "plain": "Gets the default value of this permission.\n@return Default value of this permission."
            }
          },
          {
            "kind": "METHOD",
            "name": "getDescription()",
            "comment": {
              "body": "Gets a brief description of this permission, if set",
              "tags": "Returns Brief description of this permission.",
              "plain": "Gets a brief description of this permission, if set\n@return Brief description of this permission"
            }
          },
          {
            "kind": "METHOD",
            "name": "getName()",
            "comment": {
              "body": "Returns the unique fully qualified name of this Permission",
              "tags": "Returns Fully qualified name.",
              "plain": "Returns the unique fully qualified name of this Permission\n@return Fully qualified name"
            }
          },
          {
            "kind": "METHOD",
            "name": "getPermissibles()",
            "comment": {
              "body": "Gets a set containing every \u003ca href\u003d\"org/bukkit/permissions/Permissible.html\" title\u003d\"interface in org.bukkit.permissions\"\u003e\u003ccode\u003ePermissible\u003c/code\u003e\u003c/a\u003e that has this\n permission.\n \u003cp\u003e\n This set cannot be modified.",
              "tags": "Returns Set containing permissibles with this permission.",
              "plain": "Gets a set containing every {@link Permissible} that has this\n permission.\n \u003cp\u003e\n This set cannot be modified.\n@return Set containing permissibles with this permission"
            }
          },
          {
            "kind": "METHOD",
            "name": "loadPermission(java.lang.String,java.util.Map\u003c?,?\u003e,org.bukkit.permissions.PermissionDefault,java.util.List\u003corg.bukkit.permissions.Permission\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "def"
              },
              {
                "kind": "PARAMETER",
                "name": "name"
              },
              {
                "kind": "PARAMETER",
                "name": "output"
              }
            ],
            "comment": {
              "body": "Loads a Permission from a map of data, usually used from retrieval from\n a yaml file.\n \u003cp\u003e\n The data may contain the following keys:\n \u003cul\u003e\n \u003cli\u003edefault: Boolean true or false. If not specified, false.\n \u003cli\u003echildren: \u003ccode\u003eMap\u0026lt;String, Boolean\u0026gt;\u003c/code\u003e of child permissions. If not\n     specified, empty list.\n \u003cli\u003edescription: Short string containing a very small description of\n     this description. If not specified, empty string.\n \u003c/ul\u003e",
              "tags": "Returns Permission object.",
              "plain": "Loads a Permission from a map of data, usually used from retrieval from\n a yaml file.\n \u003cp\u003e\n The data may contain the following keys:\n \u003cul\u003e\n \u003cli\u003edefault: Boolean true or false. If not specified, false.\n \u003cli\u003echildren: {@code Map\u003cString, Boolean\u003e} of child permissions. If not\n     specified, empty list.\n \u003cli\u003edescription: Short string containing a very small description of\n     this description. If not specified, empty string.\n \u003c/ul\u003e\n@param name Name of the permission\n@param data Map of keys\n@param def Default permission value to use if not set\n@param output A list to append any created child-Permissions to, may be null\n@return Permission object"
            }
          },
          {
            "kind": "METHOD",
            "name": "loadPermission(java.lang.String,java.util.Map\u003cjava.lang.String,java.lang.Object\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ],
            "comment": {
              "body": "Loads a Permission from a map of data, usually used from retrieval from\n a yaml file.\n \u003cp\u003e\n The data may contain the following keys:\n \u003cul\u003e\n \u003cli\u003edefault: Boolean true or false. If not specified, false.\n \u003cli\u003echildren: \u003ccode\u003eMap\u0026lt;String, Boolean\u0026gt;\u003c/code\u003e of child permissions. If not\n     specified, empty list.\n \u003cli\u003edescription: Short string containing a very small description of\n     this description. If not specified, empty string.\n \u003c/ul\u003e",
              "tags": "Returns Permission object.",
              "plain": "Loads a Permission from a map of data, usually used from retrieval from\n a yaml file.\n \u003cp\u003e\n The data may contain the following keys:\n \u003cul\u003e\n \u003cli\u003edefault: Boolean true or false. If not specified, false.\n \u003cli\u003echildren: {@code Map\u003cString, Boolean\u003e} of child permissions. If not\n     specified, empty list.\n \u003cli\u003edescription: Short string containing a very small description of\n     this description. If not specified, empty string.\n \u003c/ul\u003e\n@param name Name of the permission\n@param data Map of keys\n@return Permission object"
            }
          },
          {
            "kind": "METHOD",
            "name": "loadPermissions(java.util.Map\u003c?,?\u003e,java.lang.String,org.bukkit.permissions.PermissionDefault)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "data"
              },
              {
                "kind": "PARAMETER",
                "name": "def"
              },
              {
                "kind": "PARAMETER",
                "name": "error"
              }
            ],
            "comment": {
              "body": "Loads a list of Permissions from a map of data, usually used from\n retrieval from a yaml file.\n \u003cp\u003e\n The data may contain a list of name:data, where the data contains the\n following keys:\n \u003cul\u003e\n \u003cli\u003edefault: Boolean true or false. If not specified, false.\n \u003cli\u003echildren: \u003ccode\u003eMap\u0026lt;String, Boolean\u0026gt;\u003c/code\u003e of child permissions. If not\n     specified, empty list.\n \u003cli\u003edescription: Short string containing a very small description of\n     this description. If not specified, empty string.\n \u003c/ul\u003e",
              "tags": "Returns Permission object.",
              "plain": "Loads a list of Permissions from a map of data, usually used from\n retrieval from a yaml file.\n \u003cp\u003e\n The data may contain a list of name:data, where the data contains the\n following keys:\n \u003cul\u003e\n \u003cli\u003edefault: Boolean true or false. If not specified, false.\n \u003cli\u003echildren: {@code Map\u003cString, Boolean\u003e} of child permissions. If not\n     specified, empty list.\n \u003cli\u003edescription: Short string containing a very small description of\n     this description. If not specified, empty string.\n \u003c/ul\u003e\n@param data Map of permissions\n@param error An error message to show if a permission is invalid.\n@param def Default permission value to use if missing\n@return Permission object"
            }
          },
          {
            "kind": "FIELD",
            "name": "name"
          },
          {
            "kind": "METHOD",
            "name": "recalculatePermissibles()",
            "comment": {
              "body": "Recalculates all \u003ca href\u003d\"org/bukkit/permissions/Permissible.html\" title\u003d\"interface in org.bukkit.permissions\"\u003e\u003ccode\u003ePermissible\u003c/code\u003e\u003c/a\u003es that contain this permission.\n \u003cp\u003e\n This should be called after modifying the children, and is\n automatically called after modifying the default value",
              "plain": "Recalculates all {@link Permissible}s that contain this permission.\n \u003cp\u003e\n This should be called after modifying the children, and is\n automatically called after modifying the default value"
            }
          },
          {
            "kind": "METHOD",
            "name": "setDefault(org.bukkit.permissions.PermissionDefault)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "value"
              }
            ],
            "comment": {
              "body": "Sets the default value of this permission.\n \u003cp\u003e\n This will not be saved to disk, and is a temporary operation until the\n server reloads permissions. Changing this default will cause all \u003ca href\u003d\"org/bukkit/permissions/Permissible.html\" title\u003d\"interface in org.bukkit.permissions\"\u003e\u003ccode\u003ePermissible\u003c/code\u003e\u003c/a\u003es that contain this permission to recalculate their\n permissions",
              "plain": "Sets the default value of this permission.\n \u003cp\u003e\n This will not be saved to disk, and is a temporary operation until the\n server reloads permissions. Changing this default will cause all {@link Permissible}s that contain this permission to recalculate their\n permissions\n@param value The new default to set"
            }
          },
          {
            "kind": "METHOD",
            "name": "setDescription(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "value"
              }
            ],
            "comment": {
              "body": "Sets the description of this permission.\n \u003cp\u003e\n This will not be saved to disk, and is a temporary operation until the\n server reloads permissions.",
              "plain": "Sets the description of this permission.\n \u003cp\u003e\n This will not be saved to disk, and is a temporary operation until the\n server reloads permissions.\n@param value The new description to set"
            }
          }
        ],
        "comment": {
          "body": "Represents a unique permission that may be attached to a \u003ca href\u003d\"org/bukkit/permissions/Permissible.html\" title\u003d\"interface in org.bukkit.permissions\"\u003e\u003ccode\u003ePermissible\u003c/code\u003e\u003c/a\u003e",
          "plain": "Represents a unique permission that may be attached to a {@link Permissible}"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.permissions.PermissionAttachment",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PermissionAttachment(org.bukkit.plugin.Plugin,org.bukkit.permissions.Permissible)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "Permissible"
              },
              {
                "kind": "PARAMETER",
                "name": "plugin"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getPermissible()",
            "comment": {
              "body": "Gets the Permissible that this is attached to",
              "tags": "Returns Permissible containing this attachment.",
              "plain": "Gets the Permissible that this is attached to\n@return Permissible containing this attachment"
            }
          },
          {
            "kind": "METHOD",
            "name": "getPermissions()",
            "comment": {
              "body": "Gets a copy of all set permissions and values contained within this\n attachment.\n \u003cp\u003e\n This map may be modified but will not affect the attachment, as it is a\n copy.",
              "tags": "Returns Copy of all permissions and values expressed by this attachment.",
              "plain": "Gets a copy of all set permissions and values contained within this\n attachment.\n \u003cp\u003e\n This map may be modified but will not affect the attachment, as it is a\n copy.\n@return Copy of all permissions and values expressed by this attachment"
            }
          },
          {
            "kind": "METHOD",
            "name": "getPlugin()",
            "comment": {
              "body": "Gets the plugin responsible for this attachment",
              "tags": "Returns Plugin responsible for this permission attachment.",
              "plain": "Gets the plugin responsible for this attachment\n@return Plugin responsible for this permission attachment"
            }
          },
          {
            "kind": "METHOD",
            "name": "getRemovalCallback()",
            "comment": {
              "body": "Gets the class that was previously set to be called when this\n attachment was removed from a \u003ca href\u003d\"org/bukkit/permissions/Permissible.html\" title\u003d\"interface in org.bukkit.permissions\"\u003e\u003ccode\u003ePermissible\u003c/code\u003e\u003c/a\u003e. May be null.",
              "tags": "Returns Object to be called when this is removed.",
              "plain": "Gets the class that was previously set to be called when this\n attachment was removed from a {@link Permissible}. May be null.\n@return Object to be called when this is removed"
            }
          },
          {
            "kind": "FIELD",
            "name": "permissible"
          },
          {
            "kind": "FIELD",
            "name": "permissions"
          },
          {
            "kind": "FIELD",
            "name": "plugin"
          },
          {
            "kind": "METHOD",
            "name": "remove()",
            "comment": {
              "body": "Removes this attachment from its registered \u003ca href\u003d\"org/bukkit/permissions/Permissible.html\" title\u003d\"interface in org.bukkit.permissions\"\u003e\u003ccode\u003ePermissible\u003c/code\u003e\u003c/a\u003e",
              "tags": "Returns true if the permissible was removed successfully, false if it\n     did not exist.",
              "plain": "Removes this attachment from its registered {@link Permissible}\n@return true if the permissible was removed successfully, false if it\n     did not exist"
            }
          },
          {
            "kind": "FIELD",
            "name": "removed"
          },
          {
            "kind": "METHOD",
            "name": "setPermission(java.lang.String,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              },
              {
                "kind": "PARAMETER",
                "name": "value"
              }
            ],
            "comment": {
              "body": "Sets a permission to the given value, by its fully qualified name",
              "plain": "Sets a permission to the given value, by its fully qualified name\n@param name Name of the permission\n@param value New value of the permission"
            }
          },
          {
            "kind": "METHOD",
            "name": "setPermission(org.bukkit.permissions.Permission,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "perm"
              },
              {
                "kind": "PARAMETER",
                "name": "value"
              }
            ],
            "comment": {
              "body": "Sets a permission to the given value",
              "plain": "Sets a permission to the given value\n@param perm Permission to set\n@param value New value of the permission"
            }
          },
          {
            "kind": "METHOD",
            "name": "setRemovalCallback(org.bukkit.permissions.PermissionRemovedExecutor)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "ex"
              }
            ],
            "comment": {
              "body": "Sets an object to be called for when this attachment is removed from a\n \u003ca href\u003d\"org/bukkit/permissions/Permissible.html\" title\u003d\"interface in org.bukkit.permissions\"\u003e\u003ccode\u003ePermissible\u003c/code\u003e\u003c/a\u003e. May be null.",
              "plain": "Sets an object to be called for when this attachment is removed from a\n {@link Permissible}. May be null.\n@param ex Object to be called when this is removed"
            }
          },
          {
            "kind": "METHOD",
            "name": "unsetPermission(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ],
            "comment": {
              "body": "Removes the specified permission from this attachment.\n \u003cp\u003e\n If the permission does not exist in this attachment, nothing will\n happen.",
              "plain": "Removes the specified permission from this attachment.\n \u003cp\u003e\n If the permission does not exist in this attachment, nothing will\n happen.\n@param name Name of the permission to remove"
            }
          },
          {
            "kind": "METHOD",
            "name": "unsetPermission(org.bukkit.permissions.Permission)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "perm"
              }
            ],
            "comment": {
              "body": "Removes the specified permission from this attachment.\n \u003cp\u003e\n If the permission does not exist in this attachment, nothing will\n happen.",
              "plain": "Removes the specified permission from this attachment.\n \u003cp\u003e\n If the permission does not exist in this attachment, nothing will\n happen.\n@param perm Permission to remove"
            }
          }
        ],
        "comment": {
          "body": "Holds information about a permission attachment on a \u003ca href\u003d\"org/bukkit/permissions/Permissible.html\" title\u003d\"interface in org.bukkit.permissions\"\u003e\u003ccode\u003ePermissible\u003c/code\u003e\u003c/a\u003e\n object",
          "plain": "Holds information about a permission attachment on a {@link Permissible}\n object"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.permissions.PermissionAttachmentInfo",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PermissionAttachmentInfo(org.bukkit.permissions.Permissible,java.lang.String,org.bukkit.permissions.PermissionAttachment,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "attachment"
              },
              {
                "kind": "PARAMETER",
                "name": "permissible"
              },
              {
                "kind": "PARAMETER",
                "name": "permission"
              },
              {
                "kind": "PARAMETER",
                "name": "value"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "attachment"
          },
          {
            "kind": "METHOD",
            "name": "getAttachment()",
            "comment": {
              "body": "Gets the attachment providing this permission. This may be null for\n default permissions (usually parent permissions).",
              "tags": "Returns Attachment.",
              "plain": "Gets the attachment providing this permission. This may be null for\n default permissions (usually parent permissions).\n@return Attachment"
            }
          },
          {
            "kind": "METHOD",
            "name": "getPermissible()",
            "comment": {
              "body": "Gets the permissible this is attached to",
              "tags": "Returns Permissible this permission is for.",
              "plain": "Gets the permissible this is attached to\n@return Permissible this permission is for"
            }
          },
          {
            "kind": "METHOD",
            "name": "getPermission()",
            "comment": {
              "body": "Gets the permission being set",
              "tags": "Returns Name of the permission.",
              "plain": "Gets the permission being set\n@return Name of the permission"
            }
          },
          {
            "kind": "METHOD",
            "name": "getValue()",
            "comment": {
              "body": "Gets the value of this permission",
              "tags": "Returns Value of the permission.",
              "plain": "Gets the value of this permission\n@return Value of the permission"
            }
          },
          {
            "kind": "FIELD",
            "name": "permissible"
          },
          {
            "kind": "FIELD",
            "name": "permission"
          },
          {
            "kind": "FIELD",
            "name": "value"
          }
        ],
        "comment": {
          "body": "Holds information on a permission and which \u003ca href\u003d\"org/bukkit/permissions/PermissionAttachment.html\" title\u003d\"class in org.bukkit.permissions\"\u003e\u003ccode\u003ePermissionAttachment\u003c/code\u003e\u003c/a\u003e\n provides it",
          "plain": "Holds information on a permission and which {@link PermissionAttachment}\n provides it"
        }
      },
      {
        "kind": "ENUM",
        "name": "org.bukkit.permissions.PermissionDefault",
        "children": [
          {
            "kind": "ENUM_CONSTANT",
            "name": "FALSE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "NOT_OP"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "OP"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "PermissionDefault(java.lang.String...)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "names"
              }
            ]
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "TRUE"
          },
          {
            "kind": "METHOD",
            "name": "getByName(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ],
            "comment": {
              "body": "Looks up a PermissionDefault by name",
              "tags": "Returns Specified value, or null if not found.",
              "plain": "Looks up a PermissionDefault by name\n@param name Name of the default\n@return Specified value, or null if not found"
            }
          },
          {
            "kind": "METHOD",
            "name": "getValue(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "op"
              }
            ],
            "comment": {
              "body": "Calculates the value of this PermissionDefault for the given operator\n value",
              "tags": "Returns True if the default should be true, or false.",
              "plain": "Calculates the value of this PermissionDefault for the given operator\n value\n@param op If the target is op\n@return True if the default should be true, or false"
            }
          },
          {
            "kind": "FIELD",
            "name": "lookup"
          },
          {
            "kind": "FIELD",
            "name": "names"
          },
          {
            "kind": "METHOD",
            "name": "toString()"
          },
          {
            "kind": "METHOD",
            "name": "valueOf(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "values()"
          }
        ],
        "comment": {
          "body": "Represents the possible default values for permissions",
          "plain": "Represents the possible default values for permissions"
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.permissions.PermissionRemovedExecutor",
        "children": [
          {
            "kind": "METHOD",
            "name": "attachmentRemoved(org.bukkit.permissions.PermissionAttachment)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "attachment"
              }
            ],
            "comment": {
              "body": "Called when a \u003ca href\u003d\"org/bukkit/permissions/PermissionAttachment.html\" title\u003d\"class in org.bukkit.permissions\"\u003e\u003ccode\u003ePermissionAttachment\u003c/code\u003e\u003c/a\u003e is removed from a \u003ca href\u003d\"org/bukkit/permissions/Permissible.html\" title\u003d\"interface in org.bukkit.permissions\"\u003e\u003ccode\u003ePermissible\u003c/code\u003e\u003c/a\u003e",
              "plain": "Called when a {@link PermissionAttachment} is removed from a {@link Permissible}\n@param attachment Attachment which was removed"
            }
          }
        ],
        "comment": {
          "body": "Represents a class which is to be notified when a \u003ca href\u003d\"org/bukkit/permissions/PermissionAttachment.html\" title\u003d\"class in org.bukkit.permissions\"\u003e\u003ccode\u003ePermissionAttachment\u003c/code\u003e\u003c/a\u003e is removed from a \u003ca href\u003d\"org/bukkit/permissions/Permissible.html\" title\u003d\"interface in org.bukkit.permissions\"\u003e\u003ccode\u003ePermissible\u003c/code\u003e\u003c/a\u003e",
          "plain": "Represents a class which is to be notified when a {@link PermissionAttachment} is removed from a {@link Permissible}"
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.permissions.ServerOperator",
        "children": [
          {
            "kind": "METHOD",
            "name": "isOp()",
            "comment": {
              "body": "Checks if this object is a server operator",
              "tags": "Returns true if this is an operator, otherwise false.",
              "plain": "Checks if this object is a server operator\n@return true if this is an operator, otherwise false"
            }
          },
          {
            "kind": "METHOD",
            "name": "setOp(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "value"
              }
            ],
            "comment": {
              "body": "Sets the operator status of this object",
              "plain": "Sets the operator status of this object\n@param value New operator value"
            }
          }
        ],
        "comment": {
          "body": "Represents an object that may become a server operator, such as a \u003ca href\u003d\"org/bukkit/entity/Player.html\" title\u003d\"interface in org.bukkit.entity\"\u003e\u003ccode\u003ePlayer\u003c/code\u003e\u003c/a\u003e",
          "plain": "Represents an object that may become a server operator, such as a {@link Player}"
        }
      }
    ]
  },
  {
    "kind": "PACKAGE",
    "name": "org.bukkit.plugin",
    "children": [
      {
        "kind": "CLASS",
        "name": "org.bukkit.plugin.AuthorNagException",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "AuthorNagException(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "message"
              }
            ],
            "comment": {
              "body": "Constructs a new AuthorNagException based on the given Exception",
              "plain": "Constructs a new AuthorNagException based on the given Exception\n@param message Brief message explaining the cause of the exception"
            }
          },
          {
            "kind": "METHOD",
            "name": "getMessage()"
          },
          {
            "kind": "FIELD",
            "name": "message"
          }
        ]
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.plugin.EventExecutor",
        "children": [
          {
            "kind": "METHOD",
            "name": "create(java.lang.reflect.Method,java.lang.Class\u003c? extends org.bukkit.event.Event\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "eventClass"
              },
              {
                "kind": "PARAMETER",
                "name": "m"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "eventExecutorMap"
          },
          {
            "kind": "METHOD",
            "name": "execute(org.bukkit.event.Listener,org.bukkit.event.Event)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "event"
              },
              {
                "kind": "PARAMETER",
                "name": "listener"
              }
            ]
          }
        ],
        "comment": {
          "body": "Interface which defines the class for event call backs to plugins",
          "plain": "Interface which defines the class for event call backs to plugins"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.plugin.IllegalPluginAccessException",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "IllegalPluginAccessException()",
            "comment": {
              "body": "Creates a new instance of \u003ccode\u003eIllegalPluginAccessException\u003c/code\u003e\n without detail message.",
              "plain": "Creates a new instance of \u003ccode\u003eIllegalPluginAccessException\u003c/code\u003e\n without detail message."
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "IllegalPluginAccessException(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "msg"
              }
            ],
            "comment": {
              "body": "Constructs an instance of \u003ccode\u003eIllegalPluginAccessException\u003c/code\u003e\n with the specified detail message.",
              "plain": "Constructs an instance of \u003ccode\u003eIllegalPluginAccessException\u003c/code\u003e\n with the specified detail message.\n@param msg the detail message."
            }
          }
        ],
        "comment": {
          "body": "Thrown when a plugin attempts to interact with the server when it is not\n enabled",
          "plain": "Thrown when a plugin attempts to interact with the server when it is not\n enabled"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.plugin.InvalidDescriptionException",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "InvalidDescriptionException()",
            "comment": {
              "body": "Constructs a new InvalidDescriptionException",
              "plain": "Constructs a new InvalidDescriptionException"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "InvalidDescriptionException(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "message"
              }
            ],
            "comment": {
              "body": "Constructs a new InvalidDescriptionException with the given message",
              "plain": "Constructs a new InvalidDescriptionException with the given message\n@param message Brief message explaining the cause of the exception"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "InvalidDescriptionException(java.lang.Throwable)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cause"
              }
            ],
            "comment": {
              "body": "Constructs a new InvalidDescriptionException based on the given\n Exception",
              "plain": "Constructs a new InvalidDescriptionException based on the given\n Exception\n@param cause Exception that triggered this Exception"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "InvalidDescriptionException(java.lang.Throwable,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cause"
              },
              {
                "kind": "PARAMETER",
                "name": "message"
              }
            ],
            "comment": {
              "body": "Constructs a new InvalidDescriptionException based on the given\n Exception",
              "plain": "Constructs a new InvalidDescriptionException based on the given\n Exception\n@param message Brief message explaining the cause of the exception\n@param cause Exception that triggered this Exception"
            }
          },
          {
            "kind": "FIELD",
            "name": "serialVersionUID"
          }
        ],
        "comment": {
          "body": "Thrown when attempting to load an invalid PluginDescriptionFile",
          "plain": "Thrown when attempting to load an invalid PluginDescriptionFile"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.plugin.InvalidPluginException",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "InvalidPluginException()",
            "comment": {
              "body": "Constructs a new InvalidPluginException",
              "plain": "Constructs a new InvalidPluginException"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "InvalidPluginException(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "message"
              }
            ],
            "comment": {
              "body": "Constructs a new InvalidPluginException with the specified detail\n message",
              "plain": "Constructs a new InvalidPluginException with the specified detail\n message\n@param message TThe detail message is saved for later retrieval by the\n     getMessage() method."
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "InvalidPluginException(java.lang.String,java.lang.Throwable)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cause"
              },
              {
                "kind": "PARAMETER",
                "name": "message"
              }
            ],
            "comment": {
              "body": "Constructs a new InvalidPluginException with the specified detail\n message and cause.",
              "plain": "Constructs a new InvalidPluginException with the specified detail\n message and cause.\n@param message the detail message (which is saved for later retrieval\n     by the getMessage() method).\n@param cause the cause (which is saved for later retrieval by the\n     getCause() method). (A null value is permitted, and indicates that\n     the cause is nonexistent or unknown.)"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "InvalidPluginException(java.lang.Throwable)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cause"
              }
            ],
            "comment": {
              "body": "Constructs a new InvalidPluginException based on the given Exception",
              "plain": "Constructs a new InvalidPluginException based on the given Exception\n@param cause Exception that triggered this Exception"
            }
          },
          {
            "kind": "FIELD",
            "name": "serialVersionUID"
          }
        ],
        "comment": {
          "body": "Thrown when attempting to load an invalid Plugin file",
          "plain": "Thrown when attempting to load an invalid Plugin file"
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.plugin.Plugin",
        "children": [
          {
            "kind": "METHOD",
            "name": "getConfig()",
            "comment": {
              "body": "Gets a \u003ca href\u003d\"org/bukkit/configuration/file/FileConfiguration.html\" title\u003d\"class in org.bukkit.configuration.file\"\u003e\u003ccode\u003eFileConfiguration\u003c/code\u003e\u003c/a\u003e for this plugin, read through\n \"config.yml\"\n \u003cp\u003e\n If there is a default config.yml embedded in this plugin, it will be\n provided as a default for this Configuration.",
              "tags": "Returns Plugin configuration.",
              "plain": "Gets a {@link FileConfiguration} for this plugin, read through\n \"config.yml\"\n \u003cp\u003e\n If there is a default config.yml embedded in this plugin, it will be\n provided as a default for this Configuration.\n@return Plugin configuration"
            }
          },
          {
            "kind": "METHOD",
            "name": "getDataFolder()",
            "comment": {
              "body": "Returns the folder that the plugin data\u0027s files are located in. The\n folder may not yet exist.",
              "tags": "Returns The folder.",
              "plain": "Returns the folder that the plugin data\u0027s files are located in. The\n folder may not yet exist.\n@return The folder"
            }
          },
          {
            "kind": "METHOD",
            "name": "getDefaultWorldGenerator(java.lang.String,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "id"
              },
              {
                "kind": "PARAMETER",
                "name": "worldName"
              }
            ],
            "comment": {
              "body": "Gets a \u003ca href\u003d\"org/bukkit/generator/ChunkGenerator.html\" title\u003d\"class in org.bukkit.generator\"\u003e\u003ccode\u003eChunkGenerator\u003c/code\u003e\u003c/a\u003e for use in a default world, as specified\n in the server configuration",
              "tags": "Returns ChunkGenerator for use in the default world generation.",
              "plain": "Gets a {@link ChunkGenerator} for use in a default world, as specified\n in the server configuration\n@param worldName Name of the world that this will be applied to\n@param id Unique ID, if any, that was specified to indicate which\n     generator was requested\n@return ChunkGenerator for use in the default world generation"
            }
          },
          {
            "kind": "METHOD",
            "name": "getDescription()",
            "comment": {
              "body": "Returns the plugin.yaml file containing the details for this plugin",
              "tags": "Returns Contents of the plugin.yaml file.",
              "plain": "Returns the plugin.yaml file containing the details for this plugin\n@return Contents of the plugin.yaml file"
            }
          },
          {
            "kind": "METHOD",
            "name": "getLogger()",
            "comment": {
              "body": "Returns the plugin logger associated with this server\u0027s logger. The\n returned logger automatically tags all log messages with the plugin\u0027s\n name.",
              "tags": "Returns Logger associated with this plugin.",
              "plain": "Returns the plugin logger associated with this server\u0027s logger. The\n returned logger automatically tags all log messages with the plugin\u0027s\n name.\n@return Logger associated with this plugin"
            }
          },
          {
            "kind": "METHOD",
            "name": "getName()",
            "comment": {
              "body": "Returns the name of the plugin.\n \u003cp\u003e\n This should return the bare name of the plugin and should be used for\n comparison.",
              "tags": "Returns name of the plugin.",
              "plain": "Returns the name of the plugin.\n \u003cp\u003e\n This should return the bare name of the plugin and should be used for\n comparison.\n@return name of the plugin"
            }
          },
          {
            "kind": "METHOD",
            "name": "getPluginLoader()",
            "comment": {
              "body": "Gets the associated PluginLoader responsible for this plugin",
              "tags": "Returns PluginLoader that controls this plugin.",
              "plain": "Gets the associated PluginLoader responsible for this plugin\n@return PluginLoader that controls this plugin"
            }
          },
          {
            "kind": "METHOD",
            "name": "getResource(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "filename"
              }
            ],
            "comment": {
              "body": "Gets an embedded resource in this plugin",
              "tags": "Returns File if found, otherwise null.",
              "plain": "Gets an embedded resource in this plugin\n@param filename Filename of the resource\n@return File if found, otherwise null"
            }
          },
          {
            "kind": "METHOD",
            "name": "getSLF4JLogger()"
          },
          {
            "kind": "METHOD",
            "name": "getServer()",
            "comment": {
              "body": "Returns the Server instance currently running this plugin",
              "tags": "Returns Server running this plugin.",
              "plain": "Returns the Server instance currently running this plugin\n@return Server running this plugin"
            }
          },
          {
            "kind": "METHOD",
            "name": "isEnabled()",
            "comment": {
              "body": "Returns a value indicating whether or not this plugin is currently\n enabled",
              "tags": "Returns true if this plugin is enabled, otherwise false.",
              "plain": "Returns a value indicating whether or not this plugin is currently\n enabled\n@return true if this plugin is enabled, otherwise false"
            }
          },
          {
            "kind": "METHOD",
            "name": "isNaggable()",
            "comment": {
              "body": "Simple boolean if we can still nag to the logs about things",
              "tags": "Returns boolean whether we can nag.",
              "plain": "Simple boolean if we can still nag to the logs about things\n@return boolean whether we can nag"
            }
          },
          {
            "kind": "METHOD",
            "name": "onDisable()",
            "comment": {
              "body": "Called when this plugin is disabled",
              "plain": "Called when this plugin is disabled"
            }
          },
          {
            "kind": "METHOD",
            "name": "onEnable()",
            "comment": {
              "body": "Called when this plugin is enabled",
              "plain": "Called when this plugin is enabled"
            }
          },
          {
            "kind": "METHOD",
            "name": "onLoad()",
            "comment": {
              "body": "Called after a plugin is loaded but before it has been enabled.\n \u003cp\u003e\n When multiple plugins are loaded, the onLoad() for all plugins is\n called before any onEnable() is called.",
              "plain": "Called after a plugin is loaded but before it has been enabled.\n \u003cp\u003e\n When multiple plugins are loaded, the onLoad() for all plugins is\n called before any onEnable() is called."
            }
          },
          {
            "kind": "METHOD",
            "name": "reloadConfig()",
            "comment": {
              "body": "Discards any data in \u003ca href\u003d\"org/bukkit/plugin/Plugin.html#getConfig()\"\u003e\u003ccode\u003ePlugin.getConfig()\u003c/code\u003e\u003c/a\u003e and reloads from disk.",
              "plain": "Discards any data in {@link #getConfig()} and reloads from disk."
            }
          },
          {
            "kind": "METHOD",
            "name": "saveConfig()",
            "comment": {
              "body": "Saves the \u003ca href\u003d\"org/bukkit/configuration/file/FileConfiguration.html\" title\u003d\"class in org.bukkit.configuration.file\"\u003e\u003ccode\u003eFileConfiguration\u003c/code\u003e\u003c/a\u003e retrievable by \u003ca href\u003d\"org/bukkit/plugin/Plugin.html#getConfig()\"\u003e\u003ccode\u003ePlugin.getConfig()\u003c/code\u003e\u003c/a\u003e.",
              "plain": "Saves the {@link FileConfiguration} retrievable by {@link #getConfig()}."
            }
          },
          {
            "kind": "METHOD",
            "name": "saveDefaultConfig()",
            "comment": {
              "body": "Saves the raw contents of the default config.yml file to the location\n retrievable by \u003ca href\u003d\"org/bukkit/plugin/Plugin.html#getConfig()\"\u003e\u003ccode\u003ePlugin.getConfig()\u003c/code\u003e\u003c/a\u003e.\n \u003cp\u003e\n This should fail silently if the config.yml already exists.",
              "plain": "Saves the raw contents of the default config.yml file to the location\n retrievable by {@link #getConfig()}.\n \u003cp\u003e\n This should fail silently if the config.yml already exists."
            }
          },
          {
            "kind": "METHOD",
            "name": "saveResource(java.lang.String,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "replace"
              },
              {
                "kind": "PARAMETER",
                "name": "resourcePath"
              }
            ],
            "comment": {
              "body": "Saves the raw contents of any resource embedded with a plugin\u0027s .jar\n file assuming it can be found using \u003ca href\u003d\"org/bukkit/plugin/Plugin.html#getResource(java.lang.String)\"\u003e\u003ccode\u003ePlugin.getResource(String)\u003c/code\u003e\u003c/a\u003e.\n \u003cp\u003e\n The resource is saved into the plugin\u0027s data folder using the same\n hierarchy as the .jar file (subdirectories are preserved).",
              "plain": "Saves the raw contents of any resource embedded with a plugin\u0027s .jar\n file assuming it can be found using {@link #getResource(String)}.\n \u003cp\u003e\n The resource is saved into the plugin\u0027s data folder using the same\n hierarchy as the .jar file (subdirectories are preserved).\n@param resourcePath the embedded resource path to look for within the\n     plugin\u0027s .jar file. (No preceding slash).\n@param replace if true, the embedded resource will overwrite the\n     contents of an existing file.\n@throws IllegalArgumentException if the resource path is null, empty,\n     or points to a nonexistent resource."
            }
          },
          {
            "kind": "METHOD",
            "name": "setNaggable(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "canNag"
              }
            ],
            "comment": {
              "body": "Set naggable state",
              "plain": "Set naggable state\n@param canNag is this plugin still naggable?"
            }
          }
        ],
        "comment": {
          "body": "Represents a Plugin\n \u003cp\u003e\n The use of \u003ca href\u003d\"org/bukkit/plugin/PluginBase.html\" title\u003d\"class in org.bukkit.plugin\"\u003e\u003ccode\u003ePluginBase\u003c/code\u003e\u003c/a\u003e is recommended for actual Implementation",
          "plain": "Represents a Plugin\n \u003cp\u003e\n The use of {@link PluginBase} is recommended for actual Implementation"
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.plugin.PluginAwareness",
        "children": [
          {
            "kind": "ENUM",
            "name": "org.bukkit.plugin.PluginAwareness.Flags",
            "children": [
              {
                "kind": "CONSTRUCTOR",
                "name": "Flags()"
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "UTF8",
                "deprecated": {
                  "deprecated": "true"
                },
                "comment": {
                  "body": "This specifies that all (text) resources stored in a plugin\u0027s jar\n use UTF-8 encoding.",
                  "plain": "This specifies that all (text) resources stored in a plugin\u0027s jar\n use UTF-8 encoding.\n@deprecated all plugins are now assumed to be UTF-8 aware."
                }
              },
              {
                "kind": "METHOD",
                "name": "valueOf(java.lang.String)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "name"
                  }
                ]
              },
              {
                "kind": "METHOD",
                "name": "values()"
              }
            ],
            "comment": {
              "body": "Each entry here represents a particular plugin\u0027s awareness. These can\n be checked by using \u003ca href\u003d\"org/bukkit/plugin/PluginDescriptionFile.html#getAwareness()\"\u003e\u003ccode\u003ePluginDescriptionFile.getAwareness()\u003c/code\u003e\u003c/a\u003e.\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/util/Set.html#contains(java.lang.Object)\" title\u003d\"class or interface in java.util\" class\u003d\"external-link\"\u003e\u003ccode\u003econtains(flag)\u003c/code\u003e\u003c/a\u003e.",
              "plain": "Each entry here represents a particular plugin\u0027s awareness. These can\n be checked by using {@link PluginDescriptionFile#getAwareness()}.{@link Set#contains(Object) contains(flag)}."
            }
          }
        ],
        "comment": {
          "body": "Represents a concept that a plugin is aware of.\n \u003cp\u003e\n The internal representation may be singleton, or be a parameterized\n instance, but must be immutable.",
          "plain": "Represents a concept that a plugin is aware of.\n \u003cp\u003e\n The internal representation may be singleton, or be a parameterized\n instance, but must be immutable."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.plugin.PluginBase",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PluginBase()"
          },
          {
            "kind": "METHOD",
            "name": "equals(java.lang.Object)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "obj"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getName()"
          },
          {
            "kind": "METHOD",
            "name": "hashCode()"
          }
        ],
        "comment": {
          "body": "Represents a base \u003ca href\u003d\"org/bukkit/plugin/Plugin.html\" title\u003d\"interface in org.bukkit.plugin\"\u003e\u003ccode\u003ePlugin\u003c/code\u003e\u003c/a\u003e\n \u003cp\u003e\n Extend this class if your plugin is not a \u003ca href\u003d\"org/bukkit/plugin/java/JavaPlugin.html\" title\u003d\"class in org.bukkit.plugin.java\"\u003e\u003ccode\u003eJavaPlugin\u003c/code\u003e\u003c/a\u003e",
          "plain": "Represents a base {@link Plugin}\n \u003cp\u003e\n Extend this class if your plugin is not a {@link org.bukkit.plugin.java.JavaPlugin}"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.plugin.PluginDescriptionFile",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PluginDescriptionFile(java.io.InputStream)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "stream"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "PluginDescriptionFile(java.io.Reader)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "reader"
              }
            ],
            "comment": {
              "body": "Loads a PluginDescriptionFile from the specified reader",
              "plain": "Loads a PluginDescriptionFile from the specified reader\n@param reader The reader\n@throws InvalidDescriptionException If the PluginDescriptionFile is\n     invalid"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "PluginDescriptionFile(java.lang.String,java.lang.String,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "mainClass"
              },
              {
                "kind": "PARAMETER",
                "name": "pluginName"
              },
              {
                "kind": "PARAMETER",
                "name": "pluginVersion"
              }
            ],
            "comment": {
              "body": "Creates a new PluginDescriptionFile with the given detailed",
              "plain": "Creates a new PluginDescriptionFile with the given detailed\n@param pluginName Name of this plugin\n@param pluginVersion Version of this plugin\n@param mainClass Full location of the main class of this plugin"
            }
          },
          {
            "kind": "FIELD",
            "name": "VALID_NAME"
          },
          {
            "kind": "FIELD",
            "name": "YAML"
          },
          {
            "kind": "METHOD",
            "name": "asMap(java.lang.Object)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "object"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "authors"
          },
          {
            "kind": "FIELD",
            "name": "awareness"
          },
          {
            "kind": "FIELD",
            "name": "classLoaderOf"
          },
          {
            "kind": "FIELD",
            "name": "commands"
          },
          {
            "kind": "FIELD",
            "name": "defaultPerm"
          },
          {
            "kind": "FIELD",
            "name": "depend"
          },
          {
            "kind": "FIELD",
            "name": "description"
          },
          {
            "kind": "METHOD",
            "name": "getAuthors()",
            "comment": {
              "body": "Gives the list of authors for the plugin.\n \u003cul\u003e\n \u003cli\u003eGives credit to the developer.\n \u003cli\u003eUsed in some server error messages to provide helpful feedback on\n     who to contact when an error occurs.\n \u003cli\u003eA bukkit.org forum handle or email address is recommended.\n \u003cli\u003eIs displayed when a user types \u003ccode\u003e/version PluginName\u003c/code\u003e\n \u003cli\u003e\u003ccode\u003eauthors\u003c/code\u003e must be in \u003ca href\u003d\"http://en.wikipedia.org/wiki/YAML#Lists\"\u003eYAML list\n     format\u003c/a\u003e.\n \u003c/ul\u003e\n \u003cp\u003e\n In the plugin.yml, this has two entries, \u003ccode\u003eauthor\u003c/code\u003e and\n \u003ccode\u003eauthors\u003c/code\u003e.\n \u003cp\u003e\n Single author example:\n \u003cblockquote\u003e\u003cpre\u003eauthor: CaptainInflamo\u003c/pre\u003e\u003c/blockquote\u003e\n Multiple author example:\n \u003cblockquote\u003e\u003cpre\u003eauthors: [Cogito, verrier, EvilSeph]\u003c/pre\u003e\u003c/blockquote\u003e\n When both are specified, author will be the first entry in the list, so\n this example:\n \u003cblockquote\u003e\u003cpre\u003eauthor: Grum\nauthors:\n- feildmaster\n- amaranth\u003c/pre\u003e\u003c/blockquote\u003e\n Is equivilant to this example:\n \u003cpre\u003eauthors: [Grum, feildmaster, aramanth]\u003c/pre\u003e",
              "tags": "Returns an immutable list of the plugin\u0027s authors.",
              "plain": "Gives the list of authors for the plugin.\n \u003cul\u003e\n \u003cli\u003eGives credit to the developer.\n \u003cli\u003eUsed in some server error messages to provide helpful feedback on\n     who to contact when an error occurs.\n \u003cli\u003eA bukkit.org forum handle or email address is recommended.\n \u003cli\u003eIs displayed when a user types \u003ccode\u003e/version PluginName\u003c/code\u003e\n \u003cli\u003e\u003ccode\u003eauthors\u003c/code\u003e must be in \u003ca href\u003d\"http://en.wikipedia.org/wiki/YAML#Lists\"\u003eYAML list\n     format\u003c/a\u003e.\n \u003c/ul\u003e\n \u003cp\u003e\n In the plugin.yml, this has two entries, \u003ccode\u003eauthor\u003c/code\u003e and\n \u003ccode\u003eauthors\u003c/code\u003e.\n \u003cp\u003e\n Single author example:\n \u003cblockquote\u003e\u003cpre\u003eauthor: CaptainInflamo\u003c/pre\u003e\u003c/blockquote\u003e\n Multiple author example:\n \u003cblockquote\u003e\u003cpre\u003eauthors: [Cogito, verrier, EvilSeph]\u003c/pre\u003e\u003c/blockquote\u003e\n When both are specified, author will be the first entry in the list, so\n this example:\n \u003cblockquote\u003e\u003cpre\u003eauthor: Grum\nauthors:\n- feildmaster\n- amaranth\u003c/pre\u003e\u003c/blockquote\u003e\n Is equivilant to this example:\n \u003cpre\u003eauthors: [Grum, feildmaster, aramanth]\u003c/pre\u003e\n@return an immutable list of the plugin\u0027s authors"
            }
          },
          {
            "kind": "METHOD",
            "name": "getAwareness()",
            "comment": {
              "body": "Gives a set of every \u003ca href\u003d\"org/bukkit/plugin/PluginAwareness.html\" title\u003d\"interface in org.bukkit.plugin\"\u003e\u003ccode\u003ePluginAwareness\u003c/code\u003e\u003c/a\u003e for a plugin. An awareness\n dictates something that a plugin developer acknowledges when the plugin\n is compiled. Some implementions may define extra awarenesses that are\n not included in the API. Any unrecognized\n awareness (one unsupported or in a future version) will cause a dummy\n object to be created instead of failing.\n \n \u003cul\u003e\n \u003cli\u003eCurrently only supports the enumerated values in \u003ca href\u003d\"org/bukkit/plugin/PluginAwareness.Flags.html\" title\u003d\"enum in org.bukkit.plugin\"\u003e\u003ccode\u003ePluginAwareness.Flags\u003c/code\u003e\u003c/a\u003e.\n \u003cli\u003eEach awareness starts the identifier with bang-at\n     (\u003ccode\u003e!@\u003c/code\u003e).\n \u003cli\u003eUnrecognized (future / unimplemented) entries are quietly replaced\n     by a generic object that implements PluginAwareness.\n \u003cli\u003eA type of awareness must be defined by the runtime and acknowledged\n     by the API, effectively discluding any derived type from any\n     plugin\u0027s classpath.\n \u003cli\u003e\u003ccode\u003eawareness\u003c/code\u003e must be in \u003ca href\u003d\"http://en.wikipedia.org/wiki/YAML#Lists\"\u003eYAML list\n     format\u003c/a\u003e.\n \u003c/ul\u003e\n \u003cp\u003e\n In the plugin.yml, this entry is named \u003ccode\u003eawareness\u003c/code\u003e.\n \u003cp\u003e\n Example:\u003cblockquote\u003e\u003cpre\u003eawareness:\n- !@UTF8\u003c/pre\u003e\u003c/blockquote\u003e\n \u003cp\u003e\n \u003cb\u003eNote:\u003c/b\u003e Although unknown versions of some future awareness are\n gracefully substituted, previous versions of Bukkit (ones prior to the\n first implementation of awareness) will fail to load a plugin that\n defines any awareness.",
              "tags": "Returns a set containing every awareness for the plugin.",
              "plain": "Gives a set of every {@link PluginAwareness} for a plugin. An awareness\n dictates something that a plugin developer acknowledges when the plugin\n is compiled. Some implementions may define extra awarenesses that are\n not included in the API. Any unrecognized\n awareness (one unsupported or in a future version) will cause a dummy\n object to be created instead of failing.\n \n \u003cul\u003e\n \u003cli\u003eCurrently only supports the enumerated values in {@link PluginAwareness.Flags}.\n \u003cli\u003eEach awareness starts the identifier with bang-at\n     (\u003ccode\u003e!@\u003c/code\u003e).\n \u003cli\u003eUnrecognized (future / unimplemented) entries are quietly replaced\n     by a generic object that implements PluginAwareness.\n \u003cli\u003eA type of awareness must be defined by the runtime and acknowledged\n     by the API, effectively discluding any derived type from any\n     plugin\u0027s classpath.\n \u003cli\u003e\u003ccode\u003eawareness\u003c/code\u003e must be in \u003ca href\u003d\"http://en.wikipedia.org/wiki/YAML#Lists\"\u003eYAML list\n     format\u003c/a\u003e.\n \u003c/ul\u003e\n \u003cp\u003e\n In the plugin.yml, this entry is named \u003ccode\u003eawareness\u003c/code\u003e.\n \u003cp\u003e\n Example:\u003cblockquote\u003e\u003cpre\u003eawareness:\n- !@UTF8\u003c/pre\u003e\u003c/blockquote\u003e\n \u003cp\u003e\n \u003cb\u003eNote:\u003c/b\u003e Although unknown versions of some future awareness are\n gracefully substituted, previous versions of Bukkit (ones prior to the\n first implementation of awareness) will fail to load a plugin that\n defines any awareness.\n@return a set containing every awareness for the plugin"
            }
          },
          {
            "kind": "METHOD",
            "name": "getClassLoaderOf()",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "tags": "Returns unused.",
              "plain": "@return unused\n@deprecated unused"
            }
          },
          {
            "kind": "METHOD",
            "name": "getCommands()",
            "comment": {
              "body": "Gives the map of command-name to command-properties. Each entry in this\n map corresponds to a single command and the respective values are the\n properties of the command. Each property, \u003ci\u003ewith the exception of\n aliases\u003c/i\u003e, can be defined at runtime using methods in \u003ca href\u003d\"org/bukkit/command/PluginCommand.html\" title\u003d\"class in org.bukkit.command\"\u003e\u003ccode\u003ePluginCommand\u003c/code\u003e\u003c/a\u003e and are defined here only as a convenience.\n \u003ctable border\u003d1\u003e\n \u003ccaption\u003eThe command section\u0027s description\u003c/caption\u003e\n \u003ctr\u003e\n     \u003cth\u003eNode\u003c/th\u003e\n     \u003cth\u003eMethod\u003c/th\u003e\n     \u003cth\u003eType\u003c/th\u003e\n     \u003cth\u003eDescription\u003c/th\u003e\n     \u003cth\u003eExample\u003c/th\u003e\n \u003c/tr\u003e\u003ctr\u003e\n     \u003ctd\u003e\u003ccode\u003edescription\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003e\u003ca href\u003d\"org/bukkit/command/Command.html#setDescription(java.lang.String)\"\u003e\u003ccode\u003eCommand.setDescription(String)\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n     \u003ctd\u003eString\u003c/td\u003e\n     \u003ctd\u003eA user-friendly description for a command. It is useful for\n         documentation purposes as well as in-game help.\u003c/td\u003e\n     \u003ctd\u003e\u003cblockquote\u003e\u003cpre\u003edescription: Set yourself on fire\u003c/pre\u003e\u003c/blockquote\u003e\u003c/td\u003e\n \u003c/tr\u003e\u003ctr\u003e\n     \u003ctd\u003e\u003ccode\u003ealiases\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003e\u003ca href\u003d\"org/bukkit/command/Command.html#setAliases(java.util.List)\"\u003e\u003ccode\u003eCommand.setAliases(List)\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n     \u003ctd\u003eString or \u003ca href\u003d\"http://en.wikipedia.org/wiki/YAML#Lists\"\u003eList\u003c/a\u003e of\n         strings\u003c/td\u003e\n     \u003ctd\u003eAlternative command names, with special usefulness for commands\n         that are already registered. \u003ci\u003eAliases are not effective when\n         defined at runtime,\u003c/i\u003e so the plugin description file is the\n         only way to have them properly defined.\n         \u003cp\u003e\n         Note: Command aliases may not have a colon in them.\u003c/td\u003e\n     \u003ctd\u003eSingle alias format:\n         \u003cblockquote\u003e\u003cpre\u003ealiases: combust_me\u003c/pre\u003e\u003c/blockquote\u003e or\n         multiple alias format:\n         \u003cblockquote\u003e\u003cpre\u003ealiases: [combust_me, combustMe]\u003c/pre\u003e\u003c/blockquote\u003e\u003c/td\u003e\n \u003c/tr\u003e\u003ctr\u003e\n     \u003ctd\u003e\u003ccode\u003epermission\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003e\u003ca href\u003d\"org/bukkit/command/Command.html#setPermission(java.lang.String)\"\u003e\u003ccode\u003eCommand.setPermission(String)\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n     \u003ctd\u003eString\u003c/td\u003e\n     \u003ctd\u003eThe name of the \u003ca href\u003d\"org/bukkit/permissions/Permission.html\" title\u003d\"class in org.bukkit.permissions\"\u003e\u003ccode\u003ePermission\u003c/code\u003e\u003c/a\u003e required to use the command.\n         A user without the permission will receive the specified\n         message (see \u003ca href\u003d\"org/bukkit/command/Command.html#setPermissionMessage(java.lang.String)\"\u003ebelow\u003c/a\u003e), or a\n         standard one if no specific message is defined. Without the\n         permission node, no \u003ca href\u003d\"org/bukkit/command/PluginCommand.html#setExecutor(org.bukkit.command.CommandExecutor)\"\u003e\u003ccode\u003eCommandExecutor\u003c/code\u003e\u003c/a\u003e or\n         \u003ca href\u003d\"org/bukkit/command/PluginCommand.html#setTabCompleter(org.bukkit.command.TabCompleter)\"\u003e\u003ccode\u003eTabCompleter\u003c/code\u003e\u003c/a\u003e will be called.\u003c/td\u003e\n     \u003ctd\u003e\u003cblockquote\u003e\u003cpre\u003epermission: inferno.flagrate\u003c/pre\u003e\u003c/blockquote\u003e\u003c/td\u003e\n \u003c/tr\u003e\u003ctr\u003e\n     \u003ctd\u003e\u003ccode\u003epermission-message\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003e\u003ca href\u003d\"org/bukkit/command/Command.html#setPermissionMessage(java.lang.String)\"\u003e\u003ccode\u003eCommand.setPermissionMessage(String)\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n     \u003ctd\u003eString\u003c/td\u003e\n     \u003ctd\u003e\u003cul\u003e\n         \u003cli\u003eDisplayed to a player that attempts to use a command, but\n             does not have the required permission. See \u003ca href\u003d\"org/bukkit/command/Command.html#getPermission()\"\u003e\u003ccode\u003eabove\u003c/code\u003e\u003c/a\u003e.\n         \u003cli\u003e\u0026lt;permission\u0026gt; is a macro that is replaced with the\n             permission node required to use the command.\n         \u003cli\u003eUsing empty quotes is a valid way to indicate nothing\n             should be displayed to a player.\n         \u003c/ul\u003e\u003c/td\u003e\n     \u003ctd\u003e\u003cblockquote\u003e\u003cpre\u003epermission-message: You do not have /\u0026lt;permission\u0026gt;\u003c/pre\u003e\u003c/blockquote\u003e\u003c/td\u003e\n \u003c/tr\u003e\u003ctr\u003e\n     \u003ctd\u003e\u003ccode\u003eusage\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003e\u003ca href\u003d\"org/bukkit/command/Command.html#setUsage(java.lang.String)\"\u003e\u003ccode\u003eCommand.setUsage(String)\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n     \u003ctd\u003eString\u003c/td\u003e\n     \u003ctd\u003eThis message is displayed to a player when the \u003ca href\u003d\"org/bukkit/command/PluginCommand.html#setExecutor(org.bukkit.command.CommandExecutor)\"\u003e\u003ccode\u003ePluginCommand.setExecutor(CommandExecutor)\u003c/code\u003e\u003c/a\u003e \u003ca href\u003d\"org/bukkit/command/CommandExecutor.html#onCommand(org.bukkit.command.CommandSender,org.bukkit.command.Command,java.lang.String,java.lang.String%5B%5D)\"\u003ereturns false\u003c/a\u003e. \u0026lt;command\u0026gt; is a macro that is replaced\n         the command issued.\u003c/td\u003e\n     \u003ctd\u003e\u003cblockquote\u003e\u003cpre\u003eusage: Syntax error! Perhaps you meant /\u0026lt;command\u0026gt; PlayerName?\u003c/pre\u003e\u003c/blockquote\u003e\n         It is worth noting that to use a colon in a yaml, like\n         \u003ccode\u003e`usage: Usage: /god [player]\u0027\u003c/code\u003e, you need to\n         \u003ca href\u003d\"http://yaml.org/spec/current.html#id2503232\"\u003esurround\n         the message with double-quote\u003c/a\u003e:\n         \u003cblockquote\u003e\u003cpre\u003eusage: \"Usage: /god [player]\"\u003c/pre\u003e\u003c/blockquote\u003e\u003c/td\u003e\n \u003c/tr\u003e\n \u003c/table\u003e\n The commands are structured as a hiearchy of \u003ca href\u003d\"http://yaml.org/spec/current.html#id2502325\"\u003enested mappings\u003c/a\u003e.\n The primary (top-level, no intendentation) node is\n `\u003ccode\u003ecommands\u003c/code\u003e\u0027, while each individual command name is\n indented, indicating it maps to some value (in our case, the\n properties of the table above).\n \u003cp\u003e\n Here is an example bringing together the piecemeal examples above, as\n well as few more definitions:\u003cblockquote\u003e\u003cpre\u003e\ncommands:\n  flagrate:\n    description: Set yourself on fire.\n    aliases: [combust_me, combustMe]\n    permission: inferno.flagrate\n    permission-message: You do not have /\u0026lt;permission\u0026gt;\n    usage: Syntax error! Perhaps you meant /\u0026lt;command\u0026gt; PlayerName?\n  burningdeaths:\n    description: List how many times you have died by fire.\n    aliases:\n    - burning_deaths\n    - burningDeaths\n    permission: inferno.burningdeaths\n    usage: |\n      /\u0026lt;command\u0026gt; [player]\n      Example: /\u0026lt;command\u0026gt; - see how many times you have burned to death\n      Example: /\u0026lt;command\u0026gt; CaptainIce - see how many times CaptainIce has burned to death\n  # The next command has no description, aliases, etc. defined, but is still valid\n  # Having an empty declaration is useful for defining the description, permission, and messages from a configuration dynamically\n  apocalypse:\n\u003c/pre\u003e\u003c/blockquote\u003e\n Note: Command names may not have a colon in their name.",
              "tags": "Returns the commands this plugin will register.",
              "plain": "Gives the map of command-name to command-properties. Each entry in this\n map corresponds to a single command and the respective values are the\n properties of the command. Each property, \u003ci\u003ewith the exception of\n aliases\u003c/i\u003e, can be defined at runtime using methods in {@link PluginCommand} and are defined here only as a convenience.\n \u003ctable border\u003d1\u003e\n \u003ccaption\u003eThe command section\u0027s description\u003c/caption\u003e\n \u003ctr\u003e\n     \u003cth\u003eNode\u003c/th\u003e\n     \u003cth\u003eMethod\u003c/th\u003e\n     \u003cth\u003eType\u003c/th\u003e\n     \u003cth\u003eDescription\u003c/th\u003e\n     \u003cth\u003eExample\u003c/th\u003e\n \u003c/tr\u003e\u003ctr\u003e\n     \u003ctd\u003e\u003ccode\u003edescription\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003e{@link PluginCommand#setDescription(String)}\u003c/td\u003e\n     \u003ctd\u003eString\u003c/td\u003e\n     \u003ctd\u003eA user-friendly description for a command. It is useful for\n         documentation purposes as well as in-game help.\u003c/td\u003e\n     \u003ctd\u003e\u003cblockquote\u003e\u003cpre\u003edescription: Set yourself on fire\u003c/pre\u003e\u003c/blockquote\u003e\u003c/td\u003e\n \u003c/tr\u003e\u003ctr\u003e\n     \u003ctd\u003e\u003ccode\u003ealiases\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003e{@link PluginCommand#setAliases(List)}\u003c/td\u003e\n     \u003ctd\u003eString or \u003ca href\u003d\"http://en.wikipedia.org/wiki/YAML#Lists\"\u003eList\u003c/a\u003e of\n         strings\u003c/td\u003e\n     \u003ctd\u003eAlternative command names, with special usefulness for commands\n         that are already registered. \u003ci\u003eAliases are not effective when\n         defined at runtime,\u003c/i\u003e so the plugin description file is the\n         only way to have them properly defined.\n         \u003cp\u003e\n         Note: Command aliases may not have a colon in them.\u003c/td\u003e\n     \u003ctd\u003eSingle alias format:\n         \u003cblockquote\u003e\u003cpre\u003ealiases: combust_me\u003c/pre\u003e\u003c/blockquote\u003e or\n         multiple alias format:\n         \u003cblockquote\u003e\u003cpre\u003ealiases: [combust_me, combustMe]\u003c/pre\u003e\u003c/blockquote\u003e\u003c/td\u003e\n \u003c/tr\u003e\u003ctr\u003e\n     \u003ctd\u003e\u003ccode\u003epermission\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003e{@link PluginCommand#setPermission(String)}\u003c/td\u003e\n     \u003ctd\u003eString\u003c/td\u003e\n     \u003ctd\u003eThe name of the {@link Permission} required to use the command.\n         A user without the permission will receive the specified\n         message (see {@linkplain PluginCommand#setPermissionMessage(String) below}), or a\n         standard one if no specific message is defined. Without the\n         permission node, no {@link PluginCommand#setExecutor(CommandExecutor) CommandExecutor} or\n         {@link PluginCommand#setTabCompleter(TabCompleter) TabCompleter} will be called.\u003c/td\u003e\n     \u003ctd\u003e\u003cblockquote\u003e\u003cpre\u003epermission: inferno.flagrate\u003c/pre\u003e\u003c/blockquote\u003e\u003c/td\u003e\n \u003c/tr\u003e\u003ctr\u003e\n     \u003ctd\u003e\u003ccode\u003epermission-message\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003e{@link PluginCommand#setPermissionMessage(String)}\u003c/td\u003e\n     \u003ctd\u003eString\u003c/td\u003e\n     \u003ctd\u003e\u003cul\u003e\n         \u003cli\u003eDisplayed to a player that attempts to use a command, but\n             does not have the required permission. See {@link PluginCommand#getPermission() above}.\n         \u003cli\u003e\u0026lt;permission\u0026gt; is a macro that is replaced with the\n             permission node required to use the command.\n         \u003cli\u003eUsing empty quotes is a valid way to indicate nothing\n             should be displayed to a player.\n         \u003c/ul\u003e\u003c/td\u003e\n     \u003ctd\u003e\u003cblockquote\u003e\u003cpre\u003epermission-message: You do not have /\u0026lt;permission\u0026gt;\u003c/pre\u003e\u003c/blockquote\u003e\u003c/td\u003e\n \u003c/tr\u003e\u003ctr\u003e\n     \u003ctd\u003e\u003ccode\u003eusage\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003e{@link PluginCommand#setUsage(String)}\u003c/td\u003e\n     \u003ctd\u003eString\u003c/td\u003e\n     \u003ctd\u003eThis message is displayed to a player when the {@link PluginCommand#setExecutor(CommandExecutor)} {@linkplain CommandExecutor#onCommand(CommandSender,Command,String,String[]) returns false}. \u0026lt;command\u0026gt; is a macro that is replaced\n         the command issued.\u003c/td\u003e\n     \u003ctd\u003e\u003cblockquote\u003e\u003cpre\u003eusage: Syntax error! Perhaps you meant /\u0026lt;command\u0026gt; PlayerName?\u003c/pre\u003e\u003c/blockquote\u003e\n         It is worth noting that to use a colon in a yaml, like\n         \u003ccode\u003e`usage: Usage: /god [player]\u0027\u003c/code\u003e, you need to\n         \u003ca href\u003d\"http://yaml.org/spec/current.html#id2503232\"\u003esurround\n         the message with double-quote\u003c/a\u003e:\n         \u003cblockquote\u003e\u003cpre\u003eusage: \"Usage: /god [player]\"\u003c/pre\u003e\u003c/blockquote\u003e\u003c/td\u003e\n \u003c/tr\u003e\n \u003c/table\u003e\n The commands are structured as a hiearchy of \u003ca href\u003d\"http://yaml.org/spec/current.html#id2502325\"\u003enested mappings\u003c/a\u003e.\n The primary (top-level, no intendentation) node is\n `\u003ccode\u003ecommands\u003c/code\u003e\u0027, while each individual command name is\n indented, indicating it maps to some value (in our case, the\n properties of the table above).\n \u003cp\u003e\n Here is an example bringing together the piecemeal examples above, as\n well as few more definitions:\u003cblockquote\u003e\u003cpre\u003e\ncommands:\n  flagrate:\n    description: Set yourself on fire.\n    aliases: [combust_me, combustMe]\n    permission: inferno.flagrate\n    permission-message: You do not have /\u0026lt;permission\u0026gt;\n    usage: Syntax error! Perhaps you meant /\u0026lt;command\u0026gt; PlayerName?\n  burningdeaths:\n    description: List how many times you have died by fire.\n    aliases:\n    - burning_deaths\n    - burningDeaths\n    permission: inferno.burningdeaths\n    usage: |\n      /\u0026lt;command\u0026gt; [player]\n      Example: /\u0026lt;command\u0026gt; - see how many times you have burned to death\n      Example: /\u0026lt;command\u0026gt; CaptainIce - see how many times CaptainIce has burned to death\n  # The next command has no description, aliases, etc. defined, but is still valid\n  # Having an empty declaration is useful for defining the description, permission, and messages from a configuration dynamically\n  apocalypse:\n\u003c/pre\u003e\u003c/blockquote\u003e\n Note: Command names may not have a colon in their name.\n@return the commands this plugin will register"
            }
          },
          {
            "kind": "METHOD",
            "name": "getDepend()",
            "comment": {
              "body": "Gives a list of other plugins that the plugin requires.\n \u003cul\u003e\n \u003cli\u003eUse the value in the \u003ca href\u003d\"org/bukkit/plugin/PluginDescriptionFile.html#getName()\"\u003e\u003ccode\u003ePluginDescriptionFile.getName()\u003c/code\u003e\u003c/a\u003e of the target plugin to\n     specify the dependency.\n \u003cli\u003eIf any plugin listed here is not found, your plugin will fail to\n     load at startup.\n \u003cli\u003eIf multiple plugins list each other in \u003ccode\u003edepend\u003c/code\u003e,\n     creating a network with no individual plugin does not list another\n     plugin in the \u003ca href\u003dhttps://en.wikipedia.org/wiki/Circular_dependency\u003enetwork\u003c/a\u003e,\n     all plugins in that network will fail.\n \u003cli\u003e\u003ccode\u003edepend\u003c/code\u003e must be in must be in \u003ca href\u003d\"http://en.wikipedia.org/wiki/YAML#Lists\"\u003eYAML list\n     format\u003c/a\u003e.\n \u003c/ul\u003e\n \u003cp\u003e\n In the plugin.yml, this entry is named \u003ccode\u003edepend\u003c/code\u003e.\n \u003cp\u003e\n Example:\n \u003cblockquote\u003e\u003cpre\u003edepend:\n- OnePlugin\n- AnotherPlugin\u003c/pre\u003e\u003c/blockquote\u003e",
              "tags": "Returns immutable list of the plugin\u0027s dependencies.",
              "plain": "Gives a list of other plugins that the plugin requires.\n \u003cul\u003e\n \u003cli\u003eUse the value in the {@link #getName()} of the target plugin to\n     specify the dependency.\n \u003cli\u003eIf any plugin listed here is not found, your plugin will fail to\n     load at startup.\n \u003cli\u003eIf multiple plugins list each other in \u003ccode\u003edepend\u003c/code\u003e,\n     creating a network with no individual plugin does not list another\n     plugin in the \u003ca href\u003dhttps://en.wikipedia.org/wiki/Circular_dependency\u003enetwork\u003c/a\u003e,\n     all plugins in that network will fail.\n \u003cli\u003e\u003ccode\u003edepend\u003c/code\u003e must be in must be in \u003ca href\u003d\"http://en.wikipedia.org/wiki/YAML#Lists\"\u003eYAML list\n     format\u003c/a\u003e.\n \u003c/ul\u003e\n \u003cp\u003e\n In the plugin.yml, this entry is named \u003ccode\u003edepend\u003c/code\u003e.\n \u003cp\u003e\n Example:\n \u003cblockquote\u003e\u003cpre\u003edepend:\n- OnePlugin\n- AnotherPlugin\u003c/pre\u003e\u003c/blockquote\u003e\n@return immutable list of the plugin\u0027s dependencies"
            }
          },
          {
            "kind": "METHOD",
            "name": "getDescription()",
            "comment": {
              "body": "Gives a human-friendly description of the functionality the plugin\n provides.\n \u003cul\u003e\n \u003cli\u003eThe description can have multiple lines.\n \u003cli\u003eDisplayed when a user types \u003ccode\u003e/version PluginName\u003c/code\u003e\n \u003c/ul\u003e\n \u003cp\u003e\n In the plugin.yml, this entry is named \u003ccode\u003edescription\u003c/code\u003e.\n \u003cp\u003e\n Example:\n \u003cblockquote\u003e\u003cpre\u003edescription: This plugin is so 31337. You can set yourself on fire.\u003c/pre\u003e\u003c/blockquote\u003e",
              "tags": "Returns description of this plugin, or null if not specified.",
              "plain": "Gives a human-friendly description of the functionality the plugin\n provides.\n \u003cul\u003e\n \u003cli\u003eThe description can have multiple lines.\n \u003cli\u003eDisplayed when a user types \u003ccode\u003e/version PluginName\u003c/code\u003e\n \u003c/ul\u003e\n \u003cp\u003e\n In the plugin.yml, this entry is named \u003ccode\u003edescription\u003c/code\u003e.\n \u003cp\u003e\n Example:\n \u003cblockquote\u003e\u003cpre\u003edescription: This plugin is so 31337. You can set yourself on fire.\u003c/pre\u003e\u003c/blockquote\u003e\n@return description of this plugin, or null if not specified"
            }
          },
          {
            "kind": "METHOD",
            "name": "getFullName()",
            "comment": {
              "body": "Returns the name of a plugin, including the version. This method is\n provided for convenience; it uses the \u003ca href\u003d\"org/bukkit/plugin/PluginDescriptionFile.html#getName()\"\u003e\u003ccode\u003ePluginDescriptionFile.getName()\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"org/bukkit/plugin/PluginDescriptionFile.html#getVersion()\"\u003e\u003ccode\u003ePluginDescriptionFile.getVersion()\u003c/code\u003e\u003c/a\u003e entries.",
              "tags": "Returns a descriptive name of the plugin and respective version.",
              "plain": "Returns the name of a plugin, including the version. This method is\n provided for convenience; it uses the {@link #getName()} and {@link #getVersion()} entries.\n@return a descriptive name of the plugin and respective version"
            }
          },
          {
            "kind": "METHOD",
            "name": "getLoad()",
            "comment": {
              "body": "Gives the phase of server startup that the plugin should be loaded.\n \u003cul\u003e\n \u003cli\u003ePossible values are in \u003ca href\u003d\"org/bukkit/plugin/PluginLoadOrder.html\" title\u003d\"enum in org.bukkit.plugin\"\u003e\u003ccode\u003ePluginLoadOrder\u003c/code\u003e\u003c/a\u003e.\n \u003cli\u003eDefaults to \u003ca href\u003d\"org/bukkit/plugin/PluginLoadOrder.html#POSTWORLD\"\u003e\u003ccode\u003ePluginLoadOrder.POSTWORLD\u003c/code\u003e\u003c/a\u003e.\n \u003cli\u003eCertain caveats apply to each phase.\n \u003cli\u003eWhen different, \u003ca href\u003d\"org/bukkit/plugin/PluginDescriptionFile.html#getDepend()\"\u003e\u003ccode\u003ePluginDescriptionFile.getDepend()\u003c/code\u003e\u003c/a\u003e, \u003ca href\u003d\"org/bukkit/plugin/PluginDescriptionFile.html#getSoftDepend()\"\u003e\u003ccode\u003ePluginDescriptionFile.getSoftDepend()\u003c/code\u003e\u003c/a\u003e, and\n     \u003ca href\u003d\"org/bukkit/plugin/PluginDescriptionFile.html#getLoadBefore()\"\u003e\u003ccode\u003ePluginDescriptionFile.getLoadBefore()\u003c/code\u003e\u003c/a\u003e become relative in order loaded per-phase.\n     If a plugin loads at \u003ccode\u003eSTARTUP\u003c/code\u003e, but a dependency loads\n     at \u003ccode\u003ePOSTWORLD\u003c/code\u003e, the dependency will not be loaded before\n     the plugin is loaded.\n \u003c/ul\u003e\n \u003cp\u003e\n In the plugin.yml, this entry is named \u003ccode\u003eload\u003c/code\u003e.\n \u003cp\u003e\n Example:\u003cblockquote\u003e\u003cpre\u003eload: STARTUP\u003c/pre\u003e\u003c/blockquote\u003e",
              "tags": "Returns the phase when the plugin should be loaded.",
              "plain": "Gives the phase of server startup that the plugin should be loaded.\n \u003cul\u003e\n \u003cli\u003ePossible values are in {@link PluginLoadOrder}.\n \u003cli\u003eDefaults to {@link PluginLoadOrder#POSTWORLD}.\n \u003cli\u003eCertain caveats apply to each phase.\n \u003cli\u003eWhen different, {@link #getDepend()}, {@link #getSoftDepend()}, and\n     {@link #getLoadBefore()} become relative in order loaded per-phase.\n     If a plugin loads at \u003ccode\u003eSTARTUP\u003c/code\u003e, but a dependency loads\n     at \u003ccode\u003ePOSTWORLD\u003c/code\u003e, the dependency will not be loaded before\n     the plugin is loaded.\n \u003c/ul\u003e\n \u003cp\u003e\n In the plugin.yml, this entry is named \u003ccode\u003eload\u003c/code\u003e.\n \u003cp\u003e\n Example:\u003cblockquote\u003e\u003cpre\u003eload: STARTUP\u003c/pre\u003e\u003c/blockquote\u003e\n@return the phase when the plugin should be loaded"
            }
          },
          {
            "kind": "METHOD",
            "name": "getLoadBefore()",
            "comment": {
              "body": "Gets the list of plugins that should consider this plugin a\n soft-dependency.\n \u003cul\u003e\n \u003cli\u003eUse the value in the \u003ca href\u003d\"org/bukkit/plugin/PluginDescriptionFile.html#getName()\"\u003e\u003ccode\u003ePluginDescriptionFile.getName()\u003c/code\u003e\u003c/a\u003e of the target plugin to\n     specify the dependency.\n \u003cli\u003eThe plugin should load before any other plugins listed here.\n \u003cli\u003eSpecifying another plugin here is strictly equivalent to having the\n     specified plugin\u0027s \u003ca href\u003d\"org/bukkit/plugin/PluginDescriptionFile.html#getSoftDepend()\"\u003e\u003ccode\u003ePluginDescriptionFile.getSoftDepend()\u003c/code\u003e\u003c/a\u003e include \u003ca href\u003d\"org/bukkit/plugin/PluginDescriptionFile.html#getName()\"\u003e\u003ccode\u003ethis plugin\u003c/code\u003e\u003c/a\u003e.\n \u003cli\u003e\u003ccode\u003eloadbefore\u003c/code\u003e must be in \u003ca href\u003d\"http://en.wikipedia.org/wiki/YAML#Lists\"\u003eYAML list\n     format\u003c/a\u003e.\n \u003c/ul\u003e\n \u003cp\u003e\n In the plugin.yml, this entry is named \u003ccode\u003eloadbefore\u003c/code\u003e.\n \u003cp\u003e\n Example:\n \u003cblockquote\u003e\u003cpre\u003eloadbefore:\n- OnePlugin\n- AnotherPlugin\u003c/pre\u003e\u003c/blockquote\u003e",
              "tags": "Returns immutable list of plugins that should consider this plugin a\n     soft-dependency.",
              "plain": "Gets the list of plugins that should consider this plugin a\n soft-dependency.\n \u003cul\u003e\n \u003cli\u003eUse the value in the {@link #getName()} of the target plugin to\n     specify the dependency.\n \u003cli\u003eThe plugin should load before any other plugins listed here.\n \u003cli\u003eSpecifying another plugin here is strictly equivalent to having the\n     specified plugin\u0027s {@link #getSoftDepend()} include {@link #getName() this plugin}.\n \u003cli\u003e\u003ccode\u003eloadbefore\u003c/code\u003e must be in \u003ca href\u003d\"http://en.wikipedia.org/wiki/YAML#Lists\"\u003eYAML list\n     format\u003c/a\u003e.\n \u003c/ul\u003e\n \u003cp\u003e\n In the plugin.yml, this entry is named \u003ccode\u003eloadbefore\u003c/code\u003e.\n \u003cp\u003e\n Example:\n \u003cblockquote\u003e\u003cpre\u003eloadbefore:\n- OnePlugin\n- AnotherPlugin\u003c/pre\u003e\u003c/blockquote\u003e\n@return immutable list of plugins that should consider this plugin a\n     soft-dependency"
            }
          },
          {
            "kind": "METHOD",
            "name": "getMain()",
            "comment": {
              "body": "Gives the fully qualified name of the main class for a plugin. The\n format should follow the \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/lang/ClassLoader.html#loadClass(java.lang.String)\" title\u003d\"class or interface in java.lang\" class\u003d\"external-link\"\u003e\u003ccode\u003eClassLoader.loadClass(String)\u003c/code\u003e\u003c/a\u003e syntax\n to successfully be resolved at runtime. For most plugins, this is the\n class that extends \u003ca href\u003d\"org/bukkit/plugin/java/JavaPlugin.html\" title\u003d\"class in org.bukkit.plugin.java\"\u003e\u003ccode\u003eJavaPlugin\u003c/code\u003e\u003c/a\u003e.\n \u003cul\u003e\n \u003cli\u003eThis must contain the full namespace including the class file\n     itself.\n \u003cli\u003eIf your namespace is \u003ccode\u003eorg.bukkit.plugin\u003c/code\u003e, and your class\n     file is called \u003ccode\u003eMyPlugin\u003c/code\u003e then this must be\n     \u003ccode\u003eorg.bukkit.plugin.MyPlugin\u003c/code\u003e\n \u003cli\u003eNo plugin can use \u003ccode\u003eorg.bukkit.\u003c/code\u003e as a base package for\n     \u003cb\u003eany class\u003c/b\u003e, including the main class.\n \u003c/ul\u003e\n \u003cp\u003e\n In the plugin.yml, this entry is named \u003ccode\u003emain\u003c/code\u003e.\n \u003cp\u003e\n Example:\n \u003cblockquote\u003e\u003cpre\u003emain: org.bukkit.plugin.MyPlugin\u003c/pre\u003e\u003c/blockquote\u003e",
              "tags": "Returns the fully qualified main class for the plugin.",
              "plain": "Gives the fully qualified name of the main class for a plugin. The\n format should follow the {@link ClassLoader#loadClass(String)} syntax\n to successfully be resolved at runtime. For most plugins, this is the\n class that extends {@link JavaPlugin}.\n \u003cul\u003e\n \u003cli\u003eThis must contain the full namespace including the class file\n     itself.\n \u003cli\u003eIf your namespace is \u003ccode\u003eorg.bukkit.plugin\u003c/code\u003e, and your class\n     file is called \u003ccode\u003eMyPlugin\u003c/code\u003e then this must be\n     \u003ccode\u003eorg.bukkit.plugin.MyPlugin\u003c/code\u003e\n \u003cli\u003eNo plugin can use \u003ccode\u003eorg.bukkit.\u003c/code\u003e as a base package for\n     \u003cb\u003eany class\u003c/b\u003e, including the main class.\n \u003c/ul\u003e\n \u003cp\u003e\n In the plugin.yml, this entry is named \u003ccode\u003emain\u003c/code\u003e.\n \u003cp\u003e\n Example:\n \u003cblockquote\u003e\u003cpre\u003emain: org.bukkit.plugin.MyPlugin\u003c/pre\u003e\u003c/blockquote\u003e\n@return the fully qualified main class for the plugin"
            }
          },
          {
            "kind": "METHOD",
            "name": "getName()",
            "comment": {
              "body": "Gives the name of the plugin. This name is a unique identifier for\n plugins.\n \u003cul\u003e\n \u003cli\u003eMust consist of all alphanumeric characters, underscores, hyphon,\n     and period (a-z,A-Z,0-9, _.-). Any other character will cause the\n     plugin.yml to fail loading.\n \u003cli\u003eUsed to determine the name of the plugin\u0027s data folder. Data\n     folders are placed in the ./plugins/ directory by default, but this\n     behavior should not be relied on. \u003ca href\u003d\"org/bukkit/plugin/Plugin.html#getDataFolder()\"\u003e\u003ccode\u003ePlugin.getDataFolder()\u003c/code\u003e\u003c/a\u003e\n     should be used to reference the data folder.\n \u003cli\u003eIt is good practice to name your jar the same as this, for example\n     \u0027MyPlugin.jar\u0027.\n \u003cli\u003eCase sensitive.\n \u003cli\u003eThe is the token referenced in \u003ca href\u003d\"org/bukkit/plugin/PluginDescriptionFile.html#getDepend()\"\u003e\u003ccode\u003ePluginDescriptionFile.getDepend()\u003c/code\u003e\u003c/a\u003e, \u003ca href\u003d\"org/bukkit/plugin/PluginDescriptionFile.html#getSoftDepend()\"\u003e\u003ccode\u003ePluginDescriptionFile.getSoftDepend()\u003c/code\u003e\u003c/a\u003e, and \u003ca href\u003d\"org/bukkit/plugin/PluginDescriptionFile.html#getLoadBefore()\"\u003e\u003ccode\u003ePluginDescriptionFile.getLoadBefore()\u003c/code\u003e\u003c/a\u003e.\n \u003cli\u003eUsing spaces in the plugin\u0027s name is deprecated.\n \u003c/ul\u003e\n \u003cp\u003e\n In the plugin.yml, this entry is named \u003ccode\u003ename\u003c/code\u003e.\n \u003cp\u003e\n Example:\u003cblockquote\u003e\u003cpre\u003ename: MyPlugin\u003c/pre\u003e\u003c/blockquote\u003e",
              "tags": "Returns the name of the plugin.",
              "plain": "Gives the name of the plugin. This name is a unique identifier for\n plugins.\n \u003cul\u003e\n \u003cli\u003eMust consist of all alphanumeric characters, underscores, hyphon,\n     and period (a-z,A-Z,0-9, _.-). Any other character will cause the\n     plugin.yml to fail loading.\n \u003cli\u003eUsed to determine the name of the plugin\u0027s data folder. Data\n     folders are placed in the ./plugins/ directory by default, but this\n     behavior should not be relied on. {@link Plugin#getDataFolder()}\n     should be used to reference the data folder.\n \u003cli\u003eIt is good practice to name your jar the same as this, for example\n     \u0027MyPlugin.jar\u0027.\n \u003cli\u003eCase sensitive.\n \u003cli\u003eThe is the token referenced in {@link #getDepend()}, {@link #getSoftDepend()}, and {@link #getLoadBefore()}.\n \u003cli\u003eUsing spaces in the plugin\u0027s name is deprecated.\n \u003c/ul\u003e\n \u003cp\u003e\n In the plugin.yml, this entry is named \u003ccode\u003ename\u003c/code\u003e.\n \u003cp\u003e\n Example:\u003cblockquote\u003e\u003cpre\u003ename: MyPlugin\u003c/pre\u003e\u003c/blockquote\u003e\n@return the name of the plugin"
            }
          },
          {
            "kind": "METHOD",
            "name": "getPermissionDefault()",
            "comment": {
              "body": "Gives the default \u003ca href\u003d\"org/bukkit/permissions/Permission.html#getDefault()\"\u003e\u003ccode\u003edefault\u003c/code\u003e\u003c/a\u003e state of\n \u003ca href\u003d\"org/bukkit/plugin/PluginDescriptionFile.html#getPermissions()\"\u003e\u003ccode\u003epermissions\u003c/code\u003e\u003c/a\u003e registered for the plugin.\n \u003cul\u003e\n \u003cli\u003eIf not specified, it will be \u003ca href\u003d\"org/bukkit/permissions/PermissionDefault.html#OP\"\u003e\u003ccode\u003ePermissionDefault.OP\u003c/code\u003e\u003c/a\u003e.\n \u003cli\u003eIt is matched using \u003ca href\u003d\"org/bukkit/permissions/PermissionDefault.html#getByName(java.lang.String)\"\u003e\u003ccode\u003ePermissionDefault.getByName(String)\u003c/code\u003e\u003c/a\u003e\n \u003cli\u003eIt only affects permissions that do not define the\n     \u003ccode\u003edefault\u003c/code\u003e node.\n \u003cli\u003eIt may be any value in \u003ca href\u003d\"org/bukkit/permissions/PermissionDefault.html\" title\u003d\"enum in org.bukkit.permissions\"\u003e\u003ccode\u003ePermissionDefault\u003c/code\u003e\u003c/a\u003e.\n \u003c/ul\u003e\n \u003cp\u003e\n In the plugin.yml, this entry is named \u003ccode\u003edefault-permission\u003c/code\u003e.\n \u003cp\u003e\n Example:\u003cblockquote\u003e\u003cpre\u003edefault-permission: NOT_OP\u003c/pre\u003e\u003c/blockquote\u003e",
              "tags": "Returns the default value for the plugin\u0027s permissions.",
              "plain": "Gives the default {@link Permission#getDefault() default} state of\n {@link #getPermissions() permissions} registered for the plugin.\n \u003cul\u003e\n \u003cli\u003eIf not specified, it will be {@link PermissionDefault#OP}.\n \u003cli\u003eIt is matched using {@link PermissionDefault#getByName(String)}\n \u003cli\u003eIt only affects permissions that do not define the\n     \u003ccode\u003edefault\u003c/code\u003e node.\n \u003cli\u003eIt may be any value in {@link PermissionDefault}.\n \u003c/ul\u003e\n \u003cp\u003e\n In the plugin.yml, this entry is named \u003ccode\u003edefault-permission\u003c/code\u003e.\n \u003cp\u003e\n Example:\u003cblockquote\u003e\u003cpre\u003edefault-permission: NOT_OP\u003c/pre\u003e\u003c/blockquote\u003e\n@return the default value for the plugin\u0027s permissions"
            }
          },
          {
            "kind": "METHOD",
            "name": "getPermissions()",
            "comment": {
              "body": "Gives the list of permissions the plugin will register at runtime,\n immediately proceding enabling. The format for defining permissions is\n a map from permission name to properties. To represent a map without\n any specific property, empty \u003ca href\u003d\"http://yaml.org/spec/current.html#id2502702\"\u003ecurly-braces\u003c/a\u003e (\n \u003ccode\u003e\u0026#123;\u0026#125;\u003c/code\u003e ) may be used (as a null value is not\n accepted, unlike the \u003ca href\u003d\"org/bukkit/plugin/PluginDescriptionFile.html#getCommands()\"\u003e\u003ccode\u003ecommands\u003c/code\u003e\u003c/a\u003e above).\n \u003cp\u003e\n A list of optional properties for permissions:\n \u003ctable border\u003d1\u003e\n \u003ccaption\u003eThe permission section\u0027s description\u003c/caption\u003e\n \u003ctr\u003e\n     \u003cth\u003eNode\u003c/th\u003e\n     \u003cth\u003eDescription\u003c/th\u003e\n     \u003cth\u003eExample\u003c/th\u003e\n \u003c/tr\u003e\u003ctr\u003e\n     \u003ctd\u003e\u003ccode\u003edescription\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003ePlaintext (user-friendly) description of what the permission\n         is for.\u003c/td\u003e\n     \u003ctd\u003e\u003cblockquote\u003e\u003cpre\u003edescription: Allows you to set yourself on fire\u003c/pre\u003e\u003c/blockquote\u003e\u003c/td\u003e\n \u003c/tr\u003e\u003ctr\u003e\n     \u003ctd\u003e\u003ccode\u003edefault\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003eThe default state for the permission, as defined by \u003ca href\u003d\"org/bukkit/permissions/Permission.html#getDefault()\"\u003e\u003ccode\u003ePermission.getDefault()\u003c/code\u003e\u003c/a\u003e. If not defined, it will be set to\n         the value of \u003ca href\u003d\"org/bukkit/plugin/PluginDescriptionFile.html#getPermissionDefault()\"\u003e\u003ccode\u003ePluginDescriptionFile.getPermissionDefault()\u003c/code\u003e\u003c/a\u003e.\n         \u003cp\u003e\n         For reference:\u003cul\u003e\n         \u003cli\u003e\u003ccode\u003etrue\u003c/code\u003e - Represents a positive assignment to\n             \u003ca href\u003d\"org/bukkit/permissions/Permissible.html\" title\u003d\"interface in org.bukkit.permissions\"\u003e\u003ccode\u003epermissibles\u003c/code\u003e\u003c/a\u003e.\n         \u003cli\u003e\u003ccode\u003efalse\u003c/code\u003e - Represents no assignment to \u003ca href\u003d\"org/bukkit/permissions/Permissible.html\" title\u003d\"interface in org.bukkit.permissions\"\u003e\u003ccode\u003epermissibles\u003c/code\u003e\u003c/a\u003e.\n         \u003cli\u003e\u003ccode\u003eop\u003c/code\u003e - Represents a positive assignment to\n             \u003ca href\u003d\"org/bukkit/permissions/ServerOperator.html#isOp()\"\u003e\u003ccode\u003eoperator permissibles\u003c/code\u003e\u003c/a\u003e.\n         \u003cli\u003e\u003ccode\u003enotop\u003c/code\u003e - Represents a positive assignment to\n             \u003ca href\u003d\"org/bukkit/permissions/ServerOperator.html#isOp()\"\u003e\u003ccode\u003enon-operator permissibiles\u003c/code\u003e\u003c/a\u003e.\n         \u003c/ul\u003e\u003c/td\u003e\n     \u003ctd\u003e\u003cblockquote\u003e\u003cpre\u003edefault: true\u003c/pre\u003e\u003c/blockquote\u003e\u003c/td\u003e\n \u003c/tr\u003e\u003ctr\u003e\n     \u003ctd\u003e\u003ccode\u003echildren\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003eAllows other permissions to be set as a \u003ca href\u003d\"org/bukkit/permissions/Permission.html#getChildren()\"\u003erelation\u003c/a\u003e to the parent permission.\n         When a parent permissions is assigned, child permissions are\n         respectively assigned as well.\n         \u003cul\u003e\n         \u003cli\u003eWhen a parent permission is assigned negatively, child\n             permissions are assigned based on an inversion of their\n             association.\n         \u003cli\u003eWhen a parent permission is assigned positively, child\n             permissions are assigned based on their association.\n         \u003c/ul\u003e\n         \u003cp\u003e\n         Child permissions may be defined in a number of ways:\u003cul\u003e\n         \u003cli\u003eChildren may be defined as a \u003ca href\u003d\"http://en.wikipedia.org/wiki/YAML#Lists\"\u003elist\u003c/a\u003e of\n             names. Using a list will treat all children associated\n             positively to their parent.\n         \u003cli\u003eChildren may be defined as a map. Each permission name maps\n             to either a boolean (representing the association), or a\n             nested permission definition (just as another permission).\n             Using a nested definition treats the child as a positive\n             association.\n         \u003cli\u003eA nested permission definition must be a map of these same\n             properties. To define a valid nested permission without\n             defining any specific property, empty curly-braces (\n             \u003ccode\u003e\u0026#123;\u0026#125;\u003c/code\u003e ) must be used.\n          \u003cli\u003eA nested permission may carry it\u0027s own nested permissions\n              as children, as they may also have nested permissions, and\n              so forth. There is no direct limit to how deep the\n              permission tree is defined.\n         \u003c/ul\u003e\u003c/td\u003e\n     \u003ctd\u003eAs a list:\n         \u003cblockquote\u003e\u003cpre\u003echildren: [inferno.flagrate, inferno.burningdeaths]\u003c/pre\u003e\u003c/blockquote\u003e\n         Or as a mapping:\n         \u003cblockquote\u003e\u003cpre\u003echildren:\n  inferno.flagrate: true\n  inferno.burningdeaths: true\u003c/pre\u003e\u003c/blockquote\u003e\n         An additional example showing basic nested values can be seen\n         \u003ca href\u003d\"./org/bukkit/plugin/doc-files/permissions-example_plugin.yml\"\u003ehere\u003c/a\u003e.\n         \u003c/td\u003e\n \u003c/tr\u003e\n \u003c/table\u003e\n The permissions are structured as a hiearchy of \u003ca href\u003d\"http://yaml.org/spec/current.html#id2502325\"\u003enested mappings\u003c/a\u003e.\n The primary (top-level, no intendentation) node is\n `\u003ccode\u003epermissions\u003c/code\u003e\u0027, while each individual permission name is\n indented, indicating it maps to some value (in our case, the\n properties of the table above).\n \u003cp\u003e\n Here is an example using some of the properties:\u003cblockquote\u003e\u003cpre\u003e\npermissions:\n  inferno.*:\n    description: Gives access to all Inferno commands\n    children:\n      inferno.flagrate: true\n      inferno.burningdeaths: true\n  inferno.flagate:\n    description: Allows you to ignite yourself\n    default: true\n  inferno.burningdeaths:\n    description: Allows you to see how many times you have burned to death\n    default: true\n\u003c/pre\u003e\u003c/blockquote\u003e\n Another example, with nested definitions, can be found \u003ca href\u003d\"./org/bukkit/plugin/doc-files/permissions-example_plugin.yml\"\u003ehere\u003c/a\u003e.",
              "tags": "Returns the permissions this plugin will register.",
              "plain": "Gives the list of permissions the plugin will register at runtime,\n immediately proceding enabling. The format for defining permissions is\n a map from permission name to properties. To represent a map without\n any specific property, empty \u003ca href\u003d\"http://yaml.org/spec/current.html#id2502702\"\u003ecurly-braces\u003c/a\u003e (\n \u003ccode\u003e\u0026#123;\u0026#125;\u003c/code\u003e ) may be used (as a null value is not\n accepted, unlike the {@link #getCommands() commands} above).\n \u003cp\u003e\n A list of optional properties for permissions:\n \u003ctable border\u003d1\u003e\n \u003ccaption\u003eThe permission section\u0027s description\u003c/caption\u003e\n \u003ctr\u003e\n     \u003cth\u003eNode\u003c/th\u003e\n     \u003cth\u003eDescription\u003c/th\u003e\n     \u003cth\u003eExample\u003c/th\u003e\n \u003c/tr\u003e\u003ctr\u003e\n     \u003ctd\u003e\u003ccode\u003edescription\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003ePlaintext (user-friendly) description of what the permission\n         is for.\u003c/td\u003e\n     \u003ctd\u003e\u003cblockquote\u003e\u003cpre\u003edescription: Allows you to set yourself on fire\u003c/pre\u003e\u003c/blockquote\u003e\u003c/td\u003e\n \u003c/tr\u003e\u003ctr\u003e\n     \u003ctd\u003e\u003ccode\u003edefault\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003eThe default state for the permission, as defined by {@link Permission#getDefault()}. If not defined, it will be set to\n         the value of {@link PluginDescriptionFile#getPermissionDefault()}.\n         \u003cp\u003e\n         For reference:\u003cul\u003e\n         \u003cli\u003e\u003ccode\u003etrue\u003c/code\u003e - Represents a positive assignment to\n             {@link Permissible permissibles}.\n         \u003cli\u003e\u003ccode\u003efalse\u003c/code\u003e - Represents no assignment to {@link Permissible permissibles}.\n         \u003cli\u003e\u003ccode\u003eop\u003c/code\u003e - Represents a positive assignment to\n             {@link Permissible#isOp() operator permissibles}.\n         \u003cli\u003e\u003ccode\u003enotop\u003c/code\u003e - Represents a positive assignment to\n             {@link Permissible#isOp() non-operator permissibiles}.\n         \u003c/ul\u003e\u003c/td\u003e\n     \u003ctd\u003e\u003cblockquote\u003e\u003cpre\u003edefault: true\u003c/pre\u003e\u003c/blockquote\u003e\u003c/td\u003e\n \u003c/tr\u003e\u003ctr\u003e\n     \u003ctd\u003e\u003ccode\u003echildren\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003eAllows other permissions to be set as a {@linkplain Permission#getChildren() relation} to the parent permission.\n         When a parent permissions is assigned, child permissions are\n         respectively assigned as well.\n         \u003cul\u003e\n         \u003cli\u003eWhen a parent permission is assigned negatively, child\n             permissions are assigned based on an inversion of their\n             association.\n         \u003cli\u003eWhen a parent permission is assigned positively, child\n             permissions are assigned based on their association.\n         \u003c/ul\u003e\n         \u003cp\u003e\n         Child permissions may be defined in a number of ways:\u003cul\u003e\n         \u003cli\u003eChildren may be defined as a \u003ca href\u003d\"http://en.wikipedia.org/wiki/YAML#Lists\"\u003elist\u003c/a\u003e of\n             names. Using a list will treat all children associated\n             positively to their parent.\n         \u003cli\u003eChildren may be defined as a map. Each permission name maps\n             to either a boolean (representing the association), or a\n             nested permission definition (just as another permission).\n             Using a nested definition treats the child as a positive\n             association.\n         \u003cli\u003eA nested permission definition must be a map of these same\n             properties. To define a valid nested permission without\n             defining any specific property, empty curly-braces (\n             \u003ccode\u003e\u0026#123;\u0026#125;\u003c/code\u003e ) must be used.\n          \u003cli\u003eA nested permission may carry it\u0027s own nested permissions\n              as children, as they may also have nested permissions, and\n              so forth. There is no direct limit to how deep the\n              permission tree is defined.\n         \u003c/ul\u003e\u003c/td\u003e\n     \u003ctd\u003eAs a list:\n         \u003cblockquote\u003e\u003cpre\u003echildren: [inferno.flagrate, inferno.burningdeaths]\u003c/pre\u003e\u003c/blockquote\u003e\n         Or as a mapping:\n         \u003cblockquote\u003e\u003cpre\u003echildren:\n  inferno.flagrate: true\n  inferno.burningdeaths: true\u003c/pre\u003e\u003c/blockquote\u003e\n         An additional example showing basic nested values can be seen\n         \u003ca href\u003d\"doc-files/permissions-example_plugin.yml\"\u003ehere\u003c/a\u003e.\n         \u003c/td\u003e\n \u003c/tr\u003e\n \u003c/table\u003e\n The permissions are structured as a hiearchy of \u003ca href\u003d\"http://yaml.org/spec/current.html#id2502325\"\u003enested mappings\u003c/a\u003e.\n The primary (top-level, no intendentation) node is\n `\u003ccode\u003epermissions\u003c/code\u003e\u0027, while each individual permission name is\n indented, indicating it maps to some value (in our case, the\n properties of the table above).\n \u003cp\u003e\n Here is an example using some of the properties:\u003cblockquote\u003e\u003cpre\u003e\npermissions:\n  inferno.*:\n    description: Gives access to all Inferno commands\n    children:\n      inferno.flagrate: true\n      inferno.burningdeaths: true\n  inferno.flagate:\n    description: Allows you to ignite yourself\n    default: true\n  inferno.burningdeaths:\n    description: Allows you to see how many times you have burned to death\n    default: true\n\u003c/pre\u003e\u003c/blockquote\u003e\n Another example, with nested definitions, can be found \u003ca href\u003d\"doc-files/permissions-example_plugin.yml\"\u003ehere\u003c/a\u003e.\n@return the permissions this plugin will register"
            }
          },
          {
            "kind": "METHOD",
            "name": "getPrefix()",
            "comment": {
              "body": "Gives the token to prefix plugin-specific logging messages with.\n \u003cul\u003e\n \u003cli\u003eThis includes all messages using \u003ca href\u003d\"org/bukkit/plugin/Plugin.html#getLogger()\"\u003e\u003ccode\u003ePlugin.getLogger()\u003c/code\u003e\u003c/a\u003e.\n \u003cli\u003eIf not specified, the server uses the plugin\u0027s \u003ca href\u003d\"org/bukkit/plugin/PluginDescriptionFile.html#getName()\"\u003e\u003ccode\u003ename\u003c/code\u003e\u003c/a\u003e.\n \u003cli\u003eThis should clearly indicate what plugin is being logged.\n \u003c/ul\u003e\n \u003cp\u003e\n In the plugin.yml, this entry is named \u003ccode\u003eprefix\u003c/code\u003e.\n \u003cp\u003e\n Example:\u003cblockquote\u003e\u003cpre\u003eprefix: ex-why-zee\u003c/pre\u003e\u003c/blockquote\u003e",
              "tags": "Returns the prefixed logging token, or null if not specified.",
              "plain": "Gives the token to prefix plugin-specific logging messages with.\n \u003cul\u003e\n \u003cli\u003eThis includes all messages using {@link Plugin#getLogger()}.\n \u003cli\u003eIf not specified, the server uses the plugin\u0027s {@link #getName() name}.\n \u003cli\u003eThis should clearly indicate what plugin is being logged.\n \u003c/ul\u003e\n \u003cp\u003e\n In the plugin.yml, this entry is named \u003ccode\u003eprefix\u003c/code\u003e.\n \u003cp\u003e\n Example:\u003cblockquote\u003e\u003cpre\u003eprefix: ex-why-zee\u003c/pre\u003e\u003c/blockquote\u003e\n@return the prefixed logging token, or null if not specified"
            }
          },
          {
            "kind": "METHOD",
            "name": "getRawName()",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "tags": "Returns internal use.",
              "plain": "@return internal use\n@deprecated Internal use"
            }
          },
          {
            "kind": "METHOD",
            "name": "getSoftDepend()",
            "comment": {
              "body": "Gives a list of other plugins that the plugin requires for full\n functionality. The \u003ca href\u003d\"org/bukkit/plugin/PluginManager.html\" title\u003d\"interface in org.bukkit.plugin\"\u003e\u003ccode\u003ePluginManager\u003c/code\u003e\u003c/a\u003e will make best effort to treat\n all entries here as if they were a \u003ca href\u003d\"org/bukkit/plugin/PluginDescriptionFile.html#getDepend()\"\u003e\u003ccode\u003edependency\u003c/code\u003e\u003c/a\u003e, but\n will never fail because of one of these entries.\n \u003cul\u003e\n \u003cli\u003eUse the value in the \u003ca href\u003d\"org/bukkit/plugin/PluginDescriptionFile.html#getName()\"\u003e\u003ccode\u003ePluginDescriptionFile.getName()\u003c/code\u003e\u003c/a\u003e of the target plugin to\n     specify the dependency.\n \u003cli\u003eWhen an unresolvable plugin is listed, it will be ignored and does\n     not affect load order.\n \u003cli\u003eWhen a circular dependency occurs (a network of plugins depending\n     or soft-dependending each other), it will arbitrarily choose a\n     plugin that can be resolved when ignoring soft-dependencies.\n \u003cli\u003e\u003ccode\u003esoftdepend\u003c/code\u003e must be in \u003ca href\u003d\"http://en.wikipedia.org/wiki/YAML#Lists\"\u003eYAML list\n     format\u003c/a\u003e.\n \u003c/ul\u003e\n \u003cp\u003e\n In the plugin.yml, this entry is named \u003ccode\u003esoftdepend\u003c/code\u003e.\n \u003cp\u003e\n Example:\n \u003cblockquote\u003e\u003cpre\u003esoftdepend: [OnePlugin, AnotherPlugin]\u003c/pre\u003e\u003c/blockquote\u003e",
              "tags": "Returns immutable list of the plugin\u0027s preferred dependencies.",
              "plain": "Gives a list of other plugins that the plugin requires for full\n functionality. The {@link PluginManager} will make best effort to treat\n all entries here as if they were a {@link #getDepend() dependency}, but\n will never fail because of one of these entries.\n \u003cul\u003e\n \u003cli\u003eUse the value in the {@link #getName()} of the target plugin to\n     specify the dependency.\n \u003cli\u003eWhen an unresolvable plugin is listed, it will be ignored and does\n     not affect load order.\n \u003cli\u003eWhen a circular dependency occurs (a network of plugins depending\n     or soft-dependending each other), it will arbitrarily choose a\n     plugin that can be resolved when ignoring soft-dependencies.\n \u003cli\u003e\u003ccode\u003esoftdepend\u003c/code\u003e must be in \u003ca href\u003d\"http://en.wikipedia.org/wiki/YAML#Lists\"\u003eYAML list\n     format\u003c/a\u003e.\n \u003c/ul\u003e\n \u003cp\u003e\n In the plugin.yml, this entry is named \u003ccode\u003esoftdepend\u003c/code\u003e.\n \u003cp\u003e\n Example:\n \u003cblockquote\u003e\u003cpre\u003esoftdepend: [OnePlugin, AnotherPlugin]\u003c/pre\u003e\u003c/blockquote\u003e\n@return immutable list of the plugin\u0027s preferred dependencies"
            }
          },
          {
            "kind": "METHOD",
            "name": "getVersion()",
            "comment": {
              "body": "Gives the version of the plugin.\n \u003cul\u003e\n \u003cli\u003eVersion is an arbitrary string, however the most common format is\n     MajorRelease.MinorRelease.Build (eg: 1.4.1).\n \u003cli\u003eTypically you will increment this every time you release a new\n     feature or bug fix.\n \u003cli\u003eDisplayed when a user types \u003ccode\u003e/version PluginName\u003c/code\u003e\n \u003c/ul\u003e\n \u003cp\u003e\n In the plugin.yml, this entry is named \u003ccode\u003eversion\u003c/code\u003e.\n \u003cp\u003e\n Example:\u003cblockquote\u003e\u003cpre\u003eversion: 1.4.1\u003c/pre\u003e\u003c/blockquote\u003e",
              "tags": "Returns the version of the plugin.",
              "plain": "Gives the version of the plugin.\n \u003cul\u003e\n \u003cli\u003eVersion is an arbitrary string, however the most common format is\n     MajorRelease.MinorRelease.Build (eg: 1.4.1).\n \u003cli\u003eTypically you will increment this every time you release a new\n     feature or bug fix.\n \u003cli\u003eDisplayed when a user types \u003ccode\u003e/version PluginName\u003c/code\u003e\n \u003c/ul\u003e\n \u003cp\u003e\n In the plugin.yml, this entry is named \u003ccode\u003eversion\u003c/code\u003e.\n \u003cp\u003e\n Example:\u003cblockquote\u003e\u003cpre\u003eversion: 1.4.1\u003c/pre\u003e\u003c/blockquote\u003e\n@return the version of the plugin"
            }
          },
          {
            "kind": "METHOD",
            "name": "getWebsite()",
            "comment": {
              "body": "Gives the plugin\u0027s or plugin\u0027s author\u0027s website.\n \u003cul\u003e\n \u003cli\u003eA link to the Curse page that includes documentation and downloads\n     is highly recommended.\n \u003cli\u003eDisplayed when a user types \u003ccode\u003e/version PluginName\u003c/code\u003e\n \u003c/ul\u003e\n \u003cp\u003e\n In the plugin.yml, this entry is named \u003ccode\u003ewebsite\u003c/code\u003e.\n \u003cp\u003e\n Example:\n \u003cblockquote\u003e\u003cpre\u003ewebsite: http://www.curse.com/server-mods/minecraft/myplugin\u003c/pre\u003e\u003c/blockquote\u003e",
              "tags": "Returns description of this plugin, or null if not specified.",
              "plain": "Gives the plugin\u0027s or plugin\u0027s author\u0027s website.\n \u003cul\u003e\n \u003cli\u003eA link to the Curse page that includes documentation and downloads\n     is highly recommended.\n \u003cli\u003eDisplayed when a user types \u003ccode\u003e/version PluginName\u003c/code\u003e\n \u003c/ul\u003e\n \u003cp\u003e\n In the plugin.yml, this entry is named \u003ccode\u003ewebsite\u003c/code\u003e.\n \u003cp\u003e\n Example:\n \u003cblockquote\u003e\u003cpre\u003ewebsite: http://www.curse.com/server-mods/minecraft/myplugin\u003c/pre\u003e\u003c/blockquote\u003e\n@return description of this plugin, or null if not specified"
            }
          },
          {
            "kind": "FIELD",
            "name": "lazyPermissions"
          },
          {
            "kind": "FIELD",
            "name": "loadBefore"
          },
          {
            "kind": "METHOD",
            "name": "loadMap(java.util.Map\u003c?,?\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "map"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "main"
          },
          {
            "kind": "METHOD",
            "name": "makePluginNameList(java.util.Map\u003c?,?\u003e,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "key"
              },
              {
                "kind": "PARAMETER",
                "name": "map"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "name"
          },
          {
            "kind": "FIELD",
            "name": "order"
          },
          {
            "kind": "FIELD",
            "name": "permissions"
          },
          {
            "kind": "FIELD",
            "name": "prefix"
          },
          {
            "kind": "FIELD",
            "name": "rawName"
          },
          {
            "kind": "METHOD",
            "name": "save(java.io.Writer)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "writer"
              }
            ],
            "comment": {
              "body": "Saves this PluginDescriptionFile to the given writer",
              "plain": "Saves this PluginDescriptionFile to the given writer\n@param writer Writer to output this file to"
            }
          },
          {
            "kind": "METHOD",
            "name": "saveMap()"
          },
          {
            "kind": "FIELD",
            "name": "softDepend"
          },
          {
            "kind": "FIELD",
            "name": "version"
          },
          {
            "kind": "FIELD",
            "name": "website"
          }
        ],
        "comment": {
          "body": "This type is the runtime-container for the information in the plugin.yml.\n All plugins must have a respective plugin.yml. For plugins written in java\n using the standard plugin loader, this file must be in the root of the jar\n file.\n \u003cp\u003e\n When Bukkit loads a plugin, it needs to know some basic information about\n it. It reads this information from a YAML file, \u0027plugin.yml\u0027. This file\n consists of a set of attributes, each defined on a new line and with no\n indentation.\n \u003cp\u003e\n Every (almost* every) method corresponds with a specific entry in the\n plugin.yml. These are the \u003cb\u003erequired\u003c/b\u003e entries for every plugin.yml:\n \u003cul\u003e\n \u003cli\u003e\u003ca href\u003d\"org/bukkit/plugin/PluginDescriptionFile.html#getName()\"\u003e\u003ccode\u003ePluginDescriptionFile.getName()\u003c/code\u003e\u003c/a\u003e - \u003ccode\u003ename\u003c/code\u003e\n \u003cli\u003e\u003ca href\u003d\"org/bukkit/plugin/PluginDescriptionFile.html#getVersion()\"\u003e\u003ccode\u003ePluginDescriptionFile.getVersion()\u003c/code\u003e\u003c/a\u003e - \u003ccode\u003eversion\u003c/code\u003e\n \u003cli\u003e\u003ca href\u003d\"org/bukkit/plugin/PluginDescriptionFile.html#getMain()\"\u003e\u003ccode\u003ePluginDescriptionFile.getMain()\u003c/code\u003e\u003c/a\u003e - \u003ccode\u003emain\u003c/code\u003e\n \u003c/ul\u003e\n \u003cp\u003e\n Failing to include any of these items will throw an exception and cause the\n server to ignore your plugin.\n \u003cp\u003e\n This is a list of the possible yaml keys, with specific details included in\n the respective method documentations:\n \u003ctable border\u003d1\u003e\n \u003ccaption\u003eThe description of the plugin.yml layout\u003c/caption\u003e\n \u003ctr\u003e\n     \u003cth\u003eNode\u003c/th\u003e\n     \u003cth\u003eMethod\u003c/th\u003e\n     \u003cth\u003eSummary\u003c/th\u003e\n \u003c/tr\u003e\u003ctr\u003e\n     \u003ctd\u003e\u003ccode\u003ename\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003e\u003ca href\u003d\"org/bukkit/plugin/PluginDescriptionFile.html#getName()\"\u003e\u003ccode\u003ePluginDescriptionFile.getName()\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n     \u003ctd\u003eThe unique name of plugin\u003c/td\u003e\n \u003c/tr\u003e\u003ctr\u003e\n     \u003ctd\u003e\u003ccode\u003eversion\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003e\u003ca href\u003d\"org/bukkit/plugin/PluginDescriptionFile.html#getVersion()\"\u003e\u003ccode\u003ePluginDescriptionFile.getVersion()\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n     \u003ctd\u003eA plugin revision identifier\u003c/td\u003e\n \u003c/tr\u003e\u003ctr\u003e\n     \u003ctd\u003e\u003ccode\u003emain\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003e\u003ca href\u003d\"org/bukkit/plugin/PluginDescriptionFile.html#getMain()\"\u003e\u003ccode\u003ePluginDescriptionFile.getMain()\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n     \u003ctd\u003eThe plugin\u0027s initial class file\u003c/td\u003e\n \u003c/tr\u003e\u003ctr\u003e\n     \u003ctd\u003e\u003ccode\u003eauthor\u003c/code\u003e\u003cbr\u003e\u003ccode\u003eauthors\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003e\u003ca href\u003d\"org/bukkit/plugin/PluginDescriptionFile.html#getAuthors()\"\u003e\u003ccode\u003ePluginDescriptionFile.getAuthors()\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n     \u003ctd\u003eThe plugin contributors\u003c/td\u003e\n \u003c/tr\u003e\u003ctr\u003e\n     \u003ctd\u003e\u003ccode\u003edescription\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003e\u003ca href\u003d\"org/bukkit/plugin/PluginDescriptionFile.html#getDescription()\"\u003e\u003ccode\u003ePluginDescriptionFile.getDescription()\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n     \u003ctd\u003eHuman readable plugin summary\u003c/td\u003e\n \u003c/tr\u003e\u003ctr\u003e\n     \u003ctd\u003e\u003ccode\u003ewebsite\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003e\u003ca href\u003d\"org/bukkit/plugin/PluginDescriptionFile.html#getWebsite()\"\u003e\u003ccode\u003ePluginDescriptionFile.getWebsite()\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n     \u003ctd\u003eThe URL to the plugin\u0027s site\u003c/td\u003e\n \u003c/tr\u003e\u003ctr\u003e\n     \u003ctd\u003e\u003ccode\u003eprefix\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003e\u003ca href\u003d\"org/bukkit/plugin/PluginDescriptionFile.html#getPrefix()\"\u003e\u003ccode\u003ePluginDescriptionFile.getPrefix()\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n     \u003ctd\u003eThe token to prefix plugin log entries\u003c/td\u003e\n \u003c/tr\u003e\u003ctr\u003e\n     \u003ctd\u003e\u003ccode\u003eload\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003e\u003ca href\u003d\"org/bukkit/plugin/PluginDescriptionFile.html#getLoad()\"\u003e\u003ccode\u003ePluginDescriptionFile.getLoad()\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n     \u003ctd\u003eThe phase of server-startup this plugin will load during\u003c/td\u003e\n \u003c/tr\u003e\u003ctr\u003e\n     \u003ctd\u003e\u003ccode\u003edepend\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003e\u003ca href\u003d\"org/bukkit/plugin/PluginDescriptionFile.html#getDepend()\"\u003e\u003ccode\u003ePluginDescriptionFile.getDepend()\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n     \u003ctd\u003eOther required plugins\u003c/td\u003e\n \u003c/tr\u003e\u003ctr\u003e\n     \u003ctd\u003e\u003ccode\u003esoftdepend\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003e\u003ca href\u003d\"org/bukkit/plugin/PluginDescriptionFile.html#getSoftDepend()\"\u003e\u003ccode\u003ePluginDescriptionFile.getSoftDepend()\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n     \u003ctd\u003eOther plugins that add functionality\u003c/td\u003e\n \u003c/tr\u003e\u003ctr\u003e\n     \u003ctd\u003e\u003ccode\u003eloadbefore\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003e\u003ca href\u003d\"org/bukkit/plugin/PluginDescriptionFile.html#getLoadBefore()\"\u003e\u003ccode\u003ePluginDescriptionFile.getLoadBefore()\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n     \u003ctd\u003eThe inverse softdepend\u003c/td\u003e\n \u003c/tr\u003e\u003ctr\u003e\n     \u003ctd\u003e\u003ccode\u003ecommands\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003e\u003ca href\u003d\"org/bukkit/plugin/PluginDescriptionFile.html#getCommands()\"\u003e\u003ccode\u003ePluginDescriptionFile.getCommands()\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n     \u003ctd\u003eThe commands the plugin will register\u003c/td\u003e\n \u003c/tr\u003e\u003ctr\u003e\n     \u003ctd\u003e\u003ccode\u003epermissions\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003e\u003ca href\u003d\"org/bukkit/plugin/PluginDescriptionFile.html#getPermissions()\"\u003e\u003ccode\u003ePluginDescriptionFile.getPermissions()\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n     \u003ctd\u003eThe permissions the plugin will register\u003c/td\u003e\n \u003c/tr\u003e\u003ctr\u003e\n     \u003ctd\u003e\u003ccode\u003edefault-permission\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003e\u003ca href\u003d\"org/bukkit/plugin/PluginDescriptionFile.html#getPermissionDefault()\"\u003e\u003ccode\u003ePluginDescriptionFile.getPermissionDefault()\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n     \u003ctd\u003eThe default \u003ca href\u003d\"org/bukkit/permissions/Permission.html#getDefault()\"\u003e\u003ccode\u003edefault\u003c/code\u003e\u003c/a\u003e permission\n         state for defined \u003ca href\u003d\"org/bukkit/plugin/PluginDescriptionFile.html#getPermissions()\"\u003e\u003ccode\u003epermissions\u003c/code\u003e\u003c/a\u003e the plugin\n         will register\u003c/td\u003e\n \u003c/tr\u003e\u003ctr\u003e\n     \u003ctd\u003e\u003ccode\u003eawareness\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003e\u003ca href\u003d\"org/bukkit/plugin/PluginDescriptionFile.html#getAwareness()\"\u003e\u003ccode\u003ePluginDescriptionFile.getAwareness()\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n     \u003ctd\u003eThe concepts that the plugin acknowledges\u003c/td\u003e\n \u003c/tr\u003e\n \u003c/table\u003e\n \u003cp\u003e\n A plugin.yml example:\u003cblockquote\u003e\u003cpre\u003e\nname: Inferno\nversion: 1.4.1\ndescription: This plugin is so 31337. You can set yourself on fire.\n# We could place every author in the authors list, but chose not to for illustrative purposes\n# Also, having an author distinguishes that person as the project lead, and ensures their\n# name is displayed first\nauthor: CaptainInflamo\nauthors: [Cogito, verrier, EvilSeph]\nwebsite: http://www.curse.com/server-mods/minecraft/myplugin\n\nmain: com.captaininflamo.bukkit.inferno.Inferno\ndepend: [NewFire, FlameWire]\n\ncommands:\n  flagrate:\n    description: Set yourself on fire.\n    aliases: [combust_me, combustMe]\n    permission: inferno.flagrate\n    usage: Syntax error! Simply type /\u0026lt;command\u0026gt; to ignite yourself.\n  burningdeaths:\n    description: List how many times you have died by fire.\n    aliases: [burning_deaths, burningDeaths]\n    permission: inferno.burningdeaths\n    usage: |\n      /\u0026lt;command\u0026gt; [player]\n      Example: /\u0026lt;command\u0026gt; - see how many times you have burned to death\n      Example: /\u0026lt;command\u0026gt; CaptainIce - see how many times CaptainIce has burned to death\n\npermissions:\n  inferno.*:\n    description: Gives access to all Inferno commands\n    children:\n      inferno.flagrate: true\n      inferno.burningdeaths: true\n      inferno.burningdeaths.others: true\n  inferno.flagrate:\n    description: Allows you to ignite yourself\n    default: true\n  inferno.burningdeaths:\n    description: Allows you to see how many times you have burned to death\n    default: true\n  inferno.burningdeaths.others:\n    description: Allows you to see how many times others have burned to death\n    default: op\n    children:\n      inferno.burningdeaths: true\n\u003c/pre\u003e\u003c/blockquote\u003e",
          "plain": "This type is the runtime-container for the information in the plugin.yml.\n All plugins must have a respective plugin.yml. For plugins written in java\n using the standard plugin loader, this file must be in the root of the jar\n file.\n \u003cp\u003e\n When Bukkit loads a plugin, it needs to know some basic information about\n it. It reads this information from a YAML file, \u0027plugin.yml\u0027. This file\n consists of a set of attributes, each defined on a new line and with no\n indentation.\n \u003cp\u003e\n Every (almost* every) method corresponds with a specific entry in the\n plugin.yml. These are the \u003cb\u003erequired\u003c/b\u003e entries for every plugin.yml:\n \u003cul\u003e\n \u003cli\u003e{@link #getName()} - \u003ccode\u003ename\u003c/code\u003e\n \u003cli\u003e{@link #getVersion()} - \u003ccode\u003eversion\u003c/code\u003e\n \u003cli\u003e{@link #getMain()} - \u003ccode\u003emain\u003c/code\u003e\n \u003c/ul\u003e\n \u003cp\u003e\n Failing to include any of these items will throw an exception and cause the\n server to ignore your plugin.\n \u003cp\u003e\n This is a list of the possible yaml keys, with specific details included in\n the respective method documentations:\n \u003ctable border\u003d1\u003e\n \u003ccaption\u003eThe description of the plugin.yml layout\u003c/caption\u003e\n \u003ctr\u003e\n     \u003cth\u003eNode\u003c/th\u003e\n     \u003cth\u003eMethod\u003c/th\u003e\n     \u003cth\u003eSummary\u003c/th\u003e\n \u003c/tr\u003e\u003ctr\u003e\n     \u003ctd\u003e\u003ccode\u003ename\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003e{@link #getName()}\u003c/td\u003e\n     \u003ctd\u003eThe unique name of plugin\u003c/td\u003e\n \u003c/tr\u003e\u003ctr\u003e\n     \u003ctd\u003e\u003ccode\u003eversion\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003e{@link #getVersion()}\u003c/td\u003e\n     \u003ctd\u003eA plugin revision identifier\u003c/td\u003e\n \u003c/tr\u003e\u003ctr\u003e\n     \u003ctd\u003e\u003ccode\u003emain\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003e{@link #getMain()}\u003c/td\u003e\n     \u003ctd\u003eThe plugin\u0027s initial class file\u003c/td\u003e\n \u003c/tr\u003e\u003ctr\u003e\n     \u003ctd\u003e\u003ccode\u003eauthor\u003c/code\u003e\u003cbr\u003e\u003ccode\u003eauthors\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003e{@link #getAuthors()}\u003c/td\u003e\n     \u003ctd\u003eThe plugin contributors\u003c/td\u003e\n \u003c/tr\u003e\u003ctr\u003e\n     \u003ctd\u003e\u003ccode\u003edescription\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003e{@link #getDescription()}\u003c/td\u003e\n     \u003ctd\u003eHuman readable plugin summary\u003c/td\u003e\n \u003c/tr\u003e\u003ctr\u003e\n     \u003ctd\u003e\u003ccode\u003ewebsite\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003e{@link #getWebsite()}\u003c/td\u003e\n     \u003ctd\u003eThe URL to the plugin\u0027s site\u003c/td\u003e\n \u003c/tr\u003e\u003ctr\u003e\n     \u003ctd\u003e\u003ccode\u003eprefix\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003e{@link #getPrefix()}\u003c/td\u003e\n     \u003ctd\u003eThe token to prefix plugin log entries\u003c/td\u003e\n \u003c/tr\u003e\u003ctr\u003e\n     \u003ctd\u003e\u003ccode\u003eload\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003e{@link #getLoad()}\u003c/td\u003e\n     \u003ctd\u003eThe phase of server-startup this plugin will load during\u003c/td\u003e\n \u003c/tr\u003e\u003ctr\u003e\n     \u003ctd\u003e\u003ccode\u003edepend\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003e{@link #getDepend()}\u003c/td\u003e\n     \u003ctd\u003eOther required plugins\u003c/td\u003e\n \u003c/tr\u003e\u003ctr\u003e\n     \u003ctd\u003e\u003ccode\u003esoftdepend\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003e{@link #getSoftDepend()}\u003c/td\u003e\n     \u003ctd\u003eOther plugins that add functionality\u003c/td\u003e\n \u003c/tr\u003e\u003ctr\u003e\n     \u003ctd\u003e\u003ccode\u003eloadbefore\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003e{@link #getLoadBefore()}\u003c/td\u003e\n     \u003ctd\u003eThe inverse softdepend\u003c/td\u003e\n \u003c/tr\u003e\u003ctr\u003e\n     \u003ctd\u003e\u003ccode\u003ecommands\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003e{@link #getCommands()}\u003c/td\u003e\n     \u003ctd\u003eThe commands the plugin will register\u003c/td\u003e\n \u003c/tr\u003e\u003ctr\u003e\n     \u003ctd\u003e\u003ccode\u003epermissions\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003e{@link #getPermissions()}\u003c/td\u003e\n     \u003ctd\u003eThe permissions the plugin will register\u003c/td\u003e\n \u003c/tr\u003e\u003ctr\u003e\n     \u003ctd\u003e\u003ccode\u003edefault-permission\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003e{@link #getPermissionDefault()}\u003c/td\u003e\n     \u003ctd\u003eThe default {@link Permission#getDefault() default} permission\n         state for defined {@link #getPermissions() permissions} the plugin\n         will register\u003c/td\u003e\n \u003c/tr\u003e\u003ctr\u003e\n     \u003ctd\u003e\u003ccode\u003eawareness\u003c/code\u003e\u003c/td\u003e\n     \u003ctd\u003e{@link #getAwareness()}\u003c/td\u003e\n     \u003ctd\u003eThe concepts that the plugin acknowledges\u003c/td\u003e\n \u003c/tr\u003e\n \u003c/table\u003e\n \u003cp\u003e\n A plugin.yml example:\u003cblockquote\u003e\u003cpre\u003e\nname: Inferno\nversion: 1.4.1\ndescription: This plugin is so 31337. You can set yourself on fire.\n# We could place every author in the authors list, but chose not to for illustrative purposes\n# Also, having an author distinguishes that person as the project lead, and ensures their\n# name is displayed first\nauthor: CaptainInflamo\nauthors: [Cogito, verrier, EvilSeph]\nwebsite: http://www.curse.com/server-mods/minecraft/myplugin\n\nmain: com.captaininflamo.bukkit.inferno.Inferno\ndepend: [NewFire, FlameWire]\n\ncommands:\n  flagrate:\n    description: Set yourself on fire.\n    aliases: [combust_me, combustMe]\n    permission: inferno.flagrate\n    usage: Syntax error! Simply type /\u0026lt;command\u0026gt; to ignite yourself.\n  burningdeaths:\n    description: List how many times you have died by fire.\n    aliases: [burning_deaths, burningDeaths]\n    permission: inferno.burningdeaths\n    usage: |\n      /\u0026lt;command\u0026gt; [player]\n      Example: /\u0026lt;command\u0026gt; - see how many times you have burned to death\n      Example: /\u0026lt;command\u0026gt; CaptainIce - see how many times CaptainIce has burned to death\n\npermissions:\n  inferno.*:\n    description: Gives access to all Inferno commands\n    children:\n      inferno.flagrate: true\n      inferno.burningdeaths: true\n      inferno.burningdeaths.others: true\n  inferno.flagrate:\n    description: Allows you to ignite yourself\n    default: true\n  inferno.burningdeaths:\n    description: Allows you to see how many times you have burned to death\n    default: true\n  inferno.burningdeaths.others:\n    description: Allows you to see how many times others have burned to death\n    default: op\n    children:\n      inferno.burningdeaths: true\n\u003c/pre\u003e\u003c/blockquote\u003e"
        }
      },
      {
        "kind": "ENUM",
        "name": "org.bukkit.plugin.PluginLoadOrder",
        "children": [
          {
            "kind": "ENUM_CONSTANT",
            "name": "POSTWORLD",
            "comment": {
              "body": "Indicates that the plugin will be loaded after the first/default world\n was created",
              "plain": "Indicates that the plugin will be loaded after the first/default world\n was created"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "PluginLoadOrder()"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "STARTUP",
            "comment": {
              "body": "Indicates that the plugin will be loaded at startup",
              "plain": "Indicates that the plugin will be loaded at startup"
            }
          },
          {
            "kind": "METHOD",
            "name": "valueOf(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "values()"
          }
        ],
        "comment": {
          "body": "Represents the order in which a plugin should be initialized and enabled",
          "plain": "Represents the order in which a plugin should be initialized and enabled"
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.plugin.PluginLoader",
        "children": [
          {
            "kind": "METHOD",
            "name": "createRegisteredListeners(org.bukkit.event.Listener,org.bukkit.plugin.Plugin)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "listener"
              },
              {
                "kind": "PARAMETER",
                "name": "plugin"
              }
            ],
            "comment": {
              "body": "Creates and returns registered listeners for the event classes used in\n this listener",
              "tags": "Returns The registered listeners..",
              "plain": "Creates and returns registered listeners for the event classes used in\n this listener\n@param listener The object that will handle the eventual call back\n@param plugin The plugin to use when creating registered listeners\n@return The registered listeners."
            }
          },
          {
            "kind": "METHOD",
            "name": "disablePlugin(org.bukkit.plugin.Plugin)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "plugin"
              }
            ],
            "comment": {
              "body": "Disables the specified plugin\n \u003cp\u003e\n Attempting to disable a plugin that is not enabled will have no effect",
              "plain": "Disables the specified plugin\n \u003cp\u003e\n Attempting to disable a plugin that is not enabled will have no effect\n@param plugin Plugin to disable"
            }
          },
          {
            "kind": "METHOD",
            "name": "disablePlugin(org.bukkit.plugin.Plugin,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "closeClassloader"
              },
              {
                "kind": "PARAMETER",
                "name": "plugin"
              }
            ],
            "comment": {
              "body": "Disables the specified plugin\n \u003cp\u003e\n Attempting to disable a plugin that is not enabled will have no effect",
              "plain": "Disables the specified plugin\n \u003cp\u003e\n Attempting to disable a plugin that is not enabled will have no effect\n@param plugin Plugin to disable\n@param closeClassloader if the classloader for the Plugin should be closed"
            }
          },
          {
            "kind": "METHOD",
            "name": "enablePlugin(org.bukkit.plugin.Plugin)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "plugin"
              }
            ],
            "comment": {
              "body": "Enables the specified plugin\n \u003cp\u003e\n Attempting to enable a plugin that is already enabled will have no\n effect",
              "plain": "Enables the specified plugin\n \u003cp\u003e\n Attempting to enable a plugin that is already enabled will have no\n effect\n@param plugin Plugin to enable"
            }
          },
          {
            "kind": "METHOD",
            "name": "getPluginDescription(java.io.File)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "file"
              }
            ],
            "comment": {
              "body": "Loads a PluginDescriptionFile from the specified file",
              "tags": "Returns A new PluginDescriptionFile loaded from the plugin.yml in the\n     specified file.",
              "plain": "Loads a PluginDescriptionFile from the specified file\n@param file File to attempt to load from\n@return A new PluginDescriptionFile loaded from the plugin.yml in the\n     specified file\n@throws InvalidDescriptionException If the plugin description file\n     could not be created"
            }
          },
          {
            "kind": "METHOD",
            "name": "getPluginFileFilters()",
            "comment": {
              "body": "Returns a list of all filename filters expected by this PluginLoader",
              "tags": "Returns The filters.",
              "plain": "Returns a list of all filename filters expected by this PluginLoader\n@return The filters"
            }
          },
          {
            "kind": "METHOD",
            "name": "loadPlugin(java.io.File)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "file"
              }
            ],
            "comment": {
              "body": "Loads the plugin contained in the specified file",
              "tags": "Returns Plugin that was contained in the specified file, or null if\n     unsuccessful.",
              "plain": "Loads the plugin contained in the specified file\n@param file File to attempt to load\n@return Plugin that was contained in the specified file, or null if\n     unsuccessful\n@throws InvalidPluginException Thrown when the specified file is not a\n     plugin\n@throws UnknownDependencyException If a required dependency could not\n     be found"
            }
          }
        ],
        "comment": {
          "body": "Represents a plugin loader, which handles direct access to specific types\n of plugins",
          "plain": "Represents a plugin loader, which handles direct access to specific types\n of plugins"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.plugin.PluginLogger",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PluginLogger(org.bukkit.plugin.Plugin)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "context"
              }
            ],
            "comment": {
              "body": "Creates a new PluginLogger that extracts the name from a plugin.",
              "plain": "Creates a new PluginLogger that extracts the name from a plugin.\n@param context A reference to the plugin"
            }
          },
          {
            "kind": "METHOD",
            "name": "log(java.util.logging.LogRecord)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "logRecord"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "pluginName"
          }
        ],
        "comment": {
          "body": "The PluginLogger class is a modified \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/21/docs/api/java.logging/java/util/logging/Logger.html\" title\u003d\"class or interface in java.util.logging\" class\u003d\"external-link\"\u003e\u003ccode\u003eLogger\u003c/code\u003e\u003c/a\u003e that prepends all\n logging calls with the name of the plugin doing the logging. The API for\n PluginLogger is exactly the same as \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/21/docs/api/java.logging/java/util/logging/Logger.html\" title\u003d\"class or interface in java.util.logging\" class\u003d\"external-link\"\u003e\u003ccode\u003eLogger\u003c/code\u003e\u003c/a\u003e.",
          "plain": "The PluginLogger class is a modified {@link Logger} that prepends all\n logging calls with the name of the plugin doing the logging. The API for\n PluginLogger is exactly the same as {@link Logger}.\n@see Logger"
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.plugin.PluginManager",
        "children": [
          {
            "kind": "METHOD",
            "name": "addPermission(org.bukkit.permissions.Permission)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "perm"
              }
            ],
            "comment": {
              "body": "Adds a \u003ca href\u003d\"org/bukkit/permissions/Permission.html\" title\u003d\"class in org.bukkit.permissions\"\u003e\u003ccode\u003ePermission\u003c/code\u003e\u003c/a\u003e to this plugin manager.\n \u003cp\u003e\n If a permission is already defined with the given name of the new\n permission, an exception will be thrown.",
              "plain": "Adds a {@link Permission} to this plugin manager.\n \u003cp\u003e\n If a permission is already defined with the given name of the new\n permission, an exception will be thrown.\n@param perm Permission to add\n@throws IllegalArgumentException Thrown when a permission with the same\n     name already exists"
            }
          },
          {
            "kind": "METHOD",
            "name": "callEvent(org.bukkit.event.Event)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "event"
              }
            ],
            "comment": {
              "body": "Calls an event with the given details",
              "plain": "Calls an event with the given details\n@param event Event details\n@throws IllegalStateException Thrown when an asynchronous event is\n     fired from synchronous code.\n     \u003cp\u003e\n     \u003ci\u003eNote: This is best-effort basis, and should not be used to test\n     synchronized state. This is an indicator for flawed flow logic.\u003c/i\u003e"
            }
          },
          {
            "kind": "METHOD",
            "name": "clearPlugins()",
            "comment": {
              "body": "Disables and removes all plugins",
              "plain": "Disables and removes all plugins"
            }
          },
          {
            "kind": "METHOD",
            "name": "disablePlugin(org.bukkit.plugin.Plugin)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "plugin"
              }
            ],
            "comment": {
              "body": "Disables the specified plugin\n \u003cp\u003e\n Attempting to disable a plugin that is not enabled will have no effect",
              "plain": "Disables the specified plugin\n \u003cp\u003e\n Attempting to disable a plugin that is not enabled will have no effect\n@param plugin Plugin to disable"
            }
          },
          {
            "kind": "METHOD",
            "name": "disablePlugin(org.bukkit.plugin.Plugin,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "closeClassloader"
              },
              {
                "kind": "PARAMETER",
                "name": "plugin"
              }
            ],
            "comment": {
              "body": "Disables the specified plugin\n \u003cp\u003e\n Attempting to disable a plugin that is not enabled will have no effect",
              "plain": "Disables the specified plugin\n \u003cp\u003e\n Attempting to disable a plugin that is not enabled will have no effect\n@param plugin Plugin to disable\n@param closeClassloader if the classloader for the Plugin should be closed"
            }
          },
          {
            "kind": "METHOD",
            "name": "disablePlugins()",
            "comment": {
              "body": "Disables all the loaded plugins",
              "plain": "Disables all the loaded plugins"
            }
          },
          {
            "kind": "METHOD",
            "name": "enablePlugin(org.bukkit.plugin.Plugin)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "plugin"
              }
            ],
            "comment": {
              "body": "Enables the specified plugin\n \u003cp\u003e\n Attempting to enable a plugin that is already enabled will have no\n effect",
              "plain": "Enables the specified plugin\n \u003cp\u003e\n Attempting to enable a plugin that is already enabled will have no\n effect\n@param plugin Plugin to enable"
            }
          },
          {
            "kind": "METHOD",
            "name": "getDefaultPermSubscriptions(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "op"
              }
            ],
            "comment": {
              "body": "Gets a set containing all subscribed \u003ca href\u003d\"org/bukkit/permissions/Permissible.html\" title\u003d\"interface in org.bukkit.permissions\"\u003e\u003ccode\u003ePermissible\u003c/code\u003e\u003c/a\u003es to the given\n default list, by op status",
              "tags": "Returns Set containing all subscribed permissions.",
              "plain": "Gets a set containing all subscribed {@link Permissible}s to the given\n default list, by op status\n@param op Default list to query for\n@return Set containing all subscribed permissions"
            }
          },
          {
            "kind": "METHOD",
            "name": "getDefaultPermissions(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "op"
              }
            ],
            "comment": {
              "body": "Gets the default permissions for the given op status",
              "tags": "Returns The default permissions.",
              "plain": "Gets the default permissions for the given op status\n@param op Which set of default permissions to get\n@return The default permissions"
            }
          },
          {
            "kind": "METHOD",
            "name": "getPermission(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ],
            "comment": {
              "body": "Gets a \u003ca href\u003d\"org/bukkit/permissions/Permission.html\" title\u003d\"class in org.bukkit.permissions\"\u003e\u003ccode\u003ePermission\u003c/code\u003e\u003c/a\u003e from its fully qualified name",
              "tags": "Returns Permission, or null if none.",
              "plain": "Gets a {@link Permission} from its fully qualified name\n@param name Name of the permission\n@return Permission, or null if none"
            }
          },
          {
            "kind": "METHOD",
            "name": "getPermissionSubscriptions(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "permission"
              }
            ],
            "comment": {
              "body": "Gets a set containing all subscribed \u003ca href\u003d\"org/bukkit/permissions/Permissible.html\" title\u003d\"interface in org.bukkit.permissions\"\u003e\u003ccode\u003ePermissible\u003c/code\u003e\u003c/a\u003es to the given\n permission, by name",
              "tags": "Returns Set containing all subscribed permissions.",
              "plain": "Gets a set containing all subscribed {@link Permissible}s to the given\n permission, by name\n@param permission Permission to query for\n@return Set containing all subscribed permissions"
            }
          },
          {
            "kind": "METHOD",
            "name": "getPermissions()",
            "comment": {
              "body": "Gets a set of all registered permissions.\n \u003cp\u003e\n This set is a copy and will not be modified live.",
              "tags": "Returns Set containing all current registered permissions.",
              "plain": "Gets a set of all registered permissions.\n \u003cp\u003e\n This set is a copy and will not be modified live.\n@return Set containing all current registered permissions"
            }
          },
          {
            "kind": "METHOD",
            "name": "getPlugin(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ],
            "comment": {
              "body": "Checks if the given plugin is loaded and returns it when applicable\n \u003cp\u003e\n Please note that the name of the plugin is case-sensitive",
              "tags": "Returns Plugin if it exists, otherwise null.",
              "plain": "Checks if the given plugin is loaded and returns it when applicable\n \u003cp\u003e\n Please note that the name of the plugin is case-sensitive\n@param name Name of the plugin to check\n@return Plugin if it exists, otherwise null"
            }
          },
          {
            "kind": "METHOD",
            "name": "getPlugins()",
            "comment": {
              "body": "Gets a list of all currently loaded plugins",
              "tags": "Returns Array of Plugins.",
              "plain": "Gets a list of all currently loaded plugins\n@return Array of Plugins"
            }
          },
          {
            "kind": "METHOD",
            "name": "isPluginEnabled(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ],
            "comment": {
              "body": "Checks if the given plugin is enabled or not\n \u003cp\u003e\n Please note that the name of the plugin is case-sensitive.",
              "tags": "Returns true if the plugin is enabled, otherwise false.",
              "plain": "Checks if the given plugin is enabled or not\n \u003cp\u003e\n Please note that the name of the plugin is case-sensitive.\n@param name Name of the plugin to check\n@return true if the plugin is enabled, otherwise false"
            }
          },
          {
            "kind": "METHOD",
            "name": "isPluginEnabled(org.bukkit.plugin.Plugin)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "plugin"
              }
            ],
            "comment": {
              "body": "Checks if the given plugin is enabled or not",
              "tags": "Returns true if the plugin is enabled, otherwise false.",
              "plain": "Checks if the given plugin is enabled or not\n@param plugin Plugin to check\n@return true if the plugin is enabled, otherwise false"
            }
          },
          {
            "kind": "METHOD",
            "name": "loadPlugin(java.io.File)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "file"
              }
            ],
            "comment": {
              "body": "Loads the plugin in the specified file\n \u003cp\u003e\n File must be valid according to the current enabled Plugin interfaces",
              "tags": "Returns The Plugin loaded, or null if it was invalid.",
              "plain": "Loads the plugin in the specified file\n \u003cp\u003e\n File must be valid according to the current enabled Plugin interfaces\n@param file File containing the plugin to load\n@return The Plugin loaded, or null if it was invalid\n@throws InvalidPluginException Thrown when the specified file is not a\n     valid plugin\n@throws InvalidDescriptionException Thrown when the specified file\n     contains an invalid description\n@throws UnknownDependencyException If a required dependency could not\n     be resolved"
            }
          },
          {
            "kind": "METHOD",
            "name": "loadPlugins(java.io.File)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "directory"
              }
            ],
            "comment": {
              "body": "Loads the plugins contained within the specified directory",
              "tags": "Returns A list of all plugins loaded.",
              "plain": "Loads the plugins contained within the specified directory\n@param directory Directory to check for plugins\n@return A list of all plugins loaded"
            }
          },
          {
            "kind": "METHOD",
            "name": "recalculatePermissionDefaults(org.bukkit.permissions.Permission)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "perm"
              }
            ],
            "comment": {
              "body": "Recalculates the defaults for the given \u003ca href\u003d\"org/bukkit/permissions/Permission.html\" title\u003d\"class in org.bukkit.permissions\"\u003e\u003ccode\u003ePermission\u003c/code\u003e\u003c/a\u003e.\n \u003cp\u003e\n This will have no effect if the specified permission is not registered\n here.",
              "plain": "Recalculates the defaults for the given {@link Permission}.\n \u003cp\u003e\n This will have no effect if the specified permission is not registered\n here.\n@param perm Permission to recalculate"
            }
          },
          {
            "kind": "METHOD",
            "name": "registerEvent(java.lang.Class\u003c? extends org.bukkit.event.Event\u003e,org.bukkit.event.Listener,org.bukkit.event.EventPriority,org.bukkit.plugin.EventExecutor,org.bukkit.plugin.Plugin)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "event"
              },
              {
                "kind": "PARAMETER",
                "name": "executor"
              },
              {
                "kind": "PARAMETER",
                "name": "listener"
              },
              {
                "kind": "PARAMETER",
                "name": "plugin"
              },
              {
                "kind": "PARAMETER",
                "name": "priority"
              }
            ],
            "comment": {
              "body": "Registers the specified executor to the given event class",
              "plain": "Registers the specified executor to the given event class\n@param event Event type to register\n@param listener Listener to register\n@param priority Priority to register this event at\n@param executor EventExecutor to register\n@param plugin Plugin to register"
            }
          },
          {
            "kind": "METHOD",
            "name": "registerEvent(java.lang.Class\u003c? extends org.bukkit.event.Event\u003e,org.bukkit.event.Listener,org.bukkit.event.EventPriority,org.bukkit.plugin.EventExecutor,org.bukkit.plugin.Plugin,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "event"
              },
              {
                "kind": "PARAMETER",
                "name": "executor"
              },
              {
                "kind": "PARAMETER",
                "name": "ignoreCancelled"
              },
              {
                "kind": "PARAMETER",
                "name": "listener"
              },
              {
                "kind": "PARAMETER",
                "name": "plugin"
              },
              {
                "kind": "PARAMETER",
                "name": "priority"
              }
            ],
            "comment": {
              "body": "Registers the specified executor to the given event class",
              "plain": "Registers the specified executor to the given event class\n@param event Event type to register\n@param listener Listener to register\n@param priority Priority to register this event at\n@param executor EventExecutor to register\n@param plugin Plugin to register\n@param ignoreCancelled Whether to pass cancelled events or not"
            }
          },
          {
            "kind": "METHOD",
            "name": "registerEvents(org.bukkit.event.Listener,org.bukkit.plugin.Plugin)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "listener"
              },
              {
                "kind": "PARAMETER",
                "name": "plugin"
              }
            ],
            "comment": {
              "body": "Registers all the events in the given listener class",
              "plain": "Registers all the events in the given listener class\n@param listener Listener to register\n@param plugin Plugin to register"
            }
          },
          {
            "kind": "METHOD",
            "name": "registerInterface(java.lang.Class\u003c? extends org.bukkit.plugin.PluginLoader\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "loader"
              }
            ],
            "comment": {
              "body": "Registers the specified plugin loader",
              "plain": "Registers the specified plugin loader\n@param loader Class name of the PluginLoader to register\n@throws IllegalArgumentException Thrown when the given Class is not a\n     valid PluginLoader"
            }
          },
          {
            "kind": "METHOD",
            "name": "removePermission(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ],
            "comment": {
              "body": "Removes a \u003ca href\u003d\"org/bukkit/permissions/Permission.html\" title\u003d\"class in org.bukkit.permissions\"\u003e\u003ccode\u003ePermission\u003c/code\u003e\u003c/a\u003e registration from this plugin manager.\n \u003cp\u003e\n If the specified permission does not exist in this plugin manager,\n nothing will happen.\n \u003cp\u003e\n Removing a permission registration will \u003cb\u003enot\u003c/b\u003e remove the\n permission from any \u003ca href\u003d\"org/bukkit/permissions/Permissible.html\" title\u003d\"interface in org.bukkit.permissions\"\u003e\u003ccode\u003ePermissible\u003c/code\u003e\u003c/a\u003es that have it.",
              "plain": "Removes a {@link Permission} registration from this plugin manager.\n \u003cp\u003e\n If the specified permission does not exist in this plugin manager,\n nothing will happen.\n \u003cp\u003e\n Removing a permission registration will \u003cb\u003enot\u003c/b\u003e remove the\n permission from any {@link Permissible}s that have it.\n@param name Permission to remove"
            }
          },
          {
            "kind": "METHOD",
            "name": "removePermission(org.bukkit.permissions.Permission)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "perm"
              }
            ],
            "comment": {
              "body": "Removes a \u003ca href\u003d\"org/bukkit/permissions/Permission.html\" title\u003d\"class in org.bukkit.permissions\"\u003e\u003ccode\u003ePermission\u003c/code\u003e\u003c/a\u003e registration from this plugin manager.\n \u003cp\u003e\n If the specified permission does not exist in this plugin manager,\n nothing will happen.\n \u003cp\u003e\n Removing a permission registration will \u003cb\u003enot\u003c/b\u003e remove the\n permission from any \u003ca href\u003d\"org/bukkit/permissions/Permissible.html\" title\u003d\"interface in org.bukkit.permissions\"\u003e\u003ccode\u003ePermissible\u003c/code\u003e\u003c/a\u003es that have it.",
              "plain": "Removes a {@link Permission} registration from this plugin manager.\n \u003cp\u003e\n If the specified permission does not exist in this plugin manager,\n nothing will happen.\n \u003cp\u003e\n Removing a permission registration will \u003cb\u003enot\u003c/b\u003e remove the\n permission from any {@link Permissible}s that have it.\n@param perm Permission to remove"
            }
          },
          {
            "kind": "METHOD",
            "name": "subscribeToDefaultPerms(boolean,org.bukkit.permissions.Permissible)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "op"
              },
              {
                "kind": "PARAMETER",
                "name": "permissible"
              }
            ],
            "comment": {
              "body": "Subscribes to the given Default permissions by operator status\n \u003cp\u003e\n If the specified defaults change in any form, the Permissible will be\n asked to recalculate.",
              "plain": "Subscribes to the given Default permissions by operator status\n \u003cp\u003e\n If the specified defaults change in any form, the Permissible will be\n asked to recalculate.\n@param op Default list to subscribe to\n@param permissible Permissible subscribing"
            }
          },
          {
            "kind": "METHOD",
            "name": "subscribeToPermission(java.lang.String,org.bukkit.permissions.Permissible)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "permissible"
              },
              {
                "kind": "PARAMETER",
                "name": "permission"
              }
            ],
            "comment": {
              "body": "Subscribes the given Permissible for information about the requested\n Permission, by name.\n \u003cp\u003e\n If the specified Permission changes in any form, the Permissible will\n be asked to recalculate.",
              "plain": "Subscribes the given Permissible for information about the requested\n Permission, by name.\n \u003cp\u003e\n If the specified Permission changes in any form, the Permissible will\n be asked to recalculate.\n@param permission Permission to subscribe to\n@param permissible Permissible subscribing"
            }
          },
          {
            "kind": "METHOD",
            "name": "unsubscribeFromDefaultPerms(boolean,org.bukkit.permissions.Permissible)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "op"
              },
              {
                "kind": "PARAMETER",
                "name": "permissible"
              }
            ],
            "comment": {
              "body": "Unsubscribes from the given Default permissions by operator status",
              "plain": "Unsubscribes from the given Default permissions by operator status\n@param op Default list to unsubscribe from\n@param permissible Permissible subscribing"
            }
          },
          {
            "kind": "METHOD",
            "name": "unsubscribeFromPermission(java.lang.String,org.bukkit.permissions.Permissible)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "permissible"
              },
              {
                "kind": "PARAMETER",
                "name": "permission"
              }
            ],
            "comment": {
              "body": "Unsubscribes the given Permissible for information about the requested\n Permission, by name.",
              "plain": "Unsubscribes the given Permissible for information about the requested\n Permission, by name.\n@param permission Permission to unsubscribe from\n@param permissible Permissible subscribing"
            }
          },
          {
            "kind": "METHOD",
            "name": "useTimings()",
            "comment": {
              "body": "Returns whether or not timing code should be used for event calls",
              "tags": "Returns True if event timings are to be used.",
              "plain": "Returns whether or not timing code should be used for event calls\n@return True if event timings are to be used"
            }
          }
        ],
        "comment": {
          "body": "Handles all plugin management from the Server",
          "plain": "Handles all plugin management from the Server"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.plugin.RegisteredListener",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "RegisteredListener(org.bukkit.event.Listener,org.bukkit.plugin.EventExecutor,org.bukkit.event.EventPriority,org.bukkit.plugin.Plugin,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "executor"
              },
              {
                "kind": "PARAMETER",
                "name": "ignoreCancelled"
              },
              {
                "kind": "PARAMETER",
                "name": "listener"
              },
              {
                "kind": "PARAMETER",
                "name": "plugin"
              },
              {
                "kind": "PARAMETER",
                "name": "priority"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "callEvent(org.bukkit.event.Event)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "event"
              }
            ],
            "comment": {
              "body": "Calls the event executor",
              "plain": "Calls the event executor\n@param event The event\n@throws EventException If an event handler throws an exception."
            }
          },
          {
            "kind": "FIELD",
            "name": "executor"
          },
          {
            "kind": "METHOD",
            "name": "getListener()",
            "comment": {
              "body": "Gets the listener for this registration",
              "tags": "Returns Registered Listener.",
              "plain": "Gets the listener for this registration\n@return Registered Listener"
            }
          },
          {
            "kind": "METHOD",
            "name": "getPlugin()",
            "comment": {
              "body": "Gets the plugin for this registration",
              "tags": "Returns Registered Plugin.",
              "plain": "Gets the plugin for this registration\n@return Registered Plugin"
            }
          },
          {
            "kind": "METHOD",
            "name": "getPriority()",
            "comment": {
              "body": "Gets the priority for this registration",
              "tags": "Returns Registered Priority.",
              "plain": "Gets the priority for this registration\n@return Registered Priority"
            }
          },
          {
            "kind": "FIELD",
            "name": "ignoreCancelled"
          },
          {
            "kind": "METHOD",
            "name": "isIgnoringCancelled()",
            "comment": {
              "body": "Whether this listener accepts cancelled events",
              "tags": "Returns True when ignoring cancelled events.",
              "plain": "Whether this listener accepts cancelled events\n@return True when ignoring cancelled events"
            }
          },
          {
            "kind": "FIELD",
            "name": "listener"
          },
          {
            "kind": "FIELD",
            "name": "plugin"
          },
          {
            "kind": "FIELD",
            "name": "priority"
          }
        ],
        "comment": {
          "body": "Stores relevant information for plugin listeners",
          "plain": "Stores relevant information for plugin listeners"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.plugin.RegisteredServiceProvider",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "RegisteredServiceProvider(java.lang.Class\u003cT\u003e,T,org.bukkit.plugin.ServicePriority,org.bukkit.plugin.Plugin)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "plugin"
              },
              {
                "kind": "PARAMETER",
                "name": "priority"
              },
              {
                "kind": "PARAMETER",
                "name": "provider"
              },
              {
                "kind": "PARAMETER",
                "name": "service"
              }
            ]
          },
          {
            "kind": "TYPE_PARAMETER",
            "name": "T"
          },
          {
            "kind": "METHOD",
            "name": "compareTo(org.bukkit.plugin.RegisteredServiceProvider\u003c?\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "other"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getPlugin()"
          },
          {
            "kind": "METHOD",
            "name": "getPriority()"
          },
          {
            "kind": "METHOD",
            "name": "getProvider()"
          },
          {
            "kind": "METHOD",
            "name": "getService()"
          },
          {
            "kind": "FIELD",
            "name": "plugin"
          },
          {
            "kind": "FIELD",
            "name": "priority"
          },
          {
            "kind": "FIELD",
            "name": "provider"
          },
          {
            "kind": "FIELD",
            "name": "service"
          }
        ],
        "comment": {
          "body": "A registered service provider.",
          "plain": "A registered service provider.\n@param \u003cT\u003e Service"
        }
      },
      {
        "kind": "ENUM",
        "name": "org.bukkit.plugin.ServicePriority",
        "children": [
          {
            "kind": "ENUM_CONSTANT",
            "name": "High"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "Highest"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "Low"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "Lowest"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "Normal"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "ServicePriority()"
          },
          {
            "kind": "METHOD",
            "name": "valueOf(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "values()"
          }
        ],
        "comment": {
          "body": "Represents various priorities of a provider.",
          "plain": "Represents various priorities of a provider."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.plugin.ServicesManager",
        "children": [
          {
            "kind": "METHOD",
            "name": "\u003cT\u003egetRegistration(java.lang.Class\u003cT\u003e)",
            "children": [
              {
                "kind": "TYPE_PARAMETER",
                "name": "T"
              },
              {
                "kind": "PARAMETER",
                "name": "service"
              }
            ],
            "comment": {
              "body": "Queries for a provider registration. This may return if no provider\n has been registered for a service.",
              "tags": "Returns provider registration or null.",
              "plain": "Queries for a provider registration. This may return if no provider\n has been registered for a service.\n@param \u003cT\u003e The service interface\n@param service The service interface\n@return provider registration or null"
            }
          },
          {
            "kind": "METHOD",
            "name": "\u003cT\u003egetRegistrations(java.lang.Class\u003cT\u003e)",
            "children": [
              {
                "kind": "TYPE_PARAMETER",
                "name": "T"
              },
              {
                "kind": "PARAMETER",
                "name": "service"
              }
            ],
            "comment": {
              "body": "Get registrations of providers for a service. The returned list is\n unmodifiable.",
              "tags": "Returns list of registrations.",
              "plain": "Get registrations of providers for a service. The returned list is\n unmodifiable.\n@param \u003cT\u003e The service interface\n@param service The service interface\n@return list of registrations"
            }
          },
          {
            "kind": "METHOD",
            "name": "\u003cT\u003eisProvidedFor(java.lang.Class\u003cT\u003e)",
            "children": [
              {
                "kind": "TYPE_PARAMETER",
                "name": "T"
              },
              {
                "kind": "PARAMETER",
                "name": "service"
              }
            ],
            "comment": {
              "body": "Returns whether a provider has been registered for a service. Do not\n check this first only to call \u003ccode\u003eload(service)\u003c/code\u003e later, as that\n would be a non-thread safe situation.",
              "tags": "Returns whether there has been a registered provider.",
              "plain": "Returns whether a provider has been registered for a service. Do not\n check this first only to call \u003ccode\u003eload(service)\u003c/code\u003e later, as that\n would be a non-thread safe situation.\n@param \u003cT\u003e service\n@param service service to check\n@return whether there has been a registered provider"
            }
          },
          {
            "kind": "METHOD",
            "name": "\u003cT\u003eload(java.lang.Class\u003cT\u003e)",
            "children": [
              {
                "kind": "TYPE_PARAMETER",
                "name": "T"
              },
              {
                "kind": "PARAMETER",
                "name": "service"
              }
            ],
            "comment": {
              "body": "Queries for a provider. This may return if no provider has been\n registered for a service. The highest priority provider is returned.",
              "tags": "Returns provider or null.",
              "plain": "Queries for a provider. This may return if no provider has been\n registered for a service. The highest priority provider is returned.\n@param \u003cT\u003e The service interface\n@param service The service interface\n@return provider or null"
            }
          },
          {
            "kind": "METHOD",
            "name": "\u003cT\u003eregister(java.lang.Class\u003cT\u003e,T,org.bukkit.plugin.Plugin,org.bukkit.plugin.ServicePriority)",
            "children": [
              {
                "kind": "TYPE_PARAMETER",
                "name": "T"
              },
              {
                "kind": "PARAMETER",
                "name": "plugin"
              },
              {
                "kind": "PARAMETER",
                "name": "priority"
              },
              {
                "kind": "PARAMETER",
                "name": "provider"
              },
              {
                "kind": "PARAMETER",
                "name": "service"
              }
            ],
            "comment": {
              "body": "Register a provider of a service.",
              "plain": "Register a provider of a service.\n@param \u003cT\u003e Provider\n@param service service class\n@param provider provider to register\n@param plugin plugin with the provider\n@param priority priority of the provider"
            }
          },
          {
            "kind": "METHOD",
            "name": "getKnownServices()",
            "comment": {
              "body": "Get a list of known services. A service is known if it has registered\n providers for it.",
              "tags": "Returns list of known services.",
              "plain": "Get a list of known services. A service is known if it has registered\n providers for it.\n@return list of known services"
            }
          },
          {
            "kind": "METHOD",
            "name": "getRegistrations(org.bukkit.plugin.Plugin)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "plugin"
              }
            ],
            "comment": {
              "body": "Get registrations of providers for a plugin.",
              "tags": "Returns provider registration or null.",
              "plain": "Get registrations of providers for a plugin.\n@param plugin The plugin\n@return provider registration or null"
            }
          },
          {
            "kind": "METHOD",
            "name": "unregister(java.lang.Class\u003c?\u003e,java.lang.Object)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "provider"
              },
              {
                "kind": "PARAMETER",
                "name": "service"
              }
            ],
            "comment": {
              "body": "Unregister a particular provider for a particular service.",
              "plain": "Unregister a particular provider for a particular service.\n@param service The service interface\n@param provider The service provider implementation"
            }
          },
          {
            "kind": "METHOD",
            "name": "unregister(java.lang.Object)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "provider"
              }
            ],
            "comment": {
              "body": "Unregister a particular provider.",
              "plain": "Unregister a particular provider.\n@param provider The service provider implementation"
            }
          },
          {
            "kind": "METHOD",
            "name": "unregisterAll(org.bukkit.plugin.Plugin)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "plugin"
              }
            ],
            "comment": {
              "body": "Unregister all the providers registered by a particular plugin.",
              "plain": "Unregister all the providers registered by a particular plugin.\n@param plugin The plugin"
            }
          }
        ],
        "comment": {
          "body": "Manages services and service providers. Services are an interface\n specifying a list of methods that a provider must implement. Providers are\n implementations of these services. A provider can be queried from the\n services manager in order to use a service (if one is available). If\n multiple plugins register a service, then the service with the highest\n priority takes precedence.",
          "plain": "Manages services and service providers. Services are an interface\n specifying a list of methods that a provider must implement. Providers are\n implementations of these services. A provider can be queried from the\n services manager in order to use a service (if one is available). If\n multiple plugins register a service, then the service with the highest\n priority takes precedence."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.plugin.SimplePluginManager",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "SimplePluginManager(org.bukkit.Server,org.bukkit.command.SimpleCommandMap)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "commandMap"
              },
              {
                "kind": "PARAMETER",
                "name": "instance"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "addPermission(org.bukkit.permissions.Permission)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "perm"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "addPermission(org.bukkit.permissions.Permission,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "dirty"
              },
              {
                "kind": "PARAMETER",
                "name": "perm"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            }
          },
          {
            "kind": "METHOD",
            "name": "calculatePermissionDefault(org.bukkit.permissions.Permission,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "dirty"
              },
              {
                "kind": "PARAMETER",
                "name": "perm"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "callEvent(org.bukkit.event.Event)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "event"
              }
            ],
            "comment": {
              "body": "Calls an event with the given details.\n \u003cp\u003e\n This method only synchronizes when the event is not asynchronous.",
              "plain": "Calls an event with the given details.\n \u003cp\u003e\n This method only synchronizes when the event is not asynchronous.\n@param event Event details"
            }
          },
          {
            "kind": "METHOD",
            "name": "checkUpdate(java.io.File)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "file"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "clearPermissions()"
          },
          {
            "kind": "METHOD",
            "name": "clearPlugins()"
          },
          {
            "kind": "FIELD",
            "name": "commandMap"
          },
          {
            "kind": "FIELD",
            "name": "defSubs"
          },
          {
            "kind": "FIELD",
            "name": "defaultPerms"
          },
          {
            "kind": "METHOD",
            "name": "dirtyPermissibles()",
            "deprecated": {
              "deprecated": "true"
            }
          },
          {
            "kind": "METHOD",
            "name": "dirtyPermissibles(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "op"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "disablePlugin(org.bukkit.plugin.Plugin)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "plugin"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "disablePlugin(org.bukkit.plugin.Plugin,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "closeClassloader"
              },
              {
                "kind": "PARAMETER",
                "name": "plugin"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "disablePlugins()"
          },
          {
            "kind": "METHOD",
            "name": "disablePlugins(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "closeClassloaders"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "enablePlugin(org.bukkit.plugin.Plugin)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "plugin"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "fileAssociations"
          },
          {
            "kind": "METHOD",
            "name": "fireEvent(org.bukkit.event.Event)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "event"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getDefaultPermSubscriptions(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "op"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getDefaultPermissions(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "op"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getEventListeners(java.lang.Class\u003c? extends org.bukkit.event.Event\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getPermission(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getPermissionSubscriptions(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "permission"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getPermissions()"
          },
          {
            "kind": "METHOD",
            "name": "getPlugin(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ],
            "comment": {
              "body": "Checks if the given plugin is loaded and returns it when applicable\n \u003cp\u003e\n Please note that the name of the plugin is case-sensitive",
              "tags": "Returns Plugin if it exists, otherwise null.",
              "plain": "Checks if the given plugin is loaded and returns it when applicable\n \u003cp\u003e\n Please note that the name of the plugin is case-sensitive\n@param name Name of the plugin to check\n@return Plugin if it exists, otherwise null"
            }
          },
          {
            "kind": "METHOD",
            "name": "getPlugins()"
          },
          {
            "kind": "METHOD",
            "name": "getRegistrationClass(java.lang.Class\u003c? extends org.bukkit.event.Event\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "clazz"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "handlePluginException(java.lang.String,java.lang.Throwable,org.bukkit.plugin.Plugin)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "ex"
              },
              {
                "kind": "PARAMETER",
                "name": "msg"
              },
              {
                "kind": "PARAMETER",
                "name": "plugin"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "isPluginEnabled(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ],
            "comment": {
              "body": "Checks if the given plugin is enabled or not\n \u003cp\u003e\n Please note that the name of the plugin is case-sensitive.",
              "tags": "Returns true if the plugin is enabled, otherwise false.",
              "plain": "Checks if the given plugin is enabled or not\n \u003cp\u003e\n Please note that the name of the plugin is case-sensitive.\n@param name Name of the plugin to check\n@return true if the plugin is enabled, otherwise false"
            }
          },
          {
            "kind": "METHOD",
            "name": "isPluginEnabled(org.bukkit.plugin.Plugin)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "plugin"
              }
            ],
            "comment": {
              "body": "Checks if the given plugin is enabled or not",
              "tags": "Returns true if the plugin is enabled, otherwise false.",
              "plain": "Checks if the given plugin is enabled or not\n@param plugin Plugin to check\n@return true if the plugin is enabled, otherwise false"
            }
          },
          {
            "kind": "METHOD",
            "name": "loadPlugin(java.io.File)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "file"
              }
            ],
            "comment": {
              "body": "Loads the plugin in the specified file\n \u003cp\u003e\n File must be valid according to the current enabled Plugin interfaces",
              "tags": "Returns The Plugin loaded, or null if it was invalid.",
              "plain": "Loads the plugin in the specified file\n \u003cp\u003e\n File must be valid according to the current enabled Plugin interfaces\n@param file File containing the plugin to load\n@return The Plugin loaded, or null if it was invalid\n@throws InvalidPluginException Thrown when the specified file is not a\n     valid plugin\n@throws UnknownDependencyException If a required dependency could not\n     be found"
            }
          },
          {
            "kind": "METHOD",
            "name": "loadPlugins(java.io.File)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "directory"
              }
            ],
            "comment": {
              "body": "Loads the plugins contained within the specified directory",
              "tags": "Returns A list of all plugins loaded.",
              "plain": "Loads the plugins contained within the specified directory\n@param directory Directory to check for plugins\n@return A list of all plugins loaded"
            }
          },
          {
            "kind": "FIELD",
            "name": "lookupNames"
          },
          {
            "kind": "FIELD",
            "name": "permSubs"
          },
          {
            "kind": "FIELD",
            "name": "permissions"
          },
          {
            "kind": "FIELD",
            "name": "plugins"
          },
          {
            "kind": "METHOD",
            "name": "recalculatePermissionDefaults(org.bukkit.permissions.Permission)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "perm"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "registerEvent(java.lang.Class\u003c? extends org.bukkit.event.Event\u003e,org.bukkit.event.Listener,org.bukkit.event.EventPriority,org.bukkit.plugin.EventExecutor,org.bukkit.plugin.Plugin)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "event"
              },
              {
                "kind": "PARAMETER",
                "name": "executor"
              },
              {
                "kind": "PARAMETER",
                "name": "listener"
              },
              {
                "kind": "PARAMETER",
                "name": "plugin"
              },
              {
                "kind": "PARAMETER",
                "name": "priority"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "registerEvent(java.lang.Class\u003c? extends org.bukkit.event.Event\u003e,org.bukkit.event.Listener,org.bukkit.event.EventPriority,org.bukkit.plugin.EventExecutor,org.bukkit.plugin.Plugin,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "event"
              },
              {
                "kind": "PARAMETER",
                "name": "executor"
              },
              {
                "kind": "PARAMETER",
                "name": "ignoreCancelled"
              },
              {
                "kind": "PARAMETER",
                "name": "listener"
              },
              {
                "kind": "PARAMETER",
                "name": "plugin"
              },
              {
                "kind": "PARAMETER",
                "name": "priority"
              }
            ],
            "comment": {
              "body": "Registers the given event to the specified listener using a directly\n passed EventExecutor",
              "plain": "Registers the given event to the specified listener using a directly\n passed EventExecutor\n@param event Event class to register\n@param listener PlayerListener to register\n@param priority Priority of this event\n@param executor EventExecutor to register\n@param plugin Plugin to register\n@param ignoreCancelled Do not call executor if event was already\n     cancelled"
            }
          },
          {
            "kind": "METHOD",
            "name": "registerEvents(org.bukkit.event.Listener,org.bukkit.plugin.Plugin)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "listener"
              },
              {
                "kind": "PARAMETER",
                "name": "plugin"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "registerInterface(java.lang.Class\u003c? extends org.bukkit.plugin.PluginLoader\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "loader"
              }
            ],
            "comment": {
              "body": "Registers the specified plugin loader",
              "plain": "Registers the specified plugin loader\n@param loader Class name of the PluginLoader to register\n@throws IllegalArgumentException Thrown when the given Class is not a\n     valid PluginLoader"
            }
          },
          {
            "kind": "METHOD",
            "name": "removePermission(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "removePermission(org.bukkit.permissions.Permission)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "perm"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "server"
          },
          {
            "kind": "METHOD",
            "name": "subscribeToDefaultPerms(boolean,org.bukkit.permissions.Permissible)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "op"
              },
              {
                "kind": "PARAMETER",
                "name": "permissible"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "subscribeToPermission(java.lang.String,org.bukkit.permissions.Permissible)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "permissible"
              },
              {
                "kind": "PARAMETER",
                "name": "permission"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "unsubscribeFromDefaultPerms(boolean,org.bukkit.permissions.Permissible)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "op"
              },
              {
                "kind": "PARAMETER",
                "name": "permissible"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "unsubscribeFromPermission(java.lang.String,org.bukkit.permissions.Permissible)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "permissible"
              },
              {
                "kind": "PARAMETER",
                "name": "permission"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "updateDirectory"
          },
          {
            "kind": "FIELD",
            "name": "useTimings"
          },
          {
            "kind": "METHOD",
            "name": "useTimings()"
          },
          {
            "kind": "METHOD",
            "name": "useTimings(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "use"
              }
            ],
            "comment": {
              "body": "Sets whether or not per event timing code should be used",
              "plain": "Sets whether or not per event timing code should be used\n@param use True if per event timing code should be used"
            }
          }
        ],
        "comment": {
          "body": "Handles all plugin management from the Server",
          "plain": "Handles all plugin management from the Server"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.plugin.SimpleServicesManager",
        "children": [
          {
            "kind": "METHOD",
            "name": "\u003cT\u003egetRegistration(java.lang.Class\u003cT\u003e)",
            "children": [
              {
                "kind": "TYPE_PARAMETER",
                "name": "T"
              },
              {
                "kind": "PARAMETER",
                "name": "service"
              }
            ],
            "comment": {
              "body": "Queries for a provider registration. This may return if no provider\n has been registered for a service.",
              "tags": "Returns provider registration or null.",
              "plain": "Queries for a provider registration. This may return if no provider\n has been registered for a service.\n@param \u003cT\u003e The service interface\n@param service The service interface\n@return provider registration or null"
            }
          },
          {
            "kind": "METHOD",
            "name": "\u003cT\u003egetRegistrations(java.lang.Class\u003cT\u003e)",
            "children": [
              {
                "kind": "TYPE_PARAMETER",
                "name": "T"
              },
              {
                "kind": "PARAMETER",
                "name": "service"
              }
            ],
            "comment": {
              "body": "Get registrations of providers for a service. The returned list is\n an unmodifiable copy.",
              "tags": "Returns a copy of the list of registrations.",
              "plain": "Get registrations of providers for a service. The returned list is\n an unmodifiable copy.\n@param \u003cT\u003e The service interface\n@param service The service interface\n@return a copy of the list of registrations"
            }
          },
          {
            "kind": "METHOD",
            "name": "\u003cT\u003eisProvidedFor(java.lang.Class\u003cT\u003e)",
            "children": [
              {
                "kind": "TYPE_PARAMETER",
                "name": "T"
              },
              {
                "kind": "PARAMETER",
                "name": "service"
              }
            ],
            "comment": {
              "body": "Returns whether a provider has been registered for a service.",
              "tags": "Returns true if and only if there are registered providers.",
              "plain": "Returns whether a provider has been registered for a service.\n@param \u003cT\u003e service\n@param service service to check\n@return true if and only if there are registered providers"
            }
          },
          {
            "kind": "METHOD",
            "name": "\u003cT\u003eload(java.lang.Class\u003cT\u003e)",
            "children": [
              {
                "kind": "TYPE_PARAMETER",
                "name": "T"
              },
              {
                "kind": "PARAMETER",
                "name": "service"
              }
            ],
            "comment": {
              "body": "Queries for a provider. This may return if no provider has been\n registered for a service. The highest priority provider is returned.",
              "tags": "Returns provider or null.",
              "plain": "Queries for a provider. This may return if no provider has been\n registered for a service. The highest priority provider is returned.\n@param \u003cT\u003e The service interface\n@param service The service interface\n@return provider or null"
            }
          },
          {
            "kind": "METHOD",
            "name": "\u003cT\u003eregister(java.lang.Class\u003cT\u003e,T,org.bukkit.plugin.Plugin,org.bukkit.plugin.ServicePriority)",
            "children": [
              {
                "kind": "TYPE_PARAMETER",
                "name": "T"
              },
              {
                "kind": "PARAMETER",
                "name": "plugin"
              },
              {
                "kind": "PARAMETER",
                "name": "priority"
              },
              {
                "kind": "PARAMETER",
                "name": "provider"
              },
              {
                "kind": "PARAMETER",
                "name": "service"
              }
            ],
            "comment": {
              "body": "Register a provider of a service.",
              "plain": "Register a provider of a service.\n@param \u003cT\u003e Provider\n@param service service class\n@param provider provider to register\n@param plugin plugin with the provider\n@param priority priority of the provider"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "SimpleServicesManager()"
          },
          {
            "kind": "METHOD",
            "name": "getKnownServices()",
            "comment": {
              "body": "Get a list of known services. A service is known if it has registered\n providers for it.",
              "tags": "Returns a copy of the set of known services.",
              "plain": "Get a list of known services. A service is known if it has registered\n providers for it.\n@return a copy of the set of known services"
            }
          },
          {
            "kind": "METHOD",
            "name": "getRegistrations(org.bukkit.plugin.Plugin)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "plugin"
              }
            ],
            "comment": {
              "body": "Get registrations of providers for a plugin.",
              "tags": "Returns provider registration or null.",
              "plain": "Get registrations of providers for a plugin.\n@param plugin The plugin\n@return provider registration or null"
            }
          },
          {
            "kind": "FIELD",
            "name": "providers",
            "comment": {
              "body": "Map of providers.",
              "plain": "Map of providers."
            }
          },
          {
            "kind": "METHOD",
            "name": "unregister(java.lang.Class\u003c?\u003e,java.lang.Object)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "provider"
              },
              {
                "kind": "PARAMETER",
                "name": "service"
              }
            ],
            "comment": {
              "body": "Unregister a particular provider for a particular service.",
              "plain": "Unregister a particular provider for a particular service.\n@param service The service interface\n@param provider The service provider implementation"
            }
          },
          {
            "kind": "METHOD",
            "name": "unregister(java.lang.Object)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "provider"
              }
            ],
            "comment": {
              "body": "Unregister a particular provider.",
              "plain": "Unregister a particular provider.\n@param provider The service provider implementation"
            }
          },
          {
            "kind": "METHOD",
            "name": "unregisterAll(org.bukkit.plugin.Plugin)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "plugin"
              }
            ],
            "comment": {
              "body": "Unregister all the providers registered by a particular plugin.",
              "plain": "Unregister all the providers registered by a particular plugin.\n@param plugin The plugin"
            }
          }
        ],
        "comment": {
          "body": "A simple services manager.",
          "plain": "A simple services manager."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.plugin.TimedRegisteredListener",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "TimedRegisteredListener(org.bukkit.event.Listener,org.bukkit.plugin.EventExecutor,org.bukkit.event.EventPriority,org.bukkit.plugin.Plugin,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "eventExecutor"
              },
              {
                "kind": "PARAMETER",
                "name": "eventPriority"
              },
              {
                "kind": "PARAMETER",
                "name": "listenCancelled"
              },
              {
                "kind": "PARAMETER",
                "name": "pluginListener"
              },
              {
                "kind": "PARAMETER",
                "name": "registeredPlugin"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "callEvent(org.bukkit.event.Event)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "event"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "count"
          },
          {
            "kind": "FIELD",
            "name": "eventClass"
          },
          {
            "kind": "METHOD",
            "name": "getCommonSuperclass(java.lang.Class\u003c?\u003e,java.lang.Class\u003c?\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "class1"
              },
              {
                "kind": "PARAMETER",
                "name": "class2"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getCount()",
            "comment": {
              "body": "Gets the total times this listener has been called",
              "tags": "Returns Times this listener has been called.",
              "plain": "Gets the total times this listener has been called\n@return Times this listener has been called"
            }
          },
          {
            "kind": "METHOD",
            "name": "getEventClass()",
            "comment": {
              "body": "Gets the class of the events this listener handled. If it handled\n multiple classes of event, the closest shared superclass will be\n returned, such that for any event this listener has handled,\n \u003ccode\u003ethis.getEventClass().isAssignableFrom(event.getClass())\u003c/code\u003e\n and no class \u003ccode\u003ethis.getEventClass().isAssignableFrom(clazz)\n \u0026amp;\u0026amp; this.getEventClass() !\u003d clazz \u0026amp;\u0026amp;\n event.getClass().isAssignableFrom(clazz)\u003c/code\u003e for all handled events.",
              "tags": "Returns the event class handled by this RegisteredListener.",
              "plain": "Gets the class of the events this listener handled. If it handled\n multiple classes of event, the closest shared superclass will be\n returned, such that for any event this listener has handled,\n \u003ccode\u003ethis.getEventClass().isAssignableFrom(event.getClass())\u003c/code\u003e\n and no class \u003ccode\u003ethis.getEventClass().isAssignableFrom(clazz)\n {@literal \u0026\u0026 this.getEventClass() !\u003d clazz \u0026\u0026}\n event.getClass().isAssignableFrom(clazz)\u003c/code\u003e for all handled events.\n@return the event class handled by this RegisteredListener"
            }
          },
          {
            "kind": "METHOD",
            "name": "getTotalTime()",
            "comment": {
              "body": "Gets the total time calls to this listener have taken",
              "tags": "Returns Total time for all calls of this listener.",
              "plain": "Gets the total time calls to this listener have taken\n@return Total time for all calls of this listener"
            }
          },
          {
            "kind": "METHOD",
            "name": "hasMultiple()",
            "comment": {
              "body": "Gets whether this listener has handled multiple events, such that for\n some two events, \u003ccode\u003eeventA.getClass() !\u003d eventB.getClass()\u003c/code\u003e.",
              "tags": "Returns true if this listener has handled multiple events.",
              "plain": "Gets whether this listener has handled multiple events, such that for\n some two events, \u003ccode\u003eeventA.getClass() !\u003d eventB.getClass()\u003c/code\u003e.\n@return true if this listener has handled multiple events"
            }
          },
          {
            "kind": "FIELD",
            "name": "multiple"
          },
          {
            "kind": "METHOD",
            "name": "reset()",
            "comment": {
              "body": "Resets the call count and total time for this listener",
              "plain": "Resets the call count and total time for this listener"
            }
          },
          {
            "kind": "FIELD",
            "name": "totalTime"
          }
        ],
        "comment": {
          "body": "Extends RegisteredListener to include timing information",
          "plain": "Extends RegisteredListener to include timing information"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.plugin.UnknownDependencyException",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "UnknownDependencyException()",
            "comment": {
              "body": "Constructs a new UnknownDependencyException",
              "plain": "Constructs a new UnknownDependencyException"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "UnknownDependencyException(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "message"
              }
            ],
            "comment": {
              "body": "Constructs a new UnknownDependencyException with the given message",
              "plain": "Constructs a new UnknownDependencyException with the given message\n@param message Brief message explaining the cause of the exception"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "UnknownDependencyException(java.lang.Throwable)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "throwable"
              }
            ],
            "comment": {
              "body": "Constructs a new UnknownDependencyException based on the given\n Exception",
              "plain": "Constructs a new UnknownDependencyException based on the given\n Exception\n@param throwable Exception that triggered this Exception"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "UnknownDependencyException(java.lang.Throwable,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "message"
              },
              {
                "kind": "PARAMETER",
                "name": "throwable"
              }
            ],
            "comment": {
              "body": "Constructs a new UnknownDependencyException based on the given\n Exception",
              "plain": "Constructs a new UnknownDependencyException based on the given\n Exception\n@param message Brief message explaining the cause of the exception\n@param throwable Exception that triggered this Exception"
            }
          },
          {
            "kind": "FIELD",
            "name": "serialVersionUID"
          }
        ],
        "comment": {
          "body": "Thrown when attempting to load an invalid Plugin file",
          "plain": "Thrown when attempting to load an invalid Plugin file"
        }
      }
    ]
  },
  {
    "kind": "PACKAGE",
    "name": "org.bukkit.plugin.java",
    "children": [
      {
        "kind": "CLASS",
        "name": "org.bukkit.plugin.java.JavaPlugin",
        "children": [
          {
            "kind": "METHOD",
            "name": "\u003cT\u003egetPlugin(java.lang.Class\u003cT\u003e)",
            "children": [
              {
                "kind": "TYPE_PARAMETER",
                "name": "T"
              },
              {
                "kind": "PARAMETER",
                "name": "clazz"
              }
            ],
            "comment": {
              "body": "This method provides fast access to the plugin that has \u003ca href\u003d\"org/bukkit/plugin/java/JavaPlugin.html#getProvidingPlugin(java.lang.Class)\"\u003e\u003ccode\u003eprovided\u003c/code\u003e\u003c/a\u003e the given plugin class, which is\n usually the plugin that implemented it.\n \u003cp\u003e\n An exception to this would be if plugin\u0027s jar that contained the class\n does not extend the class, where the intended plugin would have\n resided in a different jar / classloader.",
              "tags": "Returns the plugin that provides and implements said class.",
              "plain": "This method provides fast access to the plugin that has {@link #getProvidingPlugin(Class) provided} the given plugin class, which is\n usually the plugin that implemented it.\n \u003cp\u003e\n An exception to this would be if plugin\u0027s jar that contained the class\n does not extend the class, where the intended plugin would have\n resided in a different jar / classloader.\n@param \u003cT\u003e a class that extends JavaPlugin\n@param clazz the class desired\n@return the plugin that provides and implements said class\n@throws IllegalArgumentException if clazz is null\n@throws IllegalArgumentException if clazz does not extend {@link JavaPlugin}\n@throws IllegalStateException if clazz was not provided by a plugin,\n     for example, if called with\n     \u003ccode\u003eJavaPlugin.getPlugin(JavaPlugin.class)\u003c/code\u003e\n@throws IllegalStateException if called from the static initializer for\n     given JavaPlugin\n@throws ClassCastException if plugin that provided the class does not\n     extend the class"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "JavaPlugin()"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "JavaPlugin(org.bukkit.plugin.java.JavaPluginLoader,org.bukkit.plugin.PluginDescriptionFile,java.io.File,java.io.File)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "dataFolder"
              },
              {
                "kind": "PARAMETER",
                "name": "description"
              },
              {
                "kind": "PARAMETER",
                "name": "file"
              },
              {
                "kind": "PARAMETER",
                "name": "loader"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "classLoader"
          },
          {
            "kind": "FIELD",
            "name": "configFile"
          },
          {
            "kind": "FIELD",
            "name": "dataFolder"
          },
          {
            "kind": "FIELD",
            "name": "description"
          },
          {
            "kind": "FIELD",
            "name": "file"
          },
          {
            "kind": "METHOD",
            "name": "getClassLoader()",
            "comment": {
              "body": "Returns the ClassLoader which holds this plugin",
              "tags": "Returns ClassLoader holding this plugin.",
              "plain": "Returns the ClassLoader which holds this plugin\n@return ClassLoader holding this plugin"
            }
          },
          {
            "kind": "METHOD",
            "name": "getCommand(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ],
            "comment": {
              "body": "Gets the command with the given name, specific to this plugin. Commands\n need to be registered in the \u003ca href\u003d\"org/bukkit/plugin/PluginDescriptionFile.html#getCommands()\"\u003e\u003ccode\u003ePluginDescriptionFile\u003c/code\u003e\u003c/a\u003e to exist at runtime.",
              "tags": "Returns the plugin command if found, otherwise null.",
              "plain": "Gets the command with the given name, specific to this plugin. Commands\n need to be registered in the {@link PluginDescriptionFile#getCommands() PluginDescriptionFile} to exist at runtime.\n@param name name or alias of the command\n@return the plugin command if found, otherwise null"
            }
          },
          {
            "kind": "METHOD",
            "name": "getConfig()"
          },
          {
            "kind": "METHOD",
            "name": "getDataFolder()",
            "comment": {
              "body": "Returns the folder that the plugin data\u0027s files are located in. The\n folder may not yet exist.",
              "tags": "Returns The folder..",
              "plain": "Returns the folder that the plugin data\u0027s files are located in. The\n folder may not yet exist.\n@return The folder."
            }
          },
          {
            "kind": "METHOD",
            "name": "getDefaultWorldGenerator(java.lang.String,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "id"
              },
              {
                "kind": "PARAMETER",
                "name": "worldName"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getDescription()",
            "comment": {
              "body": "Returns the plugin.yaml file containing the details for this plugin",
              "tags": "Returns Contents of the plugin.yaml file.",
              "plain": "Returns the plugin.yaml file containing the details for this plugin\n@return Contents of the plugin.yaml file"
            }
          },
          {
            "kind": "METHOD",
            "name": "getFile()",
            "comment": {
              "body": "Returns the file which contains this plugin",
              "tags": "Returns File containing this plugin.",
              "plain": "Returns the file which contains this plugin\n@return File containing this plugin"
            }
          },
          {
            "kind": "METHOD",
            "name": "getLogger()"
          },
          {
            "kind": "METHOD",
            "name": "getPluginLoader()",
            "comment": {
              "body": "Gets the associated PluginLoader responsible for this plugin",
              "tags": "Returns PluginLoader that controls this plugin.",
              "plain": "Gets the associated PluginLoader responsible for this plugin\n@return PluginLoader that controls this plugin"
            }
          },
          {
            "kind": "METHOD",
            "name": "getProvidingPlugin(java.lang.Class\u003c?\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "clazz"
              }
            ],
            "comment": {
              "body": "This method provides fast access to the plugin that has provided the\n given class.",
              "tags": "Returns the plugin that provided the class.",
              "plain": "This method provides fast access to the plugin that has provided the\n given class.\n@param clazz a class belonging to a plugin\n@return the plugin that provided the class\n@throws IllegalArgumentException if the class is not provided by a\n     JavaPlugin\n@throws IllegalArgumentException if class is null\n@throws IllegalStateException if called from the static initializer for\n     given JavaPlugin"
            }
          },
          {
            "kind": "METHOD",
            "name": "getResource(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "filename"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getServer()",
            "comment": {
              "body": "Returns the Server instance currently running this plugin",
              "tags": "Returns Server running this plugin.",
              "plain": "Returns the Server instance currently running this plugin\n@return Server running this plugin"
            }
          },
          {
            "kind": "METHOD",
            "name": "getTextResource(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "file"
              }
            ],
            "comment": {
              "body": "Provides a reader for a text file located inside the jar.\n \u003cp\u003e\n The returned reader will read text with the UTF-8 charset.",
              "tags": "Returns null if \u003ca href\u003d\"org/bukkit/plugin/java/JavaPlugin.html#getResource(java.lang.String)\"\u003e\u003ccode\u003eJavaPlugin.getResource(String)\u003c/code\u003e\u003c/a\u003e returns null.",
              "plain": "Provides a reader for a text file located inside the jar.\n \u003cp\u003e\n The returned reader will read text with the UTF-8 charset.\n@param file the filename of the resource to load\n@return null if {@link #getResource(String)} returns null\n@throws IllegalArgumentException if file is null\n@see ClassLoader#getResourceAsStream(String)"
            }
          },
          {
            "kind": "METHOD",
            "name": "init(org.bukkit.plugin.PluginLoader,org.bukkit.Server,org.bukkit.plugin.PluginDescriptionFile,java.io.File,java.io.File,java.lang.ClassLoader)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "classLoader"
              },
              {
                "kind": "PARAMETER",
                "name": "dataFolder"
              },
              {
                "kind": "PARAMETER",
                "name": "description"
              },
              {
                "kind": "PARAMETER",
                "name": "file"
              },
              {
                "kind": "PARAMETER",
                "name": "loader"
              },
              {
                "kind": "PARAMETER",
                "name": "server"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "isEnabled"
          },
          {
            "kind": "METHOD",
            "name": "isEnabled()",
            "comment": {
              "body": "Returns a value indicating whether or not this plugin is currently\n enabled",
              "tags": "Returns true if this plugin is enabled, otherwise false.",
              "plain": "Returns a value indicating whether or not this plugin is currently\n enabled\n@return true if this plugin is enabled, otherwise false"
            }
          },
          {
            "kind": "METHOD",
            "name": "isNaggable()"
          },
          {
            "kind": "FIELD",
            "name": "loader"
          },
          {
            "kind": "FIELD",
            "name": "logger"
          },
          {
            "kind": "FIELD",
            "name": "naggable"
          },
          {
            "kind": "FIELD",
            "name": "newConfig"
          },
          {
            "kind": "METHOD",
            "name": "onCommand(org.bukkit.command.CommandSender,org.bukkit.command.Command,java.lang.String,java.lang.String[])",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "args"
              },
              {
                "kind": "PARAMETER",
                "name": "command"
              },
              {
                "kind": "PARAMETER",
                "name": "label"
              },
              {
                "kind": "PARAMETER",
                "name": "sender"
              }
            ],
            "comment": {
              "body": "Executes the given command, returning its success",
              "plain": "{@inheritDoc}"
            }
          },
          {
            "kind": "METHOD",
            "name": "onDisable()"
          },
          {
            "kind": "METHOD",
            "name": "onEnable()"
          },
          {
            "kind": "METHOD",
            "name": "onLoad()"
          },
          {
            "kind": "METHOD",
            "name": "onTabComplete(org.bukkit.command.CommandSender,org.bukkit.command.Command,java.lang.String,java.lang.String[])",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "alias"
              },
              {
                "kind": "PARAMETER",
                "name": "args"
              },
              {
                "kind": "PARAMETER",
                "name": "command"
              },
              {
                "kind": "PARAMETER",
                "name": "sender"
              }
            ],
            "comment": {
              "body": "Requests a list of possible completions for a command argument.",
              "plain": "{@inheritDoc}"
            }
          },
          {
            "kind": "METHOD",
            "name": "reloadConfig()"
          },
          {
            "kind": "METHOD",
            "name": "saveConfig()"
          },
          {
            "kind": "METHOD",
            "name": "saveDefaultConfig()"
          },
          {
            "kind": "METHOD",
            "name": "saveResource(java.lang.String,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "replace"
              },
              {
                "kind": "PARAMETER",
                "name": "resourcePath"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "server"
          },
          {
            "kind": "METHOD",
            "name": "setEnabled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "enabled"
              }
            ],
            "comment": {
              "body": "Sets the enabled state of this plugin",
              "plain": "Sets the enabled state of this plugin\n@param enabled true if enabled, otherwise false"
            }
          },
          {
            "kind": "METHOD",
            "name": "setNaggable(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "canNag"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "toString()"
          }
        ],
        "comment": {
          "body": "Represents a Java plugin",
          "plain": "Represents a Java plugin"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.plugin.java.JavaPluginLoader",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "JavaPluginLoader(org.bukkit.Server)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "instance"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "This class was not meant to be constructed explicitly",
              "plain": "This class was not meant to be constructed explicitly\n@param instance the server instance"
            }
          },
          {
            "kind": "FIELD",
            "name": "classes"
          },
          {
            "kind": "METHOD",
            "name": "createRegisteredListeners(org.bukkit.event.Listener,org.bukkit.plugin.Plugin)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "listener"
              },
              {
                "kind": "PARAMETER",
                "name": "plugin"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "disablePlugin(org.bukkit.plugin.Plugin)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "plugin"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "disablePlugin(org.bukkit.plugin.Plugin,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "closeClassloader"
              },
              {
                "kind": "PARAMETER",
                "name": "plugin"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "enablePlugin(org.bukkit.plugin.Plugin)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "plugin"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "fileFilters"
          },
          {
            "kind": "METHOD",
            "name": "getClassByName(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getPluginDescription(java.io.File)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "file"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getPluginFileFilters()"
          },
          {
            "kind": "METHOD",
            "name": "loadPlugin(java.io.File)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "file"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "loaders"
          },
          {
            "kind": "METHOD",
            "name": "removeClass(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "server"
          },
          {
            "kind": "METHOD",
            "name": "setClass(java.lang.String,java.lang.Class\u003c?\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "clazz"
              },
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ]
          }
        ],
        "comment": {
          "body": "Represents a Java plugin loader, allowing plugins in the form of .jar",
          "plain": "Represents a Java plugin loader, allowing plugins in the form of .jar"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.plugin.java.PluginClassLoader",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PluginClassLoader(org.bukkit.plugin.java.JavaPluginLoader,java.lang.ClassLoader,org.bukkit.plugin.PluginDescriptionFile,java.io.File,java.io.File)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "dataFolder"
              },
              {
                "kind": "PARAMETER",
                "name": "description"
              },
              {
                "kind": "PARAMETER",
                "name": "file"
              },
              {
                "kind": "PARAMETER",
                "name": "loader"
              },
              {
                "kind": "PARAMETER",
                "name": "parent"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "classes"
          },
          {
            "kind": "METHOD",
            "name": "close()"
          },
          {
            "kind": "FIELD",
            "name": "dataFolder"
          },
          {
            "kind": "FIELD",
            "name": "description"
          },
          {
            "kind": "FIELD",
            "name": "file"
          },
          {
            "kind": "METHOD",
            "name": "findClass(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "findClass(java.lang.String,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "checkGlobal"
              },
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getClasses()"
          },
          {
            "kind": "METHOD",
            "name": "getPlugin()"
          },
          {
            "kind": "METHOD",
            "name": "initialize(org.bukkit.plugin.java.JavaPlugin)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "javaPlugin"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "jar"
          },
          {
            "kind": "FIELD",
            "name": "loader"
          },
          {
            "kind": "FIELD",
            "name": "logger"
          },
          {
            "kind": "FIELD",
            "name": "manifest"
          },
          {
            "kind": "FIELD",
            "name": "plugin"
          },
          {
            "kind": "FIELD",
            "name": "pluginInit"
          },
          {
            "kind": "FIELD",
            "name": "pluginState"
          },
          {
            "kind": "FIELD",
            "name": "url"
          }
        ],
        "comment": {
          "body": "A ClassLoader for plugins, to allow shared classes across multiple plugins",
          "plain": "A ClassLoader for plugins, to allow shared classes across multiple plugins"
        }
      }
    ]
  },
  {
    "kind": "PACKAGE",
    "name": "org.bukkit.plugin.messaging",
    "children": [
      {
        "kind": "CLASS",
        "name": "org.bukkit.plugin.messaging.ChannelNameTooLongException",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "ChannelNameTooLongException()"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "ChannelNameTooLongException(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "channel"
              }
            ]
          }
        ],
        "comment": {
          "body": "Thrown if a Plugin Channel is too long.",
          "plain": "Thrown if a Plugin Channel is too long."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.plugin.messaging.ChannelNotRegisteredException",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "ChannelNotRegisteredException()"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "ChannelNotRegisteredException(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "channel"
              }
            ]
          }
        ],
        "comment": {
          "body": "Thrown if a Plugin attempts to send a message on an unregistered channel.",
          "plain": "Thrown if a Plugin attempts to send a message on an unregistered channel."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.plugin.messaging.MessageTooLargeException",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "MessageTooLargeException()"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "MessageTooLargeException(byte[])",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "message"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "MessageTooLargeException(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "length"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "MessageTooLargeException(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "msg"
              }
            ]
          }
        ],
        "comment": {
          "body": "Thrown if a Plugin Message is sent that is too large to be sent.",
          "plain": "Thrown if a Plugin Message is sent that is too large to be sent."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.plugin.messaging.Messenger",
        "children": [
          {
            "kind": "FIELD",
            "name": "MAX_CHANNEL_SIZE",
            "comment": {
              "body": "Represents the largest size that a Plugin Channel may be.",
              "plain": "Represents the largest size that a Plugin Channel may be."
            }
          },
          {
            "kind": "FIELD",
            "name": "MAX_MESSAGE_SIZE",
            "comment": {
              "body": "Represents the largest size that an individual Plugin Message may be.",
              "plain": "Represents the largest size that an individual Plugin Message may be."
            }
          },
          {
            "kind": "METHOD",
            "name": "dispatchIncomingMessage(org.bukkit.entity.Player,java.lang.String,byte[])",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "channel"
              },
              {
                "kind": "PARAMETER",
                "name": "message"
              },
              {
                "kind": "PARAMETER",
                "name": "source"
              }
            ],
            "comment": {
              "body": "Dispatches the specified incoming message to any registered listeners.",
              "plain": "Dispatches the specified incoming message to any registered listeners.\n@param source Source of the message.\n@param channel Channel that the message was sent by.\n@param message Raw payload of the message."
            }
          },
          {
            "kind": "METHOD",
            "name": "getIncomingChannelRegistrations(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "channel"
              }
            ],
            "comment": {
              "body": "Gets a set containing all the incoming plugin channel registrations\n that are on the requested channel.",
              "tags": "Returns List of all registrations that are on the channel..",
              "plain": "Gets a set containing all the incoming plugin channel registrations\n that are on the requested channel.\n@param channel Channel to retrieve registrations for.\n@return List of all registrations that are on the channel.\n@throws IllegalArgumentException Thrown if channel is null."
            }
          },
          {
            "kind": "METHOD",
            "name": "getIncomingChannelRegistrations(org.bukkit.plugin.Plugin)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "plugin"
              }
            ],
            "comment": {
              "body": "Gets a set containing all the incoming plugin channel registrations\n that the specified plugin has.",
              "tags": "Returns List of all registrations that the plugin has..",
              "plain": "Gets a set containing all the incoming plugin channel registrations\n that the specified plugin has.\n@param plugin Plugin to retrieve registrations for.\n@return List of all registrations that the plugin has.\n@throws IllegalArgumentException Thrown if plugin is null."
            }
          },
          {
            "kind": "METHOD",
            "name": "getIncomingChannelRegistrations(org.bukkit.plugin.Plugin,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "channel"
              },
              {
                "kind": "PARAMETER",
                "name": "plugin"
              }
            ],
            "comment": {
              "body": "Gets a set containing all the incoming plugin channel registrations\n that the specified plugin has on the requested channel.",
              "tags": "Returns List of all registrations that the plugin has..",
              "plain": "Gets a set containing all the incoming plugin channel registrations\n that the specified plugin has on the requested channel.\n@param plugin Plugin to retrieve registrations for.\n@param channel Channel to filter registrations by.\n@return List of all registrations that the plugin has.\n@throws IllegalArgumentException Thrown if plugin or channel is null."
            }
          },
          {
            "kind": "METHOD",
            "name": "getIncomingChannels()",
            "comment": {
              "body": "Gets a set containing all the incoming plugin channels.",
              "tags": "Returns List of all registered incoming plugin channels..",
              "plain": "Gets a set containing all the incoming plugin channels.\n@return List of all registered incoming plugin channels."
            }
          },
          {
            "kind": "METHOD",
            "name": "getIncomingChannels(org.bukkit.plugin.Plugin)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "plugin"
              }
            ],
            "comment": {
              "body": "Gets a set containing all the incoming plugin channels that the\n specified plugin is registered for.",
              "tags": "Returns List of all registered incoming plugin channels that the plugin\n     is registered for..",
              "plain": "Gets a set containing all the incoming plugin channels that the\n specified plugin is registered for.\n@param plugin Plugin to retrieve channels for.\n@return List of all registered incoming plugin channels that the plugin\n     is registered for.\n@throws IllegalArgumentException Thrown if plugin is null."
            }
          },
          {
            "kind": "METHOD",
            "name": "getOutgoingChannels()",
            "comment": {
              "body": "Gets a set containing all the outgoing plugin channels.",
              "tags": "Returns List of all registered outgoing plugin channels..",
              "plain": "Gets a set containing all the outgoing plugin channels.\n@return List of all registered outgoing plugin channels."
            }
          },
          {
            "kind": "METHOD",
            "name": "getOutgoingChannels(org.bukkit.plugin.Plugin)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "plugin"
              }
            ],
            "comment": {
              "body": "Gets a set containing all the outgoing plugin channels that the\n specified plugin is registered to.",
              "tags": "Returns List of all registered outgoing plugin channels that a plugin\n     is registered to..",
              "plain": "Gets a set containing all the outgoing plugin channels that the\n specified plugin is registered to.\n@param plugin Plugin to retrieve channels for.\n@return List of all registered outgoing plugin channels that a plugin\n     is registered to.\n@throws IllegalArgumentException Thrown if plugin is null."
            }
          },
          {
            "kind": "METHOD",
            "name": "isIncomingChannelRegistered(org.bukkit.plugin.Plugin,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "channel"
              },
              {
                "kind": "PARAMETER",
                "name": "plugin"
              }
            ],
            "comment": {
              "body": "Checks if the specified plugin has registered to receive incoming\n messages through the requested channel.",
              "tags": "Returns True if the channel is registered, else false..",
              "plain": "Checks if the specified plugin has registered to receive incoming\n messages through the requested channel.\n@param plugin Plugin to check registration for.\n@param channel Channel to test for.\n@return True if the channel is registered, else false."
            }
          },
          {
            "kind": "METHOD",
            "name": "isOutgoingChannelRegistered(org.bukkit.plugin.Plugin,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "channel"
              },
              {
                "kind": "PARAMETER",
                "name": "plugin"
              }
            ],
            "comment": {
              "body": "Checks if the specified plugin has registered to send outgoing messages\n through the requested channel.",
              "tags": "Returns True if the channel is registered, else false..",
              "plain": "Checks if the specified plugin has registered to send outgoing messages\n through the requested channel.\n@param plugin Plugin to check registration for.\n@param channel Channel to test for.\n@return True if the channel is registered, else false."
            }
          },
          {
            "kind": "METHOD",
            "name": "isRegistrationValid(org.bukkit.plugin.messaging.PluginMessageListenerRegistration)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "registration"
              }
            ],
            "comment": {
              "body": "Checks if the specified plugin message listener registration is valid.\n \u003cp\u003e\n A registration is considered valid if it has not be unregistered and\n that the plugin is still enabled.",
              "tags": "Returns True if the registration is valid, otherwise false..",
              "plain": "Checks if the specified plugin message listener registration is valid.\n \u003cp\u003e\n A registration is considered valid if it has not be unregistered and\n that the plugin is still enabled.\n@param registration Registration to check.\n@return True if the registration is valid, otherwise false."
            }
          },
          {
            "kind": "METHOD",
            "name": "isReservedChannel(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "channel"
              }
            ],
            "comment": {
              "body": "Checks if the specified channel is a reserved name.",
              "tags": "Returns True if the channel is reserved, otherwise false..",
              "plain": "Checks if the specified channel is a reserved name.\n@param channel Channel name to check.\n@return True if the channel is reserved, otherwise false.\n@throws IllegalArgumentException Thrown if channel is null."
            }
          },
          {
            "kind": "METHOD",
            "name": "registerIncomingPluginChannel(org.bukkit.plugin.Plugin,java.lang.String,org.bukkit.plugin.messaging.PluginMessageListener)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "channel"
              },
              {
                "kind": "PARAMETER",
                "name": "listener"
              },
              {
                "kind": "PARAMETER",
                "name": "plugin"
              }
            ],
            "comment": {
              "body": "Registers the specific plugin for listening on the requested incoming\n plugin channel, allowing it to act upon any plugin messages.",
              "tags": "Returns The resulting registration that was made as a result of this\n     method..",
              "plain": "Registers the specific plugin for listening on the requested incoming\n plugin channel, allowing it to act upon any plugin messages.\n@param plugin Plugin that wishes to register to this channel.\n@param channel Channel to register.\n@param listener Listener to receive messages on.\n@return The resulting registration that was made as a result of this\n     method.\n@throws IllegalArgumentException Thrown if plugin, channel or listener\n     is null, or the listener is already registered for this channel."
            }
          },
          {
            "kind": "METHOD",
            "name": "registerOutgoingPluginChannel(org.bukkit.plugin.Plugin,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "channel"
              },
              {
                "kind": "PARAMETER",
                "name": "plugin"
              }
            ],
            "comment": {
              "body": "Registers the specific plugin to the requested outgoing plugin channel,\n allowing it to send messages through that channel to any clients.",
              "plain": "Registers the specific plugin to the requested outgoing plugin channel,\n allowing it to send messages through that channel to any clients.\n@param plugin Plugin that wishes to send messages through the channel.\n@param channel Channel to register.\n@throws IllegalArgumentException Thrown if plugin or channel is null."
            }
          },
          {
            "kind": "METHOD",
            "name": "unregisterIncomingPluginChannel(org.bukkit.plugin.Plugin)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "plugin"
              }
            ],
            "comment": {
              "body": "Unregisters the specific plugin from listening on all plugin channels\n through all listeners.",
              "plain": "Unregisters the specific plugin from listening on all plugin channels\n through all listeners.\n@param plugin Plugin that wishes to unregister from this channel.\n@throws IllegalArgumentException Thrown if plugin is null."
            }
          },
          {
            "kind": "METHOD",
            "name": "unregisterIncomingPluginChannel(org.bukkit.plugin.Plugin,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "channel"
              },
              {
                "kind": "PARAMETER",
                "name": "plugin"
              }
            ],
            "comment": {
              "body": "Unregisters the specific plugin from listening on the requested\n incoming plugin channel, no longer allowing it to act upon any plugin\n messages.",
              "plain": "Unregisters the specific plugin from listening on the requested\n incoming plugin channel, no longer allowing it to act upon any plugin\n messages.\n@param plugin Plugin that wishes to unregister from this channel.\n@param channel Channel to unregister.\n@throws IllegalArgumentException Thrown if plugin or channel is null."
            }
          },
          {
            "kind": "METHOD",
            "name": "unregisterIncomingPluginChannel(org.bukkit.plugin.Plugin,java.lang.String,org.bukkit.plugin.messaging.PluginMessageListener)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "channel"
              },
              {
                "kind": "PARAMETER",
                "name": "listener"
              },
              {
                "kind": "PARAMETER",
                "name": "plugin"
              }
            ],
            "comment": {
              "body": "Unregisters the specific plugin\u0027s listener from listening on the\n requested incoming plugin channel, no longer allowing it to act upon\n any plugin messages.",
              "plain": "Unregisters the specific plugin\u0027s listener from listening on the\n requested incoming plugin channel, no longer allowing it to act upon\n any plugin messages.\n@param plugin Plugin that wishes to unregister from this channel.\n@param channel Channel to unregister.\n@param listener Listener to stop receiving messages on.\n@throws IllegalArgumentException Thrown if plugin, channel or listener\n     is null."
            }
          },
          {
            "kind": "METHOD",
            "name": "unregisterOutgoingPluginChannel(org.bukkit.plugin.Plugin)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "plugin"
              }
            ],
            "comment": {
              "body": "Unregisters the specific plugin from all outgoing plugin channels, no\n longer allowing it to send any plugin messages.",
              "plain": "Unregisters the specific plugin from all outgoing plugin channels, no\n longer allowing it to send any plugin messages.\n@param plugin Plugin that no longer wishes to send plugin messages.\n@throws IllegalArgumentException Thrown if plugin is null."
            }
          },
          {
            "kind": "METHOD",
            "name": "unregisterOutgoingPluginChannel(org.bukkit.plugin.Plugin,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "channel"
              },
              {
                "kind": "PARAMETER",
                "name": "plugin"
              }
            ],
            "comment": {
              "body": "Unregisters the specific plugin from the requested outgoing plugin\n channel, no longer allowing it to send messages through that channel to\n any clients.",
              "plain": "Unregisters the specific plugin from the requested outgoing plugin\n channel, no longer allowing it to send messages through that channel to\n any clients.\n@param plugin Plugin that no longer wishes to send messages through the\n     channel.\n@param channel Channel to unregister.\n@throws IllegalArgumentException Thrown if plugin or channel is null."
            }
          }
        ],
        "comment": {
          "body": "A class responsible for managing the registrations of plugin channels and\n their listeners.",
          "plain": "A class responsible for managing the registrations of plugin channels and\n their listeners."
        }
      },
      {
        "kind": "ENUM",
        "name": "org.bukkit.plugin.messaging.PluginChannelDirection",
        "children": [
          {
            "kind": "ENUM_CONSTANT",
            "name": "INCOMING",
            "comment": {
              "body": "The plugin channel is being sent to the server from a client.",
              "plain": "The plugin channel is being sent to the server from a client."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "OUTGOING",
            "comment": {
              "body": "The plugin channel is being sent to a client from the server.",
              "plain": "The plugin channel is being sent to a client from the server."
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "PluginChannelDirection()"
          },
          {
            "kind": "METHOD",
            "name": "valueOf(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "values()"
          }
        ],
        "comment": {
          "body": "Represents the different directions a plugin channel may go.",
          "plain": "Represents the different directions a plugin channel may go."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.plugin.messaging.PluginMessageListener",
        "children": [
          {
            "kind": "METHOD",
            "name": "onPluginMessageReceived(java.lang.String,org.bukkit.entity.Player,byte[])",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "channel"
              },
              {
                "kind": "PARAMETER",
                "name": "message"
              },
              {
                "kind": "PARAMETER",
                "name": "player"
              }
            ],
            "comment": {
              "body": "A method that will be thrown when a PluginMessageSource sends a plugin\n message on a registered channel.",
              "plain": "A method that will be thrown when a PluginMessageSource sends a plugin\n message on a registered channel.\n@param channel Channel that the message was sent through.\n@param player Source of the message.\n@param message The raw message that was sent."
            }
          }
        ],
        "comment": {
          "body": "A listener for a specific Plugin Channel, which will receive notifications\n of messages sent from a client.",
          "plain": "A listener for a specific Plugin Channel, which will receive notifications\n of messages sent from a client."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.plugin.messaging.PluginMessageListenerRegistration",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PluginMessageListenerRegistration(org.bukkit.plugin.messaging.Messenger,org.bukkit.plugin.Plugin,java.lang.String,org.bukkit.plugin.messaging.PluginMessageListener)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "channel"
              },
              {
                "kind": "PARAMETER",
                "name": "listener"
              },
              {
                "kind": "PARAMETER",
                "name": "messenger"
              },
              {
                "kind": "PARAMETER",
                "name": "plugin"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "channel"
          },
          {
            "kind": "METHOD",
            "name": "equals(java.lang.Object)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "obj"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getChannel()",
            "comment": {
              "body": "Gets the plugin channel that this registration is about.",
              "tags": "Returns Plugin channel..",
              "plain": "Gets the plugin channel that this registration is about.\n@return Plugin channel."
            }
          },
          {
            "kind": "METHOD",
            "name": "getListener()",
            "comment": {
              "body": "Gets the registered listener described by this registration.",
              "tags": "Returns Registered listener..",
              "plain": "Gets the registered listener described by this registration.\n@return Registered listener."
            }
          },
          {
            "kind": "METHOD",
            "name": "getPlugin()",
            "comment": {
              "body": "Gets the plugin that this registration is for.",
              "tags": "Returns Registered plugin..",
              "plain": "Gets the plugin that this registration is for.\n@return Registered plugin."
            }
          },
          {
            "kind": "METHOD",
            "name": "hashCode()"
          },
          {
            "kind": "METHOD",
            "name": "isValid()",
            "comment": {
              "body": "Checks if this registration is still valid.",
              "tags": "Returns True if this registration is still valid, otherwise false..",
              "plain": "Checks if this registration is still valid.\n@return True if this registration is still valid, otherwise false."
            }
          },
          {
            "kind": "FIELD",
            "name": "listener"
          },
          {
            "kind": "FIELD",
            "name": "messenger"
          },
          {
            "kind": "FIELD",
            "name": "plugin"
          }
        ],
        "comment": {
          "body": "Contains information about a \u003ca href\u003d\"org/bukkit/plugin/Plugin.html\" title\u003d\"interface in org.bukkit.plugin\"\u003e\u003ccode\u003ePlugin\u003c/code\u003e\u003c/a\u003es registration to a plugin\n channel.",
          "plain": "Contains information about a {@link Plugin}s registration to a plugin\n channel."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.plugin.messaging.PluginMessageRecipient",
        "children": [
          {
            "kind": "METHOD",
            "name": "getListeningPluginChannels()",
            "comment": {
              "body": "Gets a set containing all the Plugin Channels that this client is\n listening on.",
              "tags": "Returns Set containing all the channels that this client may accept..",
              "plain": "Gets a set containing all the Plugin Channels that this client is\n listening on.\n@return Set containing all the channels that this client may accept."
            }
          },
          {
            "kind": "METHOD",
            "name": "sendPluginMessage(org.bukkit.plugin.Plugin,java.lang.String,byte[])",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "channel"
              },
              {
                "kind": "PARAMETER",
                "name": "message"
              },
              {
                "kind": "PARAMETER",
                "name": "source"
              }
            ],
            "comment": {
              "body": "Sends this recipient a Plugin Message on the specified outgoing\n channel.\n \u003cp\u003e\n The message may not be larger than \u003ca href\u003d\"org/bukkit/plugin/messaging/Messenger.html#MAX_MESSAGE_SIZE\"\u003e\u003ccode\u003eMessenger.MAX_MESSAGE_SIZE\u003c/code\u003e\u003c/a\u003e\n bytes, and the plugin must be registered to send messages on the\n specified channel.",
              "plain": "Sends this recipient a Plugin Message on the specified outgoing\n channel.\n \u003cp\u003e\n The message may not be larger than {@link Messenger#MAX_MESSAGE_SIZE}\n bytes, and the plugin must be registered to send messages on the\n specified channel.\n@param source The plugin that sent this message.\n@param channel The channel to send this message on.\n@param message The raw message to send.\n@throws IllegalArgumentException Thrown if the source plugin is\n     disabled.\n@throws IllegalArgumentException Thrown if source, channel or message\n     is null.\n@throws MessageTooLargeException Thrown if the message is too big.\n@throws ChannelNotRegisteredException Thrown if the channel is not\n     registered for this plugin."
            }
          }
        ],
        "comment": {
          "body": "Represents a possible recipient for a Plugin Message.",
          "plain": "Represents a possible recipient for a Plugin Message."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.plugin.messaging.ReservedChannelException",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "ReservedChannelException()"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "ReservedChannelException(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ]
          }
        ],
        "comment": {
          "body": "Thrown if a plugin attempts to register for a reserved channel (such as\n \"REGISTER\")",
          "plain": "Thrown if a plugin attempts to register for a reserved channel (such as\n \"REGISTER\")"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.plugin.messaging.StandardMessenger",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "StandardMessenger()"
          },
          {
            "kind": "METHOD",
            "name": "addToIncoming(org.bukkit.plugin.messaging.PluginMessageListenerRegistration)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "registration"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "addToOutgoing(org.bukkit.plugin.Plugin,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "channel"
              },
              {
                "kind": "PARAMETER",
                "name": "plugin"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "dispatchIncomingMessage(org.bukkit.entity.Player,java.lang.String,byte[])",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "channel"
              },
              {
                "kind": "PARAMETER",
                "name": "message"
              },
              {
                "kind": "PARAMETER",
                "name": "source"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getIncomingChannelRegistrations(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "channel"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getIncomingChannelRegistrations(org.bukkit.plugin.Plugin)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "plugin"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getIncomingChannelRegistrations(org.bukkit.plugin.Plugin,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "channel"
              },
              {
                "kind": "PARAMETER",
                "name": "plugin"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getIncomingChannels()"
          },
          {
            "kind": "METHOD",
            "name": "getIncomingChannels(org.bukkit.plugin.Plugin)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "plugin"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getOutgoingChannels()"
          },
          {
            "kind": "METHOD",
            "name": "getOutgoingChannels(org.bukkit.plugin.Plugin)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "plugin"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "incomingByChannel"
          },
          {
            "kind": "FIELD",
            "name": "incomingByPlugin"
          },
          {
            "kind": "FIELD",
            "name": "incomingLock"
          },
          {
            "kind": "METHOD",
            "name": "isIncomingChannelRegistered(org.bukkit.plugin.Plugin,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "channel"
              },
              {
                "kind": "PARAMETER",
                "name": "plugin"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "isOutgoingChannelRegistered(org.bukkit.plugin.Plugin,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "channel"
              },
              {
                "kind": "PARAMETER",
                "name": "plugin"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "isRegistrationValid(org.bukkit.plugin.messaging.PluginMessageListenerRegistration)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "registration"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "isReservedChannel(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "channel"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "outgoingByChannel"
          },
          {
            "kind": "FIELD",
            "name": "outgoingByPlugin"
          },
          {
            "kind": "FIELD",
            "name": "outgoingLock"
          },
          {
            "kind": "METHOD",
            "name": "registerIncomingPluginChannel(org.bukkit.plugin.Plugin,java.lang.String,org.bukkit.plugin.messaging.PluginMessageListener)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "channel"
              },
              {
                "kind": "PARAMETER",
                "name": "listener"
              },
              {
                "kind": "PARAMETER",
                "name": "plugin"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "registerOutgoingPluginChannel(org.bukkit.plugin.Plugin,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "channel"
              },
              {
                "kind": "PARAMETER",
                "name": "plugin"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "removeFromIncoming(org.bukkit.plugin.Plugin)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "plugin"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "removeFromIncoming(org.bukkit.plugin.Plugin,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "channel"
              },
              {
                "kind": "PARAMETER",
                "name": "plugin"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "removeFromIncoming(org.bukkit.plugin.messaging.PluginMessageListenerRegistration)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "registration"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "removeFromOutgoing(org.bukkit.plugin.Plugin)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "plugin"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "removeFromOutgoing(org.bukkit.plugin.Plugin,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "channel"
              },
              {
                "kind": "PARAMETER",
                "name": "plugin"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "unregisterIncomingPluginChannel(org.bukkit.plugin.Plugin)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "plugin"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "unregisterIncomingPluginChannel(org.bukkit.plugin.Plugin,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "channel"
              },
              {
                "kind": "PARAMETER",
                "name": "plugin"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "unregisterIncomingPluginChannel(org.bukkit.plugin.Plugin,java.lang.String,org.bukkit.plugin.messaging.PluginMessageListener)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "channel"
              },
              {
                "kind": "PARAMETER",
                "name": "listener"
              },
              {
                "kind": "PARAMETER",
                "name": "plugin"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "unregisterOutgoingPluginChannel(org.bukkit.plugin.Plugin)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "plugin"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "unregisterOutgoingPluginChannel(org.bukkit.plugin.Plugin,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "channel"
              },
              {
                "kind": "PARAMETER",
                "name": "plugin"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "validateChannel(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "channel"
              }
            ],
            "comment": {
              "body": "Validates a Plugin Channel name.",
              "plain": "Validates a Plugin Channel name.\n@param channel Channel name to validate."
            }
          },
          {
            "kind": "METHOD",
            "name": "validatePluginMessage(org.bukkit.plugin.messaging.Messenger,org.bukkit.plugin.Plugin,java.lang.String,byte[])",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "channel"
              },
              {
                "kind": "PARAMETER",
                "name": "message"
              },
              {
                "kind": "PARAMETER",
                "name": "messenger"
              },
              {
                "kind": "PARAMETER",
                "name": "source"
              }
            ],
            "comment": {
              "body": "Validates the input of a Plugin Message, ensuring the arguments are all\n valid.",
              "plain": "Validates the input of a Plugin Message, ensuring the arguments are all\n valid.\n@param messenger Messenger to use for validation.\n@param source Source plugin of the Message.\n@param channel Plugin Channel to send the message by.\n@param message Raw message payload to send.\n@throws IllegalArgumentException Thrown if the source plugin is\n     disabled.\n@throws IllegalArgumentException Thrown if source, channel or message\n     is null.\n@throws MessageTooLargeException Thrown if the message is too big.\n@throws ChannelNameTooLongException Thrown if the channel name is too\n     long.\n@throws ChannelNotRegisteredException Thrown if the channel is not\n     registered for this plugin."
            }
          }
        ],
        "comment": {
          "body": "Standard implementation to \u003ca href\u003d\"org/bukkit/plugin/messaging/Messenger.html\" title\u003d\"interface in org.bukkit.plugin.messaging\"\u003e\u003ccode\u003eMessenger\u003c/code\u003e\u003c/a\u003e",
          "plain": "Standard implementation to {@link Messenger}"
        }
      }
    ]
  },
  {
    "kind": "PACKAGE",
    "name": "org.bukkit.potion",
    "children": [
      {
        "kind": "CLASS",
        "name": "org.bukkit.potion.Potion",
        "children": [
          {
            "kind": "FIELD",
            "name": "EXTENDED_BIT"
          },
          {
            "kind": "FIELD",
            "name": "POTION_BIT"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Potion(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "plain": "@param name Unused, always uses {@link PotionType#WATER}\n@deprecated"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Potion(org.bukkit.potion.PotionType)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "comment": {
              "body": "Construct a new potion of the given type. Unless the type is \u003ca href\u003d\"org/bukkit/potion/PotionType.html#WATER\"\u003e\u003ccode\u003ePotionType.WATER\u003c/code\u003e\u003c/a\u003e, it will be level one, without extended duration.\n Don\u0027t use this constructor to create a no-effect potion other than\n water bottle.",
              "plain": "Construct a new potion of the given type. Unless the type is {@link PotionType#WATER}, it will be level one, without extended duration.\n Don\u0027t use this constructor to create a no-effect potion other than\n water bottle.\n@param type The potion type\n@see #Potion(int)"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Potion(org.bukkit.potion.PotionType,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "level"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "comment": {
              "body": "Create a new potion of the given type and level.",
              "plain": "Create a new potion of the given type and level.\n@param type The type of potion.\n@param level The potion\u0027s level."
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Potion(org.bukkit.potion.PotionType,int,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "level"
              },
              {
                "kind": "PARAMETER",
                "name": "splash"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Create a new potion of the given type and level.",
              "plain": "Create a new potion of the given type and level.\n@param type The type of potion.\n@param level The potion\u0027s level.\n@param splash Whether it is a splash potion.\n@deprecated In favour of using {@link #Potion(PotionType)} with {@link #splash()}."
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Potion(org.bukkit.potion.PotionType,int,boolean,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "extended"
              },
              {
                "kind": "PARAMETER",
                "name": "level"
              },
              {
                "kind": "PARAMETER",
                "name": "splash"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Create a new potion of the given type and level.",
              "plain": "Create a new potion of the given type and level.\n@param type The type of potion.\n@param level The potion\u0027s level.\n@param splash Whether it is a splash potion.\n@param extended Whether it has an extended duration.\n@deprecated In favour of using {@link #Potion(PotionType)} with {@link #extend()} and possibly {@link #splash()}."
            }
          },
          {
            "kind": "FIELD",
            "name": "SPLASH_BIT"
          },
          {
            "kind": "FIELD",
            "name": "TIER_BIT"
          },
          {
            "kind": "FIELD",
            "name": "TIER_SHIFT"
          },
          {
            "kind": "METHOD",
            "name": "apply(org.bukkit.entity.LivingEntity)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "to"
              }
            ],
            "comment": {
              "body": "Applies the effects that would be applied by this potion to the given\n \u003ca href\u003d\"org/bukkit/entity/LivingEntity.html\" title\u003d\"interface in org.bukkit.entity\"\u003e\u003ccode\u003eLivingEntity\u003c/code\u003e\u003c/a\u003e.",
              "plain": "Applies the effects that would be applied by this potion to the given\n {@link LivingEntity}.\n@see LivingEntity#addPotionEffects(Collection)\n@param to The entity to apply the effects to"
            }
          },
          {
            "kind": "METHOD",
            "name": "apply(org.bukkit.inventory.ItemStack)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "to"
              }
            ],
            "comment": {
              "body": "Applies the effects of this potion to the given \u003ca href\u003d\"org/bukkit/inventory/ItemStack.html\" title\u003d\"class in org.bukkit.inventory\"\u003e\u003ccode\u003eItemStack\u003c/code\u003e\u003c/a\u003e. The\n ItemStack must be a potion.",
              "plain": "Applies the effects of this potion to the given {@link ItemStack}. The\n ItemStack must be a potion.\n@param to The itemstack to apply to"
            }
          },
          {
            "kind": "FIELD",
            "name": "brewer"
          },
          {
            "kind": "METHOD",
            "name": "equals(java.lang.Object)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "obj"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "extend()",
            "comment": {
              "body": "Chain this to the constructor to extend the potion\u0027s duration.",
              "tags": "Returns The potion..",
              "plain": "Chain this to the constructor to extend the potion\u0027s duration.\n@return The potion."
            }
          },
          {
            "kind": "FIELD",
            "name": "extended"
          },
          {
            "kind": "METHOD",
            "name": "fromDamage(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "damage"
              }
            ],
            "comment": {
              "tags": "Returns the produced potion.",
              "plain": "@param damage the damage value\n@return the produced potion"
            }
          },
          {
            "kind": "METHOD",
            "name": "fromItemStack(org.bukkit.inventory.ItemStack)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "item"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getBrewer()",
            "comment": {
              "body": "Returns an instance of \u003ca href\u003d\"org/bukkit/potion/PotionBrewer.html\" title\u003d\"interface in org.bukkit.potion\"\u003e\u003ccode\u003ePotionBrewer\u003c/code\u003e\u003c/a\u003e.",
              "tags": "Returns An instance of PotionBrewer.",
              "plain": "Returns an instance of {@link PotionBrewer}.\n@return An instance of PotionBrewer"
            }
          },
          {
            "kind": "METHOD",
            "name": "getEffects()",
            "comment": {
              "body": "Returns a collection of \u003ca href\u003d\"org/bukkit/potion/PotionEffect.html\" title\u003d\"class in org.bukkit.potion\"\u003e\u003ccode\u003ePotionEffect\u003c/code\u003e\u003c/a\u003es that this \u003ca href\u003d\"org/bukkit/potion/Potion.html\" title\u003d\"class in org.bukkit.potion\"\u003e\u003ccode\u003ePotion\u003c/code\u003e\u003c/a\u003e\n would confer upon a \u003ca href\u003d\"org/bukkit/entity/LivingEntity.html\" title\u003d\"interface in org.bukkit.entity\"\u003e\u003ccode\u003eLivingEntity\u003c/code\u003e\u003c/a\u003e.",
              "tags": "Returns The effects that this potion applies.",
              "plain": "Returns a collection of {@link PotionEffect}s that this {@link Potion}\n would confer upon a {@link LivingEntity}.\n@see PotionBrewer#getEffectsFromDamage(int)\n@see Potion#toDamageValue()\n@return The effects that this potion applies"
            }
          },
          {
            "kind": "METHOD",
            "name": "getLevel()",
            "comment": {
              "body": "Returns the level of this potion.",
              "tags": "Returns The level of this potion.",
              "plain": "Returns the level of this potion.\n@return The level of this potion"
            }
          },
          {
            "kind": "METHOD",
            "name": "getNameId()",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "tags": "Returns the name id.",
              "plain": "@return the name id\n@deprecated Non-functional"
            }
          },
          {
            "kind": "METHOD",
            "name": "getType()",
            "comment": {
              "body": "Returns the \u003ca href\u003d\"org/bukkit/potion/PotionType.html\" title\u003d\"enum in org.bukkit.potion\"\u003e\u003ccode\u003ePotionType\u003c/code\u003e\u003c/a\u003e of this potion.",
              "tags": "Returns The type of this potion.",
              "plain": "Returns the {@link PotionType} of this potion.\n@return The type of this potion"
            }
          },
          {
            "kind": "METHOD",
            "name": "hasExtendedDuration()",
            "comment": {
              "body": "Returns whether this potion has an extended duration.",
              "tags": "Returns Whether this potion has extended duration.",
              "plain": "Returns whether this potion has an extended duration.\n@return Whether this potion has extended duration"
            }
          },
          {
            "kind": "METHOD",
            "name": "hashCode()"
          },
          {
            "kind": "METHOD",
            "name": "isSplash()",
            "comment": {
              "body": "Returns whether this potion is a splash potion.",
              "tags": "Returns Whether this is a splash potion.",
              "plain": "Returns whether this potion is a splash potion.\n@return Whether this is a splash potion"
            }
          },
          {
            "kind": "FIELD",
            "name": "level"
          },
          {
            "kind": "METHOD",
            "name": "setHasExtendedDuration(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "isExtended"
              }
            ],
            "comment": {
              "body": "Set whether this potion has extended duration. This will cause the\n potion to have roughly 8/3 more duration than a regular potion.",
              "plain": "Set whether this potion has extended duration. This will cause the\n potion to have roughly 8/3 more duration than a regular potion.\n@param isExtended Whether the potion should have extended duration"
            }
          },
          {
            "kind": "METHOD",
            "name": "setLevel(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "level"
              }
            ],
            "comment": {
              "body": "Sets the level of this potion.",
              "plain": "Sets the level of this potion.\n@param level The new level of this potion"
            }
          },
          {
            "kind": "METHOD",
            "name": "setPotionBrewer(org.bukkit.potion.PotionBrewer)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "other"
              }
            ],
            "comment": {
              "body": "Sets the current instance of \u003ca href\u003d\"org/bukkit/potion/PotionBrewer.html\" title\u003d\"interface in org.bukkit.potion\"\u003e\u003ccode\u003ePotionBrewer\u003c/code\u003e\u003c/a\u003e. Generally not to be\n used from within a plugin.",
              "plain": "Sets the current instance of {@link PotionBrewer}. Generally not to be\n used from within a plugin.\n@param other The new PotionBrewer"
            }
          },
          {
            "kind": "METHOD",
            "name": "setSplash(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "isSplash"
              }
            ],
            "comment": {
              "body": "Sets whether this potion is a splash potion. Splash potions can be\n thrown for a radius effect.",
              "plain": "Sets whether this potion is a splash potion. Splash potions can be\n thrown for a radius effect.\n@param isSplash Whether this is a splash potion"
            }
          },
          {
            "kind": "METHOD",
            "name": "setType(org.bukkit.potion.PotionType)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "comment": {
              "body": "Sets the \u003ca href\u003d\"org/bukkit/potion/PotionType.html\" title\u003d\"enum in org.bukkit.potion\"\u003e\u003ccode\u003ePotionType\u003c/code\u003e\u003c/a\u003e of this potion.",
              "plain": "Sets the {@link PotionType} of this potion.\n@param type The new type of this potion"
            }
          },
          {
            "kind": "FIELD",
            "name": "splash"
          },
          {
            "kind": "METHOD",
            "name": "splash()",
            "comment": {
              "body": "Chain this to the constructor to make the potion a splash potion.",
              "tags": "Returns The potion..",
              "plain": "Chain this to the constructor to make the potion a splash potion.\n@return The potion."
            }
          },
          {
            "kind": "METHOD",
            "name": "toDamageValue()",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Converts this potion to a valid potion damage short, usable for potion\n item stacks.",
              "tags": "Returns The damage value of this potion.",
              "plain": "Converts this potion to a valid potion damage short, usable for potion\n item stacks.\n@return The damage value of this potion\n@deprecated Non-functional"
            }
          },
          {
            "kind": "METHOD",
            "name": "toItemStack(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "amount"
              }
            ],
            "comment": {
              "body": "Converts this potion to an \u003ca href\u003d\"org/bukkit/inventory/ItemStack.html\" title\u003d\"class in org.bukkit.inventory\"\u003e\u003ccode\u003eItemStack\u003c/code\u003e\u003c/a\u003e with the specified amount\n and a correct damage value.",
              "tags": "Returns The created ItemStack.",
              "plain": "Converts this potion to an {@link ItemStack} with the specified amount\n and a correct damage value.\n@param amount The amount of the ItemStack\n@return The created ItemStack"
            }
          },
          {
            "kind": "FIELD",
            "name": "type"
          }
        ],
        "deprecated": {
          "deprecated": "true"
        },
        "comment": {
          "body": "Potion Adapter for pre-1.9 data values\n see @PotionMeta for 1.9+",
          "plain": "Potion Adapter for pre-1.9 data values\n see @PotionMeta for 1.9+"
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.potion.PotionBrewer",
        "children": [
          {
            "kind": "METHOD",
            "name": "createEffect(org.bukkit.potion.PotionEffectType,int,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "amplifier"
              },
              {
                "kind": "PARAMETER",
                "name": "duration"
              },
              {
                "kind": "PARAMETER",
                "name": "potion"
              }
            ],
            "comment": {
              "body": "Creates a \u003ca href\u003d\"org/bukkit/potion/PotionEffect.html\" title\u003d\"class in org.bukkit.potion\"\u003e\u003ccode\u003ePotionEffect\u003c/code\u003e\u003c/a\u003e from the given \u003ca href\u003d\"org/bukkit/potion/PotionEffectType.html\" title\u003d\"class in org.bukkit.potion\"\u003e\u003ccode\u003ePotionEffectType\u003c/code\u003e\u003c/a\u003e,\n applying duration modifiers and checks.",
              "tags": "Returns The resulting potion effect.",
              "plain": "Creates a {@link PotionEffect} from the given {@link PotionEffectType},\n applying duration modifiers and checks.\n@param potion The type of potion\n@param duration The duration in ticks\n@param amplifier The amplifier of the effect\n@return The resulting potion effect"
            }
          },
          {
            "kind": "METHOD",
            "name": "getEffects(org.bukkit.potion.PotionType,boolean,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "extended"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              },
              {
                "kind": "PARAMETER",
                "name": "upgraded"
              }
            ],
            "comment": {
              "body": "Returns a collection of \u003ca href\u003d\"org/bukkit/potion/PotionEffect.html\" title\u003d\"class in org.bukkit.potion\"\u003e\u003ccode\u003ePotionEffect\u003c/code\u003e\u003c/a\u003e that would be applied from\n a potion with the given type.",
              "tags": "Returns The list of effects.",
              "plain": "Returns a collection of {@link PotionEffect} that would be applied from\n a potion with the given type.\n@param type The type of the potion\n@param upgraded Whether the potion is upgraded\n@param extended Whether the potion is extended\n@return The list of effects"
            }
          },
          {
            "kind": "METHOD",
            "name": "getEffectsFromDamage(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "damage"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Returns a collection of \u003ca href\u003d\"org/bukkit/potion/PotionEffect.html\" title\u003d\"class in org.bukkit.potion\"\u003e\u003ccode\u003ePotionEffect\u003c/code\u003e\u003c/a\u003e that would be applied from\n a potion with the given data value.",
              "tags": "Returns The list of effects.",
              "plain": "Returns a collection of {@link PotionEffect} that would be applied from\n a potion with the given data value.\n@param damage The data value of the potion\n@return The list of effects\n@deprecated Non-Functional"
            }
          }
        ],
        "comment": {
          "body": "Represents a brewer that can create \u003ca href\u003d\"org/bukkit/potion/PotionEffect.html\" title\u003d\"class in org.bukkit.potion\"\u003e\u003ccode\u003ePotionEffect\u003c/code\u003e\u003c/a\u003es.",
          "plain": "Represents a brewer that can create {@link PotionEffect}s."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.potion.PotionData",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PotionData(org.bukkit.potion.PotionType)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ]
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "PotionData(org.bukkit.potion.PotionType,boolean,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "extended"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              },
              {
                "kind": "PARAMETER",
                "name": "upgraded"
              }
            ],
            "comment": {
              "body": "Instantiates a final PotionData object to contain information about a\n Potion",
              "plain": "Instantiates a final PotionData object to contain information about a\n Potion\n@param type the type of the Potion\n@param extended whether the potion is extended PotionType#isExtendable()\n must be true\n@param upgraded whether the potion is upgraded PotionType#isUpgradable()\n must be true"
            }
          },
          {
            "kind": "METHOD",
            "name": "equals(java.lang.Object)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "obj"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "extended"
          },
          {
            "kind": "METHOD",
            "name": "getType()",
            "comment": {
              "body": "Gets the type of the potion, Type matches up with each kind of craftable\n potion",
              "tags": "Returns the potion type.",
              "plain": "Gets the type of the potion, Type matches up with each kind of craftable\n potion\n@return the potion type"
            }
          },
          {
            "kind": "METHOD",
            "name": "hashCode()"
          },
          {
            "kind": "METHOD",
            "name": "isExtended()",
            "comment": {
              "body": "Checks if the potion is in an extended state. This refers to the extended\n duration potions",
              "tags": "Returns true if the potion is extended.",
              "plain": "Checks if the potion is in an extended state. This refers to the extended\n duration potions\n@return true if the potion is extended"
            }
          },
          {
            "kind": "METHOD",
            "name": "isUpgraded()",
            "comment": {
              "body": "Checks if the potion is in an upgraded state. This refers to whether or\n not the potion is Tier 2, such as Potion of Fire Resistance II.",
              "tags": "Returns true if the potion is upgraded;.",
              "plain": "Checks if the potion is in an upgraded state. This refers to whether or\n not the potion is Tier 2, such as Potion of Fire Resistance II.\n@return true if the potion is upgraded;"
            }
          },
          {
            "kind": "FIELD",
            "name": "type"
          },
          {
            "kind": "FIELD",
            "name": "upgraded"
          }
        ]
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.potion.PotionEffect",
        "children": [
          {
            "kind": "FIELD",
            "name": "AMBIENT"
          },
          {
            "kind": "FIELD",
            "name": "AMPLIFIER"
          },
          {
            "kind": "FIELD",
            "name": "DURATION"
          },
          {
            "kind": "FIELD",
            "name": "PARTICLES"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "PotionEffect(java.util.Map\u003cjava.lang.String,java.lang.Object\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "map"
              }
            ],
            "comment": {
              "body": "Constructor for deserialization.",
              "plain": "Constructor for deserialization.\n@param map the map to deserialize from"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "PotionEffect(org.bukkit.potion.PotionEffectType,int,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "amplifier"
              },
              {
                "kind": "PARAMETER",
                "name": "duration"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "comment": {
              "body": "Creates a potion effect. Assumes ambient is true.",
              "plain": "Creates a potion effect. Assumes ambient is true.\n@param type Effect type\n@param duration measured in ticks\n@param amplifier the amplifier for the effect\n@see PotionEffect#PotionEffect(PotionEffectType, int, int, boolean)"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "PotionEffect(org.bukkit.potion.PotionEffectType,int,int,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "ambient"
              },
              {
                "kind": "PARAMETER",
                "name": "amplifier"
              },
              {
                "kind": "PARAMETER",
                "name": "duration"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "comment": {
              "body": "Creates a potion effect. Assumes that particles are visible",
              "plain": "Creates a potion effect. Assumes that particles are visible\n@param type effect type\n@param duration measured in ticks, see {@link PotionEffect#getDuration()}\n@param amplifier the amplifier, see {@link PotionEffect#getAmplifier()}\n@param ambient the ambient status, see {@link PotionEffect#isAmbient()}"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "PotionEffect(org.bukkit.potion.PotionEffectType,int,int,boolean,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "ambient"
              },
              {
                "kind": "PARAMETER",
                "name": "amplifier"
              },
              {
                "kind": "PARAMETER",
                "name": "duration"
              },
              {
                "kind": "PARAMETER",
                "name": "particles"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "comment": {
              "body": "Creates a potion effect with no defined color.",
              "plain": "Creates a potion effect with no defined color.\n@param type effect type\n@param duration measured in ticks, see {@link PotionEffect#getDuration()}\n@param amplifier the amplifier, see {@link PotionEffect#getAmplifier()}\n@param ambient the ambient status, see {@link PotionEffect#isAmbient()}\n@param particles the particle status, see {@link PotionEffect#hasParticles()}"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "PotionEffect(org.bukkit.potion.PotionEffectType,int,int,boolean,boolean,org.bukkit.Color)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "ambient"
              },
              {
                "kind": "PARAMETER",
                "name": "amplifier"
              },
              {
                "kind": "PARAMETER",
                "name": "color"
              },
              {
                "kind": "PARAMETER",
                "name": "duration"
              },
              {
                "kind": "PARAMETER",
                "name": "particles"
              },
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "comment": {
              "body": "Creates a potion effect.",
              "plain": "Creates a potion effect.\n@param type effect type\n@param duration measured in ticks, see {@link PotionEffect#getDuration()}\n@param amplifier the amplifier, see {@link PotionEffect#getAmplifier()}\n@param ambient the ambient status, see {@link PotionEffect#isAmbient()}\n@param particles the particle status, see {@link PotionEffect#hasParticles()}\n@param color the particle color, see {@link PotionEffect#getColor()}"
            }
          },
          {
            "kind": "FIELD",
            "name": "TYPE"
          },
          {
            "kind": "FIELD",
            "name": "ambient"
          },
          {
            "kind": "FIELD",
            "name": "amplifier"
          },
          {
            "kind": "METHOD",
            "name": "apply(org.bukkit.entity.LivingEntity)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "entity"
              }
            ],
            "comment": {
              "body": "Attempts to add the effect represented by this object to the given\n \u003ca href\u003d\"org/bukkit/entity/LivingEntity.html\" title\u003d\"interface in org.bukkit.entity\"\u003e\u003ccode\u003eLivingEntity\u003c/code\u003e\u003c/a\u003e.",
              "tags": "Returns Whether the effect could be added.",
              "plain": "Attempts to add the effect represented by this object to the given\n {@link LivingEntity}.\n@see LivingEntity#addPotionEffect(PotionEffect)\n@param entity The entity to add this effect to\n@return Whether the effect could be added"
            }
          },
          {
            "kind": "FIELD",
            "name": "color"
          },
          {
            "kind": "FIELD",
            "name": "duration"
          },
          {
            "kind": "METHOD",
            "name": "equals(java.lang.Object)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "obj"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getAmplifier()",
            "comment": {
              "body": "Returns the amplifier of this effect. A higher amplifier means the\n potion effect happens more often over its duration and in some cases\n has more effect on its target.",
              "tags": "Returns The effect amplifier.",
              "plain": "Returns the amplifier of this effect. A higher amplifier means the\n potion effect happens more often over its duration and in some cases\n has more effect on its target.\n@return The effect amplifier"
            }
          },
          {
            "kind": "METHOD",
            "name": "getBool(java.util.Map\u003c?,?\u003e,java.lang.Object,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "def"
              },
              {
                "kind": "PARAMETER",
                "name": "key"
              },
              {
                "kind": "PARAMETER",
                "name": "map"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getColor()",
            "comment": {
              "tags": "Returns color of this potion\u0027s particles. May be null if the potion has no particles or defined color..",
              "plain": "@return color of this potion\u0027s particles. May be null if the potion has no particles or defined color."
            }
          },
          {
            "kind": "METHOD",
            "name": "getDuration()",
            "comment": {
              "body": "Returns the duration (in ticks) that this effect will run for when\n applied to a \u003ca href\u003d\"org/bukkit/entity/LivingEntity.html\" title\u003d\"interface in org.bukkit.entity\"\u003e\u003ccode\u003eLivingEntity\u003c/code\u003e\u003c/a\u003e.",
              "tags": "Returns The duration of the effect.",
              "plain": "Returns the duration (in ticks) that this effect will run for when\n applied to a {@link LivingEntity}.\n@return The duration of the effect"
            }
          },
          {
            "kind": "METHOD",
            "name": "getEffectType(java.util.Map\u003c?,?\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "map"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getInt(java.util.Map\u003c?,?\u003e,java.lang.Object)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "key"
              },
              {
                "kind": "PARAMETER",
                "name": "map"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getType()",
            "comment": {
              "body": "Returns the \u003ca href\u003d\"org/bukkit/potion/PotionEffectType.html\" title\u003d\"class in org.bukkit.potion\"\u003e\u003ccode\u003ePotionEffectType\u003c/code\u003e\u003c/a\u003e of this effect.",
              "tags": "Returns The potion type of this effect.",
              "plain": "Returns the {@link PotionEffectType} of this effect.\n@return The potion type of this effect"
            }
          },
          {
            "kind": "METHOD",
            "name": "hasParticles()",
            "comment": {
              "tags": "Returns whether this effect has particles or not.",
              "plain": "@return whether this effect has particles or not"
            }
          },
          {
            "kind": "METHOD",
            "name": "hashCode()"
          },
          {
            "kind": "METHOD",
            "name": "isAmbient()",
            "comment": {
              "body": "Makes potion effect produce more, translucent, particles.",
              "tags": "Returns if this effect is ambient.",
              "plain": "Makes potion effect produce more, translucent, particles.\n@return if this effect is ambient"
            }
          },
          {
            "kind": "FIELD",
            "name": "particles"
          },
          {
            "kind": "METHOD",
            "name": "serialize()"
          },
          {
            "kind": "METHOD",
            "name": "toString()"
          },
          {
            "kind": "FIELD",
            "name": "type"
          },
          {
            "kind": "METHOD",
            "name": "withAmbient(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "ambient"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "withAmplifier(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "amplifier"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "withColor(org.bukkit.Color)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "color"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "withDuration(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "duration"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "withParticles(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "particles"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "withParticles(boolean,org.bukkit.Color)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "color"
              },
              {
                "kind": "PARAMETER",
                "name": "particles"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "withType(org.bukkit.potion.PotionEffectType)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ]
          }
        ],
        "comment": {
          "body": "Represents a potion effect, that can be added to a \u003ca href\u003d\"org/bukkit/entity/LivingEntity.html\" title\u003d\"interface in org.bukkit.entity\"\u003e\u003ccode\u003eLivingEntity\u003c/code\u003e\u003c/a\u003e. A\n potion effect has a duration that it will last for, an amplifier that will\n enhance its effects, and a \u003ca href\u003d\"org/bukkit/potion/PotionEffectType.html\" title\u003d\"class in org.bukkit.potion\"\u003e\u003ccode\u003ePotionEffectType\u003c/code\u003e\u003c/a\u003e, that represents its\n effect on an entity.",
          "plain": "Represents a potion effect, that can be added to a {@link LivingEntity}. A\n potion effect has a duration that it will last for, an amplifier that will\n enhance its effects, and a {@link PotionEffectType}, that represents its\n effect on an entity."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.potion.PotionEffectType",
        "children": [
          {
            "kind": "FIELD",
            "name": "ABSORPTION",
            "comment": {
              "body": "Increases the maximum health of an entity with health that cannot be\n regenerated, but is refilled every 30 seconds.",
              "plain": "Increases the maximum health of an entity with health that cannot be\n regenerated, but is refilled every 30 seconds."
            }
          },
          {
            "kind": "FIELD",
            "name": "BLINDNESS",
            "comment": {
              "body": "Blinds an entity.",
              "plain": "Blinds an entity."
            }
          },
          {
            "kind": "FIELD",
            "name": "CONFUSION",
            "comment": {
              "body": "Warps vision on the client.",
              "plain": "Warps vision on the client."
            }
          },
          {
            "kind": "FIELD",
            "name": "DAMAGE_RESISTANCE",
            "comment": {
              "body": "Decreases damage dealt to an entity.",
              "plain": "Decreases damage dealt to an entity."
            }
          },
          {
            "kind": "FIELD",
            "name": "FAST_DIGGING",
            "comment": {
              "body": "Increases dig speed.",
              "plain": "Increases dig speed."
            }
          },
          {
            "kind": "FIELD",
            "name": "FIRE_RESISTANCE",
            "comment": {
              "body": "Stops fire damage.",
              "plain": "Stops fire damage."
            }
          },
          {
            "kind": "FIELD",
            "name": "GLOWING",
            "comment": {
              "body": "Outlines the entity so that it can be seen from afar.",
              "plain": "Outlines the entity so that it can be seen from afar."
            }
          },
          {
            "kind": "FIELD",
            "name": "HARM",
            "comment": {
              "body": "Hurts an entity.",
              "plain": "Hurts an entity."
            }
          },
          {
            "kind": "FIELD",
            "name": "HEAL",
            "comment": {
              "body": "Heals an entity.",
              "plain": "Heals an entity."
            }
          },
          {
            "kind": "FIELD",
            "name": "HEALTH_BOOST",
            "comment": {
              "body": "Increases the maximum health of an entity.",
              "plain": "Increases the maximum health of an entity."
            }
          },
          {
            "kind": "FIELD",
            "name": "HUNGER",
            "comment": {
              "body": "Increases hunger.",
              "plain": "Increases hunger."
            }
          },
          {
            "kind": "FIELD",
            "name": "INCREASE_DAMAGE",
            "comment": {
              "body": "Increases damage dealt.",
              "plain": "Increases damage dealt."
            }
          },
          {
            "kind": "FIELD",
            "name": "INVISIBILITY",
            "comment": {
              "body": "Grants invisibility.",
              "plain": "Grants invisibility."
            }
          },
          {
            "kind": "FIELD",
            "name": "JUMP",
            "comment": {
              "body": "Increases jump height.",
              "plain": "Increases jump height."
            }
          },
          {
            "kind": "FIELD",
            "name": "LEVITATION",
            "comment": {
              "body": "Causes the entity to float into the air.",
              "plain": "Causes the entity to float into the air."
            }
          },
          {
            "kind": "FIELD",
            "name": "LUCK",
            "comment": {
              "body": "Loot table luck.",
              "plain": "Loot table luck."
            }
          },
          {
            "kind": "FIELD",
            "name": "NIGHT_VISION",
            "comment": {
              "body": "Allows an entity to see in the dark.",
              "plain": "Allows an entity to see in the dark."
            }
          },
          {
            "kind": "FIELD",
            "name": "POISON",
            "comment": {
              "body": "Deals damage to an entity over time.",
              "plain": "Deals damage to an entity over time."
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "PotionEffectType(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "id"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "REGENERATION",
            "comment": {
              "body": "Regenerates health.",
              "plain": "Regenerates health."
            }
          },
          {
            "kind": "FIELD",
            "name": "SATURATION",
            "comment": {
              "body": "Increases the food level of an entity each tick.",
              "plain": "Increases the food level of an entity each tick."
            }
          },
          {
            "kind": "FIELD",
            "name": "SLOW",
            "comment": {
              "body": "Decreases movement speed.",
              "plain": "Decreases movement speed."
            }
          },
          {
            "kind": "FIELD",
            "name": "SLOW_DIGGING",
            "comment": {
              "body": "Decreases dig speed.",
              "plain": "Decreases dig speed."
            }
          },
          {
            "kind": "FIELD",
            "name": "SPEED",
            "comment": {
              "body": "Increases movement speed.",
              "plain": "Increases movement speed."
            }
          },
          {
            "kind": "FIELD",
            "name": "UNLUCK",
            "comment": {
              "body": "Loot table unluck.",
              "plain": "Loot table unluck."
            }
          },
          {
            "kind": "FIELD",
            "name": "WATER_BREATHING",
            "comment": {
              "body": "Allows breathing underwater.",
              "plain": "Allows breathing underwater."
            }
          },
          {
            "kind": "FIELD",
            "name": "WEAKNESS",
            "comment": {
              "body": "Decreases damage dealt by an entity.",
              "plain": "Decreases damage dealt by an entity."
            }
          },
          {
            "kind": "FIELD",
            "name": "WITHER",
            "comment": {
              "body": "Deals damage to an entity over time and gives the health to the\n shooter.",
              "plain": "Deals damage to an entity over time and gives the health to the\n shooter."
            }
          },
          {
            "kind": "FIELD",
            "name": "acceptingNew"
          },
          {
            "kind": "FIELD",
            "name": "byId"
          },
          {
            "kind": "FIELD",
            "name": "byName"
          },
          {
            "kind": "METHOD",
            "name": "createEffect(int,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "amplifier"
              },
              {
                "kind": "PARAMETER",
                "name": "duration"
              }
            ],
            "comment": {
              "body": "Creates a PotionEffect from this PotionEffectType, applying duration\n modifiers and checks.",
              "tags": "Returns a resulting potion effect.",
              "plain": "Creates a PotionEffect from this PotionEffectType, applying duration\n modifiers and checks.\n@see PotionBrewer#createEffect(PotionEffectType, int, int)\n@param duration time in ticks\n@param amplifier the effect\u0027s amplifier\n@return a resulting potion effect"
            }
          },
          {
            "kind": "METHOD",
            "name": "equals(java.lang.Object)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "obj"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getById(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "id"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Gets the effect type specified by the unique id.",
              "tags": "Returns Resulting type, or null if not found..",
              "plain": "Gets the effect type specified by the unique id.\n@param id Unique ID to fetch\n@return Resulting type, or null if not found.\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "getByName(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ],
            "comment": {
              "body": "Gets the effect type specified by the given name.",
              "tags": "Returns Resulting PotionEffectType, or null if not found..",
              "plain": "Gets the effect type specified by the given name.\n@param name Name of PotionEffectType to fetch\n@return Resulting PotionEffectType, or null if not found."
            }
          },
          {
            "kind": "METHOD",
            "name": "getColor()",
            "comment": {
              "body": "Returns the color of this effect type.",
              "tags": "Returns the color.",
              "plain": "Returns the color of this effect type.\n@return the color"
            }
          },
          {
            "kind": "METHOD",
            "name": "getDurationModifier()",
            "comment": {
              "body": "Returns the duration modifier applied to effects of this type.",
              "tags": "Returns duration modifier.",
              "plain": "Returns the duration modifier applied to effects of this type.\n@return duration modifier"
            }
          },
          {
            "kind": "METHOD",
            "name": "getId()",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Returns the unique ID of this type.",
              "tags": "Returns Unique ID.",
              "plain": "Returns the unique ID of this type.\n@return Unique ID\n@deprecated Magic value"
            }
          },
          {
            "kind": "METHOD",
            "name": "getName()",
            "comment": {
              "body": "Returns the name of this effect type.",
              "tags": "Returns The name of this effect type.",
              "plain": "Returns the name of this effect type.\n@return The name of this effect type"
            }
          },
          {
            "kind": "METHOD",
            "name": "hashCode()"
          },
          {
            "kind": "FIELD",
            "name": "id"
          },
          {
            "kind": "METHOD",
            "name": "isInstant()",
            "comment": {
              "body": "Returns whether the effect of this type happens once, immediately.",
              "tags": "Returns whether this type is normally instant.",
              "plain": "Returns whether the effect of this type happens once, immediately.\n@return whether this type is normally instant"
            }
          },
          {
            "kind": "METHOD",
            "name": "registerPotionEffectType(org.bukkit.potion.PotionEffectType)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "type"
              }
            ],
            "comment": {
              "body": "Registers an effect type with the given object.\n \u003cp\u003e\n Generally not to be used from within a plugin.",
              "plain": "Registers an effect type with the given object.\n \u003cp\u003e\n Generally not to be used from within a plugin.\n@param type PotionType to register"
            }
          },
          {
            "kind": "METHOD",
            "name": "stopAcceptingRegistrations()",
            "comment": {
              "body": "Stops accepting any effect type registrations.",
              "plain": "Stops accepting any effect type registrations."
            }
          },
          {
            "kind": "METHOD",
            "name": "toString()"
          },
          {
            "kind": "METHOD",
            "name": "values()",
            "comment": {
              "body": "Returns an array of all the registered \u003ca href\u003d\"org/bukkit/potion/PotionEffectType.html\" title\u003d\"class in org.bukkit.potion\"\u003e\u003ccode\u003ePotionEffectType\u003c/code\u003e\u003c/a\u003es.\n This array is not necessarily in any particular order and may contain null.",
              "tags": "Returns Array of types..",
              "plain": "Returns an array of all the registered {@link PotionEffectType}s.\n This array is not necessarily in any particular order and may contain null.\n@return Array of types."
            }
          }
        ],
        "comment": {
          "body": "Represents a type of potion and its effect on an entity.",
          "plain": "Represents a type of potion and its effect on an entity."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.potion.PotionEffectTypeWrapper",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PotionEffectTypeWrapper(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "id"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getColor()"
          },
          {
            "kind": "METHOD",
            "name": "getDurationModifier()"
          },
          {
            "kind": "METHOD",
            "name": "getName()"
          },
          {
            "kind": "METHOD",
            "name": "getType()",
            "comment": {
              "body": "Get the potion type bound to this wrapper.",
              "tags": "Returns The potion effect type.",
              "plain": "Get the potion type bound to this wrapper.\n@return The potion effect type"
            }
          },
          {
            "kind": "METHOD",
            "name": "isInstant()"
          }
        ]
      },
      {
        "kind": "ENUM",
        "name": "org.bukkit.potion.PotionType",
        "children": [
          {
            "kind": "ENUM_CONSTANT",
            "name": "AWKWARD"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "FIRE_RESISTANCE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "INSTANT_DAMAGE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "INSTANT_HEAL"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "INVISIBILITY"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "JUMP"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "LUCK"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "MUNDANE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "NIGHT_VISION"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "POISON"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "PotionType(org.bukkit.potion.PotionEffectType,boolean,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "effect"
              },
              {
                "kind": "PARAMETER",
                "name": "extendable"
              },
              {
                "kind": "PARAMETER",
                "name": "upgradeable"
              }
            ]
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "REGEN"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SLOWNESS"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SPEED"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "STRENGTH"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "THICK"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "UNCRAFTABLE"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "WATER"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "WATER_BREATHING"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "WEAKNESS"
          },
          {
            "kind": "FIELD",
            "name": "effect"
          },
          {
            "kind": "FIELD",
            "name": "extendable"
          },
          {
            "kind": "METHOD",
            "name": "getByDamageValue(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "damage"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "tags": "Returns PotionType for given damage value, broken.",
              "plain": "@param damage Damage value associated with a PotionType\n@return PotionType for given damage value, broken\n@deprecated Non-functional"
            }
          },
          {
            "kind": "METHOD",
            "name": "getByEffect(org.bukkit.potion.PotionEffectType)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "effectType"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "tags": "Returns Associated PotionType.",
              "plain": "@param effectType EffectType\n@return Associated PotionType\n@deprecated Misleading"
            }
          },
          {
            "kind": "METHOD",
            "name": "getDamageValue()",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "tags": "Returns Damage value associated with this PotionType, broken.",
              "plain": "@return Damage value associated with this PotionType, broken\n@deprecated Non-functional"
            }
          },
          {
            "kind": "METHOD",
            "name": "getEffectType()"
          },
          {
            "kind": "METHOD",
            "name": "getMaxLevel()"
          },
          {
            "kind": "METHOD",
            "name": "isExtendable()",
            "comment": {
              "body": "Checks if the potion type has an extended state.\n This refers to the extended duration potions",
              "tags": "Returns true if the potion type can be extended.",
              "plain": "Checks if the potion type has an extended state.\n This refers to the extended duration potions\n@return true if the potion type can be extended"
            }
          },
          {
            "kind": "METHOD",
            "name": "isInstant()"
          },
          {
            "kind": "METHOD",
            "name": "isUpgradeable()",
            "comment": {
              "body": "Checks if the potion type has an upgraded state.\n This refers to whether or not the potion type can be Tier 2,\n such as Potion of Fire Resistance II.",
              "tags": "Returns true if the potion type can be upgraded;.",
              "plain": "Checks if the potion type has an upgraded state.\n This refers to whether or not the potion type can be Tier 2,\n such as Potion of Fire Resistance II.\n@return true if the potion type can be upgraded;"
            }
          },
          {
            "kind": "FIELD",
            "name": "upgradeable"
          },
          {
            "kind": "METHOD",
            "name": "valueOf(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "values()"
          }
        ],
        "comment": {
          "body": "This enum reflects and matches each potion state that can be obtained from\n the Creative mode inventory",
          "plain": "This enum reflects and matches each potion state that can be obtained from\n the Creative mode inventory"
        }
      }
    ]
  },
  {
    "kind": "PACKAGE",
    "name": "org.bukkit.projectiles",
    "children": [
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.projectiles.BlockProjectileSource",
        "children": [
          {
            "kind": "METHOD",
            "name": "getBlock()",
            "comment": {
              "body": "Gets the block this projectile source belongs to.",
              "tags": "Returns Block for the projectile source.",
              "plain": "Gets the block this projectile source belongs to.\n@return Block for the projectile source"
            }
          }
        ]
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.projectiles.ProjectileSource",
        "children": [
          {
            "kind": "METHOD",
            "name": "\u003cT\u003elaunchProjectile(java.lang.Class\u003c? extends T\u003e)",
            "children": [
              {
                "kind": "TYPE_PARAMETER",
                "name": "T"
              },
              {
                "kind": "PARAMETER",
                "name": "projectile"
              }
            ],
            "comment": {
              "body": "Launches a \u003ca href\u003d\"org/bukkit/entity/Projectile.html\" title\u003d\"interface in org.bukkit.entity\"\u003e\u003ccode\u003eProjectile\u003c/code\u003e\u003c/a\u003e from the ProjectileSource.",
              "tags": "Returns the launched projectile.",
              "plain": "Launches a {@link Projectile} from the ProjectileSource.\n@param \u003cT\u003e a projectile subclass\n@param projectile class of the projectile to launch\n@return the launched projectile"
            }
          },
          {
            "kind": "METHOD",
            "name": "\u003cT\u003elaunchProjectile(java.lang.Class\u003c? extends T\u003e,org.bukkit.util.Vector)",
            "children": [
              {
                "kind": "TYPE_PARAMETER",
                "name": "T"
              },
              {
                "kind": "PARAMETER",
                "name": "projectile"
              },
              {
                "kind": "PARAMETER",
                "name": "velocity"
              }
            ],
            "comment": {
              "body": "Launches a \u003ca href\u003d\"org/bukkit/entity/Projectile.html\" title\u003d\"interface in org.bukkit.entity\"\u003e\u003ccode\u003eProjectile\u003c/code\u003e\u003c/a\u003e from the ProjectileSource with an\n initial velocity.",
              "tags": "Returns the launched projectile.",
              "plain": "Launches a {@link Projectile} from the ProjectileSource with an\n initial velocity.\n@param \u003cT\u003e a projectile subclass\n@param projectile class of the projectile to launch\n@param velocity the velocity with which to launch\n@return the launched projectile"
            }
          }
        ],
        "comment": {
          "body": "Represents a valid source of a projectile.",
          "plain": "Represents a valid source of a projectile."
        }
      }
    ]
  },
  {
    "kind": "PACKAGE",
    "name": "org.bukkit.scheduler",
    "children": [
      {
        "kind": "CLASS",
        "name": "org.bukkit.scheduler.BukkitRunnable",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "BukkitRunnable()"
          },
          {
            "kind": "METHOD",
            "name": "cancel()",
            "comment": {
              "body": "Attempts to cancel this task.",
              "plain": "Attempts to cancel this task.\n@throws IllegalStateException if task was not scheduled yet"
            }
          },
          {
            "kind": "METHOD",
            "name": "checkNotYetScheduled()"
          },
          {
            "kind": "METHOD",
            "name": "checkScheduled()"
          },
          {
            "kind": "METHOD",
            "name": "getTaskId()",
            "comment": {
              "body": "Gets the task id for this runnable.",
              "tags": "Returns the task id that this runnable was scheduled as.",
              "plain": "Gets the task id for this runnable.\n@return the task id that this runnable was scheduled as\n@throws IllegalStateException if task was not scheduled yet"
            }
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()",
            "comment": {
              "body": "Returns true if this task has been cancelled.",
              "tags": "Returns true if the task has been cancelled.",
              "plain": "Returns true if this task has been cancelled.\n@return true if the task has been cancelled\n@throws IllegalStateException if task was not scheduled yet"
            }
          },
          {
            "kind": "METHOD",
            "name": "runTask(org.bukkit.plugin.Plugin)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "plugin"
              }
            ],
            "comment": {
              "body": "Schedules this in the Bukkit scheduler to run on next tick.",
              "tags": "Returns a BukkitTask that contains the id number.",
              "plain": "Schedules this in the Bukkit scheduler to run on next tick.\n@param plugin the reference to the plugin scheduling task\n@return a BukkitTask that contains the id number\n@throws IllegalArgumentException if plugin is null\n@throws IllegalStateException if this was already scheduled\n@see BukkitScheduler#runTask(Plugin, Runnable)"
            }
          },
          {
            "kind": "METHOD",
            "name": "runTaskAsynchronously(org.bukkit.plugin.Plugin)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "plugin"
              }
            ],
            "comment": {
              "body": "\u003cb\u003eAsynchronous tasks should never access any API in Bukkit. Great care\n should be taken to assure the thread-safety of asynchronous tasks.\u003c/b\u003e\n \u003cp\u003e\n Schedules this in the Bukkit scheduler to run asynchronously.",
              "tags": "Returns a BukkitTask that contains the id number.",
              "plain": "\u003cb\u003eAsynchronous tasks should never access any API in Bukkit. Great care\n should be taken to assure the thread-safety of asynchronous tasks.\u003c/b\u003e\n \u003cp\u003e\n Schedules this in the Bukkit scheduler to run asynchronously.\n@param plugin the reference to the plugin scheduling task\n@return a BukkitTask that contains the id number\n@throws IllegalArgumentException if plugin is null\n@throws IllegalStateException if this was already scheduled\n@see BukkitScheduler#runTaskAsynchronously(Plugin, Runnable)"
            }
          },
          {
            "kind": "METHOD",
            "name": "runTaskLater(org.bukkit.plugin.Plugin,long)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "delay"
              },
              {
                "kind": "PARAMETER",
                "name": "plugin"
              }
            ],
            "comment": {
              "body": "Schedules this to run after the specified number of server ticks.",
              "tags": "Returns a BukkitTask that contains the id number.",
              "plain": "Schedules this to run after the specified number of server ticks.\n@param plugin the reference to the plugin scheduling task\n@param delay the ticks to wait before running the task\n@return a BukkitTask that contains the id number\n@throws IllegalArgumentException if plugin is null\n@throws IllegalStateException if this was already scheduled\n@see BukkitScheduler#runTaskLater(Plugin, Runnable, long)"
            }
          },
          {
            "kind": "METHOD",
            "name": "runTaskLaterAsynchronously(org.bukkit.plugin.Plugin,long)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "delay"
              },
              {
                "kind": "PARAMETER",
                "name": "plugin"
              }
            ],
            "comment": {
              "body": "\u003cb\u003eAsynchronous tasks should never access any API in Bukkit. Great care\n should be taken to assure the thread-safety of asynchronous tasks.\u003c/b\u003e\n \u003cp\u003e\n Schedules this to run asynchronously after the specified number of\n server ticks.",
              "tags": "Returns a BukkitTask that contains the id number.",
              "plain": "\u003cb\u003eAsynchronous tasks should never access any API in Bukkit. Great care\n should be taken to assure the thread-safety of asynchronous tasks.\u003c/b\u003e\n \u003cp\u003e\n Schedules this to run asynchronously after the specified number of\n server ticks.\n@param plugin the reference to the plugin scheduling task\n@param delay the ticks to wait before running the task\n@return a BukkitTask that contains the id number\n@throws IllegalArgumentException if plugin is null\n@throws IllegalStateException if this was already scheduled\n@see BukkitScheduler#runTaskLaterAsynchronously(Plugin, Runnable, long)"
            }
          },
          {
            "kind": "METHOD",
            "name": "runTaskTimer(org.bukkit.plugin.Plugin,long,long)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "delay"
              },
              {
                "kind": "PARAMETER",
                "name": "period"
              },
              {
                "kind": "PARAMETER",
                "name": "plugin"
              }
            ],
            "comment": {
              "body": "Schedules this to repeatedly run until cancelled, starting after the\n specified number of server ticks.",
              "tags": "Returns a BukkitTask that contains the id number.",
              "plain": "Schedules this to repeatedly run until cancelled, starting after the\n specified number of server ticks.\n@param plugin the reference to the plugin scheduling task\n@param delay the ticks to wait before running the task\n@param period the ticks to wait between runs\n@return a BukkitTask that contains the id number\n@throws IllegalArgumentException if plugin is null\n@throws IllegalStateException if this was already scheduled\n@see BukkitScheduler#runTaskTimer(Plugin, Runnable, long, long)"
            }
          },
          {
            "kind": "METHOD",
            "name": "runTaskTimerAsynchronously(org.bukkit.plugin.Plugin,long,long)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "delay"
              },
              {
                "kind": "PARAMETER",
                "name": "period"
              },
              {
                "kind": "PARAMETER",
                "name": "plugin"
              }
            ],
            "comment": {
              "body": "\u003cb\u003eAsynchronous tasks should never access any API in Bukkit. Great care\n should be taken to assure the thread-safety of asynchronous tasks.\u003c/b\u003e\n \u003cp\u003e\n Schedules this to repeatedly run asynchronously until cancelled,\n starting after the specified number of server ticks.",
              "tags": "Returns a BukkitTask that contains the id number.",
              "plain": "\u003cb\u003eAsynchronous tasks should never access any API in Bukkit. Great care\n should be taken to assure the thread-safety of asynchronous tasks.\u003c/b\u003e\n \u003cp\u003e\n Schedules this to repeatedly run asynchronously until cancelled,\n starting after the specified number of server ticks.\n@param plugin the reference to the plugin scheduling task\n@param delay the ticks to wait before running the task for the first\n     time\n@param period the ticks to wait between runs\n@return a BukkitTask that contains the id number\n@throws IllegalArgumentException if plugin is null\n@throws IllegalStateException if this was already scheduled\n@see BukkitScheduler#runTaskTimerAsynchronously(Plugin, Runnable, long,\n     long)"
            }
          },
          {
            "kind": "METHOD",
            "name": "setupTask(org.bukkit.scheduler.BukkitTask)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "task"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "task"
          }
        ],
        "comment": {
          "body": "This class is provided as an easy way to handle scheduling tasks.",
          "plain": "This class is provided as an easy way to handle scheduling tasks."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.scheduler.BukkitScheduler",
        "children": [
          {
            "kind": "METHOD",
            "name": "\u003cT\u003ecallSyncMethod(org.bukkit.plugin.Plugin,java.util.concurrent.Callable\u003cT\u003e)",
            "children": [
              {
                "kind": "TYPE_PARAMETER",
                "name": "T"
              },
              {
                "kind": "PARAMETER",
                "name": "plugin"
              },
              {
                "kind": "PARAMETER",
                "name": "task"
              }
            ],
            "comment": {
              "body": "Calls a method on the main thread and returns a Future object. This\n task will be executed by the main server thread.\n \u003cul\u003e\n \u003cli\u003eNote: The Future.get() methods must NOT be called from the main\n     thread.\n \u003cli\u003eNote2: There is at least an average of 10ms latency until the\n     isDone() method returns true.\n \u003c/ul\u003e",
              "tags": "Returns Future Future object related to the task.",
              "plain": "Calls a method on the main thread and returns a Future object. This\n task will be executed by the main server thread.\n \u003cul\u003e\n \u003cli\u003eNote: The Future.get() methods must NOT be called from the main\n     thread.\n \u003cli\u003eNote2: There is at least an average of 10ms latency until the\n     isDone() method returns true.\n \u003c/ul\u003e\n@param \u003cT\u003e The callable\u0027s return type\n@param plugin Plugin that owns the task\n@param task Task to be executed\n@return Future Future object related to the task"
            }
          },
          {
            "kind": "METHOD",
            "name": "cancelAllTasks()",
            "comment": {
              "body": "Removes all tasks from the scheduler.",
              "plain": "Removes all tasks from the scheduler."
            }
          },
          {
            "kind": "METHOD",
            "name": "cancelTask(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "taskId"
              }
            ],
            "comment": {
              "body": "Removes task from scheduler.",
              "plain": "Removes task from scheduler.\n@param taskId Id number of task to be removed"
            }
          },
          {
            "kind": "METHOD",
            "name": "cancelTasks(org.bukkit.plugin.Plugin)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "plugin"
              }
            ],
            "comment": {
              "body": "Removes all tasks associated with a particular plugin from the\n scheduler.",
              "plain": "Removes all tasks associated with a particular plugin from the\n scheduler.\n@param plugin Owner of tasks to be removed"
            }
          },
          {
            "kind": "METHOD",
            "name": "getActiveWorkers()",
            "comment": {
              "body": "Returns a list of all active workers.\n \u003cp\u003e\n This list contains asynch tasks that are being executed by separate\n threads.",
              "tags": "Returns Active workers.",
              "plain": "Returns a list of all active workers.\n \u003cp\u003e\n This list contains asynch tasks that are being executed by separate\n threads.\n@return Active workers"
            }
          },
          {
            "kind": "METHOD",
            "name": "getPendingTasks()",
            "comment": {
              "body": "Returns a list of all pending tasks. The ordering of the tasks is not\n related to their order of execution.",
              "tags": "Returns Active workers.",
              "plain": "Returns a list of all pending tasks. The ordering of the tasks is not\n related to their order of execution.\n@return Active workers"
            }
          },
          {
            "kind": "METHOD",
            "name": "isCurrentlyRunning(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "taskId"
              }
            ],
            "comment": {
              "body": "Check if the task currently running.\n \u003cp\u003e\n A repeating task might not be running currently, but will be running in\n the future. A task that has finished, and does not repeat, will not be\n running ever again.\n \u003cp\u003e\n Explicitly, a task is running if there exists a thread for it, and that\n thread is alive.",
              "tags": "Returns If the task is currently running..",
              "plain": "Check if the task currently running.\n \u003cp\u003e\n A repeating task might not be running currently, but will be running in\n the future. A task that has finished, and does not repeat, will not be\n running ever again.\n \u003cp\u003e\n Explicitly, a task is running if there exists a thread for it, and that\n thread is alive.\n@param taskId The task to check.\n \u003cp\u003e\n@return If the task is currently running."
            }
          },
          {
            "kind": "METHOD",
            "name": "isQueued(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "taskId"
              }
            ],
            "comment": {
              "body": "Check if the task queued to be run later.\n \u003cp\u003e\n If a repeating task is currently running, it might not be queued now\n but could be in the future. A task that is not queued, and not running,\n will not be queued again.",
              "tags": "Returns If the task is queued to be run..",
              "plain": "Check if the task queued to be run later.\n \u003cp\u003e\n If a repeating task is currently running, it might not be queued now\n but could be in the future. A task that is not queued, and not running,\n will not be queued again.\n@param taskId The task to check.\n \u003cp\u003e\n@return If the task is queued to be run."
            }
          },
          {
            "kind": "METHOD",
            "name": "runTask(org.bukkit.plugin.Plugin,java.lang.Runnable)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "plugin"
              },
              {
                "kind": "PARAMETER",
                "name": "task"
              }
            ],
            "comment": {
              "body": "Returns a task that will run on the next server tick.",
              "tags": "Returns a BukkitTask that contains the id number.",
              "plain": "Returns a task that will run on the next server tick.\n@param plugin the reference to the plugin scheduling task\n@param task the task to be run\n@return a BukkitTask that contains the id number\n@throws IllegalArgumentException if plugin is null\n@throws IllegalArgumentException if task is null"
            }
          },
          {
            "kind": "METHOD",
            "name": "runTask(org.bukkit.plugin.Plugin,org.bukkit.scheduler.BukkitRunnable)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "plugin"
              },
              {
                "kind": "PARAMETER",
                "name": "task"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "tags": "Returns a BukkitTask that contains the id number.",
              "plain": "@deprecated Use {@link BukkitRunnable#runTask(Plugin)}\n@param plugin the reference to the plugin scheduling task\n@param task the task to be run\n@return a BukkitTask that contains the id number\n@throws IllegalArgumentException if plugin is null\n@throws IllegalArgumentException if task is null"
            }
          },
          {
            "kind": "METHOD",
            "name": "runTaskAsynchronously(org.bukkit.plugin.Plugin,java.lang.Runnable)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "plugin"
              },
              {
                "kind": "PARAMETER",
                "name": "task"
              }
            ],
            "comment": {
              "body": "\u003cb\u003eAsynchronous tasks should never access any API in Bukkit. Great care\n should be taken to assure the thread-safety of asynchronous tasks.\u003c/b\u003e\n \u003cp\u003e\n Returns a task that will run asynchronously.",
              "tags": "Returns a BukkitTask that contains the id number.",
              "plain": "\u003cb\u003eAsynchronous tasks should never access any API in Bukkit. Great care\n should be taken to assure the thread-safety of asynchronous tasks.\u003c/b\u003e\n \u003cp\u003e\n Returns a task that will run asynchronously.\n@param plugin the reference to the plugin scheduling task\n@param task the task to be run\n@return a BukkitTask that contains the id number\n@throws IllegalArgumentException if plugin is null\n@throws IllegalArgumentException if task is null"
            }
          },
          {
            "kind": "METHOD",
            "name": "runTaskAsynchronously(org.bukkit.plugin.Plugin,org.bukkit.scheduler.BukkitRunnable)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "plugin"
              },
              {
                "kind": "PARAMETER",
                "name": "task"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "tags": "Returns a BukkitTask that contains the id number.",
              "plain": "@deprecated Use {@link BukkitRunnable#runTaskAsynchronously(Plugin)}\n@param plugin the reference to the plugin scheduling task\n@param task the task to be run\n@return a BukkitTask that contains the id number\n@throws IllegalArgumentException if plugin is null\n@throws IllegalArgumentException if task is null"
            }
          },
          {
            "kind": "METHOD",
            "name": "runTaskLater(org.bukkit.plugin.Plugin,java.lang.Runnable,long)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "delay"
              },
              {
                "kind": "PARAMETER",
                "name": "plugin"
              },
              {
                "kind": "PARAMETER",
                "name": "task"
              }
            ],
            "comment": {
              "body": "Returns a task that will run after the specified number of server\n ticks.",
              "tags": "Returns a BukkitTask that contains the id number.",
              "plain": "Returns a task that will run after the specified number of server\n ticks.\n@param plugin the reference to the plugin scheduling task\n@param task the task to be run\n@param delay the ticks to wait before running the task\n@return a BukkitTask that contains the id number\n@throws IllegalArgumentException if plugin is null\n@throws IllegalArgumentException if task is null"
            }
          },
          {
            "kind": "METHOD",
            "name": "runTaskLater(org.bukkit.plugin.Plugin,org.bukkit.scheduler.BukkitRunnable,long)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "delay"
              },
              {
                "kind": "PARAMETER",
                "name": "plugin"
              },
              {
                "kind": "PARAMETER",
                "name": "task"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "tags": "Returns a BukkitTask that contains the id number.",
              "plain": "@deprecated Use {@link BukkitRunnable#runTaskLater(Plugin, long)}\n@param plugin the reference to the plugin scheduling task\n@param task the task to be run\n@param delay the ticks to wait before running the task\n@return a BukkitTask that contains the id number\n@throws IllegalArgumentException if plugin is null\n@throws IllegalArgumentException if task is null"
            }
          },
          {
            "kind": "METHOD",
            "name": "runTaskLaterAsynchronously(org.bukkit.plugin.Plugin,java.lang.Runnable,long)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "delay"
              },
              {
                "kind": "PARAMETER",
                "name": "plugin"
              },
              {
                "kind": "PARAMETER",
                "name": "task"
              }
            ],
            "comment": {
              "body": "\u003cb\u003eAsynchronous tasks should never access any API in Bukkit. Great care\n should be taken to assure the thread-safety of asynchronous tasks.\u003c/b\u003e\n \u003cp\u003e\n Returns a task that will run asynchronously after the specified number\n of server ticks.",
              "tags": "Returns a BukkitTask that contains the id number.",
              "plain": "\u003cb\u003eAsynchronous tasks should never access any API in Bukkit. Great care\n should be taken to assure the thread-safety of asynchronous tasks.\u003c/b\u003e\n \u003cp\u003e\n Returns a task that will run asynchronously after the specified number\n of server ticks.\n@param plugin the reference to the plugin scheduling task\n@param task the task to be run\n@param delay the ticks to wait before running the task\n@return a BukkitTask that contains the id number\n@throws IllegalArgumentException if plugin is null\n@throws IllegalArgumentException if task is null"
            }
          },
          {
            "kind": "METHOD",
            "name": "runTaskLaterAsynchronously(org.bukkit.plugin.Plugin,org.bukkit.scheduler.BukkitRunnable,long)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "delay"
              },
              {
                "kind": "PARAMETER",
                "name": "plugin"
              },
              {
                "kind": "PARAMETER",
                "name": "task"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "tags": "Returns a BukkitTask that contains the id number.",
              "plain": "@deprecated Use {@link BukkitRunnable#runTaskLaterAsynchronously(Plugin, long)}\n@param plugin the reference to the plugin scheduling task\n@param task the task to be run\n@param delay the ticks to wait before running the task\n@return a BukkitTask that contains the id number\n@throws IllegalArgumentException if plugin is null\n@throws IllegalArgumentException if task is null"
            }
          },
          {
            "kind": "METHOD",
            "name": "runTaskTimer(org.bukkit.plugin.Plugin,java.lang.Runnable,long,long)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "delay"
              },
              {
                "kind": "PARAMETER",
                "name": "period"
              },
              {
                "kind": "PARAMETER",
                "name": "plugin"
              },
              {
                "kind": "PARAMETER",
                "name": "task"
              }
            ],
            "comment": {
              "body": "Returns a task that will repeatedly run until cancelled, starting after\n the specified number of server ticks.",
              "tags": "Returns a BukkitTask that contains the id number.",
              "plain": "Returns a task that will repeatedly run until cancelled, starting after\n the specified number of server ticks.\n@param plugin the reference to the plugin scheduling task\n@param task the task to be run\n@param delay the ticks to wait before running the task\n@param period the ticks to wait between runs\n@return a BukkitTask that contains the id number\n@throws IllegalArgumentException if plugin is null\n@throws IllegalArgumentException if task is null"
            }
          },
          {
            "kind": "METHOD",
            "name": "runTaskTimer(org.bukkit.plugin.Plugin,org.bukkit.scheduler.BukkitRunnable,long,long)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "delay"
              },
              {
                "kind": "PARAMETER",
                "name": "period"
              },
              {
                "kind": "PARAMETER",
                "name": "plugin"
              },
              {
                "kind": "PARAMETER",
                "name": "task"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "tags": "Returns a BukkitTask that contains the id number.",
              "plain": "@deprecated Use {@link BukkitRunnable#runTaskTimer(Plugin, long, long)}\n@param plugin the reference to the plugin scheduling task\n@param task the task to be run\n@param delay the ticks to wait before running the task\n@param period the ticks to wait between runs\n@return a BukkitTask that contains the id number\n@throws IllegalArgumentException if plugin is null\n@throws IllegalArgumentException if task is null"
            }
          },
          {
            "kind": "METHOD",
            "name": "runTaskTimerAsynchronously(org.bukkit.plugin.Plugin,java.lang.Runnable,long,long)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "delay"
              },
              {
                "kind": "PARAMETER",
                "name": "period"
              },
              {
                "kind": "PARAMETER",
                "name": "plugin"
              },
              {
                "kind": "PARAMETER",
                "name": "task"
              }
            ],
            "comment": {
              "body": "\u003cb\u003eAsynchronous tasks should never access any API in Bukkit. Great care\n should be taken to assure the thread-safety of asynchronous tasks.\u003c/b\u003e\n \u003cp\u003e\n Returns a task that will repeatedly run asynchronously until cancelled,\n starting after the specified number of server ticks.",
              "tags": "Returns a BukkitTask that contains the id number.",
              "plain": "\u003cb\u003eAsynchronous tasks should never access any API in Bukkit. Great care\n should be taken to assure the thread-safety of asynchronous tasks.\u003c/b\u003e\n \u003cp\u003e\n Returns a task that will repeatedly run asynchronously until cancelled,\n starting after the specified number of server ticks.\n@param plugin the reference to the plugin scheduling task\n@param task the task to be run\n@param delay the ticks to wait before running the task for the first\n     time\n@param period the ticks to wait between runs\n@return a BukkitTask that contains the id number\n@throws IllegalArgumentException if plugin is null\n@throws IllegalArgumentException if task is null"
            }
          },
          {
            "kind": "METHOD",
            "name": "runTaskTimerAsynchronously(org.bukkit.plugin.Plugin,org.bukkit.scheduler.BukkitRunnable,long,long)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "delay"
              },
              {
                "kind": "PARAMETER",
                "name": "period"
              },
              {
                "kind": "PARAMETER",
                "name": "plugin"
              },
              {
                "kind": "PARAMETER",
                "name": "task"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "tags": "Returns a BukkitTask that contains the id number.",
              "plain": "@deprecated Use {@link BukkitRunnable#runTaskTimerAsynchronously(Plugin, long, long)}\n@param plugin the reference to the plugin scheduling task\n@param task the task to be run\n@param delay the ticks to wait before running the task for the first\n     time\n@param period the ticks to wait between runs\n@return a BukkitTask that contains the id number\n@throws IllegalArgumentException if plugin is null\n@throws IllegalArgumentException if task is null"
            }
          },
          {
            "kind": "METHOD",
            "name": "scheduleAsyncDelayedTask(org.bukkit.plugin.Plugin,java.lang.Runnable)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "plugin"
              },
              {
                "kind": "PARAMETER",
                "name": "task"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "\u003cb\u003eAsynchronous tasks should never access any API in Bukkit. Great care\n should be taken to assure the thread-safety of asynchronous tasks.\u003c/b\u003e\n \u003cp\u003e\n Schedules a once off task to occur as soon as possible. This task will\n be executed by a thread managed by the scheduler.",
              "tags": "Returns Task id number (-1 if scheduling failed).",
              "plain": "\u003cb\u003eAsynchronous tasks should never access any API in Bukkit. Great care\n should be taken to assure the thread-safety of asynchronous tasks.\u003c/b\u003e\n \u003cp\u003e\n Schedules a once off task to occur as soon as possible. This task will\n be executed by a thread managed by the scheduler.\n@param plugin Plugin that owns the task\n@param task Task to be executed\n@return Task id number (-1 if scheduling failed)\n@deprecated This name is misleading, as it does not schedule \"a sync\"\n     task, but rather, \"an async\" task"
            }
          },
          {
            "kind": "METHOD",
            "name": "scheduleAsyncDelayedTask(org.bukkit.plugin.Plugin,java.lang.Runnable,long)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "delay"
              },
              {
                "kind": "PARAMETER",
                "name": "plugin"
              },
              {
                "kind": "PARAMETER",
                "name": "task"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "\u003cb\u003eAsynchronous tasks should never access any API in Bukkit. Great care\n should be taken to assure the thread-safety of asynchronous tasks.\u003c/b\u003e\n \u003cp\u003e\n Schedules a once off task to occur after a delay. This task will be\n executed by a thread managed by the scheduler.",
              "tags": "Returns Task id number (-1 if scheduling failed).",
              "plain": "\u003cb\u003eAsynchronous tasks should never access any API in Bukkit. Great care\n should be taken to assure the thread-safety of asynchronous tasks.\u003c/b\u003e\n \u003cp\u003e\n Schedules a once off task to occur after a delay. This task will be\n executed by a thread managed by the scheduler.\n@param plugin Plugin that owns the task\n@param task Task to be executed\n@param delay Delay in server ticks before executing task\n@return Task id number (-1 if scheduling failed)\n@deprecated This name is misleading, as it does not schedule \"a sync\"\n     task, but rather, \"an async\" task"
            }
          },
          {
            "kind": "METHOD",
            "name": "scheduleAsyncRepeatingTask(org.bukkit.plugin.Plugin,java.lang.Runnable,long,long)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "delay"
              },
              {
                "kind": "PARAMETER",
                "name": "period"
              },
              {
                "kind": "PARAMETER",
                "name": "plugin"
              },
              {
                "kind": "PARAMETER",
                "name": "task"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "\u003cb\u003eAsynchronous tasks should never access any API in Bukkit. Great care\n should be taken to assure the thread-safety of asynchronous tasks.\u003c/b\u003e\n \u003cp\u003e\n Schedules a repeating task. This task will be executed by a thread\n managed by the scheduler.",
              "tags": "Returns Task id number (-1 if scheduling failed).",
              "plain": "\u003cb\u003eAsynchronous tasks should never access any API in Bukkit. Great care\n should be taken to assure the thread-safety of asynchronous tasks.\u003c/b\u003e\n \u003cp\u003e\n Schedules a repeating task. This task will be executed by a thread\n managed by the scheduler.\n@param plugin Plugin that owns the task\n@param task Task to be executed\n@param delay Delay in server ticks before executing first repeat\n@param period Period in server ticks of the task\n@return Task id number (-1 if scheduling failed)\n@deprecated This name is misleading, as it does not schedule \"a sync\"\n     task, but rather, \"an async\" task"
            }
          },
          {
            "kind": "METHOD",
            "name": "scheduleSyncDelayedTask(org.bukkit.plugin.Plugin,java.lang.Runnable)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "plugin"
              },
              {
                "kind": "PARAMETER",
                "name": "task"
              }
            ],
            "comment": {
              "body": "Schedules a once off task to occur as soon as possible.\n \u003cp\u003e\n This task will be executed by the main server thread.",
              "tags": "Returns Task id number (-1 if scheduling failed).",
              "plain": "Schedules a once off task to occur as soon as possible.\n \u003cp\u003e\n This task will be executed by the main server thread.\n@param plugin Plugin that owns the task\n@param task Task to be executed\n@return Task id number (-1 if scheduling failed)"
            }
          },
          {
            "kind": "METHOD",
            "name": "scheduleSyncDelayedTask(org.bukkit.plugin.Plugin,java.lang.Runnable,long)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "delay"
              },
              {
                "kind": "PARAMETER",
                "name": "plugin"
              },
              {
                "kind": "PARAMETER",
                "name": "task"
              }
            ],
            "comment": {
              "body": "Schedules a once off task to occur after a delay.\n \u003cp\u003e\n This task will be executed by the main server thread.",
              "tags": "Returns Task id number (-1 if scheduling failed).",
              "plain": "Schedules a once off task to occur after a delay.\n \u003cp\u003e\n This task will be executed by the main server thread.\n@param plugin Plugin that owns the task\n@param task Task to be executed\n@param delay Delay in server ticks before executing task\n@return Task id number (-1 if scheduling failed)"
            }
          },
          {
            "kind": "METHOD",
            "name": "scheduleSyncDelayedTask(org.bukkit.plugin.Plugin,org.bukkit.scheduler.BukkitRunnable)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "plugin"
              },
              {
                "kind": "PARAMETER",
                "name": "task"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "tags": "Returns Task id number (-1 if scheduling failed).",
              "plain": "@deprecated Use {@link BukkitRunnable#runTask(Plugin)}\n@param plugin Plugin that owns the task\n@param task Task to be executed\n@return Task id number (-1 if scheduling failed)"
            }
          },
          {
            "kind": "METHOD",
            "name": "scheduleSyncDelayedTask(org.bukkit.plugin.Plugin,org.bukkit.scheduler.BukkitRunnable,long)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "delay"
              },
              {
                "kind": "PARAMETER",
                "name": "plugin"
              },
              {
                "kind": "PARAMETER",
                "name": "task"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "tags": "Returns Task id number (-1 if scheduling failed).",
              "plain": "@deprecated Use {@link BukkitRunnable#runTaskLater(Plugin, long)}\n@param plugin Plugin that owns the task\n@param task Task to be executed\n@param delay Delay in server ticks before executing task\n@return Task id number (-1 if scheduling failed)"
            }
          },
          {
            "kind": "METHOD",
            "name": "scheduleSyncRepeatingTask(org.bukkit.plugin.Plugin,java.lang.Runnable,long,long)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "delay"
              },
              {
                "kind": "PARAMETER",
                "name": "period"
              },
              {
                "kind": "PARAMETER",
                "name": "plugin"
              },
              {
                "kind": "PARAMETER",
                "name": "task"
              }
            ],
            "comment": {
              "body": "Schedules a repeating task.\n \u003cp\u003e\n This task will be executed by the main server thread.",
              "tags": "Returns Task id number (-1 if scheduling failed).",
              "plain": "Schedules a repeating task.\n \u003cp\u003e\n This task will be executed by the main server thread.\n@param plugin Plugin that owns the task\n@param task Task to be executed\n@param delay Delay in server ticks before executing first repeat\n@param period Period in server ticks of the task\n@return Task id number (-1 if scheduling failed)"
            }
          },
          {
            "kind": "METHOD",
            "name": "scheduleSyncRepeatingTask(org.bukkit.plugin.Plugin,org.bukkit.scheduler.BukkitRunnable,long,long)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "delay"
              },
              {
                "kind": "PARAMETER",
                "name": "period"
              },
              {
                "kind": "PARAMETER",
                "name": "plugin"
              },
              {
                "kind": "PARAMETER",
                "name": "task"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "tags": "Returns Task id number (-1 if scheduling failed).",
              "plain": "@deprecated Use {@link BukkitRunnable#runTaskTimer(Plugin, long, long)}     *\n@param plugin Plugin that owns the task\n@param task Task to be executed\n@param delay Delay in server ticks before executing first repeat\n@param period Period in server ticks of the task\n@return Task id number (-1 if scheduling failed)"
            }
          }
        ]
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.scheduler.BukkitTask",
        "children": [
          {
            "kind": "METHOD",
            "name": "cancel()",
            "comment": {
              "body": "Will attempt to cancel this task.",
              "plain": "Will attempt to cancel this task."
            }
          },
          {
            "kind": "METHOD",
            "name": "getOwner()",
            "comment": {
              "body": "Returns the Plugin that owns this task.",
              "tags": "Returns The Plugin that owns the task.",
              "plain": "Returns the Plugin that owns this task.\n@return The Plugin that owns the task"
            }
          },
          {
            "kind": "METHOD",
            "name": "getTaskId()",
            "comment": {
              "body": "Returns the taskId for the task.",
              "tags": "Returns Task id number.",
              "plain": "Returns the taskId for the task.\n@return Task id number"
            }
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()",
            "comment": {
              "body": "Returns true if this task has been cancelled.",
              "tags": "Returns true if the task has been cancelled.",
              "plain": "Returns true if this task has been cancelled.\n@return true if the task has been cancelled"
            }
          },
          {
            "kind": "METHOD",
            "name": "isSync()",
            "comment": {
              "body": "Returns true if the Task is a sync task.",
              "tags": "Returns true if the task is run by main thread.",
              "plain": "Returns true if the Task is a sync task.\n@return true if the task is run by main thread"
            }
          }
        ],
        "comment": {
          "body": "Represents a task being executed by the scheduler",
          "plain": "Represents a task being executed by the scheduler"
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.scheduler.BukkitWorker",
        "children": [
          {
            "kind": "METHOD",
            "name": "getOwner()",
            "comment": {
              "body": "Returns the Plugin that owns this task.",
              "tags": "Returns The Plugin that owns the task.",
              "plain": "Returns the Plugin that owns this task.\n@return The Plugin that owns the task"
            }
          },
          {
            "kind": "METHOD",
            "name": "getTaskId()",
            "comment": {
              "body": "Returns the taskId for the task being executed by this worker.",
              "tags": "Returns Task id number.",
              "plain": "Returns the taskId for the task being executed by this worker.\n@return Task id number"
            }
          },
          {
            "kind": "METHOD",
            "name": "getThread()",
            "comment": {
              "body": "Returns the thread for the worker.",
              "tags": "Returns The Thread object for the worker.",
              "plain": "Returns the thread for the worker.\n@return The Thread object for the worker"
            }
          }
        ],
        "comment": {
          "body": "Represents a worker thread for the scheduler. This gives information about\n the Thread object for the task, owner of the task and the taskId.\n \u003cp\u003e\n Workers are used to execute async tasks.",
          "plain": "Represents a worker thread for the scheduler. This gives information about\n the Thread object for the task, owner of the task and the taskId.\n \u003cp\u003e\n Workers are used to execute async tasks."
        }
      }
    ]
  },
  {
    "kind": "PACKAGE",
    "name": "org.bukkit.scoreboard",
    "children": [
      {
        "kind": "CLASS",
        "name": "org.bukkit.scoreboard.Criterias",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "Criterias()"
          },
          {
            "kind": "FIELD",
            "name": "DEATHS"
          },
          {
            "kind": "FIELD",
            "name": "HEALTH"
          },
          {
            "kind": "FIELD",
            "name": "PLAYER_KILLS"
          },
          {
            "kind": "FIELD",
            "name": "TOTAL_KILLS"
          }
        ],
        "comment": {
          "body": "Criteria names which trigger an objective to be modified by actions in-game",
          "plain": "Criteria names which trigger an objective to be modified by actions in-game"
        }
      },
      {
        "kind": "ENUM",
        "name": "org.bukkit.scoreboard.DisplaySlot",
        "children": [
          {
            "kind": "ENUM_CONSTANT",
            "name": "BELOW_NAME"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "DisplaySlot()"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "PLAYER_LIST"
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "SIDEBAR"
          },
          {
            "kind": "METHOD",
            "name": "valueOf(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "values()"
          }
        ],
        "comment": {
          "body": "Locations for displaying objectives to the player",
          "plain": "Locations for displaying objectives to the player"
        }
      },
      {
        "kind": "ENUM",
        "name": "org.bukkit.scoreboard.NameTagVisibility",
        "children": [
          {
            "kind": "ENUM_CONSTANT",
            "name": "ALWAYS",
            "comment": {
              "body": "Always show the player\u0027s nametag.",
              "plain": "Always show the player\u0027s nametag."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "HIDE_FOR_OTHER_TEAMS",
            "comment": {
              "body": "Show the player\u0027s nametag only to his own team members.",
              "plain": "Show the player\u0027s nametag only to his own team members."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "HIDE_FOR_OWN_TEAM",
            "comment": {
              "body": "Show the player\u0027s nametag only to members of other teams.",
              "plain": "Show the player\u0027s nametag only to members of other teams."
            }
          },
          {
            "kind": "ENUM_CONSTANT",
            "name": "NEVER",
            "comment": {
              "body": "Never show the player\u0027s nametag.",
              "plain": "Never show the player\u0027s nametag."
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "NameTagVisibility()"
          },
          {
            "kind": "METHOD",
            "name": "valueOf(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "values()"
          }
        ],
        "deprecated": {
          "deprecated": "true"
        },
        "comment": {
          "plain": "@deprecated replaced by {@link Team.OptionStatus}"
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.scoreboard.Objective",
        "children": [
          {
            "kind": "METHOD",
            "name": "getCriteria()",
            "comment": {
              "body": "Gets the criteria this objective tracks.",
              "tags": "Returns this objective\u0027s criteria.",
              "plain": "Gets the criteria this objective tracks.\n@return this objective\u0027s criteria\n@throws IllegalStateException if this objective has been unregistered"
            }
          },
          {
            "kind": "METHOD",
            "name": "getDisplayName()",
            "comment": {
              "body": "Gets the name displayed to players for this objective",
              "tags": "Returns this objective\u0027s display name.",
              "plain": "Gets the name displayed to players for this objective\n@return this objective\u0027s display name\n@throws IllegalStateException if this objective has been unregistered"
            }
          },
          {
            "kind": "METHOD",
            "name": "getDisplaySlot()",
            "comment": {
              "body": "Gets the display slot this objective is displayed at.",
              "tags": "Returns the display slot for this objective, or null if not displayed.",
              "plain": "Gets the display slot this objective is displayed at.\n@return the display slot for this objective, or null if not displayed\n@throws IllegalStateException if this objective has been unregistered"
            }
          },
          {
            "kind": "METHOD",
            "name": "getName()",
            "comment": {
              "body": "Gets the name of this Objective",
              "tags": "Returns this objective\u0027ss name.",
              "plain": "Gets the name of this Objective\n@return this objective\u0027ss name\n@throws IllegalStateException if this objective has been unregistered"
            }
          },
          {
            "kind": "METHOD",
            "name": "getScore(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "entry"
              }
            ],
            "comment": {
              "body": "Gets an entry\u0027s Score for an Objective on this Scoreboard.",
              "tags": "Returns Score tracking the Objective and entry specified.",
              "plain": "Gets an entry\u0027s Score for an Objective on this Scoreboard.\n@param entry Entry for the Score\n@return Score tracking the Objective and entry specified\n@throws IllegalArgumentException if entry is null\n@throws IllegalStateException if this objective has been unregistered"
            }
          },
          {
            "kind": "METHOD",
            "name": "getScore(org.bukkit.OfflinePlayer)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "player"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Gets a player\u0027s Score for an Objective on this Scoreboard",
              "tags": "Returns Score tracking the Objective and player specified.",
              "plain": "Gets a player\u0027s Score for an Objective on this Scoreboard\n@param player Player for the Score\n@return Score tracking the Objective and player specified\n@throws IllegalArgumentException if player is null\n@throws IllegalStateException if this objective has been unregistered\n@deprecated Scoreboards can contain entries that aren\u0027t players\n@see #getScore(String)"
            }
          },
          {
            "kind": "METHOD",
            "name": "getScoreboard()",
            "comment": {
              "body": "Gets the scoreboard to which this objective is attached.",
              "tags": "Returns Owning scoreboard, or null if it has been \u003ca href\u003d\"org/bukkit/scoreboard/Objective.html#unregister()\"\u003e\u003ccode\u003eunregistered\u003c/code\u003e\u003c/a\u003e.",
              "plain": "Gets the scoreboard to which this objective is attached.\n@return Owning scoreboard, or null if it has been {@link #unregister() unregistered}"
            }
          },
          {
            "kind": "METHOD",
            "name": "isModifiable()",
            "comment": {
              "body": "Gets if the objective\u0027s scores can be modified directly by a plugin.",
              "tags": "Returns true if scores are modifiable.",
              "plain": "Gets if the objective\u0027s scores can be modified directly by a plugin.\n@return true if scores are modifiable\n@throws IllegalStateException if this objective has been unregistered\n@see Criterias#HEALTH"
            }
          },
          {
            "kind": "METHOD",
            "name": "setDisplayName(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "displayName"
              }
            ],
            "comment": {
              "body": "Sets the name displayed to players for this objective.",
              "plain": "Sets the name displayed to players for this objective.\n@param displayName Display name to set\n@throws IllegalStateException if this objective has been unregistered\n@throws IllegalArgumentException if displayName is null\n@throws IllegalArgumentException if displayName is longer than 32\n     characters."
            }
          },
          {
            "kind": "METHOD",
            "name": "setDisplaySlot(org.bukkit.scoreboard.DisplaySlot)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "slot"
              }
            ],
            "comment": {
              "body": "Sets this objective to display on the specified slot for the\n scoreboard, removing it from any other display slot.",
              "plain": "Sets this objective to display on the specified slot for the\n scoreboard, removing it from any other display slot.\n@param slot display slot to change, or null to not display\n@throws IllegalStateException if this objective has been unregistered"
            }
          },
          {
            "kind": "METHOD",
            "name": "unregister()",
            "comment": {
              "body": "Unregisters this objective from the \u003ca href\u003d\"org/bukkit/scoreboard/Scoreboard.html\" title\u003d\"interface in org.bukkit.scoreboard\"\u003e\u003ccode\u003escoreboard.\u003c/code\u003e\u003c/a\u003e",
              "plain": "Unregisters this objective from the {@link Scoreboard scoreboard.}\n@throws IllegalStateException if this objective has been unregistered"
            }
          }
        ],
        "comment": {
          "body": "An objective on a scoreboard that can show scores specific to entries. This\n objective is only relevant to the display of the associated \u003ca href\u003d\"org/bukkit/scoreboard/Objective.html#getScoreboard()\"\u003e\u003ccode\u003escoreboard\u003c/code\u003e\u003c/a\u003e.",
          "plain": "An objective on a scoreboard that can show scores specific to entries. This\n objective is only relevant to the display of the associated {@link #getScoreboard() scoreboard}."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.scoreboard.Score",
        "children": [
          {
            "kind": "METHOD",
            "name": "getEntry()",
            "comment": {
              "body": "Gets the entry being tracked by this Score",
              "tags": "Returns this Score\u0027s tracked entry.",
              "plain": "Gets the entry being tracked by this Score\n@return this Score\u0027s tracked entry"
            }
          },
          {
            "kind": "METHOD",
            "name": "getObjective()",
            "comment": {
              "body": "Gets the Objective being tracked by this Score",
              "tags": "Returns this Score\u0027s tracked objective.",
              "plain": "Gets the Objective being tracked by this Score\n@return this Score\u0027s tracked objective"
            }
          },
          {
            "kind": "METHOD",
            "name": "getPlayer()",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Gets the OfflinePlayer being tracked by this Score",
              "tags": "Returns this Score\u0027s tracked player.",
              "plain": "Gets the OfflinePlayer being tracked by this Score\n@return this Score\u0027s tracked player\n@deprecated Scoreboards can contain entries that aren\u0027t players\n@see #getEntry()"
            }
          },
          {
            "kind": "METHOD",
            "name": "getScore()",
            "comment": {
              "body": "Gets the current score",
              "tags": "Returns the current score.",
              "plain": "Gets the current score\n@return the current score\n@throws IllegalStateException if the associated objective has been\n     unregistered"
            }
          },
          {
            "kind": "METHOD",
            "name": "getScoreboard()",
            "comment": {
              "body": "Gets the scoreboard for the associated objective.",
              "tags": "Returns the owning objective\u0027s scoreboard, or null if it has been\n     \u003ca href\u003d\"org/bukkit/scoreboard/Objective.html#unregister()\"\u003e\u003ccode\u003eunregistered\u003c/code\u003e\u003c/a\u003e.",
              "plain": "Gets the scoreboard for the associated objective.\n@return the owning objective\u0027s scoreboard, or null if it has been\n     {@link Objective#unregister() unregistered}"
            }
          },
          {
            "kind": "METHOD",
            "name": "isScoreSet()",
            "comment": {
              "body": "Shows if this score has been set at any point in time.",
              "tags": "Returns if this score has been set before.",
              "plain": "Shows if this score has been set at any point in time.\n@return if this score has been set before\n@throws IllegalStateException if the associated objective has been\n     unregistered"
            }
          },
          {
            "kind": "METHOD",
            "name": "setScore(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "score"
              }
            ],
            "comment": {
              "body": "Sets the current score.",
              "plain": "Sets the current score.\n@param score New score\n@throws IllegalStateException if the associated objective has been\n     unregistered"
            }
          }
        ],
        "comment": {
          "body": "A score entry for an \u003ca href\u003d\"org/bukkit/scoreboard/Score.html#getEntry()\"\u003e\u003ccode\u003eentry\u003c/code\u003e\u003c/a\u003e on an \u003ca href\u003d\"org/bukkit/scoreboard/Score.html#getObjective()\"\u003e\u003ccode\u003eobjective\u003c/code\u003e\u003c/a\u003e. Changing this will not affect any other\n objective or scoreboard.",
          "plain": "A score entry for an {@link #getEntry() entry} on an {@link #getObjective() objective}. Changing this will not affect any other\n objective or scoreboard."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.scoreboard.Scoreboard",
        "children": [
          {
            "kind": "METHOD",
            "name": "clearSlot(org.bukkit.scoreboard.DisplaySlot)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "slot"
              }
            ],
            "comment": {
              "body": "Clears any objective in the specified slot.",
              "plain": "Clears any objective in the specified slot.\n@param slot the slot to remove objectives\n@throws IllegalArgumentException if slot is null"
            }
          },
          {
            "kind": "METHOD",
            "name": "getEntries()",
            "comment": {
              "body": "Gets all entries tracked by this Scoreboard",
              "tags": "Returns immutable set of all tracked entries.",
              "plain": "Gets all entries tracked by this Scoreboard\n@return immutable set of all tracked entries"
            }
          },
          {
            "kind": "METHOD",
            "name": "getEntryTeam(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "entry"
              }
            ],
            "comment": {
              "body": "Gets a entries Team on this Scoreboard",
              "tags": "Returns the entries Team or null if the entry is not on a team.",
              "plain": "Gets a entries Team on this Scoreboard\n@param entry the entry to search for\n@return the entries Team or null if the entry is not on a team\n@throws IllegalArgumentException if entry is null"
            }
          },
          {
            "kind": "METHOD",
            "name": "getObjective(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ],
            "comment": {
              "body": "Gets an Objective on this Scoreboard by name",
              "tags": "Returns the Objective or null if it does not exist.",
              "plain": "Gets an Objective on this Scoreboard by name\n@param name Name of the Objective\n@return the Objective or null if it does not exist\n@throws IllegalArgumentException if name is null"
            }
          },
          {
            "kind": "METHOD",
            "name": "getObjective(org.bukkit.scoreboard.DisplaySlot)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "slot"
              }
            ],
            "comment": {
              "body": "Gets the Objective currently displayed in a DisplaySlot on this\n Scoreboard",
              "tags": "Returns the Objective currently displayed or null if nothing is\n     displayed in that DisplaySlot.",
              "plain": "Gets the Objective currently displayed in a DisplaySlot on this\n Scoreboard\n@param slot The DisplaySlot\n@return the Objective currently displayed or null if nothing is\n     displayed in that DisplaySlot\n@throws IllegalArgumentException if slot is null"
            }
          },
          {
            "kind": "METHOD",
            "name": "getObjectives()",
            "comment": {
              "body": "Gets all Objectives on this Scoreboard",
              "tags": "Returns An immutable set of all Objectives on this Scoreboard.",
              "plain": "Gets all Objectives on this Scoreboard\n@return An immutable set of all Objectives on this Scoreboard"
            }
          },
          {
            "kind": "METHOD",
            "name": "getObjectivesByCriteria(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "criteria"
              }
            ],
            "comment": {
              "body": "Gets all Objectives of a Criteria on the Scoreboard",
              "tags": "Returns an immutable set of Objectives using the specified Criteria.",
              "plain": "Gets all Objectives of a Criteria on the Scoreboard\n@param criteria Criteria to search by\n@return an immutable set of Objectives using the specified Criteria"
            }
          },
          {
            "kind": "METHOD",
            "name": "getPlayerTeam(org.bukkit.OfflinePlayer)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "player"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Gets a player\u0027s Team on this Scoreboard",
              "tags": "Returns the player\u0027s Team or null if the player is not on a team.",
              "plain": "Gets a player\u0027s Team on this Scoreboard\n@param player the player to search for\n@return the player\u0027s Team or null if the player is not on a team\n@throws IllegalArgumentException if player is null\n@deprecated Scoreboards can contain entries that aren\u0027t players\n@see #getEntryTeam(String)"
            }
          },
          {
            "kind": "METHOD",
            "name": "getPlayers()",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Gets all players tracked by this Scoreboard",
              "tags": "Returns immutable set of all tracked players.",
              "plain": "Gets all players tracked by this Scoreboard\n@return immutable set of all tracked players\n@deprecated Scoreboards can contain entries that aren\u0027t players\n@see #getEntries()"
            }
          },
          {
            "kind": "METHOD",
            "name": "getScores(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "entry"
              }
            ],
            "comment": {
              "body": "Gets all scores for an entry on this Scoreboard",
              "tags": "Returns immutable set of all scores tracked for the entry.",
              "plain": "Gets all scores for an entry on this Scoreboard\n@param entry the entry whose scores are being retrieved\n@return immutable set of all scores tracked for the entry\n@throws IllegalArgumentException if entry is null"
            }
          },
          {
            "kind": "METHOD",
            "name": "getScores(org.bukkit.OfflinePlayer)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "player"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Gets all scores for a player on this Scoreboard",
              "tags": "Returns immutable set of all scores tracked for the player.",
              "plain": "Gets all scores for a player on this Scoreboard\n@param player the player whose scores are being retrieved\n@return immutable set of all scores tracked for the player\n@throws IllegalArgumentException if player is null\n@deprecated Scoreboards can contain entries that aren\u0027t players\n@see #getScores(String)"
            }
          },
          {
            "kind": "METHOD",
            "name": "getTeam(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "teamName"
              }
            ],
            "comment": {
              "body": "Gets a Team by name on this Scoreboard",
              "tags": "Returns the matching Team or null if no matches.",
              "plain": "Gets a Team by name on this Scoreboard\n@param teamName Team name\n@return the matching Team or null if no matches\n@throws IllegalArgumentException if teamName is null"
            }
          },
          {
            "kind": "METHOD",
            "name": "getTeams()",
            "comment": {
              "body": "Gets all teams on this Scoreboard",
              "tags": "Returns an immutable set of Teams.",
              "plain": "Gets all teams on this Scoreboard\n@return an immutable set of Teams"
            }
          },
          {
            "kind": "METHOD",
            "name": "registerNewObjective(java.lang.String,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "criteria"
              },
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ],
            "comment": {
              "body": "Registers an Objective on this Scoreboard",
              "tags": "Returns The registered Objective.",
              "plain": "Registers an Objective on this Scoreboard\n@param name Name of the Objective\n@param criteria Criteria for the Objective\n@return The registered Objective\n@throws IllegalArgumentException if name is null\n@throws IllegalArgumentException if criteria is null\n@throws IllegalArgumentException if an objective by that name already\n     exists"
            }
          },
          {
            "kind": "METHOD",
            "name": "registerNewTeam(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ],
            "comment": {
              "body": "Registers a Team on this Scoreboard",
              "tags": "Returns registered Team.",
              "plain": "Registers a Team on this Scoreboard\n@param name Team name\n@return registered Team\n@throws IllegalArgumentException if name is null\n@throws IllegalArgumentException if team by that name already exists"
            }
          },
          {
            "kind": "METHOD",
            "name": "resetScores(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "entry"
              }
            ],
            "comment": {
              "body": "Removes all scores for an entry on this Scoreboard",
              "plain": "Removes all scores for an entry on this Scoreboard\n@param entry the entry to drop all current scores for\n@throws IllegalArgumentException if entry is null"
            }
          },
          {
            "kind": "METHOD",
            "name": "resetScores(org.bukkit.OfflinePlayer)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "player"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Removes all scores for a player on this Scoreboard",
              "plain": "Removes all scores for a player on this Scoreboard\n@param player the player to drop all current scores for\n@throws IllegalArgumentException if player is null\n@deprecated Scoreboards can contain entries that aren\u0027t players\n@see #resetScores(String)"
            }
          }
        ],
        "comment": {
          "body": "A scoreboard",
          "plain": "A scoreboard"
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.scoreboard.ScoreboardManager",
        "children": [
          {
            "kind": "METHOD",
            "name": "getMainScoreboard()",
            "comment": {
              "body": "Gets the primary Scoreboard controlled by the server.\n \u003cp\u003e\n This Scoreboard is saved by the server, is affected by the /scoreboard\n command, and is the scoreboard shown by default to players.",
              "tags": "Returns the default sever scoreboard.",
              "plain": "Gets the primary Scoreboard controlled by the server.\n \u003cp\u003e\n This Scoreboard is saved by the server, is affected by the /scoreboard\n command, and is the scoreboard shown by default to players.\n@return the default sever scoreboard"
            }
          },
          {
            "kind": "METHOD",
            "name": "getNewScoreboard()",
            "comment": {
              "body": "Gets a new Scoreboard to be tracked by the server. This scoreboard will\n be tracked as long as a reference is kept, either by a player or by a\n plugin.",
              "tags": "Returns the registered Scoreboard.",
              "plain": "Gets a new Scoreboard to be tracked by the server. This scoreboard will\n be tracked as long as a reference is kept, either by a player or by a\n plugin.\n@return the registered Scoreboard\n@see WeakReference"
            }
          }
        ],
        "comment": {
          "body": "Manager of Scoreboards",
          "plain": "Manager of Scoreboards"
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.scoreboard.Team",
        "children": [
          {
            "kind": "METHOD",
            "name": "addEntry(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "entry"
              }
            ],
            "comment": {
              "body": "This puts the specified entry onto this team for the scoreboard.\n \u003cp\u003e\n This will remove the entry from any other team on the scoreboard.",
              "plain": "This puts the specified entry onto this team for the scoreboard.\n \u003cp\u003e\n This will remove the entry from any other team on the scoreboard.\n@param entry the entry to add\n@throws IllegalArgumentException if entry is null\n@throws IllegalStateException if this team has been unregistered"
            }
          },
          {
            "kind": "METHOD",
            "name": "addPlayer(org.bukkit.OfflinePlayer)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "player"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "This puts the specified player onto this team for the scoreboard.\n \u003cp\u003e\n This will remove the player from any other team on the scoreboard.",
              "plain": "This puts the specified player onto this team for the scoreboard.\n \u003cp\u003e\n This will remove the player from any other team on the scoreboard.\n@param player the player to add\n@throws IllegalArgumentException if player is null\n@throws IllegalStateException if this team has been unregistered\n@deprecated Teams can contain entries that aren\u0027t players\n@see #addEntry(String)"
            }
          },
          {
            "kind": "METHOD",
            "name": "allowFriendlyFire()",
            "comment": {
              "body": "Gets the team friendly fire state",
              "tags": "Returns true if friendly fire is enabled.",
              "plain": "Gets the team friendly fire state\n@return true if friendly fire is enabled\n@throws IllegalStateException if this team has been unregistered"
            }
          },
          {
            "kind": "METHOD",
            "name": "canSeeFriendlyInvisibles()",
            "comment": {
              "body": "Gets the team\u0027s ability to see \u003ca href\u003d\"org/bukkit/potion/PotionEffectType.html#INVISIBILITY\"\u003e\u003ccode\u003einvisible\u003c/code\u003e\u003c/a\u003e teammates.",
              "tags": "Returns true if team members can see invisible members.",
              "plain": "Gets the team\u0027s ability to see {@link PotionEffectType#INVISIBILITY invisible} teammates.\n@return true if team members can see invisible members\n@throws IllegalStateException if this team has been unregistered"
            }
          },
          {
            "kind": "METHOD",
            "name": "getColor()",
            "comment": {
              "body": "Gets the color of the team.\n \u003cbr\u003e\n This only sets the team outline, other occurrences of colors such as in\n names are handled by prefixes / suffixes.",
              "tags": "Returns team color, defaults to \u003ca href\u003d\"org/bukkit/ChatColor.html#RESET\"\u003e\u003ccode\u003eChatColor.RESET\u003c/code\u003e\u003c/a\u003e.",
              "plain": "Gets the color of the team.\n \u003cbr\u003e\n This only sets the team outline, other occurrences of colors such as in\n names are handled by prefixes / suffixes.\n@return team color, defaults to {@link ChatColor#RESET}\n@throws IllegalStateException if this team has been unregistered"
            }
          },
          {
            "kind": "METHOD",
            "name": "getDisplayName()",
            "comment": {
              "body": "Gets the name displayed to entries for this team",
              "tags": "Returns Team display name.",
              "plain": "Gets the name displayed to entries for this team\n@return Team display name\n@throws IllegalStateException if this team has been unregistered"
            }
          },
          {
            "kind": "METHOD",
            "name": "getEntries()",
            "comment": {
              "body": "Gets the Set of entries on the team",
              "tags": "Returns entries on the team.",
              "plain": "Gets the Set of entries on the team\n@return entries on the team\n@throws IllegalStateException if this entries has been unregistered\\"
            }
          },
          {
            "kind": "METHOD",
            "name": "getName()",
            "comment": {
              "body": "Gets the name of this Team",
              "tags": "Returns Objective name.",
              "plain": "Gets the name of this Team\n@return Objective name\n@throws IllegalStateException if this team has been unregistered"
            }
          },
          {
            "kind": "METHOD",
            "name": "getNameTagVisibility()",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Gets the team\u0027s ability to see name tags",
              "tags": "Returns the current name tag visibility for the team.",
              "plain": "Gets the team\u0027s ability to see name tags\n@return the current name tag visibility for the team\n@throws IllegalArgumentException if this team has been unregistered\n@deprecated see {@link #getOption(org.bukkit.scoreboard.Team.Option)}"
            }
          },
          {
            "kind": "METHOD",
            "name": "getOption(org.bukkit.scoreboard.Team.Option)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "option"
              }
            ],
            "comment": {
              "body": "Get an option for this team",
              "tags": "Returns the option status.",
              "plain": "Get an option for this team\n@param option the option to get\n@return the option status\n@throws IllegalStateException if this team has been unregistered"
            }
          },
          {
            "kind": "METHOD",
            "name": "getPlayers()",
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Gets the Set of players on the team",
              "tags": "Returns players on the team.",
              "plain": "Gets the Set of players on the team\n@return players on the team\n@throws IllegalStateException if this team has been unregistered\\\n@deprecated Teams can contain entries that aren\u0027t players\n@see #getEntries()"
            }
          },
          {
            "kind": "METHOD",
            "name": "getPrefix()",
            "comment": {
              "body": "Gets the prefix prepended to the display of entries on this team.",
              "tags": "Returns Team prefix.",
              "plain": "Gets the prefix prepended to the display of entries on this team.\n@return Team prefix\n@throws IllegalStateException if this team has been unregistered"
            }
          },
          {
            "kind": "METHOD",
            "name": "getScoreboard()",
            "comment": {
              "body": "Gets the Scoreboard to which this team is attached",
              "tags": "Returns Owning scoreboard, or null if this team has been \u003ca href\u003d\"org/bukkit/scoreboard/Team.html#unregister()\"\u003e\u003ccode\u003eunregistered\u003c/code\u003e\u003c/a\u003e.",
              "plain": "Gets the Scoreboard to which this team is attached\n@return Owning scoreboard, or null if this team has been {@link #unregister() unregistered}"
            }
          },
          {
            "kind": "METHOD",
            "name": "getSize()",
            "comment": {
              "body": "Gets the size of the team",
              "tags": "Returns number of entries on the team.",
              "plain": "Gets the size of the team\n@return number of entries on the team\n@throws IllegalStateException if this team has been unregistered"
            }
          },
          {
            "kind": "METHOD",
            "name": "getSuffix()",
            "comment": {
              "body": "Gets the suffix appended to the display of entries on this team.",
              "tags": "Returns the team\u0027s current suffix.",
              "plain": "Gets the suffix appended to the display of entries on this team.\n@return the team\u0027s current suffix\n@throws IllegalStateException if this team has been unregistered"
            }
          },
          {
            "kind": "METHOD",
            "name": "hasEntry(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "entry"
              }
            ],
            "comment": {
              "body": "Checks to see if the specified entry is a member of this team.",
              "tags": "Returns true if the entry is a member of this team.",
              "plain": "Checks to see if the specified entry is a member of this team.\n@param entry the entry to search for\n@return true if the entry is a member of this team\n@throws IllegalArgumentException if entry is null\n@throws IllegalStateException if this team has been unregistered"
            }
          },
          {
            "kind": "METHOD",
            "name": "hasPlayer(org.bukkit.OfflinePlayer)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "player"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Checks to see if the specified player is a member of this team.",
              "tags": "Returns true if the player is a member of this team.",
              "plain": "Checks to see if the specified player is a member of this team.\n@param player the player to search for\n@return true if the player is a member of this team\n@throws IllegalArgumentException if player is null\n@throws IllegalStateException if this team has been unregistered\n@deprecated Teams can contain entries that aren\u0027t players\n@see #hasEntry(String)"
            }
          },
          {
            "kind": "ENUM",
            "name": "org.bukkit.scoreboard.Team.Option",
            "children": [
              {
                "kind": "ENUM_CONSTANT",
                "name": "COLLISION_RULE",
                "comment": {
                  "body": "How players of this team collide with others.",
                  "plain": "How players of this team collide with others."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "DEATH_MESSAGE_VISIBILITY",
                "comment": {
                  "body": "How to display the death messages for players on this team.",
                  "plain": "How to display the death messages for players on this team."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "NAME_TAG_VISIBILITY",
                "comment": {
                  "body": "How to display the name tags of players on this team.",
                  "plain": "How to display the name tags of players on this team."
                }
              },
              {
                "kind": "CONSTRUCTOR",
                "name": "Option()"
              },
              {
                "kind": "METHOD",
                "name": "valueOf(java.lang.String)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "name"
                  }
                ]
              },
              {
                "kind": "METHOD",
                "name": "values()"
              }
            ],
            "comment": {
              "body": "Represents an option which may be applied to this team.",
              "plain": "Represents an option which may be applied to this team."
            }
          },
          {
            "kind": "ENUM",
            "name": "org.bukkit.scoreboard.Team.OptionStatus",
            "children": [
              {
                "kind": "ENUM_CONSTANT",
                "name": "ALWAYS",
                "comment": {
                  "body": "Apply this option to everyone.",
                  "plain": "Apply this option to everyone."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "FOR_OTHER_TEAMS",
                "comment": {
                  "body": "Apply this option only for opposing teams.",
                  "plain": "Apply this option only for opposing teams."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "FOR_OWN_TEAM",
                "comment": {
                  "body": "Apply this option for only team members.",
                  "plain": "Apply this option for only team members."
                }
              },
              {
                "kind": "ENUM_CONSTANT",
                "name": "NEVER",
                "comment": {
                  "body": "Never apply this option.",
                  "plain": "Never apply this option."
                }
              },
              {
                "kind": "CONSTRUCTOR",
                "name": "OptionStatus()"
              },
              {
                "kind": "METHOD",
                "name": "valueOf(java.lang.String)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "name"
                  }
                ]
              },
              {
                "kind": "METHOD",
                "name": "values()"
              }
            ],
            "comment": {
              "body": "How an option may be applied to members of this team.",
              "plain": "How an option may be applied to members of this team."
            }
          },
          {
            "kind": "METHOD",
            "name": "removeEntry(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "entry"
              }
            ],
            "comment": {
              "body": "Removes the entry from this team.",
              "tags": "Returns if the entry was a part of this team.",
              "plain": "Removes the entry from this team.\n@param entry the entry to remove\n@throws IllegalArgumentException if entry is null\n@throws IllegalStateException if this team has been unregistered\n@return if the entry was a part of this team"
            }
          },
          {
            "kind": "METHOD",
            "name": "removePlayer(org.bukkit.OfflinePlayer)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "player"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Removes the player from this team.",
              "tags": "Returns if the player was on this team.",
              "plain": "Removes the player from this team.\n@param player the player to remove\n@return if the player was on this team\n@throws IllegalArgumentException if player is null\n@throws IllegalStateException if this team has been unregistered\n@deprecated Teams can contain entries that aren\u0027t players\n@see #removeEntry(String)"
            }
          },
          {
            "kind": "METHOD",
            "name": "setAllowFriendlyFire(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "enabled"
              }
            ],
            "comment": {
              "body": "Sets the team friendly fire state",
              "plain": "Sets the team friendly fire state\n@param enabled true if friendly fire is to be allowed\n@throws IllegalStateException if this team has been unregistered"
            }
          },
          {
            "kind": "METHOD",
            "name": "setCanSeeFriendlyInvisibles(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "enabled"
              }
            ],
            "comment": {
              "body": "Sets the team\u0027s ability to see \u003ca href\u003d\"org/bukkit/potion/PotionEffectType.html#INVISIBILITY\"\u003e\u003ccode\u003einvisible\u003c/code\u003e\u003c/a\u003e teammates.",
              "plain": "Sets the team\u0027s ability to see {@link PotionEffectType#INVISIBILITY invisible} teammates.\n@param enabled true if invisible teammates are to be visible\n@throws IllegalStateException if this team has been unregistered"
            }
          },
          {
            "kind": "METHOD",
            "name": "setColor(org.bukkit.ChatColor)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "color"
              }
            ],
            "comment": {
              "body": "Sets the color of the team.\n \u003cbr\u003e\n This only sets the team outline, other occurrences of colors such as in\n names are handled by prefixes / suffixes.",
              "plain": "Sets the color of the team.\n \u003cbr\u003e\n This only sets the team outline, other occurrences of colors such as in\n names are handled by prefixes / suffixes.\n@param color new color, must be non-null. Use {@link ChatColor#RESET} for\n no color"
            }
          },
          {
            "kind": "METHOD",
            "name": "setDisplayName(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "displayName"
              }
            ],
            "comment": {
              "body": "Sets the name displayed to entries for this team",
              "plain": "Sets the name displayed to entries for this team\n@param displayName New display name\n@throws IllegalArgumentException if displayName is longer than 32\n     characters.\n@throws IllegalStateException if this team has been unregistered"
            }
          },
          {
            "kind": "METHOD",
            "name": "setNameTagVisibility(org.bukkit.scoreboard.NameTagVisibility)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "visibility"
              }
            ],
            "deprecated": {
              "deprecated": "true"
            },
            "comment": {
              "body": "Set\u0027s the team\u0027s ability to see name tags",
              "plain": "Set\u0027s the team\u0027s ability to see name tags\n@param visibility The nameTagVisibilty to set\n@throws IllegalArgumentException if this team has been unregistered\n@deprecated see\n {@link #setOption(org.bukkit.scoreboard.Team.Option, org.bukkit.scoreboard.Team.OptionStatus)}"
            }
          },
          {
            "kind": "METHOD",
            "name": "setOption(org.bukkit.scoreboard.Team.Option,org.bukkit.scoreboard.Team.OptionStatus)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "option"
              },
              {
                "kind": "PARAMETER",
                "name": "status"
              }
            ],
            "comment": {
              "body": "Set an option for this team",
              "plain": "Set an option for this team\n@param option the option to set\n@param status the new option status\n@throws IllegalStateException if this team has been unregistered"
            }
          },
          {
            "kind": "METHOD",
            "name": "setPrefix(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "prefix"
              }
            ],
            "comment": {
              "body": "Sets the prefix prepended to the display of entries on this team.",
              "plain": "Sets the prefix prepended to the display of entries on this team.\n@param prefix New prefix\n@throws IllegalArgumentException if prefix is null\n@throws IllegalArgumentException if prefix is longer than 16\n     characters\n@throws IllegalStateException if this team has been unregistered"
            }
          },
          {
            "kind": "METHOD",
            "name": "setSuffix(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "suffix"
              }
            ],
            "comment": {
              "body": "Sets the suffix appended to the display of entries on this team.",
              "plain": "Sets the suffix appended to the display of entries on this team.\n@param suffix the new suffix for this team.\n@throws IllegalArgumentException if suffix is null\n@throws IllegalArgumentException if suffix is longer than 16\n     characters\n@throws IllegalStateException if this team has been unregistered"
            }
          },
          {
            "kind": "METHOD",
            "name": "unregister()",
            "comment": {
              "body": "Unregisters this team from the Scoreboard",
              "plain": "Unregisters this team from the Scoreboard\n@throws IllegalStateException if this team has been unregistered"
            }
          }
        ],
        "comment": {
          "body": "A team on a scoreboard that has a common display theme and other\n properties. This team is only relevant to the display of the associated\n \u003ca href\u003d\"org/bukkit/scoreboard/Team.html#getScoreboard()\"\u003e\u003ccode\u003escoreboard\u003c/code\u003e\u003c/a\u003e.",
          "plain": "A team on a scoreboard that has a common display theme and other\n properties. This team is only relevant to the display of the associated\n {@link #getScoreboard() scoreboard}."
        }
      }
    ]
  },
  {
    "kind": "PACKAGE",
    "name": "org.bukkit.util",
    "children": [
      {
        "kind": "CLASS",
        "name": "org.bukkit.util.BlockIterator",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "BlockIterator(org.bukkit.Location)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "loc"
              }
            ],
            "comment": {
              "body": "Constructs the BlockIterator.",
              "plain": "Constructs the BlockIterator.\n@param loc The location for the start of the ray trace"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "BlockIterator(org.bukkit.Location,double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "loc"
              },
              {
                "kind": "PARAMETER",
                "name": "yOffset"
              }
            ],
            "comment": {
              "body": "Constructs the BlockIterator.",
              "plain": "Constructs the BlockIterator.\n@param loc The location for the start of the ray trace\n@param yOffset The trace begins vertically offset from the start vector\n     by this value"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "BlockIterator(org.bukkit.Location,double,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "loc"
              },
              {
                "kind": "PARAMETER",
                "name": "maxDistance"
              },
              {
                "kind": "PARAMETER",
                "name": "yOffset"
              }
            ],
            "comment": {
              "body": "Constructs the BlockIterator",
              "plain": "Constructs the BlockIterator\n@param loc The location for the start of the ray trace\n@param yOffset The trace begins vertically offset from the start vector\n     by this value\n@param maxDistance This is the maximum distance in blocks for the\n     trace. Setting this value above 140 may lead to problems with\n     unloaded chunks. A value of 0 indicates no limit"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "BlockIterator(org.bukkit.World,org.bukkit.util.Vector,org.bukkit.util.Vector,double,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "direction"
              },
              {
                "kind": "PARAMETER",
                "name": "maxDistance"
              },
              {
                "kind": "PARAMETER",
                "name": "start"
              },
              {
                "kind": "PARAMETER",
                "name": "world"
              },
              {
                "kind": "PARAMETER",
                "name": "yOffset"
              }
            ],
            "comment": {
              "body": "Constructs the BlockIterator",
              "plain": "Constructs the BlockIterator\n@param world The world to use for tracing\n@param start A Vector giving the initial location for the trace\n@param direction A Vector pointing in the direction for the trace\n@param yOffset The trace begins vertically offset from the start vector\n     by this value\n@param maxDistance This is the maximum distance in blocks for the\n     trace. Setting this value above 140 may lead to problems with\n     unloaded chunks. A value of 0 indicates no limit"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "BlockIterator(org.bukkit.entity.LivingEntity)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "entity"
              }
            ],
            "comment": {
              "body": "Constructs the BlockIterator.",
              "plain": "Constructs the BlockIterator.\n@param entity Information from the entity is used to set up the trace"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "BlockIterator(org.bukkit.entity.LivingEntity,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "entity"
              },
              {
                "kind": "PARAMETER",
                "name": "maxDistance"
              }
            ],
            "comment": {
              "body": "Constructs the BlockIterator.",
              "plain": "Constructs the BlockIterator.\n@param entity Information from the entity is used to set up the trace\n@param maxDistance This is the maximum distance in blocks for the\n     trace. Setting this value above 140 may lead to problems with\n     unloaded chunks. A value of 0 indicates no limit"
            }
          },
          {
            "kind": "METHOD",
            "name": "blockEquals(org.bukkit.block.Block,org.bukkit.block.Block)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "a"
              },
              {
                "kind": "PARAMETER",
                "name": "b"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "blockQueue"
          },
          {
            "kind": "FIELD",
            "name": "currentBlock"
          },
          {
            "kind": "FIELD",
            "name": "currentDistance"
          },
          {
            "kind": "FIELD",
            "name": "end"
          },
          {
            "kind": "METHOD",
            "name": "getPosition(double,double,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "blockPosition"
              },
              {
                "kind": "PARAMETER",
                "name": "direction"
              },
              {
                "kind": "PARAMETER",
                "name": "position"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getXFace(org.bukkit.util.Vector)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "direction"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getXLength(org.bukkit.util.Vector)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "direction"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getXPosition(org.bukkit.util.Vector,org.bukkit.util.Vector,org.bukkit.block.Block)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "block"
              },
              {
                "kind": "PARAMETER",
                "name": "direction"
              },
              {
                "kind": "PARAMETER",
                "name": "position"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getYFace(org.bukkit.util.Vector)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "direction"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getYLength(org.bukkit.util.Vector)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "direction"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getYPosition(org.bukkit.util.Vector,org.bukkit.util.Vector,org.bukkit.block.Block)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "block"
              },
              {
                "kind": "PARAMETER",
                "name": "direction"
              },
              {
                "kind": "PARAMETER",
                "name": "position"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getZFace(org.bukkit.util.Vector)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "direction"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getZLength(org.bukkit.util.Vector)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "direction"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getZPosition(org.bukkit.util.Vector,org.bukkit.util.Vector,org.bukkit.block.Block)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "block"
              },
              {
                "kind": "PARAMETER",
                "name": "direction"
              },
              {
                "kind": "PARAMETER",
                "name": "position"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "gridSize"
          },
          {
            "kind": "METHOD",
            "name": "hasNext()",
            "comment": {
              "body": "Returns true if the iteration has more elements",
              "plain": "Returns true if the iteration has more elements"
            }
          },
          {
            "kind": "FIELD",
            "name": "mainFace"
          },
          {
            "kind": "FIELD",
            "name": "maxDistance"
          },
          {
            "kind": "FIELD",
            "name": "maxDistanceInt"
          },
          {
            "kind": "METHOD",
            "name": "next()",
            "comment": {
              "body": "Returns the next Block in the trace",
              "tags": "Returns the next Block in the trace.",
              "plain": "Returns the next Block in the trace\n@return the next Block in the trace"
            }
          },
          {
            "kind": "METHOD",
            "name": "remove()"
          },
          {
            "kind": "METHOD",
            "name": "scan()"
          },
          {
            "kind": "FIELD",
            "name": "secondError"
          },
          {
            "kind": "FIELD",
            "name": "secondFace"
          },
          {
            "kind": "FIELD",
            "name": "secondStep"
          },
          {
            "kind": "FIELD",
            "name": "thirdError"
          },
          {
            "kind": "FIELD",
            "name": "thirdFace"
          },
          {
            "kind": "FIELD",
            "name": "thirdStep"
          },
          {
            "kind": "FIELD",
            "name": "world"
          }
        ],
        "comment": {
          "body": "This class performs ray tracing and iterates along blocks on a line",
          "plain": "This class performs ray tracing and iterates along blocks on a line"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.util.BlockVector",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "BlockVector()",
            "comment": {
              "body": "Construct the vector with all components as 0.",
              "plain": "Construct the vector with all components as 0."
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "BlockVector(double,double,double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "y"
              },
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ],
            "comment": {
              "body": "Construct the vector with provided double components.",
              "plain": "Construct the vector with provided double components.\n@param x X component\n@param y Y component\n@param z Z component"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "BlockVector(float,float,float)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "y"
              },
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ],
            "comment": {
              "body": "Construct the vector with provided float components.",
              "plain": "Construct the vector with provided float components.\n@param x X component\n@param y Y component\n@param z Z component"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "BlockVector(int,int,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "y"
              },
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ],
            "comment": {
              "body": "Construct the vector with provided integer components.",
              "plain": "Construct the vector with provided integer components.\n@param x X component\n@param y Y component\n@param z Z component"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "BlockVector(org.bukkit.util.Vector)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "vec"
              }
            ],
            "comment": {
              "body": "Construct the vector with another vector.",
              "plain": "Construct the vector with another vector.\n@param vec The other vector."
            }
          },
          {
            "kind": "METHOD",
            "name": "clone()",
            "comment": {
              "body": "Get a new block vector.",
              "tags": "Returns vector.",
              "plain": "Get a new block vector.\n@return vector"
            }
          },
          {
            "kind": "METHOD",
            "name": "deserialize(java.util.Map\u003cjava.lang.String,java.lang.Object\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "args"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "equals(java.lang.Object)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "obj"
              }
            ],
            "comment": {
              "body": "Checks if another object is equivalent.",
              "tags": "Returns whether the other object is equivalent.",
              "plain": "Checks if another object is equivalent.\n@param obj The other object\n@return whether the other object is equivalent"
            }
          },
          {
            "kind": "METHOD",
            "name": "hashCode()",
            "comment": {
              "body": "Returns a hash code for this vector.",
              "tags": "Returns hash code.",
              "plain": "Returns a hash code for this vector.\n@return hash code"
            }
          }
        ],
        "comment": {
          "body": "A vector with a hash function that floors the X, Y, Z components, a la\n BlockVector in WorldEdit. BlockVectors can be used in hash sets and\n hash maps. Be aware that BlockVectors are mutable, but it is important\n that BlockVectors are never changed once put into a hash set or hash map.",
          "plain": "A vector with a hash function that floors the X, Y, Z components, a la\n BlockVector in WorldEdit. BlockVectors can be used in hash sets and\n hash maps. Be aware that BlockVectors are mutable, but it is important\n that BlockVectors are never changed once put into a hash set or hash map."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.util.CachedServerIcon",
        "children": [
          {
            "kind": "METHOD",
            "name": "getData()"
          },
          {
            "kind": "METHOD",
            "name": "isEmpty()"
          }
        ],
        "comment": {
          "body": "This is a cached version of a server-icon. It\u0027s internal representation\n and implementation is undefined.",
          "plain": "This is a cached version of a server-icon. It\u0027s internal representation\n and implementation is undefined.\n@see Server#getServerIcon()\n@see Server#loadServerIcon(java.awt.image.BufferedImage)\n@see Server#loadServerIcon(java.io.File)\n@see ServerListPingEvent#setServerIcon(CachedServerIcon)"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.util.ChatPaginator",
        "children": [
          {
            "kind": "FIELD",
            "name": "AVERAGE_CHAT_PAGE_WIDTH"
          },
          {
            "kind": "FIELD",
            "name": "CLOSED_CHAT_PAGE_HEIGHT"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "ChatPaginator()"
          },
          {
            "kind": "FIELD",
            "name": "GUARANTEED_NO_WRAP_CHAT_PAGE_WIDTH"
          },
          {
            "kind": "FIELD",
            "name": "OPEN_CHAT_PAGE_HEIGHT"
          },
          {
            "kind": "FIELD",
            "name": "UNBOUNDED_PAGE_HEIGHT"
          },
          {
            "kind": "FIELD",
            "name": "UNBOUNDED_PAGE_WIDTH"
          },
          {
            "kind": "CLASS",
            "name": "org.bukkit.util.ChatPaginator.ChatPage",
            "children": [
              {
                "kind": "CONSTRUCTOR",
                "name": "ChatPage(java.lang.String[],int,int)",
                "children": [
                  {
                    "kind": "PARAMETER",
                    "name": "lines"
                  },
                  {
                    "kind": "PARAMETER",
                    "name": "pageNumber"
                  },
                  {
                    "kind": "PARAMETER",
                    "name": "totalPages"
                  }
                ]
              },
              {
                "kind": "METHOD",
                "name": "getLines()"
              },
              {
                "kind": "METHOD",
                "name": "getPageNumber()"
              },
              {
                "kind": "METHOD",
                "name": "getTotalPages()"
              },
              {
                "kind": "FIELD",
                "name": "lines"
              },
              {
                "kind": "FIELD",
                "name": "pageNumber"
              },
              {
                "kind": "FIELD",
                "name": "totalPages"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "paginate(java.lang.String,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "pageNumber"
              },
              {
                "kind": "PARAMETER",
                "name": "unpaginatedString"
              }
            ],
            "comment": {
              "body": "Breaks a raw string up into pages using the default width and height.",
              "tags": "Returns A single chat page..",
              "plain": "Breaks a raw string up into pages using the default width and height.\n@param unpaginatedString The raw string to break.\n@param pageNumber The page number to fetch.\n@return A single chat page."
            }
          },
          {
            "kind": "METHOD",
            "name": "paginate(java.lang.String,int,int,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "lineLength"
              },
              {
                "kind": "PARAMETER",
                "name": "pageHeight"
              },
              {
                "kind": "PARAMETER",
                "name": "pageNumber"
              },
              {
                "kind": "PARAMETER",
                "name": "unpaginatedString"
              }
            ],
            "comment": {
              "body": "Breaks a raw string up into pages using a provided width and height.",
              "tags": "Returns A single chat page..",
              "plain": "Breaks a raw string up into pages using a provided width and height.\n@param unpaginatedString The raw string to break.\n@param pageNumber The page number to fetch.\n@param lineLength The desired width of a chat line.\n@param pageHeight The desired number of lines in a page.\n@return A single chat page."
            }
          },
          {
            "kind": "METHOD",
            "name": "wordWrap(java.lang.String,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "lineLength"
              },
              {
                "kind": "PARAMETER",
                "name": "rawString"
              }
            ],
            "comment": {
              "body": "Breaks a raw string up into a series of lines. Words are wrapped using\n spaces as decimeters and the newline character is respected.",
              "tags": "Returns An array of word-wrapped lines..",
              "plain": "Breaks a raw string up into a series of lines. Words are wrapped using\n spaces as decimeters and the newline character is respected.\n@param rawString The raw string to break.\n@param lineLength The length of a line of text.\n@return An array of word-wrapped lines."
            }
          }
        ],
        "comment": {
          "body": "The ChatPaginator takes a raw string of arbitrary length and breaks it down\n into an array of strings appropriate for displaying on the Minecraft player\n console.",
          "plain": "The ChatPaginator takes a raw string of arbitrary length and breaks it down\n into an array of strings appropriate for displaying on the Minecraft player\n console."
        }
      },
      {
        "kind": "INTERFACE",
        "name": "org.bukkit.util.Consumer",
        "children": [
          {
            "kind": "TYPE_PARAMETER",
            "name": "T"
          },
          {
            "kind": "METHOD",
            "name": "accept(T)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "t"
              }
            ],
            "comment": {
              "body": "Performs this operation on the given argument.",
              "plain": "Performs this operation on the given argument.\n@param t the input argument"
            }
          }
        ],
        "comment": {
          "body": "Represents an operation that accepts a single input argument and returns no\n result.",
          "plain": "Represents an operation that accepts a single input argument and returns no\n result.\n@param \u003cT\u003e the type of the input to the operation"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.util.EulerAngle",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "EulerAngle(double,double,double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "y"
              },
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ],
            "comment": {
              "body": "Creates a EularAngle with each axis set to the\n passed angle in radians",
              "plain": "Creates a EularAngle with each axis set to the\n passed angle in radians\n@param x the angle for the x axis in radians\n@param y the angle for the y axis in radians\n@param z the angle for the z axis in radians"
            }
          },
          {
            "kind": "FIELD",
            "name": "ZERO",
            "comment": {
              "body": "A EulerAngle with every axis set to 0",
              "plain": "A EulerAngle with every axis set to 0"
            }
          },
          {
            "kind": "METHOD",
            "name": "add(double,double,double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "y"
              },
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ],
            "comment": {
              "body": "Creates a new EulerAngle which is the result of adding\n the x, y, z components to this EulerAngle",
              "tags": "Returns the resultant EulerAngle.",
              "plain": "Creates a new EulerAngle which is the result of adding\n the x, y, z components to this EulerAngle\n@param x the angle to add to the x axis in radians\n@param y the angle to add to the y axis in radians\n@param z the angle to add to the z axis in radians\n@return the resultant EulerAngle"
            }
          },
          {
            "kind": "METHOD",
            "name": "equals(java.lang.Object)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "o"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getX()",
            "comment": {
              "body": "Returns the angle on the x axis in radians",
              "tags": "Returns the angle in radians.",
              "plain": "Returns the angle on the x axis in radians\n@return the angle in radians"
            }
          },
          {
            "kind": "METHOD",
            "name": "getY()",
            "comment": {
              "body": "Returns the angle on the y axis in radians",
              "tags": "Returns the angle in radians.",
              "plain": "Returns the angle on the y axis in radians\n@return the angle in radians"
            }
          },
          {
            "kind": "METHOD",
            "name": "getZ()",
            "comment": {
              "body": "Returns the angle on the z axis in radians",
              "tags": "Returns the angle in radians.",
              "plain": "Returns the angle on the z axis in radians\n@return the angle in radians"
            }
          },
          {
            "kind": "METHOD",
            "name": "hashCode()"
          },
          {
            "kind": "METHOD",
            "name": "setX(double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "x"
              }
            ],
            "comment": {
              "body": "Return a EulerAngle which is the result of changing\n the x axis to the passed angle",
              "tags": "Returns the resultant EulerAngle.",
              "plain": "Return a EulerAngle which is the result of changing\n the x axis to the passed angle\n@param x the angle in radians\n@return the resultant EulerAngle"
            }
          },
          {
            "kind": "METHOD",
            "name": "setY(double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "y"
              }
            ],
            "comment": {
              "body": "Return a EulerAngle which is the result of changing\n the y axis to the passed angle",
              "tags": "Returns the resultant EulerAngle.",
              "plain": "Return a EulerAngle which is the result of changing\n the y axis to the passed angle\n@param y the angle in radians\n@return the resultant EulerAngle"
            }
          },
          {
            "kind": "METHOD",
            "name": "setZ(double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ],
            "comment": {
              "body": "Return a EulerAngle which is the result of changing\n the z axis to the passed angle",
              "tags": "Returns the resultant EulerAngle.",
              "plain": "Return a EulerAngle which is the result of changing\n the z axis to the passed angle\n@param z the angle in radians\n@return the resultant EulerAngle"
            }
          },
          {
            "kind": "METHOD",
            "name": "subtract(double,double,double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "y"
              },
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ],
            "comment": {
              "body": "Creates a new EulerAngle which is the result of subtracting\n the x, y, z components to this EulerAngle",
              "tags": "Returns the resultant EulerAngle.",
              "plain": "Creates a new EulerAngle which is the result of subtracting\n the x, y, z components to this EulerAngle\n@param x the angle to subtract to the x axis in radians\n@param y the angle to subtract to the y axis in radians\n@param z the angle to subtract to the z axis in radians\n@return the resultant EulerAngle"
            }
          },
          {
            "kind": "FIELD",
            "name": "x"
          },
          {
            "kind": "FIELD",
            "name": "y"
          },
          {
            "kind": "FIELD",
            "name": "z"
          }
        ],
        "comment": {
          "body": "EulerAngle is used to represent 3 angles, one for each\n axis (x, y, z). The angles are in radians",
          "plain": "EulerAngle is used to represent 3 angles, one for each\n axis (x, y, z). The angles are in radians"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.util.FileUtil",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "FileUtil()"
          },
          {
            "kind": "METHOD",
            "name": "copy(java.io.File,java.io.File)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "inFile"
              },
              {
                "kind": "PARAMETER",
                "name": "outFile"
              }
            ],
            "comment": {
              "body": "This method copies one file to another location",
              "tags": "Returns true on success.",
              "plain": "This method copies one file to another location\n@param inFile the source filename\n@param outFile the target filename\n@return true on success"
            }
          }
        ],
        "comment": {
          "body": "Class containing file utilities",
          "plain": "Class containing file utilities"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.util.NumberConversions",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "NumberConversions()"
          },
          {
            "kind": "METHOD",
            "name": "ceil(double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "num"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "checkFinite(double,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "d"
              },
              {
                "kind": "PARAMETER",
                "name": "message"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "checkFinite(float,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "d"
              },
              {
                "kind": "PARAMETER",
                "name": "message"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "floor(double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "num"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "isFinite(double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "d"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "isFinite(float)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "f"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "round(double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "num"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "square(double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "num"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "toByte(java.lang.Object)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "object"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "toDouble(java.lang.Object)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "object"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "toFloat(java.lang.Object)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "object"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "toInt(java.lang.Object)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "object"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "toLong(java.lang.Object)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "object"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "toShort(java.lang.Object)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "object"
              }
            ]
          }
        ],
        "comment": {
          "body": "Utils for casting number types to other number types",
          "plain": "Utils for casting number types to other number types"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.util.StringUtil",
        "children": [
          {
            "kind": "METHOD",
            "name": "\u003cT\u003ecopyPartialMatches(java.lang.String,java.lang.Iterable\u003cjava.lang.String\u003e,T)",
            "children": [
              {
                "kind": "TYPE_PARAMETER",
                "name": "T"
              },
              {
                "kind": "PARAMETER",
                "name": "collection"
              },
              {
                "kind": "PARAMETER",
                "name": "originals"
              },
              {
                "kind": "PARAMETER",
                "name": "token"
              }
            ],
            "comment": {
              "body": "Copies all elements from the iterable collection of originals to the\n collection provided.",
              "tags": "Returns the collection provided that would have the elements copied\n     into.",
              "plain": "Copies all elements from the iterable collection of originals to the\n collection provided.\n@param \u003cT\u003e the collection of strings\n@param token String to search for\n@param originals An iterable collection of strings to filter.\n@param collection The collection to add matches to\n@return the collection provided that would have the elements copied\n     into\n@throws UnsupportedOperationException if the collection is immutable\n     and originals contains a string which starts with the specified\n     search string.\n@throws IllegalArgumentException if any parameter is is null\n@throws IllegalArgumentException if originals contains a null element.\n     \u003cb\u003eNote: the collection may be modified before this is thrown\u003c/b\u003e"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "StringUtil()"
          },
          {
            "kind": "METHOD",
            "name": "startsWithIgnoreCase(java.lang.String,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "prefix"
              },
              {
                "kind": "PARAMETER",
                "name": "string"
              }
            ],
            "comment": {
              "body": "This method uses a region to check case-insensitive equality. This\n means the internal array does not need to be copied like a\n toLowerCase() call would.",
              "tags": "Returns true if provided string starts with, ignoring case, the prefix\n     provided.",
              "plain": "This method uses a region to check case-insensitive equality. This\n means the internal array does not need to be copied like a\n toLowerCase() call would.\n@param string String to check\n@param prefix Prefix of string to compare\n@return true if provided string starts with, ignoring case, the prefix\n     provided\n@throws NullPointerException if prefix is null\n@throws IllegalArgumentException if string is null"
            }
          }
        ]
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.util.Vector",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "Vector()",
            "comment": {
              "body": "Construct the vector with all components as 0.",
              "plain": "Construct the vector with all components as 0."
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Vector(double,double,double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "y"
              },
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ],
            "comment": {
              "body": "Construct the vector with provided double components.",
              "plain": "Construct the vector with provided double components.\n@param x X component\n@param y Y component\n@param z Z component"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Vector(float,float,float)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "y"
              },
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ],
            "comment": {
              "body": "Construct the vector with provided float components.",
              "plain": "Construct the vector with provided float components.\n@param x X component\n@param y Y component\n@param z Z component"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Vector(int,int,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "y"
              },
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ],
            "comment": {
              "body": "Construct the vector with provided integer components.",
              "plain": "Construct the vector with provided integer components.\n@param x X component\n@param y Y component\n@param z Z component"
            }
          },
          {
            "kind": "METHOD",
            "name": "add(org.bukkit.util.Vector)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "vec"
              }
            ],
            "comment": {
              "body": "Adds a vector to this one",
              "tags": "Returns the same vector.",
              "plain": "Adds a vector to this one\n@param vec The other vector\n@return the same vector"
            }
          },
          {
            "kind": "METHOD",
            "name": "angle(org.bukkit.util.Vector)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "other"
              }
            ],
            "comment": {
              "body": "Gets the angle between this vector and another in radians.",
              "tags": "Returns angle in radians.",
              "plain": "Gets the angle between this vector and another in radians.\n@param other The other vector\n@return angle in radians"
            }
          },
          {
            "kind": "METHOD",
            "name": "checkFinite()",
            "comment": {
              "body": "Check if each component of this Vector is finite.",
              "plain": "Check if each component of this Vector is finite.\n@throws IllegalArgumentException if any component is not finite"
            }
          },
          {
            "kind": "METHOD",
            "name": "clone()",
            "comment": {
              "body": "Get a new vector.",
              "tags": "Returns vector.",
              "plain": "Get a new vector.\n@return vector"
            }
          },
          {
            "kind": "METHOD",
            "name": "copy(org.bukkit.util.Vector)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "vec"
              }
            ],
            "comment": {
              "body": "Copies another vector",
              "tags": "Returns the same vector.",
              "plain": "Copies another vector\n@param vec The other vector\n@return the same vector"
            }
          },
          {
            "kind": "METHOD",
            "name": "crossProduct(org.bukkit.util.Vector)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "o"
              }
            ],
            "comment": {
              "body": "Calculates the cross product of this vector with another. The cross\n product is defined as:\n \u003cul\u003e\n \u003cli\u003ex \u003d y1 * z2 - y2 * z1\n \u003cli\u003ey \u003d z1 * x2 - z2 * x1\n \u003cli\u003ez \u003d x1 * y2 - x2 * y1\n \u003c/ul\u003e",
              "tags": "Returns the same vector.",
              "plain": "Calculates the cross product of this vector with another. The cross\n product is defined as:\n \u003cul\u003e\n \u003cli\u003ex \u003d y1 * z2 - y2 * z1\n \u003cli\u003ey \u003d z1 * x2 - z2 * x1\n \u003cli\u003ez \u003d x1 * y2 - x2 * y1\n \u003c/ul\u003e\n@param o The other vector\n@return the same vector"
            }
          },
          {
            "kind": "METHOD",
            "name": "deserialize(java.util.Map\u003cjava.lang.String,java.lang.Object\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "args"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "distance(org.bukkit.util.Vector)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "o"
              }
            ],
            "comment": {
              "body": "Get the distance between this vector and another. The value of this\n method is not cached and uses a costly square-root function, so do not\n repeatedly call this method to get the vector\u0027s magnitude. NaN will be\n returned if the inner result of the sqrt() function overflows, which\n will be caused if the distance is too long.",
              "tags": "Returns the distance.",
              "plain": "Get the distance between this vector and another. The value of this\n method is not cached and uses a costly square-root function, so do not\n repeatedly call this method to get the vector\u0027s magnitude. NaN will be\n returned if the inner result of the sqrt() function overflows, which\n will be caused if the distance is too long.\n@param o The other vector\n@return the distance"
            }
          },
          {
            "kind": "METHOD",
            "name": "distanceSquared(org.bukkit.util.Vector)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "o"
              }
            ],
            "comment": {
              "body": "Get the squared distance between this vector and another.",
              "tags": "Returns the distance.",
              "plain": "Get the squared distance between this vector and another.\n@param o The other vector\n@return the distance"
            }
          },
          {
            "kind": "METHOD",
            "name": "divide(org.bukkit.util.Vector)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "vec"
              }
            ],
            "comment": {
              "body": "Divides the vector by another.",
              "tags": "Returns the same vector.",
              "plain": "Divides the vector by another.\n@param vec The other vector\n@return the same vector"
            }
          },
          {
            "kind": "METHOD",
            "name": "dot(org.bukkit.util.Vector)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "other"
              }
            ],
            "comment": {
              "body": "Calculates the dot product of this vector with another. The dot product\n is defined as x1*x2+y1*y2+z1*z2. The returned value is a scalar.",
              "tags": "Returns dot product.",
              "plain": "Calculates the dot product of this vector with another. The dot product\n is defined as x1*x2+y1*y2+z1*z2. The returned value is a scalar.\n@param other The other vector\n@return dot product"
            }
          },
          {
            "kind": "FIELD",
            "name": "epsilon",
            "comment": {
              "body": "Threshold for fuzzy equals().",
              "plain": "Threshold for fuzzy equals()."
            }
          },
          {
            "kind": "METHOD",
            "name": "equals(java.lang.Object)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "obj"
              }
            ],
            "comment": {
              "body": "Checks to see if two objects are equal.\n \u003cp\u003e\n Only two Vectors can ever return true. This method uses a fuzzy match\n to account for floating point errors. The epsilon can be retrieved\n with epsilon.",
              "plain": "Checks to see if two objects are equal.\n \u003cp\u003e\n Only two Vectors can ever return true. This method uses a fuzzy match\n to account for floating point errors. The epsilon can be retrieved\n with epsilon."
            }
          },
          {
            "kind": "METHOD",
            "name": "getBlockX()",
            "comment": {
              "body": "Gets the floored value of the X component, indicating the block that\n this vector is contained with.",
              "tags": "Returns block X.",
              "plain": "Gets the floored value of the X component, indicating the block that\n this vector is contained with.\n@return block X"
            }
          },
          {
            "kind": "METHOD",
            "name": "getBlockY()",
            "comment": {
              "body": "Gets the floored value of the Y component, indicating the block that\n this vector is contained with.",
              "tags": "Returns block y.",
              "plain": "Gets the floored value of the Y component, indicating the block that\n this vector is contained with.\n@return block y"
            }
          },
          {
            "kind": "METHOD",
            "name": "getBlockZ()",
            "comment": {
              "body": "Gets the floored value of the Z component, indicating the block that\n this vector is contained with.",
              "tags": "Returns block z.",
              "plain": "Gets the floored value of the Z component, indicating the block that\n this vector is contained with.\n@return block z"
            }
          },
          {
            "kind": "METHOD",
            "name": "getCrossProduct(org.bukkit.util.Vector)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "o"
              }
            ],
            "comment": {
              "body": "Calculates the cross product of this vector with another without mutating\n the original. The cross product is defined as:\n \u003cul\u003e\n \u003cli\u003ex \u003d y1 * z2 - y2 * z1\n \u003cli\u003ey \u003d z1 * x2 - z2 * x1\n \u003cli\u003ez \u003d x1 * y2 - x2 * y1\n \u003c/ul\u003e",
              "tags": "Returns a new vector.",
              "plain": "Calculates the cross product of this vector with another without mutating\n the original. The cross product is defined as:\n \u003cul\u003e\n \u003cli\u003ex \u003d y1 * z2 - y2 * z1\n \u003cli\u003ey \u003d z1 * x2 - z2 * x1\n \u003cli\u003ez \u003d x1 * y2 - x2 * y1\n \u003c/ul\u003e\n@param o The other vector\n@return a new vector"
            }
          },
          {
            "kind": "METHOD",
            "name": "getEpsilon()",
            "comment": {
              "body": "Get the threshold used for equals().",
              "tags": "Returns The epsilon..",
              "plain": "Get the threshold used for equals().\n@return The epsilon."
            }
          },
          {
            "kind": "METHOD",
            "name": "getMaximum(org.bukkit.util.Vector,org.bukkit.util.Vector)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "v1"
              },
              {
                "kind": "PARAMETER",
                "name": "v2"
              }
            ],
            "comment": {
              "body": "Gets the maximum components of two vectors.",
              "tags": "Returns maximum.",
              "plain": "Gets the maximum components of two vectors.\n@param v1 The first vector.\n@param v2 The second vector.\n@return maximum"
            }
          },
          {
            "kind": "METHOD",
            "name": "getMidpoint(org.bukkit.util.Vector)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "other"
              }
            ],
            "comment": {
              "body": "Gets a new midpoint vector between this vector and another.",
              "tags": "Returns a new midpoint vector.",
              "plain": "Gets a new midpoint vector between this vector and another.\n@param other The other vector\n@return a new midpoint vector"
            }
          },
          {
            "kind": "METHOD",
            "name": "getMinimum(org.bukkit.util.Vector,org.bukkit.util.Vector)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "v1"
              },
              {
                "kind": "PARAMETER",
                "name": "v2"
              }
            ],
            "comment": {
              "body": "Gets the minimum components of two vectors.",
              "tags": "Returns minimum.",
              "plain": "Gets the minimum components of two vectors.\n@param v1 The first vector.\n@param v2 The second vector.\n@return minimum"
            }
          },
          {
            "kind": "METHOD",
            "name": "getRandom()",
            "comment": {
              "body": "Gets a random vector with components having a random value between 0\n and 1.",
              "tags": "Returns A random vector..",
              "plain": "Gets a random vector with components having a random value between 0\n and 1.\n@return A random vector."
            }
          },
          {
            "kind": "METHOD",
            "name": "getX()",
            "comment": {
              "body": "Gets the X component.",
              "tags": "Returns The X component..",
              "plain": "Gets the X component.\n@return The X component."
            }
          },
          {
            "kind": "METHOD",
            "name": "getY()",
            "comment": {
              "body": "Gets the Y component.",
              "tags": "Returns The Y component..",
              "plain": "Gets the Y component.\n@return The Y component."
            }
          },
          {
            "kind": "METHOD",
            "name": "getZ()",
            "comment": {
              "body": "Gets the Z component.",
              "tags": "Returns The Z component..",
              "plain": "Gets the Z component.\n@return The Z component."
            }
          },
          {
            "kind": "METHOD",
            "name": "hashCode()",
            "comment": {
              "body": "Returns a hash code for this vector",
              "tags": "Returns hash code.",
              "plain": "Returns a hash code for this vector\n@return hash code"
            }
          },
          {
            "kind": "METHOD",
            "name": "isInAABB(org.bukkit.util.Vector,org.bukkit.util.Vector)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "max"
              },
              {
                "kind": "PARAMETER",
                "name": "min"
              }
            ],
            "comment": {
              "body": "Returns whether this vector is in an axis-aligned bounding box.\n \u003cp\u003e\n The minimum and maximum vectors given must be truly the minimum and\n maximum X, Y and Z components.",
              "tags": "Returns whether this vector is in the AABB.",
              "plain": "Returns whether this vector is in an axis-aligned bounding box.\n \u003cp\u003e\n The minimum and maximum vectors given must be truly the minimum and\n maximum X, Y and Z components.\n@param min Minimum vector\n@param max Maximum vector\n@return whether this vector is in the AABB"
            }
          },
          {
            "kind": "METHOD",
            "name": "isInSphere(org.bukkit.util.Vector,double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "origin"
              },
              {
                "kind": "PARAMETER",
                "name": "radius"
              }
            ],
            "comment": {
              "body": "Returns whether this vector is within a sphere.",
              "tags": "Returns whether this vector is in the sphere.",
              "plain": "Returns whether this vector is within a sphere.\n@param origin Sphere origin.\n@param radius Sphere radius\n@return whether this vector is in the sphere"
            }
          },
          {
            "kind": "METHOD",
            "name": "length()",
            "comment": {
              "body": "Gets the magnitude of the vector, defined as sqrt(x^2+y^2+z^2). The\n value of this method is not cached and uses a costly square-root\n function, so do not repeatedly call this method to get the vector\u0027s\n magnitude. NaN will be returned if the inner result of the sqrt()\n function overflows, which will be caused if the length is too long.",
              "tags": "Returns the magnitude.",
              "plain": "Gets the magnitude of the vector, defined as sqrt(x^2+y^2+z^2). The\n value of this method is not cached and uses a costly square-root\n function, so do not repeatedly call this method to get the vector\u0027s\n magnitude. NaN will be returned if the inner result of the sqrt()\n function overflows, which will be caused if the length is too long.\n@return the magnitude"
            }
          },
          {
            "kind": "METHOD",
            "name": "lengthSquared()",
            "comment": {
              "body": "Gets the magnitude of the vector squared.",
              "tags": "Returns the magnitude.",
              "plain": "Gets the magnitude of the vector squared.\n@return the magnitude"
            }
          },
          {
            "kind": "METHOD",
            "name": "midpoint(org.bukkit.util.Vector)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "other"
              }
            ],
            "comment": {
              "body": "Sets this vector to the midpoint between this vector and another.",
              "tags": "Returns this same vector (now a midpoint).",
              "plain": "Sets this vector to the midpoint between this vector and another.\n@param other The other vector\n@return this same vector (now a midpoint)"
            }
          },
          {
            "kind": "METHOD",
            "name": "multiply(double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "m"
              }
            ],
            "comment": {
              "body": "Performs scalar multiplication, multiplying all components with a\n scalar.",
              "tags": "Returns the same vector.",
              "plain": "Performs scalar multiplication, multiplying all components with a\n scalar.\n@param m The factor\n@return the same vector"
            }
          },
          {
            "kind": "METHOD",
            "name": "multiply(float)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "m"
              }
            ],
            "comment": {
              "body": "Performs scalar multiplication, multiplying all components with a\n scalar.",
              "tags": "Returns the same vector.",
              "plain": "Performs scalar multiplication, multiplying all components with a\n scalar.\n@param m The factor\n@return the same vector"
            }
          },
          {
            "kind": "METHOD",
            "name": "multiply(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "m"
              }
            ],
            "comment": {
              "body": "Performs scalar multiplication, multiplying all components with a\n scalar.",
              "tags": "Returns the same vector.",
              "plain": "Performs scalar multiplication, multiplying all components with a\n scalar.\n@param m The factor\n@return the same vector"
            }
          },
          {
            "kind": "METHOD",
            "name": "multiply(org.bukkit.util.Vector)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "vec"
              }
            ],
            "comment": {
              "body": "Multiplies the vector by another.",
              "tags": "Returns the same vector.",
              "plain": "Multiplies the vector by another.\n@param vec The other vector\n@return the same vector"
            }
          },
          {
            "kind": "METHOD",
            "name": "normalize()",
            "comment": {
              "body": "Converts this vector to a unit vector (a vector with length of 1).",
              "tags": "Returns the same vector.",
              "plain": "Converts this vector to a unit vector (a vector with length of 1).\n@return the same vector"
            }
          },
          {
            "kind": "FIELD",
            "name": "random"
          },
          {
            "kind": "FIELD",
            "name": "serialVersionUID"
          },
          {
            "kind": "METHOD",
            "name": "serialize()"
          },
          {
            "kind": "METHOD",
            "name": "setX(double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "x"
              }
            ],
            "comment": {
              "body": "Set the X component.",
              "tags": "Returns This vector..",
              "plain": "Set the X component.\n@param x The new X component.\n@return This vector."
            }
          },
          {
            "kind": "METHOD",
            "name": "setX(float)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "x"
              }
            ],
            "comment": {
              "body": "Set the X component.",
              "tags": "Returns This vector..",
              "plain": "Set the X component.\n@param x The new X component.\n@return This vector."
            }
          },
          {
            "kind": "METHOD",
            "name": "setX(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "x"
              }
            ],
            "comment": {
              "body": "Set the X component.",
              "tags": "Returns This vector..",
              "plain": "Set the X component.\n@param x The new X component.\n@return This vector."
            }
          },
          {
            "kind": "METHOD",
            "name": "setY(double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "y"
              }
            ],
            "comment": {
              "body": "Set the Y component.",
              "tags": "Returns This vector..",
              "plain": "Set the Y component.\n@param y The new Y component.\n@return This vector."
            }
          },
          {
            "kind": "METHOD",
            "name": "setY(float)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "y"
              }
            ],
            "comment": {
              "body": "Set the Y component.",
              "tags": "Returns This vector..",
              "plain": "Set the Y component.\n@param y The new Y component.\n@return This vector."
            }
          },
          {
            "kind": "METHOD",
            "name": "setY(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "y"
              }
            ],
            "comment": {
              "body": "Set the Y component.",
              "tags": "Returns This vector..",
              "plain": "Set the Y component.\n@param y The new Y component.\n@return This vector."
            }
          },
          {
            "kind": "METHOD",
            "name": "setZ(double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ],
            "comment": {
              "body": "Set the Z component.",
              "tags": "Returns This vector..",
              "plain": "Set the Z component.\n@param z The new Z component.\n@return This vector."
            }
          },
          {
            "kind": "METHOD",
            "name": "setZ(float)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ],
            "comment": {
              "body": "Set the Z component.",
              "tags": "Returns This vector..",
              "plain": "Set the Z component.\n@param z The new Z component.\n@return This vector."
            }
          },
          {
            "kind": "METHOD",
            "name": "setZ(int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ],
            "comment": {
              "body": "Set the Z component.",
              "tags": "Returns This vector..",
              "plain": "Set the Z component.\n@param z The new Z component.\n@return This vector."
            }
          },
          {
            "kind": "METHOD",
            "name": "subtract(org.bukkit.util.Vector)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "vec"
              }
            ],
            "comment": {
              "body": "Subtracts a vector from this one.",
              "tags": "Returns the same vector.",
              "plain": "Subtracts a vector from this one.\n@param vec The other vector\n@return the same vector"
            }
          },
          {
            "kind": "METHOD",
            "name": "toBlockVector()",
            "comment": {
              "body": "Get the block vector of this vector.",
              "tags": "Returns A block vector..",
              "plain": "Get the block vector of this vector.\n@return A block vector."
            }
          },
          {
            "kind": "METHOD",
            "name": "toLocation(org.bukkit.World)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "world"
              }
            ],
            "comment": {
              "body": "Gets a Location version of this vector with yaw and pitch being 0.",
              "tags": "Returns the location.",
              "plain": "Gets a Location version of this vector with yaw and pitch being 0.\n@param world The world to link the location to.\n@return the location"
            }
          },
          {
            "kind": "METHOD",
            "name": "toLocation(org.bukkit.World,float,float)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "pitch"
              },
              {
                "kind": "PARAMETER",
                "name": "world"
              },
              {
                "kind": "PARAMETER",
                "name": "yaw"
              }
            ],
            "comment": {
              "body": "Gets a Location version of this vector.",
              "tags": "Returns the location.",
              "plain": "Gets a Location version of this vector.\n@param world The world to link the location to.\n@param yaw The desired yaw.\n@param pitch The desired pitch.\n@return the location"
            }
          },
          {
            "kind": "METHOD",
            "name": "toString()",
            "comment": {
              "body": "Returns this vector\u0027s components as x,y,z.",
              "plain": "Returns this vector\u0027s components as x,y,z."
            }
          },
          {
            "kind": "FIELD",
            "name": "x"
          },
          {
            "kind": "FIELD",
            "name": "y"
          },
          {
            "kind": "FIELD",
            "name": "z"
          },
          {
            "kind": "METHOD",
            "name": "zero()",
            "comment": {
              "body": "Zero this vector\u0027s components.",
              "tags": "Returns the same vector.",
              "plain": "Zero this vector\u0027s components.\n@return the same vector"
            }
          }
        ],
        "comment": {
          "body": "Represents a mutable vector. Because the components of Vectors are mutable,\n storing Vectors long term may be dangerous if passing code modifies the\n Vector later. If you want to keep around a Vector, it may be wise to call\n \u003ccode\u003eclone()\u003c/code\u003e in order to get a copy.",
          "plain": "Represents a mutable vector. Because the components of Vectors are mutable,\n storing Vectors long term may be dangerous if passing code modifies the\n Vector later. If you want to keep around a Vector, it may be wise to call\n \u003ccode\u003eclone()\u003c/code\u003e in order to get a copy."
        }
      }
    ]
  },
  {
    "kind": "PACKAGE",
    "name": "org.bukkit.util.io",
    "children": [
      {
        "kind": "CLASS",
        "name": "org.bukkit.util.io.BukkitObjectInputStream",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "BukkitObjectInputStream()",
            "comment": {
              "body": "Constructor provided to mirror super functionality.",
              "plain": "Constructor provided to mirror super functionality.\n@throws IOException if an I/O error occurs while reading stream heade\n@see ObjectInputStream#ObjectInputStream()"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "BukkitObjectInputStream(java.io.InputStream)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "in"
              }
            ],
            "comment": {
              "body": "Object input stream decoration constructor.",
              "plain": "Object input stream decoration constructor.\n@param in the input stream to wrap\n@throws IOException if an I/O error occurs while reading stream header\n@see ObjectInputStream#ObjectInputStream(InputStream)"
            }
          },
          {
            "kind": "METHOD",
            "name": "newIOException(java.lang.String,java.lang.Throwable)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cause"
              },
              {
                "kind": "PARAMETER",
                "name": "string"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "resolveObject(java.lang.Object)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "obj"
              }
            ]
          }
        ],
        "comment": {
          "body": "This class is designed to be used in conjunction with the \u003ca href\u003d\"org/bukkit/configuration/serialization/ConfigurationSerializable.html\" title\u003d\"interface in org.bukkit.configuration.serialization\"\u003e\u003ccode\u003eConfigurationSerializable\u003c/code\u003e\u003c/a\u003e API. It translates objects back to their\n original implementation after being serialized by \u003ca href\u003d\"org/bukkit/util/io/BukkitObjectInputStream.html\" title\u003d\"class in org.bukkit.util.io\"\u003e\u003ccode\u003eBukkitObjectInputStream\u003c/code\u003e\u003c/a\u003e.\n \u003cp\u003e\n Behavior of implementations extending this class is not guaranteed across\n future versions.",
          "plain": "This class is designed to be used in conjunction with the {@link ConfigurationSerializable} API. It translates objects back to their\n original implementation after being serialized by {@link BukkitObjectInputStream}.\n \u003cp\u003e\n Behavior of implementations extending this class is not guaranteed across\n future versions."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.util.io.BukkitObjectOutputStream",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "BukkitObjectOutputStream()",
            "comment": {
              "body": "Constructor provided to mirror super functionality.",
              "plain": "Constructor provided to mirror super functionality.\n@throws IOException if an I/O error occurs while writing stream header\n@see ObjectOutputStream#ObjectOutputStream()"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "BukkitObjectOutputStream(java.io.OutputStream)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "out"
              }
            ],
            "comment": {
              "body": "Object output stream decoration constructor.",
              "plain": "Object output stream decoration constructor.\n@param out the stream to wrap\n@throws IOException if an I/O error occurs while writing stream header\n@see ObjectOutputStream#ObjectOutputStream(OutputStream)"
            }
          },
          {
            "kind": "METHOD",
            "name": "replaceObject(java.lang.Object)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "obj"
              }
            ]
          }
        ],
        "comment": {
          "body": "This class is designed to be used in conjunction with the \u003ca href\u003d\"org/bukkit/configuration/serialization/ConfigurationSerializable.html\" title\u003d\"interface in org.bukkit.configuration.serialization\"\u003e\u003ccode\u003eConfigurationSerializable\u003c/code\u003e\u003c/a\u003e API. It translates objects to an internal\n implementation for later deserialization using \u003ca href\u003d\"org/bukkit/util/io/BukkitObjectInputStream.html\" title\u003d\"class in org.bukkit.util.io\"\u003e\u003ccode\u003eBukkitObjectInputStream\u003c/code\u003e\u003c/a\u003e.\n \u003cp\u003e\n Behavior of implementations extending this class is not guaranteed across\n future versions.",
          "plain": "This class is designed to be used in conjunction with the {@link ConfigurationSerializable} API. It translates objects to an internal\n implementation for later deserialization using {@link BukkitObjectInputStream}.\n \u003cp\u003e\n Behavior of implementations extending this class is not guaranteed across\n future versions."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.util.io.Wrapper",
        "children": [
          {
            "kind": "TYPE_PARAMETER",
            "name": "T"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "Wrapper(T)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "map"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "map"
          },
          {
            "kind": "METHOD",
            "name": "newWrapper(org.bukkit.configuration.serialization.ConfigurationSerializable)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "obj"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "serialVersionUID"
          }
        ]
      }
    ]
  },
  {
    "kind": "PACKAGE",
    "name": "org.bukkit.util.noise",
    "children": [
      {
        "kind": "CLASS",
        "name": "org.bukkit.util.noise.NoiseGenerator",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "NoiseGenerator()"
          },
          {
            "kind": "METHOD",
            "name": "fade(double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "x"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "floor(double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "x"
              }
            ],
            "comment": {
              "body": "Speedy floor, faster than (int)Math.floor(x)",
              "tags": "Returns Floored value.",
              "plain": "Speedy floor, faster than (int)Math.floor(x)\n@param x Value to floor\n@return Floored value"
            }
          },
          {
            "kind": "METHOD",
            "name": "grad(int,double,double,double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "hash"
              },
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "y"
              },
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "lerp(double,double,double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "y"
              },
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "noise(double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "x"
              }
            ],
            "comment": {
              "body": "Computes and returns the 1D noise for the given coordinate in 1D space",
              "tags": "Returns Noise at given location, from range -1 to 1.",
              "plain": "Computes and returns the 1D noise for the given coordinate in 1D space\n@param x X coordinate\n@return Noise at given location, from range -1 to 1"
            }
          },
          {
            "kind": "METHOD",
            "name": "noise(double,double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "y"
              }
            ],
            "comment": {
              "body": "Computes and returns the 2D noise for the given coordinates in 2D space",
              "tags": "Returns Noise at given location, from range -1 to 1.",
              "plain": "Computes and returns the 2D noise for the given coordinates in 2D space\n@param x X coordinate\n@param y Y coordinate\n@return Noise at given location, from range -1 to 1"
            }
          },
          {
            "kind": "METHOD",
            "name": "noise(double,double,double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "y"
              },
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ],
            "comment": {
              "body": "Computes and returns the 3D noise for the given coordinates in 3D space",
              "tags": "Returns Noise at given location, from range -1 to 1.",
              "plain": "Computes and returns the 3D noise for the given coordinates in 3D space\n@param x X coordinate\n@param y Y coordinate\n@param z Z coordinate\n@return Noise at given location, from range -1 to 1"
            }
          },
          {
            "kind": "METHOD",
            "name": "noise(double,double,double,int,double,double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "amplitude"
              },
              {
                "kind": "PARAMETER",
                "name": "frequency"
              },
              {
                "kind": "PARAMETER",
                "name": "octaves"
              },
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "y"
              },
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ],
            "comment": {
              "body": "Generates noise for the 3D coordinates using the specified number of\n octaves and parameters",
              "tags": "Returns Resulting noise.",
              "plain": "Generates noise for the 3D coordinates using the specified number of\n octaves and parameters\n@param x X-coordinate\n@param y Y-coordinate\n@param z Z-coordinate\n@param octaves Number of octaves to use\n@param frequency How much to alter the frequency by each octave\n@param amplitude How much to alter the amplitude by each octave\n@return Resulting noise"
            }
          },
          {
            "kind": "METHOD",
            "name": "noise(double,double,double,int,double,double,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "amplitude"
              },
              {
                "kind": "PARAMETER",
                "name": "frequency"
              },
              {
                "kind": "PARAMETER",
                "name": "normalized"
              },
              {
                "kind": "PARAMETER",
                "name": "octaves"
              },
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "y"
              },
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ],
            "comment": {
              "body": "Generates noise for the 3D coordinates using the specified number of\n octaves and parameters",
              "tags": "Returns Resulting noise.",
              "plain": "Generates noise for the 3D coordinates using the specified number of\n octaves and parameters\n@param x X-coordinate\n@param y Y-coordinate\n@param z Z-coordinate\n@param octaves Number of octaves to use\n@param frequency How much to alter the frequency by each octave\n@param amplitude How much to alter the amplitude by each octave\n@param normalized If true, normalize the value to [-1, 1]\n@return Resulting noise"
            }
          },
          {
            "kind": "METHOD",
            "name": "noise(double,double,int,double,double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "amplitude"
              },
              {
                "kind": "PARAMETER",
                "name": "frequency"
              },
              {
                "kind": "PARAMETER",
                "name": "octaves"
              },
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "y"
              }
            ],
            "comment": {
              "body": "Generates noise for the 2D coordinates using the specified number of\n octaves and parameters",
              "tags": "Returns Resulting noise.",
              "plain": "Generates noise for the 2D coordinates using the specified number of\n octaves and parameters\n@param x X-coordinate\n@param y Y-coordinate\n@param octaves Number of octaves to use\n@param frequency How much to alter the frequency by each octave\n@param amplitude How much to alter the amplitude by each octave\n@return Resulting noise"
            }
          },
          {
            "kind": "METHOD",
            "name": "noise(double,double,int,double,double,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "amplitude"
              },
              {
                "kind": "PARAMETER",
                "name": "frequency"
              },
              {
                "kind": "PARAMETER",
                "name": "normalized"
              },
              {
                "kind": "PARAMETER",
                "name": "octaves"
              },
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "y"
              }
            ],
            "comment": {
              "body": "Generates noise for the 2D coordinates using the specified number of\n octaves and parameters",
              "tags": "Returns Resulting noise.",
              "plain": "Generates noise for the 2D coordinates using the specified number of\n octaves and parameters\n@param x X-coordinate\n@param y Y-coordinate\n@param octaves Number of octaves to use\n@param frequency How much to alter the frequency by each octave\n@param amplitude How much to alter the amplitude by each octave\n@param normalized If true, normalize the value to [-1, 1]\n@return Resulting noise"
            }
          },
          {
            "kind": "METHOD",
            "name": "noise(double,int,double,double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "amplitude"
              },
              {
                "kind": "PARAMETER",
                "name": "frequency"
              },
              {
                "kind": "PARAMETER",
                "name": "octaves"
              },
              {
                "kind": "PARAMETER",
                "name": "x"
              }
            ],
            "comment": {
              "body": "Generates noise for the 1D coordinates using the specified number of\n octaves and parameters",
              "tags": "Returns Resulting noise.",
              "plain": "Generates noise for the 1D coordinates using the specified number of\n octaves and parameters\n@param x X-coordinate\n@param octaves Number of octaves to use\n@param frequency How much to alter the frequency by each octave\n@param amplitude How much to alter the amplitude by each octave\n@return Resulting noise"
            }
          },
          {
            "kind": "METHOD",
            "name": "noise(double,int,double,double,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "amplitude"
              },
              {
                "kind": "PARAMETER",
                "name": "frequency"
              },
              {
                "kind": "PARAMETER",
                "name": "normalized"
              },
              {
                "kind": "PARAMETER",
                "name": "octaves"
              },
              {
                "kind": "PARAMETER",
                "name": "x"
              }
            ],
            "comment": {
              "body": "Generates noise for the 1D coordinates using the specified number of\n octaves and parameters",
              "tags": "Returns Resulting noise.",
              "plain": "Generates noise for the 1D coordinates using the specified number of\n octaves and parameters\n@param x X-coordinate\n@param octaves Number of octaves to use\n@param frequency How much to alter the frequency by each octave\n@param amplitude How much to alter the amplitude by each octave\n@param normalized If true, normalize the value to [-1, 1]\n@return Resulting noise"
            }
          },
          {
            "kind": "FIELD",
            "name": "offsetX"
          },
          {
            "kind": "FIELD",
            "name": "offsetY"
          },
          {
            "kind": "FIELD",
            "name": "offsetZ"
          },
          {
            "kind": "FIELD",
            "name": "perm"
          }
        ],
        "comment": {
          "body": "Base class for all noise generators",
          "plain": "Base class for all noise generators"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.util.noise.OctaveGenerator",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "OctaveGenerator(org.bukkit.util.noise.NoiseGenerator[])",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "octaves"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getOctaves()",
            "comment": {
              "body": "Gets a clone of the individual octaves used within this generator",
              "tags": "Returns Clone of the individual octaves.",
              "plain": "Gets a clone of the individual octaves used within this generator\n@return Clone of the individual octaves"
            }
          },
          {
            "kind": "METHOD",
            "name": "getXScale()",
            "comment": {
              "body": "Gets the scale used for each X-coordinates passed",
              "tags": "Returns X scale.",
              "plain": "Gets the scale used for each X-coordinates passed\n@return X scale"
            }
          },
          {
            "kind": "METHOD",
            "name": "getYScale()",
            "comment": {
              "body": "Gets the scale used for each Y-coordinates passed",
              "tags": "Returns Y scale.",
              "plain": "Gets the scale used for each Y-coordinates passed\n@return Y scale"
            }
          },
          {
            "kind": "METHOD",
            "name": "getZScale()",
            "comment": {
              "body": "Gets the scale used for each Z-coordinates passed",
              "tags": "Returns Z scale.",
              "plain": "Gets the scale used for each Z-coordinates passed\n@return Z scale"
            }
          },
          {
            "kind": "METHOD",
            "name": "noise(double,double,double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "amplitude"
              },
              {
                "kind": "PARAMETER",
                "name": "frequency"
              },
              {
                "kind": "PARAMETER",
                "name": "x"
              }
            ],
            "comment": {
              "body": "Generates noise for the 1D coordinates using the specified number of\n octaves and parameters",
              "tags": "Returns Resulting noise.",
              "plain": "Generates noise for the 1D coordinates using the specified number of\n octaves and parameters\n@param x X-coordinate\n@param frequency How much to alter the frequency by each octave\n@param amplitude How much to alter the amplitude by each octave\n@return Resulting noise"
            }
          },
          {
            "kind": "METHOD",
            "name": "noise(double,double,double,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "amplitude"
              },
              {
                "kind": "PARAMETER",
                "name": "frequency"
              },
              {
                "kind": "PARAMETER",
                "name": "normalized"
              },
              {
                "kind": "PARAMETER",
                "name": "x"
              }
            ],
            "comment": {
              "body": "Generates noise for the 1D coordinates using the specified number of\n octaves and parameters",
              "tags": "Returns Resulting noise.",
              "plain": "Generates noise for the 1D coordinates using the specified number of\n octaves and parameters\n@param x X-coordinate\n@param frequency How much to alter the frequency by each octave\n@param amplitude How much to alter the amplitude by each octave\n@param normalized If true, normalize the value to [-1, 1]\n@return Resulting noise"
            }
          },
          {
            "kind": "METHOD",
            "name": "noise(double,double,double,double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "amplitude"
              },
              {
                "kind": "PARAMETER",
                "name": "frequency"
              },
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "y"
              }
            ],
            "comment": {
              "body": "Generates noise for the 2D coordinates using the specified number of\n octaves and parameters",
              "tags": "Returns Resulting noise.",
              "plain": "Generates noise for the 2D coordinates using the specified number of\n octaves and parameters\n@param x X-coordinate\n@param y Y-coordinate\n@param frequency How much to alter the frequency by each octave\n@param amplitude How much to alter the amplitude by each octave\n@return Resulting noise"
            }
          },
          {
            "kind": "METHOD",
            "name": "noise(double,double,double,double,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "amplitude"
              },
              {
                "kind": "PARAMETER",
                "name": "frequency"
              },
              {
                "kind": "PARAMETER",
                "name": "normalized"
              },
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "y"
              }
            ],
            "comment": {
              "body": "Generates noise for the 2D coordinates using the specified number of\n octaves and parameters",
              "tags": "Returns Resulting noise.",
              "plain": "Generates noise for the 2D coordinates using the specified number of\n octaves and parameters\n@param x X-coordinate\n@param y Y-coordinate\n@param frequency How much to alter the frequency by each octave\n@param amplitude How much to alter the amplitude by each octave\n@param normalized If true, normalize the value to [-1, 1]\n@return Resulting noise"
            }
          },
          {
            "kind": "METHOD",
            "name": "noise(double,double,double,double,double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "amplitude"
              },
              {
                "kind": "PARAMETER",
                "name": "frequency"
              },
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "y"
              },
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ],
            "comment": {
              "body": "Generates noise for the 3D coordinates using the specified number of\n octaves and parameters",
              "tags": "Returns Resulting noise.",
              "plain": "Generates noise for the 3D coordinates using the specified number of\n octaves and parameters\n@param x X-coordinate\n@param y Y-coordinate\n@param z Z-coordinate\n@param frequency How much to alter the frequency by each octave\n@param amplitude How much to alter the amplitude by each octave\n@return Resulting noise"
            }
          },
          {
            "kind": "METHOD",
            "name": "noise(double,double,double,double,double,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "amplitude"
              },
              {
                "kind": "PARAMETER",
                "name": "frequency"
              },
              {
                "kind": "PARAMETER",
                "name": "normalized"
              },
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "y"
              },
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ],
            "comment": {
              "body": "Generates noise for the 3D coordinates using the specified number of\n octaves and parameters",
              "tags": "Returns Resulting noise.",
              "plain": "Generates noise for the 3D coordinates using the specified number of\n octaves and parameters\n@param x X-coordinate\n@param y Y-coordinate\n@param z Z-coordinate\n@param frequency How much to alter the frequency by each octave\n@param amplitude How much to alter the amplitude by each octave\n@param normalized If true, normalize the value to [-1, 1]\n@return Resulting noise"
            }
          },
          {
            "kind": "FIELD",
            "name": "octaves"
          },
          {
            "kind": "METHOD",
            "name": "setScale(double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "scale"
              }
            ],
            "comment": {
              "body": "Sets the scale used for all coordinates passed to this generator.\n \u003cp\u003e\n This is the equivalent to setting each coordinate to the specified\n value.",
              "plain": "Sets the scale used for all coordinates passed to this generator.\n \u003cp\u003e\n This is the equivalent to setting each coordinate to the specified\n value.\n@param scale New value to scale each coordinate by"
            }
          },
          {
            "kind": "METHOD",
            "name": "setXScale(double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "scale"
              }
            ],
            "comment": {
              "body": "Sets the scale used for each X-coordinates passed",
              "plain": "Sets the scale used for each X-coordinates passed\n@param scale New X scale"
            }
          },
          {
            "kind": "METHOD",
            "name": "setYScale(double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "scale"
              }
            ],
            "comment": {
              "body": "Sets the scale used for each Y-coordinates passed",
              "plain": "Sets the scale used for each Y-coordinates passed\n@param scale New Y scale"
            }
          },
          {
            "kind": "METHOD",
            "name": "setZScale(double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "scale"
              }
            ],
            "comment": {
              "body": "Sets the scale used for each Z-coordinates passed",
              "plain": "Sets the scale used for each Z-coordinates passed\n@param scale New Z scale"
            }
          },
          {
            "kind": "FIELD",
            "name": "xScale"
          },
          {
            "kind": "FIELD",
            "name": "yScale"
          },
          {
            "kind": "FIELD",
            "name": "zScale"
          }
        ],
        "comment": {
          "body": "Creates noise using unbiased octaves",
          "plain": "Creates noise using unbiased octaves"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.util.noise.PerlinNoiseGenerator",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PerlinNoiseGenerator()"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "PerlinNoiseGenerator(java.util.Random)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "rand"
              }
            ],
            "comment": {
              "body": "Creates a seeded perlin noise generator with the given Random",
              "plain": "Creates a seeded perlin noise generator with the given Random\n@param rand Random to construct with"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "PerlinNoiseGenerator(long)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "seed"
              }
            ],
            "comment": {
              "body": "Creates a seeded perlin noise generator for the given seed",
              "plain": "Creates a seeded perlin noise generator for the given seed\n@param seed Seed to construct this generator for"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "PerlinNoiseGenerator(org.bukkit.World)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "world"
              }
            ],
            "comment": {
              "body": "Creates a seeded perlin noise generator for the given world",
              "plain": "Creates a seeded perlin noise generator for the given world\n@param world World to construct this generator for"
            }
          },
          {
            "kind": "METHOD",
            "name": "getInstance()",
            "comment": {
              "body": "Gets the singleton unseeded instance of this generator",
              "tags": "Returns Singleton.",
              "plain": "Gets the singleton unseeded instance of this generator\n@return Singleton"
            }
          },
          {
            "kind": "METHOD",
            "name": "getNoise(double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "x"
              }
            ],
            "comment": {
              "body": "Computes and returns the 1D unseeded perlin noise for the given\n coordinates in 1D space",
              "tags": "Returns Noise at given location, from range -1 to 1.",
              "plain": "Computes and returns the 1D unseeded perlin noise for the given\n coordinates in 1D space\n@param x X coordinate\n@return Noise at given location, from range -1 to 1"
            }
          },
          {
            "kind": "METHOD",
            "name": "getNoise(double,double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "y"
              }
            ],
            "comment": {
              "body": "Computes and returns the 2D unseeded perlin noise for the given\n coordinates in 2D space",
              "tags": "Returns Noise at given location, from range -1 to 1.",
              "plain": "Computes and returns the 2D unseeded perlin noise for the given\n coordinates in 2D space\n@param x X coordinate\n@param y Y coordinate\n@return Noise at given location, from range -1 to 1"
            }
          },
          {
            "kind": "METHOD",
            "name": "getNoise(double,double,double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "y"
              },
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ],
            "comment": {
              "body": "Computes and returns the 3D unseeded perlin noise for the given\n coordinates in 3D space",
              "tags": "Returns Noise at given location, from range -1 to 1.",
              "plain": "Computes and returns the 3D unseeded perlin noise for the given\n coordinates in 3D space\n@param x X coordinate\n@param y Y coordinate\n@param z Z coordinate\n@return Noise at given location, from range -1 to 1"
            }
          },
          {
            "kind": "METHOD",
            "name": "getNoise(double,double,double,int,double,double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "amplitude"
              },
              {
                "kind": "PARAMETER",
                "name": "frequency"
              },
              {
                "kind": "PARAMETER",
                "name": "octaves"
              },
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "y"
              },
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ],
            "comment": {
              "body": "Generates noise for the 3D coordinates using the specified number of\n octaves and parameters",
              "tags": "Returns Resulting noise.",
              "plain": "Generates noise for the 3D coordinates using the specified number of\n octaves and parameters\n@param x X-coordinate\n@param y Y-coordinate\n@param z Z-coordinate\n@param octaves Number of octaves to use\n@param frequency How much to alter the frequency by each octave\n@param amplitude How much to alter the amplitude by each octave\n@return Resulting noise"
            }
          },
          {
            "kind": "METHOD",
            "name": "getNoise(double,double,int,double,double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "amplitude"
              },
              {
                "kind": "PARAMETER",
                "name": "frequency"
              },
              {
                "kind": "PARAMETER",
                "name": "octaves"
              },
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "y"
              }
            ],
            "comment": {
              "body": "Generates noise for the 2D coordinates using the specified number of\n octaves and parameters",
              "tags": "Returns Resulting noise.",
              "plain": "Generates noise for the 2D coordinates using the specified number of\n octaves and parameters\n@param x X-coordinate\n@param y Y-coordinate\n@param octaves Number of octaves to use\n@param frequency How much to alter the frequency by each octave\n@param amplitude How much to alter the amplitude by each octave\n@return Resulting noise"
            }
          },
          {
            "kind": "METHOD",
            "name": "getNoise(double,int,double,double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "amplitude"
              },
              {
                "kind": "PARAMETER",
                "name": "frequency"
              },
              {
                "kind": "PARAMETER",
                "name": "octaves"
              },
              {
                "kind": "PARAMETER",
                "name": "x"
              }
            ],
            "comment": {
              "body": "Generates noise for the 1D coordinates using the specified number of\n octaves and parameters",
              "tags": "Returns Resulting noise.",
              "plain": "Generates noise for the 1D coordinates using the specified number of\n octaves and parameters\n@param x X-coordinate\n@param octaves Number of octaves to use\n@param frequency How much to alter the frequency by each octave\n@param amplitude How much to alter the amplitude by each octave\n@return Resulting noise"
            }
          },
          {
            "kind": "FIELD",
            "name": "grad3"
          },
          {
            "kind": "FIELD",
            "name": "instance"
          },
          {
            "kind": "METHOD",
            "name": "noise(double,double,double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "y"
              },
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ]
          }
        ],
        "comment": {
          "body": "Generates noise using the \"classic\" perlin generator",
          "plain": "Generates noise using the \"classic\" perlin generator\n@see SimplexNoiseGenerator \"Improved\" and faster version with slightly\n     different results"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.util.noise.PerlinOctaveGenerator",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PerlinOctaveGenerator(java.util.Random,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "octaves"
              },
              {
                "kind": "PARAMETER",
                "name": "rand"
              }
            ],
            "comment": {
              "body": "Creates a perlin octave generator for the given \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/util/Random.html\" title\u003d\"class or interface in java.util\" class\u003d\"external-link\"\u003e\u003ccode\u003eRandom\u003c/code\u003e\u003c/a\u003e",
              "plain": "Creates a perlin octave generator for the given {@link Random}\n@param rand Random object to construct this generator for\n@param octaves Amount of octaves to create"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "PerlinOctaveGenerator(long,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "octaves"
              },
              {
                "kind": "PARAMETER",
                "name": "seed"
              }
            ],
            "comment": {
              "body": "Creates a perlin octave generator for the given world",
              "plain": "Creates a perlin octave generator for the given world\n@param seed Seed to construct this generator for\n@param octaves Amount of octaves to create"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "PerlinOctaveGenerator(org.bukkit.World,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "octaves"
              },
              {
                "kind": "PARAMETER",
                "name": "world"
              }
            ],
            "comment": {
              "body": "Creates a perlin octave generator for the given world",
              "plain": "Creates a perlin octave generator for the given world\n@param world World to construct this generator for\n@param octaves Amount of octaves to create"
            }
          },
          {
            "kind": "METHOD",
            "name": "createOctaves(java.util.Random,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "octaves"
              },
              {
                "kind": "PARAMETER",
                "name": "rand"
              }
            ]
          }
        ],
        "comment": {
          "body": "Creates perlin noise through unbiased octaves",
          "plain": "Creates perlin noise through unbiased octaves"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.util.noise.SimplexNoiseGenerator",
        "children": [
          {
            "kind": "FIELD",
            "name": "F2"
          },
          {
            "kind": "FIELD",
            "name": "F3"
          },
          {
            "kind": "FIELD",
            "name": "F4"
          },
          {
            "kind": "FIELD",
            "name": "G2"
          },
          {
            "kind": "FIELD",
            "name": "G22"
          },
          {
            "kind": "FIELD",
            "name": "G3"
          },
          {
            "kind": "FIELD",
            "name": "G4"
          },
          {
            "kind": "FIELD",
            "name": "G42"
          },
          {
            "kind": "FIELD",
            "name": "G43"
          },
          {
            "kind": "FIELD",
            "name": "G44"
          },
          {
            "kind": "FIELD",
            "name": "SQRT_3"
          },
          {
            "kind": "FIELD",
            "name": "SQRT_5"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "SimplexNoiseGenerator()"
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "SimplexNoiseGenerator(java.util.Random)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "rand"
              }
            ],
            "comment": {
              "body": "Creates a seeded simplex noise generator with the given Random",
              "plain": "Creates a seeded simplex noise generator with the given Random\n@param rand Random to construct with"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "SimplexNoiseGenerator(long)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "seed"
              }
            ],
            "comment": {
              "body": "Creates a seeded simplex noise generator for the given seed",
              "plain": "Creates a seeded simplex noise generator for the given seed\n@param seed Seed to construct this generator for"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "SimplexNoiseGenerator(org.bukkit.World)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "world"
              }
            ],
            "comment": {
              "body": "Creates a seeded simplex noise generator for the given world",
              "plain": "Creates a seeded simplex noise generator for the given world\n@param world World to construct this generator for"
            }
          },
          {
            "kind": "METHOD",
            "name": "dot(int[],double,double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "g"
              },
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "y"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "dot(int[],double,double,double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "g"
              },
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "y"
              },
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "dot(int[],double,double,double,double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "g"
              },
              {
                "kind": "PARAMETER",
                "name": "w"
              },
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "y"
              },
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getInstance()",
            "comment": {
              "body": "Gets the singleton unseeded instance of this generator",
              "tags": "Returns Singleton.",
              "plain": "Gets the singleton unseeded instance of this generator\n@return Singleton"
            }
          },
          {
            "kind": "METHOD",
            "name": "getNoise(double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "xin"
              }
            ],
            "comment": {
              "body": "Computes and returns the 1D unseeded simplex noise for the given\n coordinates in 1D space",
              "tags": "Returns Noise at given location, from range -1 to 1.",
              "plain": "Computes and returns the 1D unseeded simplex noise for the given\n coordinates in 1D space\n@param xin X coordinate\n@return Noise at given location, from range -1 to 1"
            }
          },
          {
            "kind": "METHOD",
            "name": "getNoise(double,double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "xin"
              },
              {
                "kind": "PARAMETER",
                "name": "yin"
              }
            ],
            "comment": {
              "body": "Computes and returns the 2D unseeded simplex noise for the given\n coordinates in 2D space",
              "tags": "Returns Noise at given location, from range -1 to 1.",
              "plain": "Computes and returns the 2D unseeded simplex noise for the given\n coordinates in 2D space\n@param xin X coordinate\n@param yin Y coordinate\n@return Noise at given location, from range -1 to 1"
            }
          },
          {
            "kind": "METHOD",
            "name": "getNoise(double,double,double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "xin"
              },
              {
                "kind": "PARAMETER",
                "name": "yin"
              },
              {
                "kind": "PARAMETER",
                "name": "zin"
              }
            ],
            "comment": {
              "body": "Computes and returns the 3D unseeded simplex noise for the given\n coordinates in 3D space",
              "tags": "Returns Noise at given location, from range -1 to 1.",
              "plain": "Computes and returns the 3D unseeded simplex noise for the given\n coordinates in 3D space\n@param xin X coordinate\n@param yin Y coordinate\n@param zin Z coordinate\n@return Noise at given location, from range -1 to 1"
            }
          },
          {
            "kind": "METHOD",
            "name": "getNoise(double,double,double,double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "w"
              },
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "y"
              },
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ],
            "comment": {
              "body": "Computes and returns the 4D simplex noise for the given coordinates in\n 4D space",
              "tags": "Returns Noise at given location, from range -1 to 1.",
              "plain": "Computes and returns the 4D simplex noise for the given coordinates in\n 4D space\n@param x X coordinate\n@param y Y coordinate\n@param z Z coordinate\n@param w W coordinate\n@return Noise at given location, from range -1 to 1"
            }
          },
          {
            "kind": "FIELD",
            "name": "grad4"
          },
          {
            "kind": "FIELD",
            "name": "instance"
          },
          {
            "kind": "METHOD",
            "name": "noise(double,double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "xin"
              },
              {
                "kind": "PARAMETER",
                "name": "yin"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "noise(double,double,double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "xin"
              },
              {
                "kind": "PARAMETER",
                "name": "yin"
              },
              {
                "kind": "PARAMETER",
                "name": "zin"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "noise(double,double,double,double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "w"
              },
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "y"
              },
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ],
            "comment": {
              "body": "Computes and returns the 4D simplex noise for the given coordinates in\n 4D space",
              "tags": "Returns Noise at given location, from range -1 to 1.",
              "plain": "Computes and returns the 4D simplex noise for the given coordinates in\n 4D space\n@param x X coordinate\n@param y Y coordinate\n@param z Z coordinate\n@param w W coordinate\n@return Noise at given location, from range -1 to 1"
            }
          },
          {
            "kind": "FIELD",
            "name": "offsetW"
          },
          {
            "kind": "FIELD",
            "name": "simplex"
          }
        ],
        "comment": {
          "body": "Generates simplex-based noise.\n \u003cp\u003e\n This is a modified version of the freely published version in the paper by\n Stefan Gustavson at\n \u003ca href\u003d\"http://staffwww.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf\"\u003e\n http://staffwww.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf\u003c/a\u003e",
          "plain": "Generates simplex-based noise.\n \u003cp\u003e\n This is a modified version of the freely published version in the paper by\n Stefan Gustavson at\n \u003ca href\u003d\"http://staffwww.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf\"\u003e\n http://staffwww.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf\u003c/a\u003e"
        }
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.util.noise.SimplexOctaveGenerator",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "SimplexOctaveGenerator(java.util.Random,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "octaves"
              },
              {
                "kind": "PARAMETER",
                "name": "rand"
              }
            ],
            "comment": {
              "body": "Creates a simplex octave generator for the given \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/util/Random.html\" title\u003d\"class or interface in java.util\" class\u003d\"external-link\"\u003e\u003ccode\u003eRandom\u003c/code\u003e\u003c/a\u003e",
              "plain": "Creates a simplex octave generator for the given {@link Random}\n@param rand Random object to construct this generator for\n@param octaves Amount of octaves to create"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "SimplexOctaveGenerator(long,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "octaves"
              },
              {
                "kind": "PARAMETER",
                "name": "seed"
              }
            ],
            "comment": {
              "body": "Creates a simplex octave generator for the given world",
              "plain": "Creates a simplex octave generator for the given world\n@param seed Seed to construct this generator for\n@param octaves Amount of octaves to create"
            }
          },
          {
            "kind": "CONSTRUCTOR",
            "name": "SimplexOctaveGenerator(org.bukkit.World,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "octaves"
              },
              {
                "kind": "PARAMETER",
                "name": "world"
              }
            ],
            "comment": {
              "body": "Creates a simplex octave generator for the given world",
              "plain": "Creates a simplex octave generator for the given world\n@param world World to construct this generator for\n@param octaves Amount of octaves to create"
            }
          },
          {
            "kind": "METHOD",
            "name": "createOctaves(java.util.Random,int)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "octaves"
              },
              {
                "kind": "PARAMETER",
                "name": "rand"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getWScale()",
            "comment": {
              "body": "Gets the scale used for each W-coordinates passed",
              "tags": "Returns W scale.",
              "plain": "Gets the scale used for each W-coordinates passed\n@return W scale"
            }
          },
          {
            "kind": "METHOD",
            "name": "noise(double,double,double,double,double,double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "amplitude"
              },
              {
                "kind": "PARAMETER",
                "name": "frequency"
              },
              {
                "kind": "PARAMETER",
                "name": "w"
              },
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "y"
              },
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ],
            "comment": {
              "body": "Generates noise for the 3D coordinates using the specified number of\n octaves and parameters",
              "tags": "Returns Resulting noise.",
              "plain": "Generates noise for the 3D coordinates using the specified number of\n octaves and parameters\n@param x X-coordinate\n@param y Y-coordinate\n@param z Z-coordinate\n@param w W-coordinate\n@param frequency How much to alter the frequency by each octave\n@param amplitude How much to alter the amplitude by each octave\n@return Resulting noise"
            }
          },
          {
            "kind": "METHOD",
            "name": "noise(double,double,double,double,double,double,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "amplitude"
              },
              {
                "kind": "PARAMETER",
                "name": "frequency"
              },
              {
                "kind": "PARAMETER",
                "name": "normalized"
              },
              {
                "kind": "PARAMETER",
                "name": "w"
              },
              {
                "kind": "PARAMETER",
                "name": "x"
              },
              {
                "kind": "PARAMETER",
                "name": "y"
              },
              {
                "kind": "PARAMETER",
                "name": "z"
              }
            ],
            "comment": {
              "body": "Generates noise for the 3D coordinates using the specified number of\n octaves and parameters",
              "tags": "Returns Resulting noise.",
              "plain": "Generates noise for the 3D coordinates using the specified number of\n octaves and parameters\n@param x X-coordinate\n@param y Y-coordinate\n@param z Z-coordinate\n@param w W-coordinate\n@param frequency How much to alter the frequency by each octave\n@param amplitude How much to alter the amplitude by each octave\n@param normalized If true, normalize the value to [-1, 1]\n@return Resulting noise"
            }
          },
          {
            "kind": "METHOD",
            "name": "setScale(double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "scale"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "setWScale(double)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "scale"
              }
            ],
            "comment": {
              "body": "Sets the scale used for each W-coordinates passed",
              "plain": "Sets the scale used for each W-coordinates passed\n@param scale New W scale"
            }
          },
          {
            "kind": "FIELD",
            "name": "wScale"
          }
        ],
        "comment": {
          "body": "Creates simplex noise through unbiased octaves",
          "plain": "Creates simplex noise through unbiased octaves"
        }
      }
    ]
  },
  {
    "kind": "PACKAGE",
    "name": "org.bukkit.util.permissions",
    "children": [
      {
        "kind": "CLASS",
        "name": "org.bukkit.util.permissions.BroadcastPermissions",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "BroadcastPermissions()"
          },
          {
            "kind": "FIELD",
            "name": "PREFIX"
          },
          {
            "kind": "FIELD",
            "name": "ROOT"
          },
          {
            "kind": "METHOD",
            "name": "registerPermissions(org.bukkit.permissions.Permission)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "parent"
              }
            ]
          }
        ]
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.util.permissions.CommandPermissions",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "CommandPermissions()"
          },
          {
            "kind": "FIELD",
            "name": "PREFIX"
          },
          {
            "kind": "FIELD",
            "name": "ROOT"
          },
          {
            "kind": "METHOD",
            "name": "registerPermissions(org.bukkit.permissions.Permission)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "parent"
              }
            ]
          }
        ]
      },
      {
        "kind": "CLASS",
        "name": "org.bukkit.util.permissions.DefaultPermissions",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "DefaultPermissions()"
          },
          {
            "kind": "FIELD",
            "name": "LEGACY_PREFIX"
          },
          {
            "kind": "FIELD",
            "name": "ROOT"
          },
          {
            "kind": "METHOD",
            "name": "registerCorePermissions()"
          },
          {
            "kind": "METHOD",
            "name": "registerPermission(java.lang.String,java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "desc"
              },
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "registerPermission(java.lang.String,java.lang.String,org.bukkit.permissions.Permission)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "desc"
              },
              {
                "kind": "PARAMETER",
                "name": "name"
              },
              {
                "kind": "PARAMETER",
                "name": "parent"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "registerPermission(java.lang.String,java.lang.String,org.bukkit.permissions.PermissionDefault)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "def"
              },
              {
                "kind": "PARAMETER",
                "name": "desc"
              },
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "registerPermission(java.lang.String,java.lang.String,org.bukkit.permissions.PermissionDefault,java.util.Map\u003cjava.lang.String,java.lang.Boolean\u003e)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "children"
              },
              {
                "kind": "PARAMETER",
                "name": "def"
              },
              {
                "kind": "PARAMETER",
                "name": "desc"
              },
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "registerPermission(java.lang.String,java.lang.String,org.bukkit.permissions.PermissionDefault,java.util.Map\u003cjava.lang.String,java.lang.Boolean\u003e,org.bukkit.permissions.Permission)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "children"
              },
              {
                "kind": "PARAMETER",
                "name": "def"
              },
              {
                "kind": "PARAMETER",
                "name": "desc"
              },
              {
                "kind": "PARAMETER",
                "name": "name"
              },
              {
                "kind": "PARAMETER",
                "name": "parent"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "registerPermission(java.lang.String,java.lang.String,org.bukkit.permissions.PermissionDefault,org.bukkit.permissions.Permission)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "def"
              },
              {
                "kind": "PARAMETER",
                "name": "desc"
              },
              {
                "kind": "PARAMETER",
                "name": "name"
              },
              {
                "kind": "PARAMETER",
                "name": "parent"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "registerPermission(org.bukkit.permissions.Permission)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "perm"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "registerPermission(org.bukkit.permissions.Permission,boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "perm"
              },
              {
                "kind": "PARAMETER",
                "name": "withLegacy"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "registerPermission(org.bukkit.permissions.Permission,org.bukkit.permissions.Permission)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "parent"
              },
              {
                "kind": "PARAMETER",
                "name": "perm"
              }
            ]
          }
        ]
      }
    ]
  },
  {
    "kind": "PACKAGE",
    "name": "org.spigotmc",
    "children": [
      {
        "kind": "CLASS",
        "name": "org.spigotmc.CustomTimingsHandler",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "CustomTimingsHandler(java.lang.String)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "name"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "getCallerClass"
          },
          {
            "kind": "FIELD",
            "name": "handler"
          },
          {
            "kind": "METHOD",
            "name": "startTiming()"
          },
          {
            "kind": "METHOD",
            "name": "stopTiming()"
          },
          {
            "kind": "FIELD",
            "name": "sunReflectAvailable"
          }
        ],
        "deprecated": {
          "deprecated": "true"
        },
        "comment": {
          "body": "This is here for legacy purposes incase any plugin used it.\n\n If you use this, migrate ASAP as this will be removed in the future!",
          "plain": "This is here for legacy purposes incase any plugin used it.\n\n If you use this, migrate ASAP as this will be removed in the future!\n@deprecated\n@see co.aikar.timings.Timings#of"
        }
      }
    ]
  },
  {
    "kind": "PACKAGE",
    "name": "org.spigotmc.event.entity",
    "children": [
      {
        "kind": "CLASS",
        "name": "org.spigotmc.event.entity.EntityDismountEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "EntityDismountEvent(org.bukkit.entity.Entity,org.bukkit.entity.Entity)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "dismounted"
              },
              {
                "kind": "PARAMETER",
                "name": "what"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "cancelled"
          },
          {
            "kind": "FIELD",
            "name": "dismounted"
          },
          {
            "kind": "METHOD",
            "name": "getDismounted()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancelled"
              }
            ]
          }
        ],
        "comment": {
          "body": "Called when an entity stops riding another entity.",
          "plain": "Called when an entity stops riding another entity."
        }
      },
      {
        "kind": "CLASS",
        "name": "org.spigotmc.event.entity.EntityMountEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "EntityMountEvent(org.bukkit.entity.Entity,org.bukkit.entity.Entity)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "mount"
              },
              {
                "kind": "PARAMETER",
                "name": "what"
              }
            ]
          },
          {
            "kind": "FIELD",
            "name": "cancelled"
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getMount()"
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "isCancelled()"
          },
          {
            "kind": "FIELD",
            "name": "mount"
          },
          {
            "kind": "METHOD",
            "name": "setCancelled(boolean)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "cancel"
              }
            ]
          }
        ],
        "comment": {
          "body": "Called when an entity attempts to ride another entity.",
          "plain": "Called when an entity attempts to ride another entity."
        }
      }
    ]
  },
  {
    "kind": "PACKAGE",
    "name": "org.spigotmc.event.player",
    "children": [
      {
        "kind": "CLASS",
        "name": "org.spigotmc.event.player.PlayerSpawnLocationEvent",
        "children": [
          {
            "kind": "CONSTRUCTOR",
            "name": "PlayerSpawnLocationEvent(org.bukkit.entity.Player,org.bukkit.Location)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "spawnLocation"
              },
              {
                "kind": "PARAMETER",
                "name": "who"
              }
            ]
          },
          {
            "kind": "METHOD",
            "name": "getHandlerList()"
          },
          {
            "kind": "METHOD",
            "name": "getHandlers()"
          },
          {
            "kind": "METHOD",
            "name": "getSpawnLocation()",
            "comment": {
              "body": "Gets player\u0027s spawn location.\n If the player \u003ca href\u003d\"org/bukkit/OfflinePlayer.html#hasPlayedBefore()\"\u003e\u003ccode\u003eOfflinePlayer.hasPlayedBefore()\u003c/code\u003e\u003c/a\u003e, it\u0027s going to default to the location inside player.dat file.\n For new players, the default spawn location is spawn of the main Bukkit world.",
              "tags": "Returns the spawn location.",
              "plain": "Gets player\u0027s spawn location.\n If the player {@link Player#hasPlayedBefore()}, it\u0027s going to default to the location inside player.dat file.\n For new players, the default spawn location is spawn of the main Bukkit world.\n@return the spawn location"
            }
          },
          {
            "kind": "FIELD",
            "name": "handlers"
          },
          {
            "kind": "METHOD",
            "name": "setSpawnLocation(org.bukkit.Location)",
            "children": [
              {
                "kind": "PARAMETER",
                "name": "location"
              }
            ],
            "comment": {
              "body": "Sets player\u0027s spawn location.",
              "plain": "Sets player\u0027s spawn location.\n@param location the spawn location"
            }
          },
          {
            "kind": "FIELD",
            "name": "spawnLocation"
          }
        ],
        "comment": {
          "body": "Called when player is about to spawn in a world after joining the server.",
          "plain": "Called when player is about to spawn in a world after joining the server."
        }
      }
    ]
  }
]
